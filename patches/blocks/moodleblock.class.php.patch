diff --git a/blocks/moodleblock.class.php b/blocks/moodleblock.class.php
index ca7c85e..46f2bba 100644
--- a/blocks/moodleblock.class.php
+++ b/blocks/moodleblock.class.php
@@ -1,12 +1,26 @@
-<?php  // $Id$
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
 /**
  * This file contains the parent class for moodle blocks, block_base.
  *
- * @author Jon Papaioannou
- * @version  $Id$
+ * @package    core
+ * @subpackage block
  * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package blocks
  */
 
 /// Constants
@@ -20,6 +34,10 @@ define('BLOCK_TYPE_LIST',    1);
  * Block type of text. Contents of block should be set to standard html text in the content object as items ($this->content->text). Optionally include footer text in $this->content->footer.
  */
 define('BLOCK_TYPE_TEXT',    2);
+/**
+ * Block type of tree. $this->content->items is a list of tree_item objects and $this->content->footer is a string.
+ */
+define('BLOCK_TYPE_TREE',    3);
 
 /**
  * Class for describing a moodle block, all Moodle blocks derive from this class
@@ -60,18 +78,24 @@ class block_base {
     var $edit_controls = NULL;
 
     /**
-     * The current version that the block type defines.
-     * @var string $version
-     */
-    var $version       = NULL;
-
-    /**
      * The initialized instance of this block object.
      * @var block $instance
      */
     var $instance      = NULL;
 
     /**
+     * The page that this block is appearing on.
+     * @var moodle_page
+     */
+    public $page       = NULL;
+
+    /**
+     * This blocks's context.
+     * @var stdClass
+     */
+    public $context    = NULL;
+
+    /**
      * An object containing the instance configuration information for the current instance of this block.
      * @var stdObject $config
      */
@@ -84,34 +108,14 @@ class block_base {
 
     var $cron          = NULL;
 
-    /**
-     * Indicates blocked is pinned - can not be moved, always present, does not have own context
-     */
-    var $pinned        = false;
-
 /// Class Functions
 
     /**
-     * The class constructor
-     *
-     */
-    function block_base() {
-        $this->init();
-    }
-
-    /**
      * Fake constructor to keep PHP5 happy
      *
      */
     function __construct() {
-        $this->block_base();
-    }
-    
-    /** 
-     * Function that can be overridden to do extra setup after
-     * the database install. (Called once per block, not per instance!)
-     */
-    function after_install() {
+        $this->init();
     }
     
     /**
@@ -122,113 +126,6 @@ class block_base {
     }
     
     /**
-     * Function that can be overridden to do extra setup after a block instance has been
-     * restored from backup. For example, it may need to alter any dates that the block
-     * stores, if the $restore->course_startdateoffset is set.  
-     */
-    function after_restore($restore) {
-    }
-
-    /**
-     * Enable custom instance data section in backup and restore.
-     * 
-     * If return true, then {@link instance_backup()} and
-     * {@link instance_restore()} will be called during
-     * backup/restore routines.
-     *
-     * @return boolean
-     **/
-    function backuprestore_instancedata_used() {
-        return false;
-    }
-
-    /**
-     * Allows the block class to have a backup routine.  Handy 
-     * when the block has its own tables that have foreign keys to 
-     * other tables (example: user table).
-     * 
-     * Note: at the time of writing this comment, the indent level 
-     * for the {@link full_tag()} should start at 5.
-     *
-     * @param resource $bf Backup File
-     * @param object $preferences Backup preferences
-     * @return boolean
-     **/
-    function instance_backup($bf, $preferences) {
-        return true;
-    }
-
-    /**
-     * Allows the block class to restore its backup routine.
-     * 
-     * Should not return false if data is empty 
-     * because old backups would not contain block instance backup data.
-     * 
-     * @param object $restore Standard restore object
-     * @param object $data Object from backup_getid for this block instance
-     * @return boolean
-     **/
-    function instance_restore($restore, $data) {
-        return true;
-    }
-
-    /**
-     * Will be called before an instance of this block is backed up, so that any links in
-     * in config can be encoded. For example config->text, for the HTML block
-     * @return string
-     */
-    function get_backup_encoded_config() {
-        return base64_encode(serialize($this->config));
-    }
-
-    /**
-     * Return the content encoded to support interactivities linking. This function is
-     * called automatically from the backup procedure by {@link backup_encode_absolute_links()}.
-     *
-     * NOTE: There is no block instance when this method is called.
-     *
-     * @param string $content Content to be encoded
-     * @param object $restore Restore preferences object
-     * @return string The encoded content
-     **/
-    function encode_content_links($content, $restore) {
-        return $content;
-    }
-
-    /**
-     * This function makes all the necessary calls to {@link restore_decode_content_links_worker()}
-     * function in order to decode contents of this block from the backup 
-     * format to destination site/course in order to mantain inter-activities 
-     * working in the backup/restore process. 
-     * 
-     * This is called from {@link restore_decode_content_links()} function in the restore process.
-     *
-     * NOTE: There is no block instance when this method is called.
-     *
-     * @param object $restore Standard restore object
-     * @return boolean
-     **/
-    function decode_content_links_caller($restore) {
-        return true;
-    }
-
-    /**
-     * Return content decoded to support interactivities linking.
-     * This is called automatically from
-     * {@link restore_decode_content_links_worker()} function
-     * in the restore process.
-     *
-     * NOTE: There is no block instance when this method is called.
-     *
-     * @param string $content Content to be dencoded
-     * @param object $restore Restore preferences object
-     * @return string The dencoded content
-     **/
-    function decode_content_links($content, $restore) {
-        return $content;
-    }
-
-    /**
      * Returns the block name, as present in the class name,
      * the database, the block directory, etc etc.
      *
@@ -284,33 +181,13 @@ class block_base {
     }
 
     /**
-     * Returns the class $version var value.
-     *
-     * Intentionally doesn't check if a version is set. 
-     * This is already done in {@link _self_test()}
-     *
-     * @return string $this->version
-     */
-    function get_version() {
-        // Intentionally doesn't check if a version is set. This is already done in _self_test()
-        return $this->version;
-    }
-
-    /**
      * Returns true or false, depending on whether this block has any content to display
      * and whether the user has permission to view the block
      *
      * @return boolean
      */
     function is_empty() {
-
-        if (empty($this->instance->pinned)) {
-            $context = get_context_instance(CONTEXT_BLOCK, $this->instance->id);
-        } else {
-            $context = get_context_instance(CONTEXT_SYSTEM); // pinned blocks do not have own context
-        }
-        
-        if ( !has_capability('moodle/block:view', $context) ) {
+        if ( !has_capability('moodle/block:view', $this->context) ) {
             return true;
         }
 
@@ -332,184 +209,81 @@ class block_base {
     }
 
     /**
-     * Display the block!
-     */
-    function _print_block() {
-        global $COURSE;
-
-        // is_empty() includes a call to get_content()
-        if ($this->is_empty() && empty($COURSE->javascriptportal)) {
-            if (empty($this->edit_controls)) {
-                // No content, no edit controls, so just shut up
-                return;
-            } else {
-                // No content but editing, so show something at least
-                $this->_print_shadow();
-            }
-        } else {
-            if ($this->hide_header() && empty($this->edit_controls)) {
-                // Header wants to hide, no edit controls to show, so no header it is
-                print_side_block(NULL, $this->content->text, NULL, NULL, $this->content->footer, $this->html_attributes());
-            } else {
-                // The full treatment, please. Include the title text.
-                print_side_block($this->_title_html(), $this->content->text, NULL, NULL, $this->content->footer, $this->html_attributes(), $this->title);
-            }
-        }
-    }
-
-    /**
-     * Block contents are missing. Simply display an empty block so that
-     * edit controls are accessbile to the user and they are aware that this
-     * block is in place, even if empty.
+     * Return a block_contents object representing the full contents of this block.
+     *
+     * This internally calls ->get_content(), and then adds the editing controls etc.
+     *
+     * You probably should not override this method, but instead override
+     * {@link html_attributes()}, {@link formatted_contents()} or {@link get_content()},
+     * {@link hide_header()}, {@link (get_edit_controls)}, etc.
+     *
+     * @return block_contents a representation of the block, for rendering.
+     * @since Moodle 2.0.
      */
-    function _print_shadow() {
-        print_side_block($this->_title_html(), '&nbsp;', NULL, NULL, '', array('class' => 'hidden'), $this->title);
-    }
-
-
-    function _title_html() {
+    public function get_content_for_output($output) {
         global $CFG;
 
-        //Accessibility: validation, can't have <div> inside <h2>, use <span>.
-        $title = '<div class="title">';
-
-        if (!empty($CFG->allowuserblockhiding)) {
-            //Accessibility: added 'alt' text for the +- icon.
-            //Theme the buttons using, Admin - Miscellaneous - smartpix.
-            $strshow = addslashes_js(get_string('showblocka', 'access', strip_tags($this->title)));
-            $strhide = addslashes_js(get_string('hideblocka', 'access', strip_tags($this->title)));
-            $title .= '<input type="image" src="'.$CFG->pixpath.'/t/switch_minus.gif" '. 
-                'id="togglehide_inst'.$this->instance->id.'" '.
-                'onclick="elementToggleHide(this, true, function(el) {'.
-                'return findParentNode(el, \'DIV\', \'sideblock\'); },'.
-                ' \''.$strshow.'\', \''.$strhide.'\'); return false;" '.
-                'alt="'.$strhide.'" title="'.$strhide.'" class="hide-show-image" />';
-        }
+        $bc = new block_contents($this->html_attributes());
 
-        //Accesssibility: added H2 (was in, weblib.php: print_side_block)
-        $title .= '<h2>'.$this->title.'</h2>';
+        $bc->blockinstanceid = $this->instance->id;
+        $bc->blockpositionid = $this->instance->blockpositionid;
 
-        if ($this->edit_controls !== NULL) {
-            $title .= $this->edit_controls;
-        }
-
-        $title .= '</div>';
-        return $title;
+        if ($this->instance->visible) {
+            $bc->content = $this->formatted_contents($output);
+            if (!empty($this->content->footer)) {
+                $bc->footer = $this->content->footer;
     }
-
-    /**
-     * Sets class $edit_controls var with correct block manipulation links.
-     *
-     * @uses $CFG
-     * @uses $USER
-     * @param stdObject $options ?
-     * @todo complete documenting this function. Define $options.
-     */
-    function _add_edit_controls($options) {
-        global $CFG, $USER, $PAGE;
-        
-        if (empty($this->instance->pinned)) {
-            $context = get_context_instance(CONTEXT_BLOCK, $this->instance->id);
         } else {
-            $context = get_context_instance(CONTEXT_SYSTEM); // pinned blocks do not have own context
-        }
-        
-        // context for site or course, i.e. participant list etc
-        // check to see if user can edit site or course blocks.
-        // blocks can appear on other pages such as mod and blog pages...
-
-        switch ($this->instance->pagetype) {
-            case 'course-view':
-                if (!has_capability('moodle/site:manageblocks', $context)) {
-                    return null;
+            $bc->add_class('invisible');
                 }
-            break;
-            default:
             
-            break;  
+        if (!$this->hide_header()) {
+            $bc->title = $this->title;
         }
         
-        
-        if (!isset($this->str)) {
-            $this->str->delete    = get_string('delete');
-            $this->str->moveup    = get_string('moveup');
-            $this->str->movedown  = get_string('movedown');
-            $this->str->moveright = get_string('moveright');
-            $this->str->moveleft  = get_string('moveleft');
-            $this->str->hide      = get_string('hide');
-            $this->str->show      = get_string('show');
-            $this->str->configure = get_string('configuration');
-            $this->str->assignroles = get_string('assignroles', 'role');
-        }
-
-        // RTL support - exchange right and left arrows
-        if (right_to_left()) {
-            $rightarrow = 'left.gif';
-            $leftarrow  = 'right.gif';
+        if ($this->page->user_is_editing()) {
+            $bc->controls = $this->page->blocks->edit_controls($this);
         } else {
-            $rightarrow = 'right.gif';
-            $leftarrow  = 'left.gif';
+            // we must not use is_empty on hidden blocks
+            if ($this->is_empty() && !$bc->controls) {
+                return null;
         }
-
-        $movebuttons = '<div class="commands">';
-
-        if ($this->instance->visible) {
-            $icon = '/t/hide.gif';
-            $title = $this->str->hide;
-        } else {
-            $icon = '/t/show.gif';
-            $title = $this->str->show;
         }
 
-        if (empty($this->instance->pageid)) {
-            $this->instance->pageid = 0;
-        }
-        if (!empty($PAGE->type) and ($this->instance->pagetype == $PAGE->type) and $this->instance->pageid == $PAGE->id) {
-            $page = $PAGE;
+        if (empty($CFG->allowuserblockhiding) ||
+                (empty($bc->content) && empty($bc->footer))) {
+            $bc->collapsible = block_contents::NOT_HIDEABLE;
+        } else if (get_user_preferences('block' . $bc->blockinstanceid . 'hidden', false)) {
+            $bc->collapsible = block_contents::HIDDEN;
         } else {
-            $page = page_create_object($this->instance->pagetype, $this->instance->pageid);
+            $bc->collapsible = block_contents::VISIBLE;
         }
-        $script = $page->url_get_full(array('instanceid' => $this->instance->id, 'sesskey' => $USER->sesskey));
 
-        if (empty($this->instance->pinned)) {
-            $movebuttons .= '<a class="icon roles" title="'. $this->str->assignroles .'" href="'.$CFG->wwwroot.'/'.$CFG->admin.'/roles/assign.php?contextid='.$context->id.'">' .
-                            '<img src="'.$CFG->pixpath.'/i/roles.gif" alt="'.$this->str->assignroles.'" /></a>';
-        }
-     
-        if ($this->user_can_edit()) {
-            $movebuttons .= '<a class="icon hide" title="'. $title .'" href="'.$script.'&amp;blockaction=toggle">' .
-                            '<img src="'. $CFG->pixpath.$icon .'" alt="'.$title.'" /></a>';
-        }
-
-        if ($options & BLOCK_CONFIGURE && $this->user_can_edit()) {
-            $movebuttons .= '<a class="icon edit" title="'. $this->str->configure .'" href="'.$script.'&amp;blockaction=config">' .
-                            '<img src="'. $CFG->pixpath .'/t/edit.gif" alt="'. $this->str->configure .'" /></a>';
-        }
+        $bc->annotation = ''; // TODO MDL-19398 need to work out what to say here.
 
-        if ($this->user_can_addto($page)) {
-            $movebuttons .= '<a class="icon delete" title="'. $this->str->delete .'" href="'.$script.'&amp;blockaction=delete">' .
-                            '<img src="'. $CFG->pixpath .'/t/delete.gif" alt="'. $this->str->delete .'" /></a>';
+        return $bc;
         }
 
-        if ($options & BLOCK_MOVE_LEFT) {
-            $movebuttons .= '<a class="icon left" title="'. $this->str->moveleft .'" href="'.$script.'&amp;blockaction=moveleft">' .
-                            '<img src="'. $CFG->pixpath .'/t/'.$leftarrow.'" alt="'. $this->str->moveleft .'" /></a>';
-        }
-        if ($options & BLOCK_MOVE_UP) {
-            $movebuttons .= '<a class="icon up" title="'. $this->str->moveup .'" href="'.$script.'&amp;blockaction=moveup">' .
-                            '<img src="'. $CFG->pixpath .'/t/up.gif" alt="'. $this->str->moveup .'" /></a>';
-        }
-        if ($options & BLOCK_MOVE_DOWN) {
-            $movebuttons .= '<a class="icon down" title="'. $this->str->movedown .'" href="'.$script.'&amp;blockaction=movedown">' .
-                            '<img src="'. $CFG->pixpath .'/t/down.gif" alt="'. $this->str->movedown .'" /></a>';
-        }
-        if ($options & BLOCK_MOVE_RIGHT) {
-            $movebuttons .= '<a class="icon right" title="'. $this->str->moveright .'" href="'.$script.'&amp;blockaction=moveright">' .
-                            '<img src="'. $CFG->pixpath .'/t/'.$rightarrow.'" alt="'. $this->str->moveright .'" /></a>';
+    /**
+     * Convert the contents of the block to HTML.
+     *
+     * This is used by block base classes like block_list to convert the structured
+     * $this->content->list and $this->content->icons arrays to HTML. So, in most
+     * blocks, you probaby want to override the {@link get_contents()} method,
+     * which generates that structured representation of the contents.
+     *
+     * @param $output The core_renderer to use when generating the output.
+     * @return string the HTML that should appearn in the body of the block.
+     * @since Moodle 2.0.
+     */
+    protected function formatted_contents($output) {
+        $this->get_content();
+        $this->get_required_javascript();
+        if (!empty($this->content->text)) {
+            return $this->content->text;
+        } else {
+            return '';
         }
-
-        $movebuttons .= '</div>';
-        $this->edit_controls = $movebuttons;
     }
 
     /**
@@ -529,7 +303,7 @@ class block_base {
             $errors[] = 'title_not_set';
             $correct = false;
         }
-        if (!in_array($this->get_content_type(), array(BLOCK_TYPE_LIST, BLOCK_TYPE_TEXT))) {
+        if (!in_array($this->get_content_type(), array(BLOCK_TYPE_LIST, BLOCK_TYPE_TEXT, BLOCK_TYPE_TREE))) {
             $errors[] = 'invalid_content_type';
             $correct = false;
         }
@@ -538,11 +312,6 @@ class block_base {
             $errors[] = 'content_not_set';
             $correct = false;
         }*/
-        if ($this->get_version() === NULL) {
-            $errors[] = 'version_not_set';
-            $correct = false;
-        }
-
         $formats = $this->applicable_formats();
         if (empty($formats) || array_sum($formats) === 0) {
             $errors[] = 'no_formats';
@@ -568,26 +337,6 @@ class block_base {
     }
 
     /**
-     * Default behavior: print the config_global.html file
-     * You don't need to override this if you're satisfied with the above
-     *
-     * @uses $CFG
-     * @return boolean
-     */
-    function config_print() {
-        // Default behavior: print the config_global.html file
-        // You don't need to override this if you're satisfied with the above
-        if (!$this->has_config()) {
-            return false;
-        }
-        global $CFG;
-        print_simple_box_start('center', '', '', 5, 'blockconfigglobal');
-        include($CFG->dirroot.'/blocks/'. $this->name() .'/config_global.html');
-        print_simple_box_end();
-        return true;
-    }
-    
-    /**
      * Default behavior: save all variables as $CFG properties
      * You don't need to override this if you 're satisfied with the above
      *
@@ -602,9 +351,15 @@ class block_base {
     }
     
     /**
-     * Default case: the block can be used in all course types
-     * @return array
-     * @todo finish documenting this function
+     * Which page types this block may appear on.
+     *
+     * The information returned here is processed by the
+     * {@link blocks_name_allowed_in_format()} function. Look there if you need
+     * to know exactly how this works.
+     *
+     * Default case: everything except mod and tag.
+     *
+     * @return array page-type prefix => true/false.
      */
     function applicable_formats() {
         // Default case: the block can be used in courses and site index, but not in activities
@@ -613,14 +368,6 @@ class block_base {
     
 
     /**
-     * Default case: the block wants to be 180 pixels wide
-     * @return int
-     */
-    function preferred_width() {
-        return 180;
-    }
-    
-    /**
      * Default return is false - header will be shown
      * @return boolean
      */
@@ -629,33 +376,59 @@ class block_base {
     }
 
     /**
-     * Default case: an id with the instance and a class with our name in it
-     * @return array
-     * @todo finish documenting this function
+     * Return any HTML attributes that you want added to the outer <div> that
+     * of the block when it is output.
+     *
+     * Because of the way certain JS events are wired it is a good idea to ensure
+     * that the default values here still get set.
+     * I found the easiest way to do this and still set anything you want is to
+     * override it within your block in the following way
+     *
+     * <code php>
+     * function html_attributes() {
+     *    $attributes = parent::html_attributes();
+     *    $attributes['class'] .= ' mynewclass';
+     *    return $attributes;
+     * }
+     * </code>
+     *
+     * @return array attribute name => value.
      */
     function html_attributes() {
-        return array('id' => 'inst'.$this->instance->id, 'class' => 'block_'. $this->name());
+        $attributes = array(
+            'id' => 'inst' . $this->instance->id,
+            'class' => 'block_' . $this->name(). '  block'
+        );
+        if ($this->instance_can_be_docked() && get_user_preferences('docked_block_instance_'.$this->instance->id, 0)) {
+            $attributes['class'] .= ' dock_on_load';
+        }
+        return $attributes;
     }
     
     /**
-     * Given an instance set the class var $instance to it and
-     * load class var $config
-     * @param block $instance
-     * @todo add additional documentation to further explain the format of instance and config
+     * Set up a particular instance of this class given data from the block_insances
+     * table and the current page. (See {@link block_manager::load_blocks()}.)
+     *
+     * @param stdClass $instance data from block_insances, block_positions, etc.
+     * @param moodle_page $the page this block is on.
      */
-    function _load_instance($instance) {
+    function _load_instance($instance, $page) {
         if (!empty($instance->configdata)) {
             $this->config = unserialize(base64_decode($instance->configdata));
         }
-        // [pj] This line below is supposed to be an optimization (we don't need configdata anymore)
-        // but what it does is break in PHP5 because the same instance object will be passed to
-        // this function twice in each page view, and the second time it won't have any configdata
-        // so it won't work correctly. Thus it's commented out.
-        // unset($instance->configdata);
         $this->instance = $instance;
+        $this->context = get_context_instance(CONTEXT_BLOCK, $instance->id);
+        $this->page = $page;
         $this->specialization();
     }
 
+    function get_required_javascript() {
+        if ($this->instance_can_be_docked() && !$this->hide_header()) {
+            $this->page->requires->js_init_call('M.core_dock.init_genericblock', array($this->instance->id));
+            user_preference_allow_ajax_update('docked_block_instance_'.$this->instance->id, PARAM_INT);
+        }
+    }
+
     /**
      * This function is called on your subclass right after an instance is loaded
      * Use this function to act on instance data just after it's loaded and before anything else is done
@@ -667,13 +440,12 @@ class block_base {
 
     /**
      * Is each block of this type going to have instance-specific configuration?
-     * Normally, this setting is controlled by {@link instance_allow_multiple}: if multiple
+     * Normally, this setting is controlled by {@link instance_allow_multiple()}: if multiple
      * instances are allowed, then each will surely need its own configuration. However, in some
      * cases it may be necessary to provide instance configuration to blocks that do not want to
      * allow multiple instances. In that case, make this function return true.
-     * I stress again that this makes a difference ONLY if {@link instance_allow_multiple} returns false.
+     * I stress again that this makes a difference ONLY if {@link instance_allow_multiple()} returns false.
      * @return boolean
-     * @todo finish documenting this function by explaining per-instance configuration further
      */
     function instance_allow_config() {
         return false;
@@ -683,7 +455,6 @@ class block_base {
      * Are you going to allow multiple instances of each block?
      * If yes, then it is assumed that the block WILL USE per-instance configuration
      * @return boolean
-     * @todo finish documenting this function by explaining per-instance configuration further
      */
     function instance_allow_multiple() {
         // Are you going to allow multiple instances of each block?
@@ -695,22 +466,21 @@ class block_base {
      * Default behavior: print the config_instance.html file
      * You don't need to override this if you're satisfied with the above
      *
-     * @uses $CFG
-     * @return boolean
-     * @todo finish documenting this function
+     * @deprecated since Moodle 2.0.
+     * @return boolean whether anything was done. Blocks should use edit_form.php.
      */
     function instance_config_print() {
+        global $CFG, $DB, $OUTPUT;
         // Default behavior: print the config_instance.html file
         // You don't need to override this if you're satisfied with the above
         if (!$this->instance_allow_multiple() && !$this->instance_allow_config()) {
             return false;
         }
-        global $CFG;
 
         if (is_file($CFG->dirroot .'/blocks/'. $this->name() .'/config_instance.html')) {
-            print_simple_box_start('center', '', '', 5, 'blockconfiginstance');
+            echo $OUTPUT->box_start('generalbox boxaligncenter blockconfiginstance');
             include($CFG->dirroot .'/blocks/'. $this->name() .'/config_instance.html');
-            print_simple_box_end();
+            echo $OUTPUT->box_end();
         } else {
             notice(get_string('blockconfigbad'), str_replace('blockaction=', 'dummy=', qualified_me()));
         }
@@ -720,36 +490,24 @@ class block_base {
 
     /**
      * Serialize and store config data
-     * @return boolean
-     * @todo finish documenting this function
      */
-    function instance_config_save($data,$pinned=false) {
-        $data = stripslashes_recursive($data);
-        $this->config = $data;
-        $table = 'block_instance';
-        if (!empty($pinned)) {
-            $table = 'block_pinned';
-        }
-        return set_field($table, 'configdata', base64_encode(serialize($data)), 'id', $this->instance->id);
+    function instance_config_save($data, $nolongerused = false) {
+        global $DB;
+        $DB->set_field('block_instances', 'configdata', base64_encode(serialize($data)),
+                array('id' => $this->instance->id));
     }
 
     /**
      * Replace the instance's configuration data with those currently in $this->config;
-     * @return boolean
-     * @todo finish documenting this function
      */
-    function instance_config_commit($pinned=false) {
-        $table = 'block_instance';
-        if (!empty($pinned)) {
-            $table = 'block_pinned';
-        }
-        return set_field($table, 'configdata', base64_encode(serialize($this->config)), 'id', $this->instance->id);
+    function instance_config_commit($nolongerused = false) {
+        global $DB;
+        $this->instance_config_save($this->config);
     }
 
      /**
      * Do any additional initialization you may need at the time a new block instance is created
      * @return boolean
-     * @todo finish documenting this function
      */
     function instance_create() {
         return true;
@@ -758,7 +516,6 @@ class block_base {
      /**
      * Delete everything related to this instance if you have been using persistent storage other than the configdata field.
      * @return boolean
-     * @todo finish documenting this function
      */
     function instance_delete() {
         return true;
@@ -769,32 +526,150 @@ class block_base {
      * The framework has first say in whether this will be allowed (e.g., no editing allowed unless in edit mode)
      * but if the framework does allow it, the block can still decide to refuse.
      * @return boolean
-     * @todo finish documenting this function
      */
     function user_can_edit() {
+        global $USER;
+
+        if (has_capability('moodle/block:edit', $this->context)) {
         return true;
     }
 
+        // The blocks in My Moodle are a special case.  We want them to inherit from the user context.
+        if (!empty($USER->id)
+            && $this->instance->parentcontextid == $this->page->context->id   // Block belongs to this page
+            && $this->page->context->contextlevel == CONTEXT_USER             // Page belongs to a user
+            && $this->page->context->instanceid == $USER->id) {               // Page belongs to this user
+            return has_capability('moodle/my:manageblocks', $this->page->context);
+        }
+
+        return false;
+    }
+
      /**
      * Allows the block class to have a say in the user's ability to create new instances of this block.
      * The framework has first say in whether this will be allowed (e.g., no adding allowed unless in edit mode)
      * but if the framework does allow it, the block can still decide to refuse.
      * This function has access to the complete page object, the creation related to which is being determined.
+     *
+     * @param moodle_page $page
      * @return boolean
-     * @todo finish documenting this function
      */
     function user_can_addto($page) {
+        global $USER;
+
+        if (has_capability('moodle/block:edit', $page->context)) {
         return true;
     }
 
+        // The blocks in My Moodle are a special case and use a different capability.
+        if (!empty($USER->id)
+            && $page->context->contextlevel == CONTEXT_USER             // Page belongs to a user
+            && $page->context->instanceid == $USER->id) {               // Page belongs to this user
+            return has_capability('moodle/my:manageblocks', $page->context);
+        }
+
+        return false;
+    }
+
     function get_extra_capabilities() {
-        return array('moodle/block:view');
+        return array('moodle/block:view', 'moodle/block:edit');
+    }
+
+    // Methods deprecated in Moodle 2.0 ========================================
+
+    /**
+     * Default case: the block wants to be 180 pixels wide
+     * @deprecated since Moodle 2.0.
+     * @return int
+     */
+    function preferred_width() {
+        return 180;
+    }
+
+    /** @deprecated since Moodle 2.0. */
+    function _print_block() {
+        throw new coding_exception('_print_block is no longer used. It was a private ' .
+                'method of the block class, only for use by the blocks system. You ' .
+                'should not have been calling it anyway.');
+    }
+
+    /** @deprecated since Moodle 2.0. */
+    function _print_shadow() {
+        throw new coding_exception('_print_shadow is no longer used. It was a private ' .
+                'method of the block class, only for use by the blocks system. You ' .
+                'should not have been calling it anyway.');
+    }
+
+    /** @deprecated since Moodle 2.0. */
+    function _title_html() {
+        throw new coding_exception('_title_html is no longer used. It was a private ' .
+                'method of the block class, only for use by the blocks system. You ' .
+                'should not have been calling it anyway.');
+    }
+
+    /** @deprecated since Moodle 2.0. */
+    function _add_edit_controls() {
+        throw new coding_exception('_add_edit_controls is no longer used. It was a private ' .
+                'method of the block class, only for use by the blocks system. You ' .
+                'should not have been calling it anyway.');
+    }
+
+    /** @deprecated since Moodle 2.0. */
+    function config_print() {
+        throw new coding_exception('config_print() can no longer be used. Blocks should use a settings.php file.');
+    }
+
+    /**
+     * Can be overridden by the block to prevent the block from being dockable.
+     *
+     * @return bool
+     */
+    public function instance_can_be_docked() {
+        global $CFG;
+        return (!empty($CFG->allowblockstodock) && $this->page->theme->enable_dock);
+    }
+
+    /**
+     * If overridden and set to true by the block it will not be hidable when
+     * editing is turned on.
+     *
+     * @return bool
+     */
+    public function instance_can_be_hidden() {
+        return true;
+    }
+
+    /** @callback callback functions for comments api */
+    public static function comment_template($options) {
+        $ret = <<<EOD
+<div class="comment-userpicture">___picture___</div>
+<div class="comment-content">
+    ___name___ - <span>___time___</span>
+    <div>___content___</div>
+</div>
+EOD;
+        return $ret;
+    }
+    public static function comment_permissions($options) {
+        return array('view'=>true, 'post'=>true);
+    }
+    public static function comment_url($options) {
+        return null;
+    }
+    public static function comment_display($comments, $options) {
+        return $comments;
+    }
+    public static function comment_add(&$comments, $options) {
+        return true;
     }
 }
 
 /**
  * Specialized class for displaying a block with a list of icons/text labels
  *
+ * The get_content method should set $this->content->items and (optionally)
+ * $this->content->icons, instead of $this->content->text.
+ *
  * @author Jon Papaioannou
  * @package blocks
  */
@@ -803,14 +678,7 @@ class block_list extends block_base {
     var $content_type  = BLOCK_TYPE_LIST;
 
     function is_empty() {
-
-        if (empty($this->instance->pinned)) {
-            $context = get_context_instance(CONTEXT_BLOCK, $this->instance->id);
-        } else {
-            $context = get_context_instance(CONTEXT_SYSTEM); // pinned blocks do not have own context
-        }
-        
-        if ( !has_capability('moodle/block:view', $context) ) {
+        if ( !has_capability('moodle/block:view', $this->context) ) {
             return true;
         }
 
@@ -818,31 +686,74 @@ class block_list extends block_base {
         return (empty($this->content->items) && empty($this->content->footer));
     }
 
-    function _print_block() {
-        global $COURSE;
-
-        // is_empty() includes a call to get_content()
-        if ($this->is_empty() && empty($COURSE->javascriptportal)) {
-            if (empty($this->edit_controls)) {
-                // No content, no edit controls, so just shut up
-                return;
-            } else {
-                // No content but editing, so show something at least
-                $this->_print_shadow();
-            }
-        } else {
-            if ($this->hide_header() && empty($this->edit_controls)) {
-                // Header wants to hide, no edit controls to show, so no header it is
-                print_side_block(NULL, '', $this->content->items, $this->content->icons, 
-                                 $this->content->footer, $this->html_attributes());
+    protected function formatted_contents($output) {
+        $this->get_content();
+        $this->get_required_javascript();
+        if (!empty($this->content->items)) {
+            return $output->list_block_contents($this->content->icons, $this->content->items);
             } else {
-                // The full treatment, please. Include the title text.
-                print_side_block($this->_title_html(), '', $this->content->items, $this->content->icons, 
-                                 $this->content->footer, $this->html_attributes(), $this->title);
+            return '';
             }
         }
+
+    function html_attributes() {
+        $attributes = parent::html_attributes();
+        $attributes['class'] .= ' list_block';
+        return $attributes;
     }
 
 }
 
-?>
+/**
+ * Specialized class for displaying a tree menu.
+ *
+ * The {@link get_content()} method involves setting the content of
+ * <code>$this->content->items</code> with an array of {@link tree_item}
+ * objects (these are the top-level nodes). The {@link tree_item::children}
+ * property may contain more tree_item objects, and so on. The tree_item class
+ * itself is abstract and not intended for use, use one of it's subclasses.
+ *
+ * Unlike {@link block_list}, the icons are specified as part of the items,
+ * not in a separate array.
+ *
+ * @author Alan Trick
+ * @package blocks
+ * @internal this extends block_list so we get is_empty() for free
+ */
+class block_tree extends block_list {
+
+    /**
+     * @var int specifies the manner in which contents should be added to this
+     * block type. In this case <code>$this->content->items</code> is used with
+     * {@link tree_item}s.
+     */
+    public $content_type = BLOCK_TYPE_TREE;
+
+    /**
+     * Make the formatted HTML ouput.
+     *
+     * Also adds the required javascript call to the page output.
+     *
+     * @param core_renderer $output
+     * @return string HTML
+     */
+    protected function formatted_contents($output) {
+        // based of code in admin_tree
+        global $PAGE; // TODO change this when there is a proper way for blocks to get stuff into head.
+        static $eventattached;
+        if ($eventattached===null) {
+            $eventattached = true;
+        }
+        if (!$this->content) {
+            $this->content = new stdClass;
+            $this->content->items = array();
+        }
+        $this->get_required_javascript();
+        $this->get_content();
+        $content = $output->tree_block_contents($this->content->items,array('class'=>'block_tree list'));
+        if (isset($this->id) && !is_numeric($this->id)) {
+            $content = $output->box($content, 'block_tree_box', $this->id);
+        }
+        return $content;
+    }
+}
