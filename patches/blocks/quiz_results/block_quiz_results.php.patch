diff --git a/blocks/quiz_results/block_quiz_results.php b/blocks/quiz_results/block_quiz_results.php
index 4ca6ba6..a8d24e5 100644
--- a/blocks/quiz_results/block_quiz_results.php
+++ b/blocks/quiz_results/block_quiz_results.php
@@ -1,5 +1,45 @@
-<?php //$Id$
-
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Classes to enforce the various access rules that can apply to a quiz.
+ *
+ * @package    block
+ * @subpackage quiz_results
+ * @copyright  2009 Tim Hunt
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/quiz/lib.php');
+
+
+/**
+ * Block quiz_results class definition.
+ *
+ * This block can be added to a course page or a quiz page to display of list of
+ * the best/worst students/groups in a particular quiz.
+ *
+ * @package    block
+ * @subpackage quiz_results
+ * @copyright  2009 Tim Hunt
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 define('B_QUIZRESULTS_NAME_FORMAT_FULL', 1);
 define('B_QUIZRESULTS_NAME_FORMAT_ID',   2);
 define('B_QUIZRESULTS_NAME_FORMAT_ANON', 3);
@@ -9,16 +49,42 @@ define('B_QUIZRESULTS_GRADE_FORMAT_ABS', 3);
 
 class block_quiz_results extends block_base {
     function init() {
-        $this->title = get_string('formaltitle', 'block_quiz_results');
-        $this->version = 2007101509;
+        $this->title = get_string('pluginname', 'block_quiz_results');
     }
 
     function applicable_formats() {
         return array('course' => true, 'mod-quiz' => true);
     }
 
+    /**
+     * If this block belongs to a quiz context, then return that quiz's id.
+     * Otherwise, return 0.
+     * @return integer the quiz id.
+     */
+    public function get_owning_quiz() {
+        if (empty($this->instance->parentcontextid)) {
+            return 0;
+        }
+        $parentcontext = get_context_instance_by_id($this->instance->parentcontextid);
+        if ($parentcontext->contextlevel != CONTEXT_MODULE) {
+            return 0;
+        }
+        $cm = get_coursemodule_from_id('quiz', $parentcontext->instanceid);
+        if (!$cm) {
+            return 0;
+        }
+        return $cm->instance;
+    }
+
+    function instance_config_save($data) {
+        if (empty($data->quizid)) {
+            $data->quizid = $this->get_owning_quiz();
+        }
+        parent::instance_config_save($data);
+    }
+
     function get_content() {
-        global $USER, $CFG;
+        global $USER, $CFG, $DB;
 
         if ($this->content !== NULL) {
             return $this->content;
@@ -32,84 +98,70 @@ class block_quiz_results extends block_base {
             return $this->content;
         }
 
-        if($this->instance->pagetype == 'course-view') {
-            // We need to see if we are monitoring a quiz 
-            $quizid   = empty($this->config->quizid) ? 0 : $this->config->quizid;
-            $courseid = $this->instance->pageid;
-        }
-        else {
-            // Assuming we are displayed in the quiz view page
-            $quizid    = $this->instance->pageid;
-
-            // A trick to take advantage of instance config and save queries
-            if(empty($this->config->courseid)) {
-                $modrecord = get_record('modules', 'name', 'quiz');
-                $cmrecord  = get_record('course_modules', 'module', $modrecord->id, 'instance', $quizid);
-                $this->config->courseid = intval($cmrecord->course);
-                $this->instance_config_commit();
+        if ($this->page->activityname == 'quiz' && $this->page->context->id == $this->instance->parentcontextid) {
+            $quiz = $this->page->activityrecord;
+            $quizid = $quiz->id;
+            $courseid = $this->page->course->id;
+            $inquiz = true;
+        } else if (!empty($this->config->quizid)) {
+            $quizid = $this->config->quizid;
+            $quiz = $DB->get_record('quiz', array('id' => $quizid));
+            if (empty($quiz)) {
+                $this->content->text = get_string('error_emptyquizrecord', 'block_quiz_results');
+                return $this->content;
             }
-            $courseid = $this->config->courseid;
+            $courseid = $quiz->course;
+            $inquiz = false;
+        } else {
+            $quizid = 0;
         }
 
-        $context = get_context_instance(CONTEXT_COURSE, $courseid);
-
-
-        if(empty($quizid)) {
+        if (empty($quizid)) {
             $this->content->text = get_string('error_emptyquizid', 'block_quiz_results');
             return $this->content;
         }
 
-        // Get the quiz record
-        $quiz = get_record('quiz', 'id', $quizid);
-        if(empty($quiz)) {
-            $this->content->text = get_string('error_emptyquizrecord', 'block_quiz_results');
+        if (empty($this->config->showbest) && empty($this->config->showworst)) {
+            $this->content->text = get_string('configuredtoshownothing', 'block_quiz_results');
             return $this->content;
         }
 
         // Get the grades for this quiz
-        $grades = get_records('quiz_grades', 'quiz', $quizid, 'grade, timemodified DESC');
+        $grades = $DB->get_records('quiz_grades', array('quiz' => $quizid), 'grade, timemodified DESC');
 
-        if(empty($grades)) {
+        if (empty($grades)) {
             // No grades, sorry
             // The block will hide itself in this case
             return $this->content;
         }
 
-        if(empty($this->config->showbest) && empty($this->config->showworst)) {
-            $this->content->text = get_string('configuredtoshownothing', 'block_quiz_results');
-            return $this->content;
-        }
-
         $groupmode = NOGROUPS;
         $best      = array();
         $worst     = array();
 
-        $nameformat = intval(empty($this->config->nameformat)  ? B_QUIZRESULTS_NAME_FORMAT_FULL : $this->config->nameformat);
-
-        // If the block is configured to operate in group mode, or if the name display format
-        // is other than "fullname", then we need to retrieve the full course record
-        if(!empty($this->config->usegroups) || $nameformat != B_QUIZRESULTS_NAME_FORMAT_FULL) {
-            $course = get_record_select('course', 'id = '.$courseid, 'groupmode, groupmodeforce, student');
+        if (!empty($this->config->nameformat)) {
+            $nameformat = $this->config->nameformat;
+        } else {
+            $nameformat = B_QUIZRESULTS_NAME_FORMAT_FULL;
         }
 
-        if(!empty($this->config->usegroups)) {
-            // The block was configured to operate in group mode
-            if($course->groupmodeforce) {
-                $groupmode = $course->groupmode;
-            }
-            else {
-                $module = get_record_sql('SELECT cm.groupmode FROM '.$CFG->prefix.'modules m LEFT JOIN '.$CFG->prefix.'course_modules cm ON m.id = cm.module WHERE m.name = \'quiz\' AND cm.instance = '.$quizid);
-                $groupmode = $module->groupmode;
-            }
-            // The actual groupmode for the quiz is now known to be $groupmode
+        if (!empty($this->config->usegroups)) {
+            if ($inquiz) {
+                $cm = $this->page->cm;
+                $context = $this->page->context;
+            } else {
+                $cm = get_coursemodule_from_instance('quiz', $quizid, $courseid);
+                $context = get_context_instance(CONTEXT_MODULE, $cm->id);
         }
+            $groupmode = groups_get_activity_groupmode($cm);
 
-        if(has_capability('moodle/site:accessallgroups', $context) && $groupmode == SEPARATEGROUPS) {
+            if ($groupmode == SEPARATEGROUPS && has_capability('moodle/site:accessallgroups', $context)) {
             // We 'll make an exception in this case
             $groupmode = VISIBLEGROUPS;
         }
+        }
 
-        switch($groupmode) {
+        switch ($groupmode) {
             case VISIBLEGROUPS:
             // Display group-mode results
             $groups = groups_get_all_groups($courseid);
@@ -122,30 +174,32 @@ class block_quiz_results extends block_base {
 
             // Find out all the userids which have a submitted grade
             $userids = array();
-            foreach($grades as $grade) {
+            $gradeforuser = array();
+            foreach ($grades as $grade) {
                 $userids[] = $grade->userid;
+                $gradeforuser[$grade->userid] = (float)$grade->grade;
             }
 
             // Now find which groups these users belong in
-            $groupofuser = get_records_sql(
-            'SELECT m.userid, m.groupid, g.name FROM '.$CFG->prefix.'groups g LEFT JOIN '.$CFG->prefix.'groups_members m ON g.id = m.groupid '.
-            'WHERE g.courseid = '.$courseid.' AND m.userid IN ('.implode(',', $userids).')'
-            );
-
+            list($usertest, $params) = $DB->get_in_or_equal($userids);
+            $params[] = $courseid;
+            $usergroups = $DB->get_records_sql('
+                    SELECT gm.id, gm.userid, gm.groupid, g.name
+                    FROM {groups} g
+                    LEFT JOIN {groups_members} gm ON g.id = gm.groupid
+                    WHERE gm.userid ' . $usertest . ' AND g.courseid = ?', $params);
+
+            // Now, iterate the grades again and sum them up for each group
             $groupgrades = array();
-
-            // OK... now, iterate the grades again and sum them up for each group
-            foreach($grades as $grade) {
-                if(isset($groupofuser[$grade->userid])) {
-                    // Count this result only if the user is in a group
-                    $groupid = $groupofuser[$grade->userid]->groupid;
-                    if(!isset($groupgrades[$groupid])) {
-                        $groupgrades[$groupid] = array('sum' => (float)$grade->grade, 'number' => 1, 'group' => $groupofuser[$grade->userid]->name);
-                    }
-                    else {
-                        $groupgrades[$groupid]['sum'] += $grade->grade;
-                        ++$groupgrades[$groupid]['number'];
-                    }
+            foreach ($usergroups as $usergroup) {
+                if (!isset($groupgrades[$usergroup->groupid])) {
+                    $groupgrades[$usergroup->groupid] = array(
+                            'sum' => (float)$gradeforuser[$usergroup->userid],
+                            'number' => 1,
+                            'group' => $usergroup->name);
+                } else {
+                    $groupgrades[$usergroup->groupid]['sum'] += $gradeforuser[$usergroup->userid];
+                    $groupgrades[$usergroup->groupid]['number'] += 1;
                 }
             }
 
@@ -163,14 +217,14 @@ class block_quiz_results extends block_base {
             // Collect all the group results we are going to use in $best and $worst
             $remaining = $numbest;
             $groupgrade = end($groupgrades);
-            while($remaining--) {
+            while ($remaining--) {
                 $best[key($groupgrades)] = $groupgrade['average'];
                 $groupgrade = prev($groupgrades);
             }
 
             $remaining = $numworst;
             $groupgrade = reset($groupgrades);
-            while($remaining--) {
+            while ($remaining--) {
                 $worst[key($groupgrades)] = $groupgrade['average'];
                 $groupgrade = next($groupgrades);
             }
@@ -178,7 +232,7 @@ class block_quiz_results extends block_base {
             // Ready for output!
             $gradeformat = intval(empty($this->config->gradeformat) ? B_QUIZRESULTS_GRADE_FORMAT_PCT : $this->config->gradeformat);
 
-            if($this->instance->pagetype != 'mod-quiz-view') {
+            if (!$inquiz) {
                 // Don't show header and link to the quiz if we ARE at the quiz...
                 $this->content->text .= '<h1><a href="'.$CFG->wwwroot.'/mod/quiz/view.php?q='.$quizid.'">'.$quiz->name.'</a></h1>';
             }
@@ -216,10 +270,10 @@ class block_quiz_results extends block_base {
                     $this->content->text .= '<tr><td>'.(++$rank).'.</td><td>'.$thisname.'</td><td>';
                     switch($gradeformat) {
                         case B_QUIZRESULTS_GRADE_FORMAT_FRA:
-                            $this->content->text .= (format_float($averagegrade,$quiz->decimalpoints).'/'.$quiz->grade);
+                            $this->content->text .= quiz_format_grade($quiz, $averagegrade).'/'.$quiz->grade;
                         break;
                         case B_QUIZRESULTS_GRADE_FORMAT_ABS:
-                            $this->content->text .= format_float($averagegrade,$quiz->decimalpoints);
+                            $this->content->text .= quiz_format_grade($quiz, $averagegrade);
                         break;
                         default:
                         case B_QUIZRESULTS_GRADE_FORMAT_PCT:
@@ -251,10 +305,10 @@ class block_quiz_results extends block_base {
                     $this->content->text .= '<tr><td>'.(++$rank).'.</td><td>'.$thisname.'</td><td>';
                     switch($gradeformat) {
                         case B_QUIZRESULTS_GRADE_FORMAT_FRA:
-                            $this->content->text .= (format_float($averagegrade,$quiz->decimalpoints).'/'.$quiz->grade);
+                            $this->content->text .= quiz_format_grade($quiz, $averagegrade).'/'.$quiz->grade;
                         break;
                         case B_QUIZRESULTS_GRADE_FORMAT_ABS:
-                            $this->content->text .= format_float($averagegrade,$quiz->decimalpoints);
+                            $this->content->text .= quiz_format_grade($quiz, $averagegrade);
                         break;
                         default:
                         case B_QUIZRESULTS_GRADE_FORMAT_PCT:
@@ -271,7 +325,7 @@ class block_quiz_results extends block_base {
             case SEPARATEGROUPS:
             // This is going to be just like no-groups mode, only we 'll filter
             // out the grades from people not in our group.
-            if(empty($USER) || empty($USER->id)) {
+            if (!isloggedin()) {
                 // Not logged in, so show nothing
                 return $this->content;
             }
@@ -282,14 +336,20 @@ class block_quiz_results extends block_base {
                 return $this->content;
             }
 
-            $mygroupsusers = get_records_list('groups_members', 'groupid', implode(',', array_keys($mygroups)), '', 'userid, id');
-            // There should be at least one user there, ourselves. So no more tests.
+            // Get users from the same groups as me.
+            list($grouptest, $params) = $DB->get_in_or_equal(array_keys($mygroups));
+            $mygroupsusers = $DB->get_records_sql_menu(
+                    'SELECT DISTINCT userid, 1 FROM {groups_members} WHERE groupid ' . $grouptest,
+                    $params);
 
-            // Just filter out the grades belonging to other users, and proceed as if there were no groups
-            $strallowedusers = implode(',', array_keys($mygroupsusers));
-            $grades = array_filter($grades, create_function('$el', '$allowed = explode(",", "'.$strallowedusers.'"); return in_array($el->userid, $allowed);'));
+            // Filter out the grades belonging to other users, and proceed as if there were no groups
+            foreach ($grades as $key => $grade) {
+                if (!isset($mygroupsusers[$grade->userid])) {
+                    unset($grades[$key]);
+                }
+            }
 
-            // NO break; HERE, JUST GO AHEAD
+            // No break, fall through to the default case now we have filtered the $grades array.
             default:
             case NOGROUPS:
             // Single user mode
@@ -318,13 +378,13 @@ class block_quiz_results extends block_base {
 
             // Now grab all the users from the database
             $userids = array_merge(array_keys($best), array_keys($worst));
-            $users = get_records_list('user', 'id', implode(',',$userids), '', 'id, firstname, lastname, idnumber');
+            $users = $DB->get_records_list('user', 'id', $userids, '', 'id, firstname, lastname, idnumber');
 
             // Ready for output!
 
             $gradeformat = intval(empty($this->config->gradeformat) ? B_QUIZRESULTS_GRADE_FORMAT_PCT : $this->config->gradeformat);
 
-            if($this->instance->pagetype != 'mod-quiz-view') {
+            if(!$inquiz) {
                 // Don't show header and link to the quiz if we ARE at the quiz...
                 $this->content->text .= '<h1><a href="'.$CFG->wwwroot.'/mod/quiz/view.php?q='.$quizid.'">'.$quiz->name.'</a></h1>';
             }
@@ -337,10 +397,10 @@ class block_quiz_results extends block_base {
                 foreach($best as $userid => $gradeid) {
                     switch($nameformat) {
                         case B_QUIZRESULTS_NAME_FORMAT_ID:
-                            $thisname = $course->student.' '.$users[$userid]->idnumber;
+                            $thisname = get_string('user').' '.$users[$userid]->idnumber;
                         break;
                         case B_QUIZRESULTS_NAME_FORMAT_ANON:
-                            $thisname = $course->student;
+                            $thisname = get_string('user');
                         break;
                         default:
                         case B_QUIZRESULTS_NAME_FORMAT_FULL:
@@ -350,10 +410,10 @@ class block_quiz_results extends block_base {
                     $this->content->text .= '<tr><td>'.(++$rank).'.</td><td>'.$thisname.'</td><td>';
                     switch($gradeformat) {
                         case B_QUIZRESULTS_GRADE_FORMAT_FRA:
-                            $this->content->text .= (format_float($grades[$gradeid]->grade,$quiz->decimalpoints).'/'.$quiz->grade);
+                            $this->content->text .=  quiz_format_grade($quiz, $grades[$gradeid]->grade).'/'.$quiz->grade;
                         break;
                         case B_QUIZRESULTS_GRADE_FORMAT_ABS:
-                            $this->content->text .= format_float($grades[$gradeid]->grade,$quiz->decimalpoints);
+                            $this->content->text .= quiz_format_grade($quiz, $grades[$gradeid]->grade);
                         break;
                         default:
                         case B_QUIZRESULTS_GRADE_FORMAT_PCT:
@@ -378,10 +438,10 @@ class block_quiz_results extends block_base {
                 foreach($worst as $userid => $gradeid) {
                     switch($nameformat) {
                         case B_QUIZRESULTS_NAME_FORMAT_ID:
-                            $thisname = $course->student.' '.intval($users[$userid]->idnumber);
+                            $thisname = get_string('user').' '.$users[$userid]->idnumber;
                         break;
                         case B_QUIZRESULTS_NAME_FORMAT_ANON:
-                            $thisname = $course->student;
+                            $thisname = get_string('user');
                         break;
                         default:
                         case B_QUIZRESULTS_NAME_FORMAT_FULL:
@@ -391,10 +451,10 @@ class block_quiz_results extends block_base {
                     $this->content->text .= '<tr><td>'.(++$rank).'.</td><td>'.$thisname.'</td><td>';
                     switch($gradeformat) {
                         case B_QUIZRESULTS_GRADE_FORMAT_FRA:
-                            $this->content->text .= (format_float($grades[$gradeid]->grade,$quiz->decimalpoints).'/'.$quiz->grade);
+                            $this->content->text .= quiz_format_grade($quiz, $grades[$gradeid]->grade).'/'.$quiz->grade;
                         break;
                         case B_QUIZRESULTS_GRADE_FORMAT_ABS:
-                            $this->content->text .= format_float($grades[$gradeid]->grade,$quiz->decimalpoints);
+                            $this->content->text .= quiz_format_grade($quiz, $grades[$gradeid]->grade);
                         break;
                         default:
                         case B_QUIZRESULTS_GRADE_FORMAT_PCT:
@@ -416,4 +476,4 @@ class block_quiz_results extends block_base {
     }
 }
 
-?>
+
