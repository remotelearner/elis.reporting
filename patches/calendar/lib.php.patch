diff --git a/calendar/lib.php b/calendar/lib.php
index 7c575d4..c60e6b6 100644
--- a/calendar/lib.php
+++ b/calendar/lib.php
@@ -1,4 +1,4 @@
-<?php // $Id$
+<?php
 
 /////////////////////////////////////////////////////////////////////////////
 //                                                                         //
@@ -45,32 +45,69 @@ define('CALENDAR_DEFAULT_STARTING_WEEKDAY',   1);
 // This is a packed bitfield: day X is "weekend" if $field & (1 << X) is true
 // Default value = 65 = 64 + 1 = 2^6 + 2^0 = Saturday & Sunday
 define('CALENDAR_DEFAULT_WEEKEND',            65);
+define('CALENDAR_URL', $CFG->wwwroot.'/calendar/');
+define('CALENDAR_TF_24', '%H:%M');
+define('CALENDAR_TF_12', '%I:%M %p');
 
-// Fetch the correct values from admin settings/lang pack
-// If no such settings found, use the above defaults
-$firstday = isset($CFG->calendar_startwday) ? $CFG->calendar_startwday : get_string('firstdayofweek');
-if(!is_numeric($firstday)) {
-    define ('CALENDAR_STARTING_WEEKDAY', CALENDAR_DEFAULT_STARTING_WEEKDAY);
-}
-else {
-    define ('CALENDAR_STARTING_WEEKDAY', intval($firstday) % 7);
+define('CALENDAR_EVENT_GLOBAL', 1);
+define('CALENDAR_EVENT_COURSE', 2);
+define('CALENDAR_EVENT_GROUP', 4);
+define('CALENDAR_EVENT_USER', 8);
+
+/**
+ * CALENDAR_STARTING_WEEKDAY has since been deprecated please call calendar_get_starting_weekday() instead
+ * @deprecated
+ */
+define('CALENDAR_STARTING_WEEKDAY', CALENDAR_DEFAULT_STARTING_WEEKDAY);
+
+/**
+ * Return the days of the week
+ *
+ * @return array
+ */
+function calendar_get_days() {
+    return array('sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday');
 }
-define ('CALENDAR_UPCOMING_DAYS', isset($CFG->calendar_lookahead) ? intval($CFG->calendar_lookahead) : CALENDAR_DEFAULT_UPCOMING_LOOKAHEAD);
-define ('CALENDAR_UPCOMING_MAXEVENTS', isset($CFG->calendar_maxevents) ? intval($CFG->calendar_maxevents) : CALENDAR_DEFAULT_UPCOMING_MAXEVENTS);
-define ('CALENDAR_WEEKEND', isset($CFG->calendar_weekend) ? intval($CFG->calendar_weekend) : CALENDAR_DEFAULT_WEEKEND);
-define ('CALENDAR_URL', $CFG->wwwroot.'/calendar/');
-define ('CALENDAR_TF_24', '%H:%M');
-define ('CALENDAR_TF_12', '%I:%M %p');
 
-$CALENDARDAYS = array('sunday','monday','tuesday','wednesday','thursday','friday','saturday');
+/**
+ * Gets the first day of the week
+ *
+ * Used to be define('CALENDAR_STARTING_WEEKDAY', blah);
+ *
+ * @return int
+ */
+function calendar_get_starting_weekday() {
+    global $CFG;
 
+    if (isset($CFG->calendar_startwday)) {
+        $firstday = $CFG->calendar_startwday;
+    } else {
+        $firstday = get_string('firstdayofweek', 'langconfig');
+    }
 
+    if(!is_numeric($firstday)) {
+        return CALENDAR_DEFAULT_STARTING_WEEKDAY;
+    } else {
+        return intval($firstday) % 7;
+    }
+}
 
+/**
+ * Generates the HTML for a miniature calendar
+ *
+ * @global core_renderer $OUTPUT
+ * @param array $courses
+ * @param array $groups
+ * @param array $users
+ * @param int $cal_month
+ * @param int $cal_year
+ * @return string
+ */
 function calendar_get_mini($courses, $groups, $users, $cal_month = false, $cal_year = false) {
-    global $CFG, $USER;
+    global $CFG, $USER, $OUTPUT;
 
     $display = new stdClass;
-    $display->minwday = get_user_preferences('calendar_startwday', CALENDAR_STARTING_WEEKDAY);
+    $display->minwday = get_user_preferences('calendar_startwday', calendar_get_starting_weekday());
     $display->maxwday = $display->minwday + 6;
 
     $content = '';
@@ -81,20 +118,17 @@ function calendar_get_mini($courses, $groups, $users, $cal_month = false, $cal_y
             // Navigated to this month
             $date = $thisdate;
             $display->thismonth = true;
-        }
-        else {
+        } else {
             // Navigated to other month, let's do a nice trick and save us a lot of work...
             if(!checkdate($cal_month, 1, $cal_year)) {
                 $date = array('mday' => 1, 'mon' => $thisdate['mon'], 'year' => $thisdate['year']);
                 $display->thismonth = true;
-            }
-            else {
+            } else {
                 $date = array('mday' => 1, 'mon' => $cal_month, 'year' => $cal_year);
                 $display->thismonth = false;
             }
         }
-    }
-    else {
+    } else {
         $date = usergetdate(time()); // Date and time the user sees at his location
         $display->thismonth = true;
     }
@@ -158,11 +192,11 @@ function calendar_get_mini($courses, $groups, $users, $cal_month = false, $cal_y
     // will also set the $SESSION->cal_courses_shown variable to that one course. Otherwise, we 'd need to add extra
     // arguments to this function.
 
-    $morehref = '';
+    $hrefparams = array();
     if(!empty($courses)) {
         $courses = array_diff($courses, array(SITEID));
         if(count($courses) == 1) {
-            $morehref = '&amp;course='.reset($courses);
+            $hrefparams['course'] = reset($courses);
         }
     }
 
@@ -172,12 +206,11 @@ function calendar_get_mini($courses, $groups, $users, $cal_month = false, $cal_y
     calendar_events_by_day($events, $m, $y, $eventsbyday, $durationbyday, $typesbyday, $courses);
 
     //Accessibility: added summary and <abbr> elements.
-    ///global $CALENDARDAYS; appears to be broken.
-    $days_title = array('sunday','monday','tuesday','wednesday','thursday','friday','saturday');
+    $days_title = calendar_get_days();
 
     $summary = get_string('calendarheading', 'calendar', userdate(make_timestamp($y, $m), get_string('strftimemonthyear')));
     $summary = get_string('tabledata', 'access', $summary);
-    $content .= '<table class="minicalendar" summary="'.$summary.'">'; // Begin table
+    $content .= '<table class="minicalendar calendartable" summary="'.$summary.'">'; // Begin table
     $content .= '<tr class="weekdays">'; // Header row: day names
 
     // Print out the names of the weekdays
@@ -199,6 +232,11 @@ function calendar_get_mini($courses, $groups, $users, $cal_month = false, $cal_y
         $content .= '<td class="dayblank">&nbsp;</td>'."\n";
     }
 
+    $weekend = CALENDAR_DEFAULT_WEEKEND;
+    if (isset($CFG->calendar_weekend)) {
+        $weekend = intval($CFG->calendar_weekend);
+    }
+
     // Now display all the calendar
     for($day = 1; $day <= $display->maxdays; ++$day, ++$dayweek) {
         if($dayweek > $display->maxwday) {
@@ -209,44 +247,48 @@ function calendar_get_mini($courses, $groups, $users, $cal_month = false, $cal_y
 
         // Reset vars
         $cell = '';
-        if(CALENDAR_WEEKEND & (1 << ($dayweek % 7))) {
+        if ($weekend & (1 << ($dayweek % 7))) {
             // Weekend. This is true no matter what the exact range is.
             $class = 'weekend day';
-        }
-        else {
+        } else {
             // Normal working day.
             $class = 'day';
         }
 
         // Special visual fx if an event is defined
         if(isset($eventsbyday[$day])) {
-            $dayhref = calendar_get_link_href(CALENDAR_URL.'view.php?view=day'.$morehref.'&amp;', $day, $m, $y);
+            $class .= ' hasevent';
+            $hrefparams['view'] = 'day';
+            $dayhref = calendar_get_link_href(new moodle_url(CALENDAR_URL.'view.php', $hrefparams), $day, $m, $y);
 
-            // OverLib popup
             $popupcontent = '';
             foreach($eventsbyday[$day] as $eventid) {
                 if (!isset($events[$eventid])) {
                     continue;
                 }
                 $event = $events[$eventid];
+                $popupalt  = '';
+                $component = 'moodle';
                 if(!empty($event->modulename)) {
-                    $popupicon = $CFG->modpixpath.'/'.$event->modulename.'/icon.gif';
+                    $popupicon = 'icon';
                     $popupalt  = $event->modulename;
-
+                    $component = $event->modulename;
                 } else if ($event->courseid == SITEID) {                                // Site event
-                    $popupicon = $CFG->pixpath.'/c/site.gif';
-                    $popupalt  = '';
+                    $popupicon = 'c/site';
                 } else if ($event->courseid != 0 && $event->courseid != SITEID && $event->groupid == 0) {      // Course event
-                    $popupicon = $CFG->pixpath.'/c/course.gif';
-                    $popupalt  = '';
+                    $popupicon = 'c/course';
                 } else if ($event->groupid) {                                      // Group event
-                    $popupicon = $CFG->pixpath.'/c/group.gif';
-                    $popupalt  = '';
+                    $popupicon = 'c/group';
                 } else if ($event->userid) {                                       // User event
-                    $popupicon = $CFG->pixpath.'/c/user.gif';
-                    $popupalt  = '';
+                    $popupicon = 'c/user';
                 }
-                $popupcontent .= '<div><img class="icon" src="'.$popupicon.'" alt="'.$popupalt.'" /><a href="'.$dayhref.'#event_'.$event->id.'">'.format_string($event->name, true).'</a></div>';
+
+                $dayhref->set_anchor('event_'.$event->id);
+
+                $popupcontent .= html_writer::start_tag('div');
+                $popupcontent .= $OUTPUT->pix_icon($popupicon, $popupalt, $component);
+                $popupcontent .= html_writer::link($dayhref, format_string($event->name, true));
+                $popupcontent .= html_writer::end_tag('div');
             }
 
             //Accessibility: functionality moved to calendar_get_popup.
@@ -258,34 +300,31 @@ function calendar_get_mini($courses, $groups, $users, $cal_month = false, $cal_y
 
             // Class and cell content
             if(isset($typesbyday[$day]['startglobal'])) {
-                $class .= ' event_global';
-            }
-            else if(isset($typesbyday[$day]['startcourse'])) {
-                $class .= ' event_course';
-            }
-            else if(isset($typesbyday[$day]['startgroup'])) {
-                $class .= ' event_group';
-            }
-            else if(isset($typesbyday[$day]['startuser'])) {
-                $class .= ' event_user';
-            }
-            $cell = '<a href="'.$dayhref.'" '.$popup.'>'.$day.'</a>';
-        }
-        else {
+                $class .= ' calendar_event_global';
+            } else if(isset($typesbyday[$day]['startcourse'])) {
+                $class .= ' calendar_event_course';
+            } else if(isset($typesbyday[$day]['startgroup'])) {
+                $class .= ' calendar_event_group';
+            } else if(isset($typesbyday[$day]['startuser'])) {
+                $class .= ' calendar_event_user';
+            }
+            $cell = '<a href="'.(string)$dayhref.'" '.$popup.'>'.$day.'</a>';
+        } else {
             $cell = $day;
         }
 
-        if(isset($typesbyday[$day]['durationglobal'])) {
-            $class .= ' duration_global';
-        }
-        else if(isset($typesbyday[$day]['durationcourse'])) {
-            $class .= ' duration_course';
+        $durationclass = false;
+        if (isset($typesbyday[$day]['durationglobal'])) {
+            $durationclass = ' duration_global';
+        } else if(isset($typesbyday[$day]['durationcourse'])) {
+            $durationclass = ' duration_course';
+        } else if(isset($typesbyday[$day]['durationgroup'])) {
+            $durationclass = ' duration_group';
+        } else if(isset($typesbyday[$day]['durationuser'])) {
+            $durationclass = ' duration_user';
         }
-        else if(isset($typesbyday[$day]['durationgroup'])) {
-            $class .= ' duration_group';
-        }
-        else if(isset($typesbyday[$day]['durationuser'])) {
-            $class .= ' duration_user';
+        if ($durationclass) {
+            $class .= ' duration '.$durationclass;
         }
 
         // If event has a class set then add it to the table day <td> tag
@@ -338,13 +377,18 @@ function calendar_get_mini($courses, $groups, $users, $cal_month = false, $cal_y
 /**
  * calendar_get_popup, called at multiple points in from calendar_get_mini.
  *        Copied and modified from calendar_get_mini.
- * @uses OverLib popup.
+ * @global moodle_page $PAGE
  * @param $is_today bool, false except when called on the current day.
  * @param $event_timestart mixed, $events[$eventid]->timestart, OR false if there are no events.
  * @param $popupcontent string.
  * @return $popup string, contains onmousover and onmouseout events.
  */
 function calendar_get_popup($is_today, $event_timestart, $popupcontent='') {
+    global $PAGE;
+    static $popupcount;
+    if ($popupcount === null) {
+        $popupcount = 1;
+    }
     $popupcaption = '';
     if($is_today) {
         $popupcaption = get_string('today', 'calendar').' ';
@@ -356,14 +400,15 @@ function calendar_get_popup($is_today, $event_timestart, $popupcontent='') {
     } else {
         $popupcaption .= get_string('eventsfor', 'calendar', userdate($event_timestart, get_string('strftimedayshort')));
     }
-    $popupcontent = str_replace("'", "\'", htmlspecialchars($popupcontent));
-    $popupcaption = str_replace("'", "\'", htmlspecialchars($popupcaption));
-    $popup = 'onmouseover="return overlib(\''.$popupcontent.'\', CAPTION, \''.$popupcaption.'\');" onmouseout="return nd();"';
-    return $popup;
+    $id = 'calendar_tooltip_'.$popupcount;
+    $PAGE->requires->yui_module('moodle-calendar-eventmanager', 'M.core_calendar.add_event', array(array('eventId'=>$id,'title'=>$popupcaption, 'content'=>$popupcontent)));
+
+    $popupcount++;
+    return 'id="'.$id.'"';
 }
 
 function calendar_get_upcoming($courses, $groups, $users, $daysinfuture, $maxevents, $fromtime=0) {
-    global $CFG, $COURSE;
+    global $CFG, $COURSE, $DB;
 
     $display = new stdClass;
     $display->range = $daysinfuture; // How many days in the future we 'll look
@@ -396,11 +441,11 @@ function calendar_get_upcoming($courses, $groups, $users, $daysinfuture, $maxeve
     // will also set the $SESSION->cal_courses_shown variable to that one course. Otherwise, we 'd need to add extra
     // arguments to this function.
 
-    $morehref = '';
+    $hrefparams = array();
     if(!empty($courses)) {
         $courses = array_diff($courses, array(SITEID));
         if(count($courses) == 1) {
-            $morehref = '&amp;course='.reset($courses);
+            $hrefparams['course'] = reset($courses);
         }
     }
 
@@ -428,10 +473,13 @@ function calendar_get_upcoming($courses, $groups, $users, $daysinfuture, $maxeve
                     }
                 }
                 if ($event->modulename == 'assignment'){
+                    // create calendar_event to test edit_event capability
+                    // this new event will also prevent double creation of calendar_event object
+                    $checkevent = new calendar_event($event);
                     // TODO: rewrite this hack somehow
-                    if (!calendar_edit_event_allowed($event)){ // cannot manage entries, eg. student  
-                        if(!$assignment = get_record('assignment','id',$event->instance)){
-                            // error("assignment ID was incorrect");
+                    if (!calendar_edit_event_allowed($checkevent)){ // cannot manage entries, eg. student
+                        if (!$assignment = $DB->get_record('assignment', array('id'=>$event->instance))) {
+                            // print_error("invalidid", 'assignment');
                             continue;
                         }
                         // assign assignment to assignment object to use hidden_is_hidden method
@@ -456,7 +504,7 @@ function calendar_get_upcoming($courses, $groups, $users, $daysinfuture, $maxeve
                 break;
             }
 
-            $event->time = calendar_format_event_time($event, $now, $morehref);
+            $event->time = calendar_format_event_time($event, $now, $hrefparams);
             $output[] = $event;
             ++$processed;
         }
@@ -465,7 +513,7 @@ function calendar_get_upcoming($courses, $groups, $users, $daysinfuture, $maxeve
 }
 
 function calendar_add_event_metadata($event) {
-    global $CFG;
+    global $CFG, $OUTPUT;
 
     //Support multilang in event->name
     $event->name = format_string($event->name,true);
@@ -481,96 +529,58 @@ function calendar_add_event_metadata($event) {
         }
 
         $modulename = get_string('modulename', $event->modulename);
+        if (get_string_manager()->string_exists($event->eventtype, $event->modulename)) {
+            // will be used as alt text if the event icon
         $eventtype = get_string($event->eventtype, $event->modulename);
-        $icon = $CFG->modpixpath.'/'.$event->modulename.'/icon.gif';
+        } else {
+            $eventtype = '';
+        }
+        $icon = $OUTPUT->pix_url('icon', $event->modulename) . '';
+
+        $context = get_context_instance(CONTEXT_COURSE, $module->course);
+        $fullname = format_string($coursecache[$module->course]->fullname, true, array('context' => $context));
 
         $event->icon = '<img height="16" width="16" src="'.$icon.'" alt="'.$eventtype.'" title="'.$modulename.'" style="vertical-align: middle;" />';
         $event->referer = '<a href="'.$CFG->wwwroot.'/mod/'.$event->modulename.'/view.php?id='.$module->id.'">'.$event->name.'</a>';
-        $event->courselink = '<a href="'.$CFG->wwwroot.'/course/view.php?id='.$module->course.'">'.$coursecache[$module->course]->fullname.'</a>';
+        $event->courselink = '<a href="'.$CFG->wwwroot.'/course/view.php?id='.$module->course.'">'.$fullname.'</a>';
         $event->cmid = $module->id;
 
 
     } else if($event->courseid == SITEID) {                              // Site event
-        $event->icon = '<img height="16" width="16" src="'.$CFG->pixpath.'/c/site.gif" alt="'.get_string('globalevent', 'calendar').'" style="vertical-align: middle;" />';
-        $event->cssclass = 'event_global';
+        $event->icon = '<img height="16" width="16" src="'.$OUTPUT->pix_url('c/site') . '" alt="'.get_string('globalevent', 'calendar').'" style="vertical-align: middle;" />';
+        $event->cssclass = 'calendar_event_global';
     } else if($event->courseid != 0 && $event->courseid != SITEID && $event->groupid == 0) {          // Course event
         calendar_get_course_cached($coursecache, $event->courseid);
-        $event->icon = '<img height="16" width="16" src="'.$CFG->pixpath.'/c/course.gif" alt="'.get_string('courseevent', 'calendar').'" style="vertical-align: middle;" />';
-        $event->courselink = '<a href="'.$CFG->wwwroot.'/course/view.php?id='.$event->courseid.'">'.$coursecache[$event->courseid]->fullname.'</a>';
-        $event->cssclass = 'event_course';
+
+        $context = get_context_instance(CONTEXT_COURSE, $event->courseid);
+        $fullname = format_string($coursecache[$event->courseid]->fullname, true, array('context' => $context));
+
+        $event->icon = '<img height="16" width="16" src="'.$OUTPUT->pix_url('c/course') . '" alt="'.get_string('courseevent', 'calendar').'" style="vertical-align: middle;" />';
+        $event->courselink = '<a href="'.$CFG->wwwroot.'/course/view.php?id='.$event->courseid.'">'.$fullname.'</a>';
+        $event->cssclass = 'calendar_event_course';
     } else if ($event->groupid) {                                    // Group event
-        $event->icon = '<img height="16" width="16" src="'.$CFG->pixpath.'/c/group.gif" alt="'.get_string('groupevent', 'calendar').'" style="vertical-align: middle;" />';
-        $event->cssclass = 'event_group';
+        $event->icon = '<img height="16" width="16" src="'.$OUTPUT->pix_url('c/group') . '" alt="'.get_string('groupevent', 'calendar').'" style="vertical-align: middle;" />';
+        $event->cssclass = 'calendar_event_group';
     } else if($event->userid) {                                      // User event
-        $event->icon = '<img height="16" width="16" src="'.$CFG->pixpath.'/c/user.gif" alt="'.get_string('userevent', 'calendar').'" style="vertical-align: middle;" />';
-        $event->cssclass = 'event_user';
+        $event->icon = '<img height="16" width="16" src="'.$OUTPUT->pix_url('c/user') . '" alt="'.get_string('userevent', 'calendar').'" style="vertical-align: middle;" />';
+        $event->cssclass = 'calendar_event_user';
     }
     return $event;
 }
 
-function calendar_print_event($event) {
-    global $CFG, $USER;
-
-    static $strftimetime;
-
-    $event = calendar_add_event_metadata($event);
-    echo '<a name="event_'.$event->id.'"></a><table class="event" cellspacing="0">';
-    echo '<tr><td class="picture">';
-    if (!empty($event->icon)) {
-        echo $event->icon;
-    } else {
-        print_spacer(16,16);
-    }
-    echo '</td>';
-    echo '<td class="topic">';
-
-    if (!empty($event->referer)) {
-        echo '<div class="referer">'.$event->referer.'</div>';
-    } else {
-        echo '<div class="name">'.$event->name."</div>";
-    }
-    if (!empty($event->courselink)) {
-        echo '<div class="course">'.$event->courselink.' </div>';
-    }
-    if (!empty($event->time)) {
-        echo '<span class="date">'.$event->time.'</span>';
-    } else {
-        echo '<span class="date">'.calendar_time_representation($event->timestart).'</span>';
-    }
-
-    echo '</td></tr>';
-    echo '<tr><td class="side">&nbsp;</td>';
-    if (isset($event->cssclass)) {
-        echo '<td class="description '.$event->cssclass.'">';
-    } else {
-        echo '<td class="description">'; 
-    }
-    echo format_text($event->description, FORMAT_HTML);
-    if (calendar_edit_event_allowed($event)) {
-        echo '<div class="commands">';
-        $calendarcourseid = '';
-        if (!empty($event->calendarcourseid)) {
-            $calendarcourseid = '&amp;course='.$event->calendarcourseid;
-        }
-        if (empty($event->cmid)) {
-            $editlink   = CALENDAR_URL.'event.php?action=edit&amp;id='.$event->id.$calendarcourseid;
-            $deletelink = CALENDAR_URL.'event.php?action=delete&amp;id='.$event->id.$calendarcourseid;
-        } else {
-            $editlink   = $CFG->wwwroot.'/course/mod.php?update='.$event->cmid.'&amp;return=true&amp;sesskey='.$USER->sesskey;
-            $deletelink = ''; // deleting activities directly from calendar is dangerous/confusing - see MDL-11843
-        }
-        echo ' <a href="'.$editlink.'"><img
-                  src="'.$CFG->pixpath.'/t/edit.gif" alt="'.get_string('tt_editevent', 'calendar').'"
-                  title="'.get_string('tt_editevent', 'calendar').'" /></a>';
-        if ($deletelink) {
-            echo ' <a href="'.$deletelink.'"><img
-                      src="'.$CFG->pixpath.'/t/delete.gif" alt="'.get_string('tt_deleteevent', 'calendar').'"
-                      title="'.get_string('tt_deleteevent', 'calendar').'" /></a>';
-        }
-        echo '</div>';
-    }
-    echo '</td></tr></table>';
-
+/**
+ * Prints a calendar event
+ *
+ * @deprecated 2.0
+ */
+function calendar_print_event($event, $showactions=true) {
+    global $CFG, $USER, $OUTPUT, $PAGE;
+    debugging('calendar_print_event is deprecated please update your code', DEBUG_DEVELOPER);
+    $renderer = $PAGE->get_renderer('core_calendar');
+    if (!($event instanceof calendar_event)) {
+        $event = new calendar_event($event);
+    }
+    echo $renderer->event($event);
 }
 
 /**
@@ -586,6 +596,8 @@ function calendar_print_event($event) {
  * @return array of selected events or an empty array if there aren't any (or there was an error)
  */
 function calendar_get_events($tstart, $tend, $users, $groups, $courses, $withduration=true, $ignorehidden=true) {
+    global $DB;
+
     $whereclause = '';
     // Quick test
     if(is_bool($users) && is_bool($groups) && is_bool($courses)) {
@@ -596,18 +608,15 @@ function calendar_get_events($tstart, $tend, $users, $groups, $courses, $withdur
         // Events from a number of users
         if(!empty($whereclause)) $whereclause .= ' OR';
         $whereclause .= ' (userid IN ('.implode(',', $users).') AND courseid = 0 AND groupid = 0)';
-    }
-    else if(is_numeric($users)) {
+    } else if(is_numeric($users)) {
         // Events from one user
         if(!empty($whereclause)) $whereclause .= ' OR';
         $whereclause .= ' (userid = '.$users.' AND courseid = 0 AND groupid = 0)';
-    }
-    else if($users === true) {
+    } else if($users === true) {
         // Events from ALL users
         if(!empty($whereclause)) $whereclause .= ' OR';
         $whereclause .= ' (userid != 0 AND courseid = 0 AND groupid = 0)';
-    }
-    else if($users === false) {
+    } else if($users === false) {
         // No user at all, do nothing
     }
 
@@ -615,38 +624,27 @@ function calendar_get_events($tstart, $tend, $users, $groups, $courses, $withdur
         // Events from a number of groups
         if(!empty($whereclause)) $whereclause .= ' OR';
         $whereclause .= ' groupid IN ('.implode(',', $groups).')';
-    }
-    else if(is_numeric($groups)) {
+    } else if(is_numeric($groups)) {
         // Events from one group
         if(!empty($whereclause)) $whereclause .= ' OR ';
         $whereclause .= ' groupid = '.$groups;
-    }
-    else if($groups === true) {
+    } else if($groups === true) {
         // Events from ALL groups
         if(!empty($whereclause)) $whereclause .= ' OR ';
         $whereclause .= ' groupid != 0';
     }
     // boolean false (no groups at all): we don't need to do anything
 
-    if(is_array($courses)) {
-        // A number of courses (maybe none at all!)
-        if(!empty($courses)) {
+    if(is_array($courses) && !empty($courses)) {
             if(!empty($whereclause)) {
                 $whereclause .= ' OR';
             }
             $whereclause .= ' (groupid = 0 AND courseid IN ('.implode(',', $courses).'))';
-        }
-        else {
-            // This means NO courses, not that we don't care!
-            // No need to do anything
-        }
-    }
-    else if(is_numeric($courses)) {
+    } else if(is_numeric($courses)) {
         // One course
         if(!empty($whereclause)) $whereclause .= ' OR';
         $whereclause .= ' (groupid = 0 AND courseid = '.$courses.')';
-    }
-    else if($courses === true) {
+    } else if ($courses === true) {
         // Events from ALL courses
         if(!empty($whereclause)) $whereclause .= ' OR';
         $whereclause .= ' (groupid = 0 AND courseid != 0)';
@@ -679,7 +677,7 @@ function calendar_get_events($tstart, $tend, $users, $groups, $courses, $withdur
         $whereclause .= ' AND visible = 1';
     }
 
-    $events = get_records_select('event', $whereclause, 'timestart');
+    $events = $DB->get_records_select('event', $whereclause, null, 'timestart');
     if ($events === false) {
         $events = array();
     }
@@ -687,7 +685,7 @@ function calendar_get_events($tstart, $tend, $users, $groups, $courses, $withdur
 }
 
 function calendar_top_controls($type, $data) {
-    global $CFG, $CALENDARDAYS, $THEME;
+    global $CFG;
     $content = '';
     if(!isset($data['d'])) {
         $data['d'] = 1;
@@ -721,139 +719,177 @@ function calendar_top_controls($type, $data) {
             list($nextmonth, $nextyear) = calendar_add_month($data['m'], $data['y']);
             $nextlink = calendar_get_link_next(get_string('monthnext', 'access'), 'index.php?', 0, $nextmonth, $nextyear, $accesshide=true);
             $prevlink = calendar_get_link_previous(get_string('monthprev', 'access'), 'index.php?', 0, $prevmonth, $prevyear, true);
-            $content .= "\n".'<div class="calendar-controls">'. $prevlink;
-            $content .= '<span class="hide"> | </span><span class="current"><a href="'.calendar_get_link_href(CALENDAR_URL.'view.php?view=month'.$courseid.'&amp;', 1, $data['m'], $data['y']).'">'.userdate($time, get_string('strftimemonthyear')).'</a></span>';
-            $content .= '<span class="hide"> | </span>'. $nextlink ."\n";
-            $content .= "<span class=\"clearer\"><!-- --></span></div>\n";
+
+            $calendarlink = calendar_get_link_href(new moodle_url(CALENDAR_URL.'view.php', array('view'=>'month')), 1, $data['m'], $data['y']);
+            if (!empty($data['id'])) {
+                $calendarlink->param('course', $data['id']);
+            }
+
+            if (right_to_left()) {
+                $left = $nextlink;
+                $right = $prevlink;
+            } else {
+                $left = $prevlink;
+                $right = $nextlink;
+            }
+
+            $content .= html_writer::start_tag('div', array('class'=>'calendar-controls'));
+            $content .= $left.'<span class="hide"> | </span>';
+            $content .= html_writer::tag('span', html_writer::link($calendarlink, userdate($time, get_string('strftimemonthyear')), array('title'=>get_string('monththis','calendar'))), array('class'=>'current'));
+            $content .= '<span class="hide"> | </span>'. $right;
+            $content .= "<span class=\"clearer\"><!-- --></span>\n";
+            $content .= html_writer::end_tag('div');
+
         break;
         case 'course':
             list($prevmonth, $prevyear) = calendar_sub_month($data['m'], $data['y']);
             list($nextmonth, $nextyear) = calendar_add_month($data['m'], $data['y']);
             $nextlink = calendar_get_link_next(get_string('monthnext', 'access'), 'view.php?id='.$data['id'].'&amp;', 0, $nextmonth, $nextyear, $accesshide=true);
             $prevlink = calendar_get_link_previous(get_string('monthprev', 'access'), 'view.php?id='.$data['id'].'&amp;', 0, $prevmonth, $prevyear, true);
-            $content .= "\n".'<div class="calendar-controls">'. $prevlink;
-            $content .= '<span class="hide"> | </span><span class="current"><a href="'.calendar_get_link_href(CALENDAR_URL.'view.php?view=month'.$courseid.'&amp;', 1, $data['m'], $data['y']).'">'.userdate($time, get_string('strftimemonthyear')).'</a></span>';
-            $content .= '<span class="hide"> | </span>'. $nextlink ."\n";
-            $content .= "<span class=\"clearer\"><!-- --></span></div>\n";
+
+            $calendarlink = calendar_get_link_href(new moodle_url(CALENDAR_URL.'view.php', array('view'=>'month')), 1, $data['m'], $data['y']);
+            if (!empty($data['id'])) {
+                $calendarlink->param('course', $data['id']);
+            }
+
+            if (right_to_left()) {
+                $left = $nextlink;
+                $right = $prevlink;
+            } else {
+                $left = $prevlink;
+                $right = $nextlink;
+            }
+
+            $content .= html_writer::start_tag('div', array('class'=>'calendar-controls'));
+            $content .= $left.'<span class="hide"> | </span>';
+            $content .= html_writer::tag('span', html_writer::link($calendarlink, userdate($time, get_string('strftimemonthyear')), array('title'=>get_string('monththis','calendar'))), array('class'=>'current'));
+            $content .= '<span class="hide"> | </span>'. $right;
+            $content .= "<span class=\"clearer\"><!-- --></span>";
+            $content .= html_writer::end_tag('div');
         break;
         case 'upcoming':
-            $content .= '<div style="text-align: center;"><a href="'.CALENDAR_URL.'view.php?view=upcoming"'.$courseid.'>'.userdate($time, get_string('strftimemonthyear'))."</a></div>\n";
+            $calendarlink = calendar_get_link_href(new moodle_url(CALENDAR_URL.'view.php', array('view'=>'upcoming')), 1, $data['m'], $data['y']);
+            if (!empty($data['id'])) {
+                $calendarlink->param('course', $data['id']);
+            }
+            $calendarlink = html_writer::link($calendarlink, userdate($time, get_string('strftimemonthyear')));
+            $content .= html_writer::tag('div', $calendarlink, array('class'=>'centered'));
         break;
         case 'display':
-            $content .= '<div style="text-align: center;"><a href="'.calendar_get_link_href(CALENDAR_URL.'view.php?view=month'.$courseid.'&amp;', 1, $data['m'], $data['y']).'">'.userdate($time, get_string('strftimemonthyear'))."</a></div>\n";
+            $calendarlink = calendar_get_link_href(new moodle_url(CALENDAR_URL.'view.php', array('view'=>'month')), 1, $data['m'], $data['y']);
+            if (!empty($data['id'])) {
+                $calendarlink->param('course', $data['id']);
+            }
+            $calendarlink = html_writer::link($calendarlink, userdate($time, get_string('strftimemonthyear')));
+            $content .= html_writer::tag('h3', $calendarlink);
         break;
         case 'month':
             list($prevmonth, $prevyear) = calendar_sub_month($data['m'], $data['y']);
             list($nextmonth, $nextyear) = calendar_add_month($data['m'], $data['y']);
             $prevdate = make_timestamp($prevyear, $prevmonth, 1);
             $nextdate = make_timestamp($nextyear, $nextmonth, 1);
-            $content .= "\n".'<div class="calendar-controls">';
-            $content .= calendar_get_link_previous(userdate($prevdate, get_string('strftimemonthyear')), 'view.php?view=month'.$courseid.'&amp;', 1, $prevmonth, $prevyear);
-            $content .= '<span class="hide"> | </span><span class="current">'.userdate($time, get_string('strftimemonthyear'))."</span>\n";
-            $content .= '<span class="hide"> | </span>'.calendar_get_link_next(userdate($nextdate, get_string('strftimemonthyear')), 'view.php?view=month'.$courseid.'&amp;', 1, $nextmonth, $nextyear);
-            $content .= "<span class=\"clearer\"><!-- --></span></div>\n";
+            $prevlink = calendar_get_link_previous(userdate($prevdate, get_string('strftimemonthyear')), 'view.php?view=month'.$courseid.'&amp;', 1, $prevmonth, $prevyear);
+            $nextlink = calendar_get_link_next(userdate($nextdate, get_string('strftimemonthyear')), 'view.php?view=month'.$courseid.'&amp;', 1, $nextmonth, $nextyear);
+
+            if (right_to_left()) {
+                $left = $nextlink;
+                $right = $prevlink;
+            } else {
+                $left = $prevlink;
+                $right = $nextlink;
+            }
+
+            $content .= html_writer::start_tag('div', array('class'=>'calendar-controls'));
+            $content .= $left . '<span class="hide"> | </span><h1 class="current">'.userdate($time, get_string('strftimemonthyear'))."</h1>";
+            $content .= '<span class="hide"> | </span>' . $right;
+            $content .= '<span class="clearer"><!-- --></span>';
+            $content .= html_writer::end_tag('div')."\n";
         break;
         case 'day':
+            $days = calendar_get_days();
             $data['d'] = $date['mday']; // Just for convenience
             $prevdate = usergetdate(make_timestamp($data['y'], $data['m'], $data['d'] - 1));
             $nextdate = usergetdate(make_timestamp($data['y'], $data['m'], $data['d'] + 1));
-            $prevname = calendar_wday_name($CALENDARDAYS[$prevdate['wday']]);
-            $nextname = calendar_wday_name($CALENDARDAYS[$nextdate['wday']]);
-            $content .= "\n".'<div class="calendar-controls">';
-            $content .= calendar_get_link_previous($prevname, 'view.php?view=day'.$courseid.'&amp;', $prevdate['mday'], $prevdate['mon'], $prevdate['year']);
-
-            // Get the format string
-            $text = get_string('strftimedaydate');
-            /*
-            // Regexp hackery to make a link out of the month/year part
-            $text = ereg_replace('(%B.+%Y|%Y.+%B|%Y.+%m[^ ]+)', '<a href="'.calendar_get_link_href('view.php?view=month&amp;', 1, $data['m'], $data['y']).'">\\1</a>', $text);
-            $text = ereg_replace('(F.+Y|Y.+F|Y.+m[^ ]+)', '<a href="'.calendar_get_link_href('view.php?view=month&amp;', 1, $data['m'], $data['y']).'">\\1</a>', $text);
-            */
-            // Replace with actual values and lose any day leading zero
-            $text = userdate($time, $text);
-            // Print the actual thing
-            $content .= '<span class="hide"> | </span><span class="current">'.$text.'</span>';
+            $prevname = calendar_wday_name($days[$prevdate['wday']]);
+            $nextname = calendar_wday_name($days[$nextdate['wday']]);
+            $prevlink = calendar_get_link_previous($prevname, 'view.php?view=day'.$courseid.'&amp;', $prevdate['mday'], $prevdate['mon'], $prevdate['year']);
+            $nextlink = calendar_get_link_next($nextname, 'view.php?view=day'.$courseid.'&amp;', $nextdate['mday'], $nextdate['mon'], $nextdate['year']);
+
+            if (right_to_left()) {
+                $left = $nextlink;
+                $right = $prevlink;
+            } else {
+                $left = $prevlink;
+                $right = $nextlink;
+            }
+
+            $content .= html_writer::start_tag('div', array('class'=>'calendar-controls'));
+            $content .= $left;
+            $content .= '<span class="hide"> | </span><span class="current">'.userdate($time, get_string('strftimedaydate')).'</span>';
+            $content .= '<span class="hide"> | </span>'. $right;
+            $content .= "<span class=\"clearer\"><!-- --></span>";
+            $content .= html_writer::end_tag('div')."\n";
 
-            $content .= '<span class="hide"> | </span>'. calendar_get_link_next($nextname, 'view.php?view=day'.$courseid.'&amp;', $nextdate['mday'], $nextdate['mon'], $nextdate['year']);
-            $content .= "<span class=\"clearer\"><!-- --></span></div>\n";
         break;
     }
     return $content;
 }
 
-function calendar_filter_controls($type, $vars = NULL, $course = NULL, $courses = NULL) {
-    global $CFG, $SESSION, $USER;
+function calendar_filter_controls(moodle_url $returnurl) {
+    global $CFG, $USER, $OUTPUT;
 
     $groupevents = true;
-    $getvars = '';
 
     $id = optional_param( 'id',0,PARAM_INT );
 
-    switch($type) {
-        case 'event':
-        case 'upcoming':
-        case 'day':
-        case 'month':
-            $getvars = '&amp;from='.$type;
-        break;
-        case 'course':
-            if ($id > 0) {
-                $getvars = '&amp;from=course&amp;id='.$id;
-            } else {
-                $getvars = '&amp;from=course';
-            }
-            if (isset($course->groupmode) and $course->groupmode == NOGROUPS and $course->groupmodeforce) {
-                $groupevents = false;
-            }
-        break;
-    }
-
-    if (!empty($vars)) {
-        $getvars .= '&amp;'.$vars;
-    }
+    $seturl = new moodle_url('/calendar/set.php', array('return' => base64_encode($returnurl->out(false)), 'sesskey'=>sesskey()));
 
     $content = '<table>';
-
     $content .= '<tr>';
-    if($SESSION->cal_show_global) {
-        $content .= '<td class="eventskey event_global" style="width: 11px;"><img src="'.$CFG->pixpath.'/t/hide.gif" class="iconsmall" alt="'.get_string('hide').'" title="'.get_string('tt_hideglobal', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".CALENDAR_URL.'set.php?var=showglobal'.$getvars."'".'" /></td>';
-        $content .= '<td><a href="'.CALENDAR_URL.'set.php?var=showglobal'.$getvars.'" title="'.get_string('tt_hideglobal', 'calendar').'">'.get_string('global', 'calendar').'</a></td>'."\n";
+
+    $seturl->param('var', 'showglobal');
+    if (calendar_show_event_type(CALENDAR_EVENT_GLOBAL)) {
+        $content .= '<td class="eventskey calendar_event_global" style="width: 11px;"><img src="'.$OUTPUT->pix_url('t/hide') . '" class="iconsmall" alt="'.get_string('hide').'" title="'.get_string('tt_hideglobal', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".$seturl."'".'" /></td>';
+        $content .= '<td><a href="'.$seturl.'" title="'.get_string('tt_hideglobal', 'calendar').'">'.get_string('global', 'calendar').'</a></td>'."\n";
     } else {
-        $content .= '<td style="width: 11px;"><img src="'.$CFG->pixpath.'/t/show.gif" class="iconsmall" alt="'.get_string('show').'" title="'.get_string('tt_showglobal', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".CALENDAR_URL.'set.php?var=showglobal'.$getvars."'".'" /></td>';
-        $content .= '<td><a href="'.CALENDAR_URL.'set.php?var=showglobal'.$getvars.'" title="'.get_string('tt_showglobal', 'calendar').'">'.get_string('global', 'calendar').'</a></td>'."\n";
+        $content .= '<td style="width: 11px;"><img src="'.$OUTPUT->pix_url('t/show') . '" class="iconsmall" alt="'.get_string('show').'" title="'.get_string('tt_showglobal', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".$seturl."'".'" /></td>';
+        $content .= '<td><a href="'.$seturl.'" title="'.get_string('tt_showglobal', 'calendar').'">'.get_string('global', 'calendar').'</a></td>'."\n";
     }
-    if($SESSION->cal_show_course) {
-        $content .= '<td class="eventskey event_course" style="width: 11px;"><img src="'.$CFG->pixpath.'/t/hide.gif" class="iconsmall" alt="'.get_string('hide').'" title="'.get_string('tt_hidecourse', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".CALENDAR_URL.'set.php?var=showcourses'.$getvars."'".'" /></td>';
-        $content .= '<td><a href="'.CALENDAR_URL.'set.php?var=showcourses'.$getvars.'" title="'.get_string('tt_hidecourse', 'calendar').'">'.get_string('course', 'calendar').'</a></td>'."\n";
-    } else {
-        $content .= '<td style="width: 11px;"><img src="'.$CFG->pixpath.'/t/show.gif" class="iconsmall" alt="'.get_string('hide').'" title="'.get_string('tt_showcourse', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".CALENDAR_URL.'set.php?var=showcourses'.$getvars."'".'" /></td>';
-        $content .= '<td><a href="'.CALENDAR_URL.'set.php?var=showcourses'.$getvars.'" title="'.get_string('tt_showcourse', 'calendar').'">'.get_string('course', 'calendar').'</a></td>'."\n";
     
+    $seturl->param('var', 'showcourses');
+    if (calendar_show_event_type(CALENDAR_EVENT_COURSE)) {
+        $content .= '<td class="eventskey calendar_event_course" style="width: 11px;"><img src="'.$OUTPUT->pix_url('t/hide') . '" class="iconsmall" alt="'.get_string('hide').'" title="'.get_string('tt_hidecourse', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".$seturl."'".'" /></td>';
+        $content .= '<td><a href="'.$seturl.'" title="'.get_string('tt_hidecourse', 'calendar').'">'.get_string('course', 'calendar').'</a></td>'."\n";
+    } else {
+        $content .= '<td style="width: 11px;"><img src="'.$OUTPUT->pix_url('t/show') . '" class="iconsmall" alt="'.get_string('hide').'" title="'.get_string('tt_showcourse', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".$seturl."'".'" /></td>';
+        $content .= '<td><a href="'.$seturl.'" title="'.get_string('tt_showcourse', 'calendar').'">'.get_string('course', 'calendar').'</a></td>'."\n";
     }
 
-
-    if(!empty($USER->id) && !isguest()) {
+    if (isloggedin() && !isguestuser()) {
         $content .= "</tr>\n<tr>";
 
-        if($groupevents) {
+        if ($groupevents) {
             // This course MIGHT have group events defined, so show the filter
-            if($SESSION->cal_show_groups) {
-                $content .= '<td class="eventskey event_group" style="width: 11px;"><img src="'.$CFG->pixpath.'/t/hide.gif" class="iconsmall" alt="'.get_string('hide').'" title="'.get_string('tt_hidegroups', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".CALENDAR_URL.'set.php?var=showgroups'.$getvars."'".'" /></td>';
-                $content .= '<td><a href="'.CALENDAR_URL.'set.php?var=showgroups'.$getvars.'" title="'.get_string('tt_hidegroups', 'calendar').'">'.get_string('group', 'calendar').'</a></td>'."\n";
+            $seturl->param('var', 'showgroups');
+            if (calendar_show_event_type(CALENDAR_EVENT_GROUP)) {
+                $content .= '<td class="eventskey calendar_event_group" style="width: 11px;"><img src="'.$OUTPUT->pix_url('t/hide') . '" class="iconsmall" alt="'.get_string('hide').'" title="'.get_string('tt_hidegroups', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".$seturl."'".'" /></td>';
+                $content .= '<td><a href="'.$seturl.'" title="'.get_string('tt_hidegroups', 'calendar').'">'.get_string('group', 'calendar').'</a></td>'."\n";
             } else {
-                $content .= '<td style="width: 11px;"><img src="'.$CFG->pixpath.'/t/show.gif" class="iconsmall" alt="'.get_string('show').'" title="'.get_string('tt_showgroups', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".CALENDAR_URL.'set.php?var=showgroups'.$getvars."'".'" /></td>';
-                $content .= '<td><a href="'.CALENDAR_URL.'set.php?var=showgroups'.$getvars.'" title="'.get_string('tt_showgroups', 'calendar').'">'.get_string('group', 'calendar').'</a></td>'."\n";
+                $content .= '<td style="width: 11px;"><img src="'.$OUTPUT->pix_url('t/show') . '" class="iconsmall" alt="'.get_string('show').'" title="'.get_string('tt_showgroups', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".$seturl."'".'" /></td>';
+                $content .= '<td><a href="'.$seturl.'" title="'.get_string('tt_showgroups', 'calendar').'">'.get_string('group', 'calendar').'</a></td>'."\n";
             }
         } else {
             // This course CANNOT have group events, so lose the filter
             $content .= '<td style="width: 11px;"></td><td>&nbsp;</td>'."\n";
         }
-        if($SESSION->cal_show_user) {
-            $content .= '<td class="eventskey event_user" style="width: 11px;"><img src="'.$CFG->pixpath.'/t/hide.gif" class="iconsmall" alt="'.get_string('hide').'" title="'.get_string('tt_hideuser', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".CALENDAR_URL.'set.php?var=showuser'.$getvars."'".'" /></td>';
-            $content .= '<td><a href="'.CALENDAR_URL.'set.php?var=showuser'.$getvars.'" title="'.get_string('tt_hideuser', 'calendar').'">'.get_string('user', 'calendar').'</a></td>'."\n";
+
+        $seturl->param('var', 'showuser');
+        if (calendar_show_event_type(CALENDAR_EVENT_USER)) {
+            $content .= '<td class="eventskey calendar_event_user" style="width: 11px;"><img src="'.$OUTPUT->pix_url('t/hide') . '" class="iconsmall" alt="'.get_string('hide').'" title="'.get_string('tt_hideuser', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".$seturl."'".'" /></td>';
+            $content .= '<td><a href="'.$seturl.'" title="'.get_string('tt_hideuser', 'calendar').'">'.get_string('user', 'calendar').'</a></td>'."\n";
         } else {
-            $content .= '<td style="width: 11px;"><img src="'.$CFG->pixpath.'/t/show.gif" class="iconsmall" alt="'.get_string('show').'" title="'.get_string('tt_showuser', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".CALENDAR_URL.'set.php?var=showuser'.$getvars."'".'" /></td>';
-            $content .= '<td><a href="'.CALENDAR_URL.'set.php?var=showuser'.$getvars.'" title="'.get_string('tt_showuser', 'calendar').'">'.get_string('user', 'calendar').'</a></td>'."\n";
+            $content .= '<td style="width: 11px;"><img src="'.$OUTPUT->pix_url('t/show') . '" class="iconsmall" alt="'.get_string('show').'" title="'.get_string('tt_showuser', 'calendar').'" style="cursor:pointer" onclick="location.href='."'".$seturl."'".'" /></td>';
+            $content .= '<td><a href="'.$seturl.'" title="'.get_string('tt_showuser', 'calendar').'">'.get_string('user', 'calendar').'</a></td>'."\n";
         }
     }
     $content .= "</tr>\n</table>\n";
@@ -919,53 +955,86 @@ function calendar_time_representation($time) {
 }
 
 /**
- * TODO document
+ * Adds day, month, year arguments to a URL and returns a moodle_url object.
+ *
+ * @param string|moodle_url $linkbase
+ * @param int $d
+ * @param int $m
+ * @param int $y
+ * @return moodle_url
  */
 function calendar_get_link_href($linkbase, $d, $m, $y) {
-    if(empty($linkbase)) return '';
-    $paramstr = '';
-    if(!empty($d)) $paramstr .= '&amp;cal_d='.$d;
-    if(!empty($m)) $paramstr .= '&amp;cal_m='.$m;
-    if(!empty($y)) $paramstr .= '&amp;cal_y='.$y;
-    if(!empty($paramstr)) $paramstr = substr($paramstr, 5);
-    return $linkbase.$paramstr;
+    if (empty($linkbase)) {
+        return '';
+    }
+    if (!($linkbase instanceof moodle_url)) {
+        $linkbase = new moodle_url();
+    }
+    if (!empty($d)) {
+        $linkbase->param('cal_d', $d);
+    }
+    if (!empty($m)) {
+        $linkbase->param('cal_m', $m);
+    }
+    if (!empty($y)) {
+        $linkbase->param('cal_y', $y);
+    }
+    return $linkbase;
 }
 
 /**
- * TODO document
+ * This function has been deprecated as of Moodle 2.0... DO NOT USE!!!!!
+ *
+ * @deprecated
+ * @since 2.0
+ *
+ * @param string $text
+ * @param string|moodle_url $linkbase
+ * @param int|null $d
+ * @param int|null $m
+ * @param int|null $y
+ * @return string HTML link
  */
 function calendar_get_link_tag($text, $linkbase, $d, $m, $y) {
-    $href = calendar_get_link_href($linkbase, $d, $m, $y);
-    if(empty($href)) return $text;
-    return '<a href="'.$href.'">'.$text.'</a>';
+    $url = calendar_get_link_href(new moodle_url($linkbase), $d, $m, $y);
+    if (empty($url)) {
+        return $text;
+    }
+    return html_writer::link($url, $text);
 }
 
 /**
  * Build and return a previous month HTML link, with an arrow.
+ *
  * @param string $text The text label.
- * @param string $linkbase The URL stub.
+ * @param string|moodle_url $linkbase The URL stub.
  * @param int $d $m $y Day of month, month and year numbers.
  * @param bool $accesshide Default visible, or hide from all except screenreaders.
  * @return string HTML string.
  */
 function calendar_get_link_previous($text, $linkbase, $d, $m, $y, $accesshide=false) {
-    $href = calendar_get_link_href($linkbase, $d, $m, $y);
-    if(empty($href)) return $text;
-    return link_arrow_left($text, $href, $accesshide, 'previous');
+    $href = calendar_get_link_href(new moodle_url($linkbase), $d, $m, $y);
+    if (empty($href)) {
+        return $text;
+    }
+    return link_arrow_left($text, (string)$href, $accesshide, 'previous');
 }
 
 /**
  * Build and return a next month HTML link, with an arrow.
+ *
  * @param string $text The text label.
- * @param string $linkbase The URL stub.
+ * @param string|moodle_url $linkbase The URL stub.
  * @param int $d $m $y Day of month, month and year numbers.
  * @param bool $accesshide Default visible, or hide from all except screenreaders.
  * @return string HTML string.
  */
 function calendar_get_link_next($text, $linkbase, $d, $m, $y, $accesshide=false) {
-    $href = calendar_get_link_href($linkbase, $d, $m, $y);
-    if(empty($href)) return $text;
-    return link_arrow_right($text, $href, $accesshide, 'next');
+    $href = calendar_get_link_href(new moodle_url($linkbase), $d, $m, $y);
+    if (empty($href)) {
+        return $text;
+    }
+    return link_arrow_right($text, (string)$href, $accesshide, 'next');
 }
 
 function calendar_wday_name($englishname) {
@@ -976,7 +1045,7 @@ function calendar_days_in_month($month, $year) {
    return intval(date('t', mktime(0, 0, 0, $month, 1, $year)));
 }
 
-function calendar_get_sideblock_upcoming($events, $linkhref = NULL) {
+function calendar_get_block_upcoming($events, $linkhref = NULL) {
     $content = '';
     $lines = count($events);
     if (!$lines) {
@@ -995,8 +1064,9 @@ function calendar_get_sideblock_upcoming($events, $linkhref = NULL) {
         } else {
             if(!empty($linkhref)) {
                 $ed = usergetdate($events[$i]->timestart);
-                $href = calendar_get_link_href(CALENDAR_URL.$linkhref, $ed['mday'], $ed['mon'], $ed['year']);
-                $content .= '<a href="'.$href.'#event_'.$events[$i]->id.'">'.$events[$i]->name.'</a>';
+                $href = calendar_get_link_href(new moodle_url(CALENDAR_URL.$linkhref), $ed['mday'], $ed['mon'], $ed['year']);
+                $href->set_anchor('event_'.$events[$i]->id);
+                $content .= html_writer::link($href, $events[$i]->name);
             }
             else {
                 $content .= $events[$i]->name;
@@ -1063,22 +1133,22 @@ function calendar_events_by_day($events, $month, $year, &$eventsbyday, &$duratio
             if($event->courseid == SITEID && $event->groupid == 0) {
                 $typesbyday[$eventdaystart]['startglobal'] = true;
                 // Set event class for global event
-                $events[$event->id]->class = 'event_global';
+                $events[$event->id]->class = 'calendar_event_global';
             }
             else if($event->courseid != 0 && $event->courseid != SITEID && $event->groupid == 0) {
                 $typesbyday[$eventdaystart]['startcourse'] = true;
                 // Set event class for course event
-                $events[$event->id]->class = 'event_course';
+                $events[$event->id]->class = 'calendar_event_course';
             }
             else if($event->groupid) {
                 $typesbyday[$eventdaystart]['startgroup'] = true;
                 // Set event class for group event
-                $events[$event->id]->class = 'event_group';
+                $events[$event->id]->class = 'calendar_event_group';
             }
             else if($event->userid) {
                 $typesbyday[$eventdaystart]['startuser'] = true;
                 // Set event class for user event
-                $events[$event->id]->class = 'event_user';
+                $events[$event->id]->class = 'calendar_event_user';
             }
         }
 
@@ -1125,247 +1195,105 @@ function calendar_get_module_cached(&$coursecache, $modulename, $instance) {
 }
 
 function calendar_get_course_cached(&$coursecache, $courseid) {
-    global $COURSE;
+    global $COURSE, $DB;
+
     if (!isset($coursecache[$courseid])) {
         if ($courseid == $COURSE->id) {
             $coursecache[$courseid] = $COURSE;
         } else {
-            $coursecache[$courseid] = get_record('course', 'id', $courseid);
+            $coursecache[$courseid] = $DB->get_record('course', array('id'=>$courseid));
         }
     }
     return $coursecache[$courseid];
 }
 
-function calendar_session_vars($course=null) {
-    global $SESSION, $USER;
-
-    if(!empty($USER->id) && isset($USER->realuser) && !isset($SESSION->cal_loggedinas)) {
-        // We just logged in as someone else, update the filtering
-        unset($SESSION->cal_users_shown);
-        unset($SESSION->cal_courses_shown);
-        $SESSION->cal_loggedinas = true;
-        if(intval(get_user_preferences('calendar_persistflt', 0))) {
-            calendar_set_filters_status(get_user_preferences('calendar_savedflt', 0xff));
-        }
-    }
-    else if(!empty($USER->id) && !isset($USER->realuser) && isset($SESSION->cal_loggedinas)) {
-        // We just logged back to our real self, update again
-        unset($SESSION->cal_users_shown);
-        unset($SESSION->cal_courses_shown);
-        unset($SESSION->cal_loggedinas);
-        if(intval(get_user_preferences('calendar_persistflt', 0))) {
-            calendar_set_filters_status(get_user_preferences('calendar_savedflt', 0xff));
-        }
-    }
+/**
+ * Returns the courses to load events for, the
+ *
+ * @global moodle_database $DB
+ * @param array $courseeventsfrom An array of courses to load calendar events for
+ * @param bool $ignorefilters
+ * @return array An array of courses, groups, and user to load calendar events for based upon filters
+ */
+function calendar_set_filters(array $courseeventsfrom, $ignorefilters = false) {
+    global $USER, $CFG, $DB;
 
-    if(!isset($SESSION->cal_course_referer)) {
-        $SESSION->cal_course_referer = 0;
-    }
-    if(!isset($SESSION->cal_show_global)) {
-        $SESSION->cal_show_global = true;
-    }
-    if(!isset($SESSION->cal_show_groups)) {
-        $SESSION->cal_show_groups = true;
-    }
-    if(!isset($SESSION->cal_show_course)) {
-        $SESSION->cal_show_course = true;
-    }
-    if(!isset($SESSION->cal_show_user)) {
-        $SESSION->cal_show_user = true;
-    }
-    if (isset($course)) {
-        // speedup hack for calendar related blocks
-        $SESSION->cal_courses_shown = array($course->id => $course);
-    } else {    
-        $SESSION->cal_courses_shown = calendar_get_default_courses(true);
-    }
-    if(empty($SESSION->cal_users_shown)) {
-        // The empty() instead of !isset() here makes a whole world of difference,
-        // as it will automatically change to the user's id when the user first logs
-        // in. With !isset(), it would never do that.
-        $SESSION->cal_users_shown = !empty($USER->id) ? $USER->id : false;
+    // For backwards compatability we have to check whether the courses array contains
+    // just id's in which case we need to load course objects.
+    $coursestoload = array();
+    foreach ($courseeventsfrom as $id => $something) {
+        if (!is_object($something)) {
+            $coursestoload[] = $id;
+            unset($courseeventsfrom[$id]);
     }
-    else if(is_numeric($SESSION->cal_users_shown) && !empty($USER->id) && $SESSION->cal_users_shown != $USER->id) {
-        // Follow the white rabbit, for example if a teacher logs in as a student
-        $SESSION->cal_users_shown = $USER->id;
     }
-}
-
-function calendar_overlib_html() {
-    return '<div id="overDiv" style="position: absolute; visibility: hidden; z-index:1000;"></div>'
-          .'<script type="text/javascript" src="'.CALENDAR_URL.'overlib.cfg.php"></script>';
-}
-
-function calendar_set_referring_course($courseid) {
-    global $SESSION;
-    $SESSION->cal_course_referer = intval($courseid);
-}
-
-function calendar_set_filters(&$courses, &$group, &$user, $courseeventsfrom = NULL, $groupeventsfrom = NULL, $ignorefilters = false) {
-    global $SESSION, $USER, $CFG;
-
-    // Insidious bug-wannabe: setting $SESSION->cal_courses_shown to $course->id would cause
-    // the code to function incorrectly UNLESS we convert it to an integer. One case where
-    // PHP's loose type system works against us.
-    if(is_string($SESSION->cal_courses_shown)) {
-        $SESSION->cal_courses_shown = intval($SESSION->cal_courses_shown);
-    }
-    if($courseeventsfrom === NULL) {
-        $courseeventsfrom = $SESSION->cal_courses_shown;    
+    if (!empty($coursestoload)) {
+        // TODO remove this in 2.2
+        debugging('calendar_set_filters now preferes an array of course objects with preloaded contexts', DEBUG_DEVELOPER);
+        $courseeventsfrom = array_merge($courseeventsfrom, $DB->get_records_list('course', 'id', $coursestoload));
     }
     
-    // MDL-9059, $courseeventsfrom can be an int, or an array of ints, or an array of course objects
-    // convert all to array of objects
-    // we probably should do some clean up and make sure that session is set to use the proper form
-    if (is_int($courseeventsfrom)) { // case of an int, e.g. calendar view page
-        $c = array();
-        $c[$courseeventsfrom] = get_record('course', 'id', $courseeventsfrom);
-        $courseeventsfrom = $c;
-    } else if (is_array($courseeventsfrom)) { // case of an array of ints, e.g. course home page
-        foreach ($courseeventsfrom as $i=>$courseid) { // TODO: this seems wrong, the array is often constructed as [courseid] => 1 ???
-            if (is_int($courseid)) {
-                $courseeventsfrom[$i] = get_record('course', 'id', $courseid);
-            } 
-        }    
-    }
+    $courses = array();
+    $user = false;
+    $group = false;
 
-    if($groupeventsfrom === NULL) {
-        $groupeventsfrom = $SESSION->cal_courses_shown;
-    }
+    $isloggedin = isloggedin();
 
-    if(($SESSION->cal_show_course && $SESSION->cal_show_global) || $ignorefilters) {
-        if(is_int($courseeventsfrom)) {
-            $courses = array(SITEID, $courseeventsfrom);
-        }
-        else if(is_array($courseeventsfrom)) {
-            $courses = array_keys($courseeventsfrom);
-            $courses[] = SITEID;
-        }
-    }
-    else if($SESSION->cal_show_course) {
-        if(is_int($courseeventsfrom)) {
-            $courses = array($courseeventsfrom);
-        }
-        else if(is_array($courseeventsfrom)) {
+    if ($ignorefilters || calendar_show_event_type(CALENDAR_EVENT_COURSE)) {
             $courses = array_keys($courseeventsfrom);
         }
-        $courses = array_diff($courses, array(SITEID));
-    }
-    else if($SESSION->cal_show_global) {
-        $courses = array(SITEID);
-    }
-    else {
-        $courses = false;
-    }
-    //BUG 6130 clean $courses array as SESSION has bad entries.
-    // [pj] TODO: See if this has to do with my new change in get_default_courses and can be taken out
-    if (is_array($courses)) {
-        foreach ($courses as $index => $value) {
-            if (empty($value)) unset($courses[$index]);
+    if ($ignorefilters || calendar_show_event_type(CALENDAR_EVENT_GLOBAL)) {
+        $courses[] = SITEID;
         }
+    $courses = array_unique($courses);
+    sort($courses);
 
+    if (!empty($courses) && in_array(SITEID, $courses)) {
         // Sort courses for consistent colour highlighting
         // Effectively ignoring SITEID as setting as last course id
         $key = array_search(SITEID, $courses);
-        if ($key !== false) {
             unset($courses[$key]);
-            sort($courses);
             $courses[] = SITEID;
-        } else {
-            sort($courses);
-        }
     }
 
-    if($SESSION->cal_show_user || $ignorefilters) {
-        // This doesn't work for arrays yet (maybe someday it will)
-        $user = $SESSION->cal_users_shown;
-    }
-    else {
-        $user = false;
-    }
-    if($SESSION->cal_show_groups || $ignorefilters) {
-        if(is_int($groupeventsfrom)) {
-            $groupcourses = array($groupeventsfrom);
-        }
-        else if(is_array($groupeventsfrom)) {
-            $groupcourses = array_keys($groupeventsfrom);
+    if ($ignorefilters || ($isloggedin && calendar_show_event_type(CALENDAR_EVENT_USER))) {
+        $user = $USER->id;
         }
 
-        // XXX TODO: not sure how to replace $CFG->calendar_adminseesall
-        if(has_capability('moodle/calendar:manageentries', get_context_instance(CONTEXT_SYSTEM)) && !empty($CFG->calendar_adminseesall)) {
+    if (!empty($courseeventsfrom) && (calendar_show_event_type(CALENDAR_EVENT_GROUP) || $ignorefilters)) {
+
+        if (!empty($CFG->calendar_adminseesall) && has_capability('moodle/calendar:manageentries', get_system_context())) {
             $group = true;
-        }
-        else {
-            $grouparray = array();
+        } else if ($isloggedin) {
+            $groupids = array();
 
             // We already have the courses to examine in $courses
             // For each course...
-
-            foreach($groupcourses as $courseid) {
-
-                if (!isset($courseeventsfrom[$courseid]->context)) { // SHOULD be set MDL-11221
-                    if (is_object($courseeventsfrom[$courseid])) {
-                        $courseeventsfrom[$courseid]->context = get_context_instance(CONTEXT_COURSE, $courseid);
-                    }
-                }
-
+            foreach ($courseeventsfrom as $courseid => $course) {
                 // If the user is an editing teacher in there,
-                if (!empty($USER->id) && isset($courseeventsfrom[$courseid]->context) && has_capability('moodle/calendar:manageentries', $courseeventsfrom[$courseid]->context)) {
+                if (!empty($USER->groupmember[$course->id])) {
+                    // We've already cached the users groups for this course so we can just use that
+                    $groupids = array_merge($groupids, $USER->groupmember[$course->id]);
+                } else if (($course->groupmode != NOGROUPS || !$course->groupmodeforce) && has_capability('moodle/calendar:manageentries', get_context_instance(CONTEXT_COURSE, $course->id))) {
                     // If this course has groups, show events from all of them
-                    if(is_int($groupeventsfrom)) {
-                        if (is_object($courseeventsfrom[$courseid])) { // SHOULD be set MDL-11221
-                            $courserecord = $courseeventsfrom[$courseid];
-                        } else {
-                            $courserecord = get_record('course', 'id', $courseid);
+                    $coursegroups = groups_get_user_groups($course->id, $USER->id);
+                    $groupids = array_merge($groupids, $coursegroups['0']);
                         } 
-                        $courserecord = get_record('course', 'id', $courseid);
-                        if ($courserecord->groupmode != NOGROUPS || !$courserecord->groupmodeforce) {
-                            $groupids[] = $courseid;
                         }
-                    }
-                    else if(isset($SESSION->cal_courses_shown[$courseid]) && ($SESSION->cal_courses_shown[$courseid]->groupmode != NOGROUPS || !$SESSION->cal_courses_shown[$courseid]->groupmodeforce)) {
-                        $groupids[] = $courseid;
-                    }
-                }
-
-                // Otherwise (not editing teacher) show events from the group he is a member of
-                else if(isset($USER->groupmember[$courseid])) {
-                    //changed to 2D array
-                    foreach ($USER->groupmember[$courseid] as $groupid){
-                        $grouparray[] = $groupid;
-                    }
-                }
-            }
-
             if (!empty($groupids)) {
-                $sql = "SELECT *
-                        FROM {$CFG->prefix}groups
-                        WHERE courseid IN (".implode(',', $groupids).')';
-
-                if ($grouprecords= get_records_sql($sql)) {
-                    foreach ($grouprecords as $grouprecord) {
-                        $grouparray[] = $grouprecord->id;
-                    }
+                $group = $groupids;
                 }
             }
-
-            if(empty($grouparray)) {
-                $group = false;
-            }
-            else {
-                $group = $grouparray;
             }
+    if (empty($courses)) {
+        $courses = false;
         }
 
-    }
-    else {
-        $group = false;
-    }
+    return array($courses, $group, $user);
 }
 
 function calendar_edit_event_allowed($event) {
-
-    global $USER;
+    global $USER, $DB;
 
     // Must be logged in
     if (!isloggedin()) {
@@ -1373,7 +1301,7 @@ function calendar_edit_event_allowed($event) {
     }
 
     // can not be using guest account
-    if ($USER->username == "guest") {
+    if (isguestuser()) {
         return false;
     }
 
@@ -1384,69 +1312,73 @@ function calendar_edit_event_allowed($event) {
     }
 
     // if groupid is set, it's definitely a group event
-    if ($event->groupid) {
+    if (!empty($event->groupid)) {
         // Allow users to add/edit group events if:
         // 1) They have manageentries (= entries for whole course)
         // 2) They have managegroupentries AND are in the group
-        $group = get_record('groups', 'id', $event->groupid);
+        $group = $DB->get_record('groups', array('id'=>$event->groupid));
         return $group && (
-            has_capability('moodle/calendar:manageentries', get_context_instance(CONTEXT_COURSE, $group->courseid)) ||
-            (has_capability('moodle/calendar:managegroupentries', get_context_instance(CONTEXT_COURSE, $group->courseid))
+            has_capability('moodle/calendar:manageentries', $event->context) ||
+            (has_capability('moodle/calendar:managegroupentries', $event->context)
                 && groups_is_member($event->groupid)));
-    } else if ($event->courseid) {
+    } else if (!empty($event->courseid)) {
     // if groupid is not set, but course is set,
     // it's definiely a course event
-        return has_capability('moodle/calendar:manageentries', get_context_instance(CONTEXT_COURSE, $event->courseid));
-    } else if ($event->userid && $event->userid == $USER->id) {
+        return has_capability('moodle/calendar:manageentries', $event->context);
+    } else if (!empty($event->userid) && $event->userid == $USER->id) {
     // if course is not set, but userid id set, it's a user event
-        return (has_capability('moodle/calendar:manageownentries', $sitecontext));
+        return (has_capability('moodle/calendar:manageownentries', $event->context));
+    } else if (!empty($event->userid)) {
+        return (has_capability('moodle/calendar:manageentries', $event->context));
     }
     return false;
 }
 
-function calendar_get_default_courses($ignoreref = false) {
-    global $USER, $CFG, $SESSION;
-
-    if(!empty($SESSION->cal_course_referer) && !$ignoreref) {
-        return array($SESSION->cal_course_referer => 1);
-    }
+/**
+ * Returns the default courses to display on the calendar when there isn't a specific
+ * course to display.
+ *
+ * @global moodle_database $DB
+ * @return array Array of courses to display
+ */
+function calendar_get_default_courses() {
+    global $CFG, $DB;
 
-    if(empty($USER->id)) {
+    if (!isloggedin()) {
         return array();
     }
 
     $courses = array();
-    if (has_capability('moodle/calendar:manageentries', get_context_instance(CONTEXT_SYSTEM))) {
-        if (!empty($CFG->calendar_adminseesall)) {
-            $courses = get_records_sql('SELECT id, 1 FROM '.$CFG->prefix.'course');
-            return $courses;
+    if (!empty($CFG->calendar_adminseesall) && has_capability('moodle/calendar:manageentries', get_context_instance(CONTEXT_SYSTEM))) {
+        list ($select, $join) = context_instance_preload_sql('c.id', CONTEXT_COURSE, 'ctx');
+        $sql = "SELECT c.* $select
+                  FROM {course} c
+                  JOIN {event} e ON e.courseid = c.id
+                  $join";
+        $courses = $DB->get_records_sql($sql, null, 0, 20);
+        foreach ($courses as $course) {
+            context_instance_preload($course);
         }
+        return $courses;
     }
 
-    if (isset($CFG->adminseesall)) {
-        $courses = get_my_courses($USER->id, null, null, $CFG->adminseesall);
-    }
-    else {
-        $courses = get_my_courses($USER->id, null, null, false);
-    }
+    $courses = enrol_get_my_courses();
 
     return $courses;
 }
 
-function calendar_preferences_button() {
-    global $CFG, $USER;
+function calendar_preferences_button(stdClass $course) {
+    global $OUTPUT;
 
     // Guests have no preferences
-    if (empty($USER->id) || isguest()) {
+    if (!isloggedin() || isguestuser()) {
         return '';
     }
 
-    return "<form $CFG->frametarget method=\"get\" ".
-           " action=\"$CFG->wwwroot/calendar/preferences.php\">".
-           "<div><input type=\"submit\" value=\"".get_string("preferences", "calendar")." ...\" /></div></form>";
+    return $OUTPUT->single_button(new moodle_url('/calendar/preferences.php', array('course' => $course->id)), get_string("preferences", "calendar"));
 }
 
-function calendar_format_event_time($event, $now, $morehref, $usecommonwords = true, $showtime=0) {
+function calendar_format_event_time($event, $now, $linkparams = null, $usecommonwords = true, $showtime=0) {
     $startdate = usergetdate($event->timestart);
     $enddate = usergetdate($event->timestart + $event->timeduration);
     $usermidnightstart = usergetmidnight($event->timestart);
@@ -1459,6 +1391,11 @@ function calendar_format_event_time($event, $now, $morehref, $usecommonwords = t
         $usermidnightend = $usermidnightstart;
     }
 
+    if (empty($linkparams) || !is_array($linkparams)) {
+        $linkparams = array();
+    }
+    $linkparams['view'] = 'day';
+
     // OK, now to get a meaningful display...
     // First of all we have to construct a human-readable date/time representation
 
@@ -1479,7 +1416,8 @@ function calendar_format_event_time($event, $now, $morehref, $usecommonwords = t
             // Set printable representation
             if (!$showtime) {
                 $day = calendar_day_representation($event->timestart, $now, $usecommonwords);
-                $eventtime = calendar_get_link_tag($day, CALENDAR_URL.'view.php?view=day'.$morehref.'&amp;', $enddate['mday'], $enddate['mon'], $enddate['year']).', '.$time;
+                $url = calendar_get_link_href(new moodle_url(CALENDAR_URL.'view.php', $linkparams), $enddate['mday'], $enddate['mon'], $enddate['year']);
+                $eventtime = html_writer::link($url, $day).', '.$time;
             } else {
                 $eventtime = $time;
             }
@@ -1498,12 +1436,14 @@ function calendar_format_event_time($event, $now, $morehref, $usecommonwords = t
 
             // Set printable representation
             if ($now >= $usermidnightstart && $now < ($usermidnightstart + 86400)) {
-                $eventtime = $timestart.' <strong>&raquo;</strong> '.calendar_get_link_tag($dayend, CALENDAR_URL.'view.php?view=day'.$morehref.'&amp;', $enddate['mday'], $enddate['mon'], $enddate['year']).
-                $timeend;
+                $url = calendar_get_link_href(new moodle_url(CALENDAR_URL.'view.php', $linkparams), $enddate['mday'], $enddate['mon'], $enddate['year']);
+                $eventtime = $timestart.' <strong>&raquo;</strong> '.html_writer::link($url, $dayend).$timeend;
             } else {
-                $eventtime = calendar_get_link_tag($daystart, CALENDAR_URL.'view.php?view=day'.$morehref.'&amp;', $startdate['mday'], $startdate['mon'], $startdate['year']).
-                $timestart.' <strong>&raquo;</strong> '.calendar_get_link_tag($dayend, CALENDAR_URL.'view.php?view=day'.$morehref.'&amp;', $enddate['mday'], $enddate['mon'], $enddate['year']).
-                $timeend;
+                $url = calendar_get_link_href(new moodle_url(CALENDAR_URL.'view.php', $linkparams), $enddate['mday'], $enddate['mon'], $enddate['year']);
+                $eventtime  = html_writer::link($url, $daystart).$timestart.' <strong>&raquo;</strong> ';
+
+                $url = calendar_get_link_href(new moodle_url(CALENDAR_URL.'view.php', $linkparams), $startdate['mday'], $startdate['mon'], $startdate['year']);
+                $eventtime .= html_writer::link($url, $dayend).$timeend;
             }
         }
     } else {
@@ -1512,7 +1452,8 @@ function calendar_format_event_time($event, $now, $morehref, $usecommonwords = t
         // Set printable representation
         if (!$showtime) {
             $day = calendar_day_representation($event->timestart, $now, $usecommonwords);
-            $eventtime = calendar_get_link_tag($day, CALENDAR_URL.'view.php?view=day'.$morehref.'&amp;', $startdate['mday'], $startdate['mon'], $startdate['year']).trim($time);
+            $url = calendar_get_link_href(new moodle_url(CALENDAR_URL.'view.php', $linkparams), $startdate['mday'], $startdate['mon'], $startdate['year']);
+            $eventtime = html_writer::link($url, $day).trim($time);
         } else {
             $eventtime = $time;
         }
@@ -1527,71 +1468,100 @@ function calendar_format_event_time($event, $now, $morehref, $usecommonwords = t
 }
 
 function calendar_print_month_selector($name, $selected) {
-
     $months = array();
-
     for ($i=1; $i<=12; $i++) {
         $months[$i] = userdate(gmmktime(12, 0, 0, $i, 15, 2000), '%B');
     }
-
-    choose_from_menu($months, $name, $selected, '');
+    echo html_writer::select($months, $name, $selected, false);
 }
 
-function calendar_get_filters_status() {
+/**
+ * Checks to see if the requested type of event should be shown for the given user.
+ *
+ * @param CALENDAR_EVENT_GLOBAL|CALENDAR_EVENT_COURSE|CALENDAR_EVENT_GROUP|CALENDAR_EVENT_USER $type
+ *          The type to check the display for (default is to display all)
+ * @param stdClass|int|null $user The user to check for - by default the current user
+ * @return bool True if the tyep should be displayed false otherwise
+ */
+function calendar_show_event_type($type, $user = null) {
+    $default = CALENDAR_EVENT_GLOBAL + CALENDAR_EVENT_COURSE + CALENDAR_EVENT_GROUP + CALENDAR_EVENT_USER;
+    if (get_user_preferences('calendar_persistflt', 0, $user) === 0) {
     global $SESSION;
+        if (!isset($SESSION->calendarshoweventtype)) {
+            $SESSION->calendarshoweventtype = $default;
+        }
+        return $SESSION->calendarshoweventtype & $type;
+    } else {
+        return get_user_preferences('calendar_savedflt', $default, $user) & $type;
+    }
+}
 
-    $status = 0;
-    if($SESSION->cal_show_global) {
-        $status += 1;
+/**
+ * Sets the display of the event type given $display.
+ * If $display = true the event type will be shown.
+ * If $display = false the event type will NOT be shown.
+ * If $display = null the current value will be toggled and saved.
+ *
+ * @param CALENDAR_EVENT_GLOBAL|CALENDAR_EVENT_COURSE|CALENDAR_EVENT_GROUP|CALENDAR_EVENT_USER $type
+ * @param true|false|null $display
+ * @param stdClass|int|null $user
+ */
+function calendar_set_event_type_display($type, $display = null, $user = null) {
+    $persist = get_user_preferences('calendar_persistflt', 0, $user);
+    $default = CALENDAR_EVENT_GLOBAL + CALENDAR_EVENT_COURSE + CALENDAR_EVENT_GROUP + CALENDAR_EVENT_USER;
+    if ($persist === 0) {
+        global $SESSION;
+        if (!isset($SESSION->calendarshoweventtype)) {
+            $SESSION->calendarshoweventtype = $default;
     }
-    if($SESSION->cal_show_course) {
-        $status += 2;
+        $preference = $SESSION->calendarshoweventtype;
+    } else {
+        $preference = get_user_preferences('calendar_savedflt', $default, $user);
     }
-    if($SESSION->cal_show_groups) {
-        $status += 4;
+    $current = $preference & $type;
+    if ($display === null) {
+        $display = !$current;
     }
-    if($SESSION->cal_show_user) {
-        $status += 8;
+    if ($display && !$current) {
+        $preference += $type;
+    } else if (!$display && $current) {
+        $preference -= $type;
+    }
+    if ($persist === 0) {
+        $SESSION->calendarshoweventtype = $preference;
+    } else {
+        if ($preference == $default) {
+            unset_user_preference('calendar_savedflt', $user);
+        } else {
+            set_user_preference('calendar_savedflt', $preference, $user);
     }
-    return $status;
-}
-
-function calendar_set_filters_status($packed_bitfield) {
-    global $SESSION, $USER;
-
-    if(!isset($USER) || empty($USER->id)) {
-        return false;
     }
-
-    $SESSION->cal_show_global = ($packed_bitfield & 1);
-    $SESSION->cal_show_course = ($packed_bitfield & 2);
-    $SESSION->cal_show_groups = ($packed_bitfield & 4);
-    $SESSION->cal_show_user   = ($packed_bitfield & 8);
-
-    return true;
 }
 
-function calendar_get_allowed_types(&$allowed) {
-    global $USER, $CFG, $SESSION;
-    $sitecontext = get_context_instance(CONTEXT_SYSTEM);
-    $allowed->user = has_capability('moodle/calendar:manageownentries', $sitecontext);
+function calendar_get_allowed_types(&$allowed, $course = null) {
+    global $USER, $CFG, $DB;
+    $allowed->user = has_capability('moodle/calendar:manageownentries', get_system_context());
     $allowed->groups = false; // This may change just below
     $allowed->courses = false; // This may change just below
     $allowed->site = has_capability('moodle/calendar:manageentries', get_context_instance(CONTEXT_COURSE, SITEID));
 
-    if(!empty($SESSION->cal_course_referer) && $SESSION->cal_course_referer != SITEID) {
-        $course = get_record('course', 'id', $SESSION->cal_course_referer);
-        $coursecontext = get_context_instance(CONTEXT_COURSE, $SESSION->cal_course_referer);
+    if (!empty($course)) {
+        if (!is_object($course)) {
+            $course = $DB->get_record('course', array('id' => $course), '*', MUST_EXIST);
+        }
+        if ($course->id != SITEID) {
+            $coursecontext = get_context_instance(CONTEXT_COURSE, $course->id);
 
-        if(has_capability('moodle/calendar:manageentries', $coursecontext)) {
+            if (has_capability('moodle/calendar:manageentries', $coursecontext)) {
             $allowed->courses = array($course->id => 1);
     
-            if($course->groupmode != NOGROUPS || !$course->groupmodeforce) {
-                $allowed->groups = groups_get_all_groups($SESSION->cal_course_referer);
+                if ($course->groupmode != NOGROUPS || !$course->groupmodeforce) {
+                    $allowed->groups = groups_get_all_groups($course->id);
             }
-        } else if(has_capability('moodle/calendar:managegroupentries', $coursecontext)) {
+            } else if (has_capability('moodle/calendar:managegroupentries', $coursecontext)) {
             if($course->groupmode != NOGROUPS || !$course->groupmodeforce) {
-                $allowed->groups = groups_get_all_groups($SESSION->cal_course_referer, $USER->id);
+                    $allowed->groups = groups_get_all_groups($course->id);
+                }
             }
         }
     }
@@ -1602,8 +1572,885 @@ function calendar_get_allowed_types(&$allowed) {
  * used to print the "New Event" button
  * @return bool
  */
-function calendar_user_can_add_event() {
-    calendar_get_allowed_types($allowed);
+function calendar_user_can_add_event($course) {
+    if (!isloggedin() || isguestuser()) {
+        return false;
+    }
+    calendar_get_allowed_types($allowed, $course);
     return (bool)($allowed->user || $allowed->groups || $allowed->courses || $allowed->site);
 }
-?>
+
+/**
+ * Check wether the current user is permitted to add events
+ *
+ * @param object $event
+ * @return bool
+ */
+function calendar_add_event_allowed($event) {
+    global $USER, $DB;
+
+    // can not be using guest account
+    if (!isloggedin() or isguestuser()) {
+        return false;
+    }
+
+    $sitecontext = get_context_instance(CONTEXT_SYSTEM);
+    // if user has manageentries at site level, always return true
+    if (has_capability('moodle/calendar:manageentries', $sitecontext)) {
+        return true;
+    }
+
+    switch ($event->eventtype) {
+        case 'course':
+            return has_capability('moodle/calendar:manageentries', $event->context);
+
+        case 'group':
+            // Allow users to add/edit group events if:
+            // 1) They have manageentries (= entries for whole course)
+            // 2) They have managegroupentries AND are in the group
+            $group = $DB->get_record('groups', array('id'=>$event->groupid));
+            return $group && (
+                has_capability('moodle/calendar:manageentries', $event->context) ||
+                (has_capability('moodle/calendar:managegroupentries', $event->context)
+                    && groups_is_member($event->groupid)));
+
+        case 'user':
+            if ($event->userid == $USER->id) {
+                return (has_capability('moodle/calendar:manageownentries', $event->context));
+            }
+            //there is no 'break;' intentionally
+
+        case 'site':
+            return has_capability('moodle/calendar:manageentries', $event->context);
+
+        default:
+            return has_capability('moodle/calendar:manageentries', $event->context);
+    }
+}
+
+/**
+ * A class to manage calendar events
+ *
+ * This class provides the required functionality in order to manage calendar events.
+ * It was introduced as part of Moodle 2.0 and was created in order to provide a
+ * better framework for dealing with calendar events in particular regard to file
+ * handling through the new file API
+ *
+ * @property int $id The id within the event table
+ * @property string $name The name of the event
+ * @property string $description The description of the event
+ * @property int $format The format of the description FORMAT_?
+ * @property int $courseid The course the event is associated with (0 if none)
+ * @property int $groupid The group the event is associated with (0 if none)
+ * @property int $userid The user the event is associated with (0 if none)
+ * @property int $repeatid If this is a repeated event this will be set to the
+ *                          id of the original
+ * @property string $modulename If added by a module this will be the module name
+ * @property int $instance If added by a module this will be the module instance
+ * @property string $eventtype The event type
+ * @property int $timestart The start time as a timestamp
+ * @property int $timeduration The duration of the event in seconds
+ * @property int $visible 1 if the event is visible
+ * @property int $uuid ?
+ * @property int $sequence ?
+ * @property int $timemodified The time last modified as a timestamp
+ */
+class calendar_event {
+
+    /**
+     * An object containing the event properties can be accessed via the
+     * magic __get/set methods
+     * @var array
+     */
+    protected $properties = null;
+    /**
+     * The converted event discription with file paths resolved
+     * This gets populated when someone requests description for the first time
+     * @var string
+     */
+    protected $_description = null;
+    /**
+     * The options to use with this description editor
+     * @var array
+     */
+    protected $editoroptions = array(
+            'subdirs'=>false,
+            'forcehttps'=>false,
+            'maxfiles'=>-1,
+            'maxbytes'=>null,
+            'trusttext'=>false);
+    /**
+     * The context to use with the description editor
+     * @var object
+     */
+    protected $editorcontext = null;
+
+    /**
+     * Instantiates a new event and optionally populates its properties with the
+     * data provided
+     *
+     * @param stdClass $data Optional. An object containing the properties to for
+     *                  an event
+     */
+    public function __construct($data=null) {
+        global $CFG, $USER;
+
+        // First convert to object if it is not already (should either be object or assoc array)
+        if (!is_object($data)) {
+            $data = (object)$data;
+        }
+
+        $this->editoroptions['maxbytes'] = $CFG->maxbytes;
+
+        $data->eventrepeats = 0;
+
+        if (empty($data->id)) {
+            $data->id = null;
+        }
+
+        // Default to a user event
+        if (empty($data->eventtype)) {
+            $data->eventtype = 'user';
+        }
+
+        // Default to the current user
+        if (empty($data->userid)) {
+            $data->userid = $USER->id;
+        }
+
+        if (!empty($data->timeduration) && is_array($data->timeduration)) {
+            $data->timeduration = make_timestamp($data->timeduration['year'], $data->timeduration['month'], $data->timeduration['day'], $data->timeduration['hour'], $data->timeduration['minute']) - $data->timestart;
+        }
+        if (!empty($data->description) && is_array($data->description)) {
+            $data->format = $data->description['format'];
+            $data->description = $data->description['text'];
+        } else if (empty($data->description)) {
+            $data->description = '';
+            $data->format = editors_get_preferred_format();
+        }
+        // Ensure form is defaulted correctly
+        if (empty($data->format)) {
+            $data->format = editors_get_preferred_format();
+        }
+
+        if (empty($data->context)) {
+            $data->context = $this->calculate_context($data);
+        }
+        $this->properties = $data;
+    }
+
+    /**
+     * Magic property method
+     *
+     * Attempts to call a set_$key method if one exists otherwise falls back
+     * to simply set the property
+     *
+     * @param string $key
+     * @param mixed $value
+     */
+    public function __set($key, $value) {
+        if (method_exists($this, 'set_'.$key)) {
+            $this->{'set_'.$key}($value);
+        }
+        $this->properties->{$key} = $value;
+    }
+
+    /**
+     * Magic get method
+     *
+     * Attempts to call a get_$key method to return the property and ralls over
+     * to return the raw property
+     *
+     * @param str $key
+     * @return mixed
+     */
+    public function __get($key) {
+        if (method_exists($this, 'get_'.$key)) {
+            return $this->{'get_'.$key}();
+        }
+        if (!isset($this->properties->{$key})) {
+            throw new coding_exception('Undefined property requested');
+        }
+        return $this->properties->{$key};
+    }
+
+    /**
+     * Stupid PHP needs an isset magic method if you use the get magic method and
+     * still want empty calls to work.... blah ~!
+     *
+     * @param string $key
+     * @return bool
+     */
+    public function __isset($key) {
+        return !empty($this->properties->{$key});
+    }
+
+    /**
+     * Calculate the context value needed for calendar_event.
+     * Event's type can be determine by the available value store in $data
+     * It is important to check for the existence of course/courseid to determine
+     * the course event.
+     * Default value is set to CONTEXT_USER
+     *
+     * @return stdClass
+     */
+    protected function calculate_context(stdClass $data) {
+        global $USER;
+
+        $context = null;
+        if (isset($data->courseid) && $data->courseid > 0) {
+            $context =  get_context_instance(CONTEXT_COURSE, $data->courseid);
+        } else if (isset($data->course) && $data->course > 0) {
+            $context =  get_context_instance(CONTEXT_COURSE, $data->course);
+        } else if (isset($data->groupid) && $data->groupid > 0) {
+            $group = $DB->get_record('groups', array('id'=>$data->groupid));
+            $context = get_context_instance(CONTEXT_COURSE, $group->courseid);
+        } else if (isset($data->userid) && $data->userid > 0 && $data->userid == $USER->id) {
+            $context =  get_context_instance(CONTEXT_USER, $data->userid);
+        } else if (isset($data->userid) && $data->userid > 0 && $data->userid != $USER->id &&
+                   isset($data->instance) && $data->instance > 0) {
+            $cm = get_coursemodule_from_instance($data->modulename, $data->instance, 0, false, MUST_EXIST);
+            $context =  get_context_instance(CONTEXT_COURSE, $cm->course);
+        } else {
+            $context =  get_context_instance(CONTEXT_USER);
+        }
+
+        return $context;
+    }
+
+    /**
+     * Returns an array of editoroptions for this event: Called by __get
+     * Please use $blah = $event->editoroptions;
+     * @return array
+     */
+    protected function get_editoroptions() {
+        return $this->editoroptions;
+    }
+
+    /**
+     * Returns an event description: Called by __get
+     * Please use $blah = $event->description;
+     *
+     * @return string
+     */
+    protected function get_description() {
+        global $CFG;
+
+        require_once($CFG->libdir . '/filelib.php');
+
+        if ($this->_description === null) {
+            // Check if we have already resolved the context for this event
+            if ($this->editorcontext === null) {
+                // Switch on the event type to decide upon the appropriate context
+                // to use for this event
+                $this->editorcontext = $this->properties->context;
+                if ($this->properties->eventtype != 'user' && $this->properties->eventtype != 'course'
+                        && $this->properties->eventtype != 'site' && $this->properties->eventtype != 'group') {
+                    return clean_text($this->properties->description, $this->properties->format);
+                }
+            }
+
+            // Work out the item id for the editor, if this is a repeated event then the files will
+            // be associated with the original
+            if (!empty($this->properties->repeatid) && $this->properties->repeatid > 0) {
+                $itemid = $this->properties->repeatid;
+            } else {
+                $itemid = $this->properties->id;
+            }
+
+            // Convert file paths in the description so that things display correctly
+            $this->_description = file_rewrite_pluginfile_urls($this->properties->description, 'pluginfile.php', $this->editorcontext->id, 'calendar', 'event_description', $itemid);
+            // Clean the text so no nasties get through
+            $this->_description = clean_text($this->_description, $this->properties->format);
+        }
+        // Finally return the description
+        return $this->_description;
+    }
+
+    /**
+     * Return the number of repeat events there are in this events series
+     *
+     * @return int
+     */
+    public function count_repeats() {
+        global $DB;
+        if (!empty($this->properties->repeatid)) {
+            $this->properties->eventrepeats = $DB->count_records('event', array('repeatid'=>$this->properties->repeatid));
+            // We don't want to count ourselves
+            $this->properties->eventrepeats--;
+        }
+        return $this->properties->eventrepeats;
+    }
+
+    /**
+     * Update or create an event within the database
+     *
+     * Pass in a object containing the event properties and this function will
+     * insert it into the database and deal with any associated files
+     *
+     * @see add_event()
+     * @see update_event()
+     *
+     * @param stdClass $data
+     * @param boolean $checkcapability if moodle should check calendar managing capability or not
+     */
+    public function update($data, $checkcapability=true) {
+        global $CFG, $DB, $USER;
+
+        foreach ($data as $key=>$value) {
+            $this->properties->$key = $value;
+        }
+
+        $this->properties->timemodified = time();
+        $usingeditor = (!empty($this->properties->description) && is_array($this->properties->description));
+
+        if (empty($this->properties->id) || $this->properties->id < 1) {
+
+            if ($checkcapability) {
+                if (!calendar_add_event_allowed($this->properties)) {
+                    print_error('nopermissiontoupdatecalendar');
+                }
+            }
+
+            if ($usingeditor) {
+                switch ($this->properties->eventtype) {
+                    case 'user':
+                        $this->editorcontext = $this->properties->context;
+                        $this->properties->courseid = 0;
+                        $this->properties->groupid = 0;
+                        $this->properties->userid = $USER->id;
+                        break;
+                    case 'site':
+                        $this->editorcontext = $this->properties->context;
+                        $this->properties->courseid = SITEID;
+                        $this->properties->groupid = 0;
+                        $this->properties->userid = $USER->id;
+                        break;
+                    case 'course':
+                        $this->editorcontext = $this->properties->context;
+                        $this->properties->groupid = 0;
+                        $this->properties->userid = $USER->id;
+                        break;
+                    case 'group':
+                        $this->editorcontext = $this->properties->context;
+                        $this->properties->userid = $USER->id;
+                        break;
+                    default:
+                        // Ewww we should NEVER get here, but just incase we do lets
+                        // fail gracefully
+                        $usingeditor = false;
+                        break;
+                }
+
+                $editor = $this->properties->description;
+                $this->properties->format = $this->properties->description['format'];
+                $this->properties->description = $this->properties->description['text'];
+            }
+
+            // Insert the event into the database
+            $this->properties->id = $DB->insert_record('event', $this->properties);
+
+            if ($usingeditor) {
+                $this->properties->description = file_save_draft_area_files(
+                                                $editor['itemid'],
+                                                $this->editorcontext->id,
+                                                'calendar',
+                                                'event_description',
+                                                $this->properties->id,
+                                                $this->editoroptions,
+                                                $editor['text'],
+                                                $this->editoroptions['forcehttps']);
+
+                $DB->set_field('event', 'description', $this->properties->description, array('id'=>$this->properties->id));
+            }
+
+            // Log the event entry.
+            add_to_log($this->properties->courseid, 'calendar', 'add', 'event.php?action=edit&amp;id='.$this->properties->id, $this->properties->name);
+
+            $repeatedids = array();
+
+            if (!empty($this->properties->repeat)) {
+                $this->properties->repeatid = $this->properties->id;
+                $DB->set_field('event', 'repeatid', $this->properties->repeatid, array('id'=>$this->properties->id));
+
+                $eventcopy = clone($this->properties);
+                unset($eventcopy->id);
+
+                for($i = 1; $i < $eventcopy->repeats; $i++) {
+
+                    $eventcopy->timestart = ($eventcopy->timestart+WEEKSECS) + dst_offset_on($eventcopy->timestart) - dst_offset_on($eventcopy->timestart+WEEKSECS);
+
+                    // Get the event id for the log record.
+                    $eventcopyid = $DB->insert_record('event', $eventcopy);
+
+                    // If the context has been set delete all associated files
+                    if ($usingeditor) {
+                        $fs = get_file_storage();
+                        $files = $fs->get_area_files($this->editorcontext->id, 'calendar', 'event_description', $this->properties->id);
+                        foreach ($files as $file) {
+                            $fs->create_file_from_storedfile(array('itemid'=>$eventcopyid), $file);
+                        }
+                    }
+
+                    $repeatedids[] = $eventcopyid;
+                    // Log the event entry.
+                    add_to_log($eventcopy->courseid, 'calendar', 'add', 'event.php?action=edit&amp;id='.$eventcopyid, $eventcopy->name);
+                }
+            }
+
+            // Hook for tracking added events
+            self::calendar_event_hook('add_event', array($this->properties, $repeatedids));
+            return true;
+        } else {
+
+            if ($checkcapability) {
+                if(!calendar_edit_event_allowed($this->properties)) {
+                    print_error('nopermissiontoupdatecalendar');
+                }
+            }
+
+            if ($usingeditor) {
+                if ($this->editorcontext !== null) {
+                    $this->properties->description = file_save_draft_area_files(
+                                                    $this->properties->description['itemid'],
+                                                    $this->editorcontext->id,
+                                                    'calendar',
+                                                    'event_description',
+                                                    $this->properties->id,
+                                                    $this->editoroptions,
+                                                    $this->properties->description['text'],
+                                                    $this->editoroptions['forcehttps']);
+                } else {
+                    $this->properties->format = $this->properties->description['format'];
+                    $this->properties->description = $this->properties->description['text'];
+                }
+            }
+
+            $event = $DB->get_record('event', array('id'=>$this->properties->id));
+
+            $updaterepeated = (!empty($this->properties->repeatid) && !empty($this->properties->repeateditall));
+
+            if ($updaterepeated) {
+                // Update all
+                if ($this->properties->timestart != $event->timestart) {
+                    $timestartoffset = $this->properties->timestart - $event->timestart;
+                    $sql = "UPDATE {event}
+                               SET name = ?,
+                                   description = ?,
+                                   timestart = timestart + ?,
+                                   timeduration = ?,
+                                   timemodified = ?
+                             WHERE repeatid = ?";
+                    $params = array($this->properties->name, $this->properties->description, $timestartoffset, $this->properties->timeduration, time(), $event->repeatid);
+                } else {
+                    $sql = "UPDATE {event} SET name = ?, description = ?, timeduration = ?, timemodified = ? WHERE repeatid = ?";
+                    $params = array($this->properties->name, $this->properties->description, $this->properties->timeduration, time(), $event->repeatid);
+                }
+                $DB->execute($sql, $params);
+
+                // Log the event update.
+                add_to_log($this->properties->courseid, 'calendar', 'edit all', 'event.php?action=edit&amp;id='.$this->properties->id, $this->properties->name);
+            } else {
+                $DB->update_record('event', $this->properties);
+                $event = calendar_event::load($this->properties->id);
+                $this->properties = $event->properties();
+                add_to_log($this->properties->courseid, 'calendar', 'edit', 'event.php?action=edit&amp;id='.$this->properties->id, $this->properties->name);
+            }
+
+            // Hook for tracking event updates
+            self::calendar_event_hook('update_event', array($this->properties, $updaterepeated));
+            return true;
+        }
+    }
+
+    /**
+     * Deletes an event and if selected an repeated events in the same series
+     *
+     * This function deletes an event, any associated events if $deleterepeated=true,
+     * and cleans up any files associated with the events.
+     *
+     * @see delete_event()
+     *
+     * @param bool $deleterepeated
+     * @return bool
+     */
+    public function delete($deleterepeated=false) {
+        global $DB;
+
+        // If $this->properties->id is not set then something is wrong
+        if (empty($this->properties->id)) {
+            debugging('Attempting to delete an event before it has been loaded', DEBUG_DEVELOPER);
+            return false;
+        }
+
+        // Delete the event
+        $DB->delete_records('event', array('id'=>$this->properties->id));
+
+        // If the editor context hasn't already been set then set it now
+        if ($this->editorcontext === null) {
+            $this->editorcontext = $this->properties->context;
+        }
+
+        // If the context has been set delete all associated files
+        if ($this->editorcontext !== null) {
+            $fs = get_file_storage();
+            $files = $fs->get_area_files($this->editorcontext->id, 'calendar', 'event_description', $this->properties->id);
+            foreach ($files as $file) {
+                $file->delete();
+            }
+        }
+
+        // Fire the event deleted hook
+        self::calendar_event_hook('delete_event', array($this->properties->id, $deleterepeated));
+
+        // If we need to delete repeated events then we will fetch them all and delete one by one
+        if ($deleterepeated && !empty($this->properties->repeatid) && $this->properties->repeatid > 0) {
+            // Get all records where the repeatid is the same as the event being removed
+            $events = $DB->get_records('event', array('repeatid'=>$this->properties->repeatid));
+            // For each of the returned events populate a calendar_event object and call delete
+            // make sure the arg passed is false as we are already deleting all repeats
+            foreach ($events as $event) {
+                $event = new calendar_event($event);
+                $event->delete(false);
+            }
+        }
+
+        return true;
+    }
+
+    /**
+     * Fetch all event properties
+     *
+     * This function returns all of the events properties as an object and optionally
+     * can prepare an editor for the description field at the same time. This is
+     * designed to work when the properties are going to be used to set the default
+     * values of a moodle forms form.
+     *
+     * @param bool $prepareeditor If set to true a editor is prepared for use with
+     *              the mforms editor element. (for description)
+     * @return stdClass Object containing event properties
+     */
+    public function properties($prepareeditor=false) {
+        global $USER, $CFG, $DB;
+
+        // First take a copy of the properties. We don't want to actually change the
+        // properties or we'd forever be converting back and forwards between an
+        // editor formatted description and not
+        $properties = clone($this->properties);
+        // Clean the description here
+        $properties->description = clean_text($properties->description, $properties->format);
+
+        // If set to true we need to prepare the properties for use with an editor
+        // and prepare the file area
+        if ($prepareeditor) {
+
+            // We may or may not have a property id. If we do then we need to work
+            // out the context so we can copy the existing files to the draft area
+            if (!empty($properties->id)) {
+
+                if ($properties->eventtype === 'site') {
+                    // Site context
+                    $this->editorcontext = $this->properties->context;
+                } else if ($properties->eventtype === 'user') {
+                    // User context
+                    $this->editorcontext = $this->properties->context;
+                } else if ($properties->eventtype === 'group' || $properties->eventtype === 'course') {
+                    // First check the course is valid
+                    $course = $DB->get_record('course', array('id'=>$properties->courseid));
+                    if (!$course) {
+                        print_error('invalidcourse');
+                    }
+                    // Course context
+                    $this->editorcontext = $this->properties->context;
+                    // We have a course and are within the course context so we had
+                    // better use the courses max bytes value
+                    $this->editoroptions['maxbytes'] = $course->maxbytes;
+                } else {
+                    // If we get here we have a custom event type as used by some
+                    // modules. In this case the event will have been added by
+                    // code and we won't need the editor
+                    $this->editoroptions['maxbytes'] = 0;
+                    $this->editoroptions['maxfiles'] = 0;
+                }
+
+                if (empty($this->editorcontext) || empty($this->editorcontext->id)) {
+                    $contextid = false;
+                } else {
+                    // Get the context id that is what we really want
+                    $contextid = $this->editorcontext->id;
+                }
+            } else {
+
+                // If we get here then this is a new event in which case we don't need a
+                // context as there is no existing files to copy to the draft area.
+                $contextid = null;
+            }
+
+            // If the contextid === false we don't support files so no preparing
+            // a draft area
+            if ($contextid !== false) {
+                // Just encase it has already been submitted
+                $draftiddescription = file_get_submitted_draft_itemid('description');
+                // Prepare the draft area, this copies existing files to the draft area as well
+                $properties->description = file_prepare_draft_area($draftiddescription, $contextid, 'calendar', 'event_description', $properties->id, $this->editoroptions, $properties->description);
+            } else {
+                $draftiddescription = 0;
+            }
+
+            // Structure the description field as the editor requires
+            $properties->description = array('text'=>$properties->description, 'format'=>$properties->format, 'itemid'=>$draftiddescription);
+        }
+
+        // Finally return the properties
+        return $properties;
+    }
+
+    /**
+     * Toggles the visibility of an event
+     *
+     * @param null|bool $force If it is left null the events visibility is flipped,
+     *                   If it is false the event is made hidden, if it is true it
+     *                   is made visible.
+     */
+    public function toggle_visibility($force=null) {
+        global $CFG, $DB;
+
+        // Set visible to the default if it is not already set
+        if (empty($this->properties->visible)) {
+            $this->properties->visible = 1;
+        }
+
+        if ($force === true || ($force !== false && $this->properties->visible == 0)) {
+            // Make this event visible
+            $this->properties->visible = 1;
+            // Fire the hook
+            self::calendar_event_hook('show_event', array($this->properties));
+        } else {
+            // Make this event hidden
+            $this->properties->visible = 0;
+            // Fire the hook
+            self::calendar_event_hook('hide_event', array($this->properties));
+        }
+
+        // Update the database to reflect this change
+        return $DB->set_field('event', 'visible', $this->properties->visible, array('id'=>$this->properties->id));
+    }
+
+    /**
+     * Attempts to call the hook for the specified action should a calendar type
+     * by set $CFG->calendar, and the appopriate function defined
+     *
+     * @static
+     * @staticvar bool $extcalendarinc Used to track the inclusion of the calendar lib
+     * @param string $action One of `update_event`, `add_event`, `delete_event`, `show_event`, `hide_event`
+     * @param array $args The args to pass to the hook, usually the event is the first element
+     * @return bool
+     */
+    public static function calendar_event_hook($action, array $args) {
+        global $CFG;
+        static $extcalendarinc;
+        if ($extcalendarinc === null) {
+            if (!empty($CFG->calendar) && file_exists($CFG->dirroot .'/calendar/'. $CFG->calendar .'/lib.php')) {
+                include_once($CFG->dirroot .'/calendar/'. $CFG->calendar .'/lib.php');
+                $extcalendarinc = true;
+            } else {
+                $extcalendarinc = false;
+            }
+        }
+        if($extcalendarinc === false) {
+            return false;
+        }
+        $hook = $CFG->calendar .'_'.$action;
+        if (function_exists($hook)) {
+            call_user_func_array($hook, $args);
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Returns a calendar_event object when provided with an event id
+     *
+     * This function makes use of MUST_EXIST, if the event id passed in is invalid
+     * it will result in an exception being thrown
+     *
+     * @param int|object $param
+     * @return calendar_event|false
+     */
+    public static function load($param) {
+        global $DB;
+        if (is_object($param)) {
+            $event = new calendar_event($param);
+        } else {
+            $event = $DB->get_record('event', array('id'=>(int)$param), '*', MUST_EXIST);
+            $event = new calendar_event($event);
+        }
+        return $event;
+    }
+
+    /**
+     * Creates a new event and returns a calendar_event object
+     *
+     * @param object|array $properties An object containing event properties
+     * @return calendar_event|false The event object or false if it failed
+     */
+    public static function create($properties) {
+        if (is_array($properties)) {
+            $properties = (object)$properties;
+        }
+        if (!is_object($properties)) {
+            throw new coding_exception('When creating an event properties should be either an object or an assoc array');
+        }
+        $event = new calendar_event($properties);
+        if ($event->update($properties)) {
+            return $event;
+        } else {
+            return false;
+        }
+    }
+}
+
+/**
+ * Calendar information class
+ *
+ * This class is used simply to organise the information pertaining to a calendar
+ * and is used primarily to make information easily available.
+ */
+class calendar_information {
+    /**
+     * The day
+     * @var int
+     */
+    public $day;
+    /**
+     * The month
+     * @var int
+     */
+    public $month;
+    /**
+     * The year
+     * @var int
+     */
+    public $year;
+
+    /**
+     * A course id
+     * @var int
+     */
+    public $courseid = null;
+    /**
+     * An array of courses
+     * @var array
+     */
+    public $courses = array();
+    /**
+     * An array of groups
+     * @var array
+     */
+    public $groups = array();
+    /**
+     * An array of users
+     * @var array
+     */
+    public $users = array();
+
+    /**
+     * Creates a new instance
+     *
+     * @param int $day
+     * @param int $month
+     * @param int $year
+     */
+    public function __construct($day=0, $month=0, $year=0) {
+
+        $date = usergetdate(time());
+
+        if (empty($day)) {
+            $day = $date['mday'];
+        }
+
+        if (empty($month)) {
+            $month = $date['mon'];
+        }
+
+        if (empty($year)) {
+            $year =  $date['year'];
+        }
+
+        $this->day = $day;
+        $this->month = $month;
+        $this->year = $year;
+    }
+
+    /**
+     *
+     * @param stdClass $course
+     * @param array $coursestoload An array of courses [$course->id => $course]
+     * @param type $ignorefilters
+     */
+    public function prepare_for_view(stdClass $course, array $coursestoload, $ignorefilters = false) {
+        $this->courseid = $course->id;
+        $this->course = $course;
+        list($courses, $group, $user) = calendar_set_filters($coursestoload, $ignorefilters);
+        $this->courses = $courses;
+        $this->groups = $group;
+        $this->users = $user;
+    }
+
+    /**
+     * Ensures the date for the calendar is correct and either sets it to now
+     * or throws a moodle_exception if not
+     *
+     * @param bool $defaultonow
+     * @return bool
+     */
+    public function checkdate($defaultonow = true) {
+        if (!checkdate($this->month, $this->day, $this->year)) {
+            if ($defaultonow) {
+                $now = usergetdate(time());
+                $this->day = intval($now['mday']);
+                $this->month = intval($now['mon']);
+                $this->year = intval($now['year']);
+                return true;
+            } else {
+                throw new moodle_exception('invaliddate');
+            }
+        }
+        return true;
+    }
+    /**
+     * Gets todays timestamp for the calendar
+     * @return int
+     */
+    public function timestamp_today() {
+        return make_timestamp($this->year, $this->month, $this->day);
+    }
+    /**
+     * Gets tomorrows timestamp for the calendar
+     * @return int
+     */
+    public function timestamp_tomorrow() {
+        return make_timestamp($this->year, $this->month, $this->day+1);
+    }
+    /**
+     * Adds the pretend blocks for teh calendar
+     *
+     * @param core_calendar_renderer $renderer
+     * @param bool $showfilters
+     * @param string|null $view
+     */
+    public function add_sidecalendar_blocks(core_calendar_renderer $renderer, $showfilters=false, $view=null) {
+        if ($showfilters) {
+            $filters = new block_contents();
+            $filters->content = $renderer->fake_block_filters($this->courseid, $this->day, $this->month, $this->year, $view, $this->courses);
+            $filters->footer = '';
+            $filters->title = get_string('eventskey', 'calendar');
+            $renderer->add_pretend_calendar_block($filters, BLOCK_POS_RIGHT);
+        }
+        $block = new block_contents;
+        $block->content = $renderer->fake_block_threemonths($this);
+        $block->footer = '';
+        $block->title = get_string('monthlyview', 'calendar');
+        $renderer->add_pretend_calendar_block($block, BLOCK_POS_RIGHT);
+    }
+}
