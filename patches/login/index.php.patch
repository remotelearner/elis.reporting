diff --git a/login/index.php b/login/index.php
index 8b5b380..00616f3 100644
--- a/login/index.php
+++ b/login/index.php
@@ -1,47 +1,78 @@
-<?php // $Id$
-
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Main login page.
+ *
+ * @package    core
+ * @subpackage auth
+ * @copyright  1999 onwards Martin Dougiamas  http://dougiamas.com
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require('../config.php');
+
+redirect_if_major_upgrade_required();
+
+$testsession = optional_param('testsession', 0, PARAM_INT); // test session works properly
+$cancel      = optional_param('cancel', 0, PARAM_BOOL);      // redirect to frontpage, needed for loginhttps
+
+if ($cancel) {
+    redirect(new moodle_url('/'));
+}
 
-    require_once("../config.php");
+//HTTPS is required in this page when $CFG->loginhttps enabled
+$PAGE->https_required();
 
-    // check if major upgrade needed - also present in /index.php
-    if ((int)$CFG->version < 2006101100) { //1.7 or older
-        @require_logout();
-        redirect("$CFG->wwwroot/$CFG->admin/");
-    }
+$context = get_context_instance(CONTEXT_SYSTEM);
+$PAGE->set_url("$CFG->httpswwwroot/login/index.php");
+$PAGE->set_context($context);
+$PAGE->set_pagelayout('login');
 
-    $loginguest  = optional_param('loginguest', 0, PARAM_BOOL); // determines whether visitors are logged in as guest automatically
-    $testcookies = optional_param('testcookies', 0, PARAM_BOOL); // request cookie test
+/// Initialize variables
+$errormsg = '';
+$errorcode = 0;
 
-    //initialize variables
-    $errormsg = '';
-    $errorcode = 0;
-
-/// Check for timed out sessions
-    if (!empty($SESSION->has_timed_out)) {
-        $session_has_timed_out = true;
-        $SESSION->has_timed_out = false;
+// login page requested session test
+if ($testsession) {
+    if ($testsession == $USER->id) {
+        if (isset($SESSION->wantsurl)) {
+            $urltogo = $SESSION->wantsurl;
     } else {
-        $session_has_timed_out = false;
-    }
-
-/// Check if the guest user exists.  If not, create one.
-    if (! record_exists('user', 'username', 'guest', 'mnethostid', $CFG->mnet_localhost_id)) {
-        if (! $guest = create_guest_record()) {
-            notify('Could not create guest user record !!!');
+            $urltogo = $CFG->wwwroot.'/';
         }
+        unset($SESSION->wantsurl);
+        redirect($urltogo);
+    } else {
+        // TODO: try to find out what is the exact reason why sessions do not work
+        $errormsg = get_string("cookiesnotenabled");
+        $errorcode = 1;
     }
-
-// setup and verify auth settings
-
-if (!isset($CFG->registerauth)) {
-    set_config('registerauth', '');
 }
 
-if (!isset($CFG->auth_instructions)) {
-    set_config('auth_instructions', '');
+/// Check for timed out sessions
+if (!empty($SESSION->has_timed_out)) {
+    $session_has_timed_out = true;
+    unset($SESSION->has_timed_out);
+} else {
+    $session_has_timed_out = false;
 }
 
-// auth plugins may override these - SSO anyone?
+/// auth plugins may override these - SSO anyone?
 $frm  = false;
 $user = false;
 
@@ -51,36 +82,17 @@ foreach($authsequence as $authname) {
     $authplugin->loginpage_hook();
 }
 
-//HTTPS is potentially required in this page
-httpsrequired();
 
 /// Define variables used in page
-    if (!$site = get_site()) {
-        error("No site found!");
-    }
-
-    if (empty($CFG->langmenu)) {
-        $langmenu = "";
-    } else {
-        $currlang = current_language();
-        $langs    = get_list_of_languages();
-        $langlabel = get_accesshide(get_string('language'));
-        $langmenu = popup_form ("$CFG->httpswwwroot/login/index.php?lang=", $langs, "chooselang", $currlang, "", "", "", true, 'self', $langlabel);
-    }
-
-    $loginsite = get_string("loginsite");
-    $navlinks = array(array('name' => $loginsite, 'link' => null, 'type' => 'misc'));
-    $navigation = build_navigation($navlinks);
+$site = get_site();
 
-    if ($user !== false or $frm !== false) {
-        // some auth plugin already supplied these
+$loginsite = get_string("loginsite");
+$PAGE->navbar->add($loginsite);
 
-    } else if ((!empty($SESSION->wantsurl) and strstr($SESSION->wantsurl,'username=guest')) or $loginguest) {
-        /// Log in as guest automatically (idea from Zbigniew Fiedorowicz)
-        $frm->username = 'guest';
-        $frm->password = 'guest';
+if ($user !== false or $frm !== false or $errormsg !== '') {
+    // some auth plugin already supplied full user, fake form data or prevented user login with error message
 
-    } else if (!empty($SESSION->wantsurl) && file_exists($CFG->dirroot.'/login/weblinkauth.php')) {
+} else if (!empty($SESSION->wantsurl) && file_exists($CFG->dirroot.'/login/weblinkauth.php')) {
         // Handles the case of another Moodle site linking into a page on this site
         //TODO: move weblink into own auth plugin
         include($CFG->dirroot.'/login/weblinkauth.php');
@@ -93,27 +105,20 @@ httpsrequired();
             $frm = data_submitted();
         }
 
-    } else {
+} else {
         $frm = data_submitted();
-    }
+}
 
 /// Check if the user has actually submitted login data to us
 
-    if (empty($CFG->usesid) and $testcookies and (get_moodle_cookie() == '')) {    // Login without cookie when test requested
-
-        $errormsg = get_string("cookiesnotenabled");
-        $errorcode = 1;
-
-    } else if ($frm) {                             // Login WITH cookies
+if ($frm and isset($frm->username)) {                             // Login WITH cookies
 
         $frm->username = trim(moodle_strtolower($frm->username));
 
-        if (is_enabled_auth('none') && empty($CFG->extendedusernamechars)) {
-            $string = eregi_replace("[^(-\.[:alnum:])]", "", $frm->username);
-            if (strcmp($frm->username, $string)) {
-                $errormsg = get_string('username').': '.get_string("alphanumerical");
+    if (is_enabled_auth('none') ) {
+        if ($frm->username !== clean_param($frm->username, PARAM_USERNAME)) {
+            $errormsg = get_string('username').': '.get_string("invalidusername");
                 $errorcode = 2;
-
                 $user = null;
             }
         }
@@ -131,14 +136,15 @@ httpsrequired();
 
         // Intercept 'restored' users to provide them with info & reset password
         if (!$user and $frm and is_restored_user($frm->username)) {
-            print_header("$site->fullname: $loginsite", $site->fullname, $navigation, '',
-                             '', true, '<div class="langmenu">'.$langmenu.'</div>');
-            print_heading(get_string('restoredaccount'));
-            print_simple_box(get_string('restoredaccountinfo'), 'center', '70%');
+        $PAGE->set_title(get_string('restoredaccount'));
+        $PAGE->set_heading($site->fullname);
+        echo $OUTPUT->header();
+        echo $OUTPUT->heading(get_string('restoredaccount'));
+        echo $OUTPUT->box(get_string('restoredaccountinfo'), 'generalbox boxaligncenter');
             require_once('restored_password_form.php'); // Use our "supplanter" login_forgot_password_form. MDL-20846
             $form = new login_forgot_password_form('forgot_password.php', array('username' => $frm->username));
             $form->display();
-            print_footer();
+        echo $OUTPUT->footer();
             die;
         }
 
@@ -147,7 +153,7 @@ httpsrequired();
         if ($user) {
 
             // language setup
-            if ($user->username == 'guest') {
+        if (isguestuser($user)) {
                 // no predefined language for guests - use existing session or default site lang
                 unset($user->lang);
 
@@ -157,22 +163,19 @@ httpsrequired();
             }
 
             if (empty($user->confirmed)) {       // This account was never confirmed
-                print_header(get_string("mustconfirm"), get_string("mustconfirm") );
-                print_heading(get_string("mustconfirm"));
-                print_simple_box(get_string("emailconfirmsent", "", $user->email), "center");
-                print_footer();
+            $PAGE->set_title(get_string("mustconfirm"));
+            $PAGE->set_heading($site->fullname);
+            echo $OUTPUT->header();
+            echo $OUTPUT->heading(get_string("mustconfirm"));
+            echo $OUTPUT->box(get_string("emailconfirmsent", "", $user->email), "generalbox boxaligncenter");
+            echo $OUTPUT->footer();
                 die;
             }
 
-            if ($frm->password == 'changeme') {
-                //force the change
-                set_user_preference('auth_forcepasswordchange', true, $user->id);
-            }
-
         /// Let's get them all set up.
             add_to_log(SITEID, 'user', 'login', "view.php?id=$USER->id&course=".SITEID,
                        $user->id, 0, $user->id);
-            $USER = complete_user_login($user);
+        complete_user_login($user, true); // sets the username cookie
 
         /// Prepare redirection
             if (user_not_fully_set_up($USER)) {
@@ -189,8 +192,8 @@ httpsrequired();
                 unset($SESSION->wantsurl);
             }
 
-        /// Go to my-moodle page instead of homepage if mymoodleredirect enabled
-            if (!has_capability('moodle/site:config',get_context_instance(CONTEXT_SYSTEM)) and !empty($CFG->mymoodleredirect) and !isguest()) {
+    /// Go to my-moodle page instead of site homepage if defaulthomepage set to homepage_my
+        if (!empty($CFG->defaulthomepage) && $CFG->defaulthomepage == HOMEPAGE_MY && !is_siteadmin() && !isguestuser()) {
                 if ($urltogo == $CFG->wwwroot or $urltogo == $CFG->wwwroot.'/' or $urltogo == $CFG->wwwroot.'/index.php') {
                     $urltogo = $CFG->wwwroot.'/my/';
                 }
@@ -203,72 +206,61 @@ httpsrequired();
             if (!empty($userauth->config->expiration) and $userauth->config->expiration == 1) {
                 if ($userauth->can_change_password()) {
                     $passwordchangeurl = $userauth->change_password_url();
-                    if(!$passwordchangeurl) {
+                if (!$passwordchangeurl) {
                         $passwordchangeurl = $CFG->httpswwwroot.'/login/change_password.php';
                     }
                 } else {
                     $passwordchangeurl = $CFG->httpswwwroot.'/login/change_password.php';
                 }
                 $days2expire = $userauth->password_expire($USER->username);
+            $PAGE->set_title("$site->fullname: $loginsite");
+            $PAGE->set_heading("$site->fullname");
                 if (intval($days2expire) > 0 && intval($days2expire) < intval($userauth->config->expiration_warning)) {
-                    print_header("$site->fullname: $loginsite", "$site->fullname", $navigation, '', '', true, "<div class=\"langmenu\">$langmenu</div>");
-                    notice_yesno(get_string('auth_passwordwillexpire', 'auth', $days2expire), $passwordchangeurl, $urltogo);
-                    print_footer();
+                echo $OUTPUT->header();
+                echo $OUTPUT->confirm(get_string('auth_passwordwillexpire', 'auth', $days2expire), $passwordchangeurl, $urltogo);
+                echo $OUTPUT->footer();
                     exit;
                 } elseif (intval($days2expire) < 0 ) {
-                    print_header("$site->fullname: $loginsite", "$site->fullname", $navigation, '', '', true, "<div class=\"langmenu\">$langmenu</div>");
-                    notice_yesno(get_string('auth_passwordisexpired', 'auth'), $passwordchangeurl, $urltogo);
-                    print_footer();
+                echo $OUTPUT->header();
+                echo $OUTPUT->confirm(get_string('auth_passwordisexpired', 'auth'), $passwordchangeurl, $urltogo);
+                echo $OUTPUT->footer();
                     exit;
                 }
             }
 
             reset_login_count();
 
-            redirect($urltogo);
-
-            exit;
+        // test the session actually works by redirecting to self
+        $SESSION->wantsurl = $urltogo;
+        redirect(new moodle_url(get_login_url(), array('testsession'=>$USER->id)));
 
         } else {
             if (empty($errormsg)) {
                 $errormsg = get_string("invalidlogin");
                 $errorcode = 3;
             }
-
-            if ( !empty($CFG->mnet_dispatcher_mode)
-                 && $CFG->mnet_dispatcher_mode === 'strict'
-                 && is_enabled_auth('mnet')
-                 && record_exists_sql("SELECT h.id FROM {$CFG->prefix}mnet_host h
-                    INNER JOIN {$CFG->prefix}mnet_host2service m ON h.id=m.hostid
-                    INNER JOIN {$CFG->prefix}mnet_service s ON s.id=m.serviceid
-                    WHERE s.name='sso_sp' AND h.deleted=0 AND m.publish = 1")
-                && record_exists_select('user', "username = '{$frm->username}' AND mnethostid != {$CFG->mnet_localhost_id}")
-            ) {
-
-                $errormsg .= get_string('loginlinkmnetuser', 'mnet', "mnet_email.php?u=$frm->username");
-            }
-        }
     }
+}
 
 /// Detect problems with timedout sessions
-    if ($session_has_timed_out and !data_submitted()) {
+if ($session_has_timed_out and !data_submitted()) {
         $errormsg = get_string('sessionerroruser', 'error');
         $errorcode = 4;
-    }
+}
 
 /// First, let's remember where the user was trying to get to before they got here
 
-    if (empty($SESSION->wantsurl)) {
+if (empty($SESSION->wantsurl)) {
         $SESSION->wantsurl = (array_key_exists('HTTP_REFERER',$_SERVER) &&
                               $_SERVER["HTTP_REFERER"] != $CFG->wwwroot &&
                               $_SERVER["HTTP_REFERER"] != $CFG->wwwroot.'/' &&
                               $_SERVER["HTTP_REFERER"] != $CFG->httpswwwroot.'/login/' &&
                               $_SERVER["HTTP_REFERER"] != $CFG->httpswwwroot.'/login/index.php')
             ? $_SERVER["HTTP_REFERER"] : NULL;
-    }
+}
 
 /// Redirect to alternative login URL if needed
-    if (!empty($CFG->alternateloginurl)) {
+if (!empty($CFG->alternateloginurl)) {
         $loginurl = $CFG->alternateloginurl;
 
         if (strpos($SESSION->wantsurl, $loginurl) === 0) {
@@ -286,16 +278,14 @@ httpsrequired();
         }
 
         redirect($loginurl);
-    }
+}
 
+// make sure we really are on the https page when https login required
+$PAGE->verify_https_required();
 
 /// Generate the login page with forms
 
-    if (get_moodle_cookie() == '') {
-        set_moodle_cookie('nobody');   // To help search for cookies
-    }
-
-    if (empty($frm->username) && $authsequence[0] != 'shibboleth') {  // See bug 5184
+if (empty($frm->username) && $authsequence[0] != 'shibboleth') {  // See bug 5184
         if (!empty($_GET["username"])) {
             $frm->username = $_GET["username"];
         } else {
@@ -303,26 +293,44 @@ httpsrequired();
         }
 
         $frm->password = "";
-    }
+}
 
-    if (!empty($frm->username)) {
+if (!empty($frm->username)) {
         $focus = "password";
-    } else {
+} else {
         $focus = "username";
-    }
+}
 
-    if (!empty($CFG->registerauth) or is_enabled_auth('none') or !empty($CFG->auth_instructions)) {
+if (!empty($CFG->registerauth) or is_enabled_auth('none') or !empty($CFG->auth_instructions)) {
         $show_instructions = true;
-    } else {
+} else {
         $show_instructions = false;
-    }
+}
 
-    print_header("$site->fullname: $loginsite", $site->fullname, $navigation, $focus,
-                 '', true, '<div class="langmenu">'.$langmenu.'</div>');
+$potentialidps = array();
+foreach($authsequence as $authname) {
+    $authplugin = get_auth_plugin($authname);
+    $potentialidps = array_merge($potentialidps, $authplugin->loginpage_idp_list($SESSION->wantsurl));
+}
 
-    include("index_form.html");
+$PAGE->set_title("$site->fullname: $loginsite");
+$PAGE->set_heading("$site->fullname");
 
-    print_footer();
+echo $OUTPUT->header();
 
+if (isloggedin() and !isguestuser()) {
+    // prevent logging when already logged in, we do not want them to relogin by accident because sesskey would be changed
+    echo $OUTPUT->box_start();
+    $logout = new single_button(new moodle_url($CFG->httpswwwroot.'/login/logout.php', array('sesskey'=>sesskey(),'loginpage'=>1)), get_string('logout'), 'post');
+    $continue = new single_button(new moodle_url($CFG->httpswwwroot.'/login/index.php', array('cancel'=>1)), get_string('cancel'), 'get');
+    echo $OUTPUT->confirm(get_string('alreadyloggedin', 'error', fullname($USER)), $logout, $continue);
+    echo $OUTPUT->box_end();
+} else {
+    include("index_form.html");
+    if (!empty($CFG->loginpageautofocus)) {
+        //focus username or password
+        $PAGE->requires->js_init_call('M.util.focus_login_form', null, true);
+    }
+}
 
-?>
+echo $OUTPUT->footer();
