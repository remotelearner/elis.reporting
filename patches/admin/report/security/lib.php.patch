diff --git a/admin/report/security/lib.php b/admin/report/security/lib.php
index 329631e..3a455b9 100644
--- a/admin/report/security/lib.php
+++ b/admin/report/security/lib.php
@@ -1,4 +1,4 @@
-<?php  //$Id$
+<?php
 
 ///////////////////////////////////////////////////////////////////////////
 //                                                                       //
@@ -33,13 +33,8 @@ define('REPORT_SECURITY_SERIOUS', 'serious');
 define('REPORT_SECURITY_CRITICAL', 'critical');
 
 function report_security_hide_timearning() {
-     echo '<script type="text/javascript">
-//<![CDATA[
-    var el = document.getElementById("timewarning");
-    el.setAttribute("class", "timewarninghidden");
-//]]>
-</script>';
-
+     global $PAGE;
+     $PAGE->requires->js_init_code("Y.one('#timewarning').addClass('timewarninghidden')");
 }
 
 function report_security_get_issue_list() {
@@ -63,25 +58,18 @@ function report_security_get_issue_list() {
         'report_security_check_defaultuserrole',
         'report_security_check_guestrole',
         'report_security_check_frontpagerole',
-        'report_security_check_defaultcourserole',
-        'report_security_check_courserole',
 
     );
 }
 
 function report_security_doc_link($issue, $name) {
-    global $CFG;
+    global $CFG, $OUTPUT;
 
     if (empty($CFG->docroot)) {
         return $name;
     }
 
-    $lang = str_replace('_utf8', '', current_language());
-
-    $str = "<a onclick=\"this.target='docspopup'\" href=\"$CFG->docroot/$lang/report/security/$issue\">";
-    $str .= "<img class=\"iconhelp\" src=\"$CFG->httpswwwroot/pix/docs.gif\" alt=\"\" />$name</a>";
-
-    return $str;
+    return $OUTPUT->doc_link('report/security/'.$issue, $name);
 }
 
 ///=============================================
@@ -95,7 +83,7 @@ function report_security_doc_link($issue, $name) {
  * @return object result
  */
 function report_security_check_globals($detailed=false) {
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_globals';
     $result->name    = get_string('check_globals_name', 'report_security');
     $result->info    = null;
@@ -126,7 +114,7 @@ function report_security_check_globals($detailed=false) {
 function report_security_check_noauth($detailed=false) {
     global $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_noauth';
     $result->name    = get_string('check_noauth_name', 'report_security');
     $result->info    = null;
@@ -158,7 +146,7 @@ function report_security_check_noauth($detailed=false) {
 function report_security_check_passwordpolicy($detailed=false) {
     global $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_passwordpolicy';
     $result->name    = get_string('check_passwordpolicy_name', 'report_security');
     $result->info    = null;
@@ -189,7 +177,7 @@ function report_security_check_passwordpolicy($detailed=false) {
 function report_security_check_embed($detailed=false) {
     global $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_embed';
     $result->name    = get_string('check_embed_name', 'report_security');
     $result->info    = null;
@@ -220,7 +208,7 @@ function report_security_check_embed($detailed=false) {
 function report_security_check_mediafilterswf($detailed=false) {
     global $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_mediafilterswf';
     $result->name    = get_string('check_mediafilterswf_name', 'report_security');
     $result->info    = null;
@@ -228,11 +216,7 @@ function report_security_check_mediafilterswf($detailed=false) {
     $result->status  = null;
     $result->link    = "<a href=\"$CFG->wwwroot/$CFG->admin/settings.php?section=filtersettingfiltermediaplugin\">".get_string('filtersettings', 'admin').'</a>';
 
-    if (!empty($CFG->textfilters)) {
-        $activefilters = explode(',', $CFG->textfilters);
-    } else {
-        $activefilters = array();
-    }
+    $activefilters = filter_get_globally_enabled();
 
     if (array_search('filter/mediaplugin', $activefilters) !== false and !empty($CFG->filter_mediaplugin_enable_swf)) {
         $result->status = REPORT_SECURITY_CRITICAL;
@@ -257,7 +241,7 @@ function report_security_check_mediafilterswf($detailed=false) {
 function report_security_check_unsecuredataroot($detailed=false) {
     global $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_unsecuredataroot';
     $result->name    = get_string('check_unsecuredataroot_name', 'report_security');
     $result->info    = null;
@@ -288,13 +272,13 @@ function report_security_check_unsecuredataroot($detailed=false) {
 }
 
 /**
- * Verifies disaplying of errors - problem for lib files and 3rd party code
+ * Verifies displaying of errors - problem for lib files and 3rd party code
  * because we can not disable debugging in these scripts (they do not include config.php)
  * @param bool $detailed
  * @return object result
  */
 function report_security_check_displayerrors($detailed=false) {
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_displayerrors';
     $result->name    = get_string('check_displayerrors_name', 'report_security');
     $result->info    = null;
@@ -318,14 +302,14 @@ function report_security_check_displayerrors($detailed=false) {
 }
 
 /**
- * Verifies open profiles - originaly open by default, not anymore because spammer abused it a lot
+ * Verifies open profiles - originally open by default, not anymore because spammer abused it a lot
  * @param bool $detailed
  * @return object result
  */
 function report_security_check_openprofiles($detailed=false) {
     global $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_openprofiles';
     $result->name    = get_string('check_openprofiles_name', 'report_security');
     $result->info    = null;
@@ -357,7 +341,7 @@ function report_security_check_openprofiles($detailed=false) {
 function report_security_check_google($detailed=false) {
     global $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_google';
     $result->name    = get_string('check_google_name', 'report_security');
     $result->info    = null;
@@ -391,7 +375,7 @@ function report_security_check_google($detailed=false) {
 function report_security_check_emailchangeconfirmation($detailed=false) {
     global $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_emailchangeconfirmation';
     $result->name    = get_string('check_emailchangeconfirmation_name', 'report_security');
     $result->info    = null;
@@ -432,7 +416,7 @@ function report_security_check_cookiesecure($detailed=false) {
         return null;
     }
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_cookiesecure';
     $result->name    = get_string('check_cookiesecure_name', 'report_security');
     $result->info    = null;
@@ -464,7 +448,7 @@ function report_security_check_cookiesecure($detailed=false) {
 function report_security_check_configrw($detailed=false) {
     global $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_configrw';
     $result->name    = get_string('check_configrw_name', 'report_security');
     $result->info    = null;
@@ -490,7 +474,7 @@ function report_security_check_configrw($detailed=false) {
 function report_security_check_passwordsaltmain($detailed=false) {
     global $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_passwordsaltmain';
     $result->name    = get_string('check_passwordsaltmain_name', 'report_security');
     $result->info    = null;
@@ -511,8 +495,7 @@ function report_security_check_passwordsaltmain($detailed=false) {
     }
 
     if ($detailed) {
-        $docspath = $CFG->docroot.'/'.str_replace('_utf8', '', current_language()).'/report/security/report_security_check_passwordsaltmain';
-        $result->details = get_string('check_passwordsaltmain_details', 'report_security', $docspath);
+        $result->details = get_string('check_passwordsaltmain_details', 'report_security', get_docs_url('report/security/report_security_check_passwordsaltmain'));
     }
 
     return $result;
@@ -525,9 +508,9 @@ function report_security_check_passwordsaltmain($detailed=false) {
  * @return object result
  */
 function report_security_check_riskxss($detailed=false) {
-    global $CFG;
+    global $DB;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_riskxss';
     $result->name    = get_string('check_riskxss_name', 'report_security');
     $result->info    = null;
@@ -535,25 +518,27 @@ function report_security_check_riskxss($detailed=false) {
     $result->status  = REPORT_SECURITY_WARNING;
     $result->link    = null;
 
+    $params = array('capallow'=>CAP_ALLOW);
+
     $sqlfrom = "FROM (SELECT rcx.*
-                        FROM {$CFG->prefix}role_capabilities rcx
-                        JOIN {$CFG->prefix}capabilities cap ON (cap.name = rcx.capability AND ".sql_bitand('cap.riskbitmask', RISK_XSS)." <> 0)
-                       WHERE rcx.permission = ".CAP_ALLOW.") rc,
-                     {$CFG->prefix}context c,
-                     {$CFG->prefix}context sc,
-                     {$CFG->prefix}role_assignments ra,
-                     {$CFG->prefix}user u
+                       FROM {role_capabilities} rcx
+                       JOIN {capabilities} cap ON (cap.name = rcx.capability AND ".$DB->sql_bitand('cap.riskbitmask', RISK_XSS)." <> 0)
+                       WHERE rcx.permission = :capallow) rc,
+                     {context} c,
+                     {context} sc,
+                     {role_assignments} ra,
+                     {user} u
                WHERE c.id = rc.contextid
-                     AND (sc.path = c.path OR sc.path LIKE ".sql_concat('c.path', "'/%'")." OR c.path LIKE ".sql_concat('sc.path', "'/%'").")
+                     AND (sc.path = c.path OR sc.path LIKE ".$DB->sql_concat('c.path', "'/%'")." OR c.path LIKE ".$DB->sql_concat('sc.path', "'/%'").")
                      AND u.id = ra.userid AND u.deleted = 0
                      AND ra.contextid = sc.id AND ra.roleid = rc.roleid";
 
-    $count = count_records_sql("SELECT COUNT(DISTINCT u.id) $sqlfrom");
+    $count = $DB->count_records_sql("SELECT COUNT(DISTINCT u.id) $sqlfrom", $params);
 
     $result->info = get_string('check_riskxss_warning', 'report_security', $count);
 
     if ($detailed) {
-        $users = get_records_sql("SELECT DISTINCT u.id, u.firstname, u.lastname, u.picture, u.imagealt $sqlfrom");
+        $users = $DB->get_records_sql("SELECT DISTINCT u.id, u.firstname, u.lastname, u.picture, u.imagealt $sqlfrom", $params);
         foreach ($users as $uid=>$user) {
             $users[$uid] = fullname($user);
         }
@@ -570,9 +555,9 @@ function report_security_check_riskxss($detailed=false) {
  * @return object result
  */
 function report_security_check_defaultuserrole($detailed=false) {
-    global $CFG;
+    global $DB, $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_defaultuserrole';
     $result->name    = get_string('check_defaultuserrole_name', 'report_security');
     $result->info    = null;
@@ -580,7 +565,7 @@ function report_security_check_defaultuserrole($detailed=false) {
     $result->status  = null;
     $result->link    = "<a href=\"$CFG->wwwroot/$CFG->admin/settings.php?section=userpolicies\">".get_string('userpolicies', 'admin').'</a>';;
 
-    if (!$default_role = get_record('role', 'id', $CFG->defaultuserroleid)) {
+    if (!$default_role = $DB->get_record('role', array('id'=>$CFG->defaultuserroleid))) {
         $result->status  = REPORT_SECURITY_WARNING;
         $result->info    = get_string('check_defaultuserrole_notset', 'report_security');
         $result->details = $result->info;
@@ -588,43 +573,25 @@ function report_security_check_defaultuserrole($detailed=false) {
         return $result;
     }
 
-    // first test if do anything enabled - that would be really crazy!
-    $sql = "SELECT COUNT(DISTINCT rc.contextid)
-              FROM {$CFG->prefix}role_capabilities rc
-             WHERE rc.capability = 'moodle/site:doanything'
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid = $default_role->id";
-
-    $anythingcount = count_records_sql($sql);
-
     // risky caps - usually very dangerous
+    $params = array('capallow'=>CAP_ALLOW, 'roleid'=>$default_role->id);
     $sql = "SELECT COUNT(DISTINCT rc.contextid)
-              FROM {$CFG->prefix}role_capabilities rc
-              JOIN {$CFG->prefix}capabilities cap ON cap.name = rc.capability
-             WHERE ".sql_bitand('cap.riskbitmask', (RISK_XSS | RISK_CONFIG | RISK_DATALOSS))." <> 0
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid = $default_role->id";
-
-    $riskycount = count_records_sql($sql);
+              FROM {role_capabilities} rc
+              JOIN {capabilities} cap ON cap.name = rc.capability
+             WHERE ".$DB->sql_bitand('cap.riskbitmask', (RISK_XSS | RISK_CONFIG | RISK_DATALOSS))." <> 0
+                   AND rc.permission = :capallow
+                   AND rc.roleid = :roleid";
 
-    // default role can not have view cap in all courses - this would break moodle badly
-    $viewcap = record_exists('role_capabilities', 'roleid', $default_role->id, 'permission', CAP_ALLOW, 'capability', 'moodle/course:view');
+    $riskycount = $DB->count_records_sql($sql, $params);
 
-    // it may have either no or 'user' legacy type - nothing else, or else it would break during upgrades badly
-    $legacyok = false;
-    $sql = "SELECT rc.capability, 1
-              FROM {$CFG->prefix}role_capabilities rc
-             WHERE rc.capability LIKE 'moodle/legacy:%'
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid = $default_role->id";
-    $legacycaps = get_records_sql($sql);
-    if (!$legacycaps) {
-        $legacyok = true;
-    } else if (count($legacycaps) == 1 and isset($legacycaps['moodle/legacy:user'])) {
+    // it may have either none or 'user' archetype - nothing else, or else it would break during upgrades badly
+    if ($default_role->archetype === '' or $default_role->archetype === 'user') {
         $legacyok = true;
+    } else {
+        $legacyok = false;
     }
 
-    if ($anythingcount or $riskycount or $viewcap or !$legacyok) {
+    if ($riskycount or !$legacyok) {
         $result->status  = REPORT_SECURITY_CRITICAL;
         $result->info    = get_string('check_defaultuserrole_error', 'report_security', format_string($default_role->name));
 
@@ -646,9 +613,9 @@ function report_security_check_defaultuserrole($detailed=false) {
  * @return object result
  */
 function report_security_check_guestrole($detailed=false) {
-    global $CFG;
+    global $DB, $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_guestrole';
     $result->name    = get_string('check_guestrole_name', 'report_security');
     $result->info    = null;
@@ -656,7 +623,7 @@ function report_security_check_guestrole($detailed=false) {
     $result->status  = null;
     $result->link    = "<a href=\"$CFG->wwwroot/$CFG->admin/settings.php?section=userpolicies\">".get_string('userpolicies', 'admin').'</a>';;
 
-    if (!$guest_role = get_record('role', 'id', $CFG->guestroleid)) {
+    if (!$guest_role = $DB->get_record('role', array('id'=>$CFG->guestroleid))) {
         $result->status  = REPORT_SECURITY_WARNING;
         $result->info    = get_string('check_guestrole_notset', 'report_security');
         $result->details = $result->info;
@@ -664,40 +631,25 @@ function report_security_check_guestrole($detailed=false) {
         return $result;
     }
 
-    // first test if do anything enabled - that would be really crazy!
-    $sql = "SELECT COUNT(DISTINCT rc.contextid)
-              FROM {$CFG->prefix}role_capabilities rc
-             WHERE rc.capability = 'moodle/site:doanything'
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid = $guest_role->id";
-
-    $anythingcount = count_records_sql($sql);
-
     // risky caps - usually very dangerous
+    $params = array('capallow'=>CAP_ALLOW, 'roleid'=>$guest_role->id);
     $sql = "SELECT COUNT(DISTINCT rc.contextid)
-              FROM {$CFG->prefix}role_capabilities rc
-              JOIN {$CFG->prefix}capabilities cap ON cap.name = rc.capability
-             WHERE ".sql_bitand('cap.riskbitmask', (RISK_XSS | RISK_CONFIG | RISK_DATALOSS))." <> 0
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid = $guest_role->id";
+              FROM {role_capabilities} rc
+              JOIN {capabilities} cap ON cap.name = rc.capability
+             WHERE ".$DB->sql_bitand('cap.riskbitmask', (RISK_XSS | RISK_CONFIG | RISK_DATALOSS))." <> 0
+                   AND rc.permission = :capallow
+                   AND rc.roleid = :roleid";
 
-    $riskycount = count_records_sql($sql);
+    $riskycount = $DB->count_records_sql($sql, $params);
 
-    // it may have either no or 'guest' legacy type - nothing else, or else it would break during upgrades badly
-    $legacyok = false;
-    $sql = "SELECT rc.capability, 1
-              FROM {$CFG->prefix}role_capabilities rc
-             WHERE rc.capability LIKE 'moodle/legacy:%'
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid = $guest_role->id";
-    $legacycaps = get_records_sql($sql);
-    if (!$legacycaps) {
-        $legacyok = true;
-    } else if (count($legacycaps) == 1 and isset($legacycaps['moodle/legacy:guest'])) {
+    // it may have either no or 'guest' archetype - nothing else, or else it would break during upgrades badly
+    if ($guest_role->archetype === '' or $guest_role->archetype === 'guest') {
         $legacyok = true;
+    } else {
+        $legacyok = false;
     }
 
-    if ($anythingcount or $riskycount or !$legacyok) {
+    if ($riskycount or !$legacyok) {
         $result->status  = REPORT_SECURITY_CRITICAL;
         $result->info    = get_string('check_guestrole_error', 'report_security', format_string($guest_role->name));
 
@@ -719,9 +671,9 @@ function report_security_check_guestrole($detailed=false) {
  * @return object result
  */
 function report_security_check_frontpagerole($detailed=false) {
-    global $CFG;
+    global $DB, $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_frontpagerole';
     $result->name    = get_string('check_frontpagerole_name', 'report_security');
     $result->info    = null;
@@ -729,7 +681,7 @@ function report_security_check_frontpagerole($detailed=false) {
     $result->status  = null;
     $result->link    = "<a href=\"$CFG->wwwroot/$CFG->admin/settings.php?section=frontpagesettings\">".get_string('frontpagesettings','admin').'</a>';;
 
-    if (!$frontpage_role = get_record('role', 'id', $CFG->defaultfrontpageroleid)) {
+    if (!$frontpage_role = $DB->get_record('role', array('id'=>$CFG->defaultfrontpageroleid))) {
         $result->status  = REPORT_SECURITY_INFO;
         $result->info    = get_string('check_frontpagerole_notset', 'report_security');
         $result->details = get_string('check_frontpagerole_details', 'report_security');
@@ -737,274 +689,36 @@ function report_security_check_frontpagerole($detailed=false) {
         return $result;
     }
 
-    // first test if do anything enabled - that would be really crazy!
-    $sql = "SELECT COUNT(DISTINCT rc.contextid)
-              FROM {$CFG->prefix}role_capabilities rc
-             WHERE rc.capability = 'moodle/site:doanything'
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid = $frontpage_role->id";
-
-    $anythingcount = count_records_sql($sql);
-
     // risky caps - usually very dangerous
+    $params = array('capallow'=>CAP_ALLOW, 'roleid'=>$frontpage_role->id);
     $sql = "SELECT COUNT(DISTINCT rc.contextid)
-              FROM {$CFG->prefix}role_capabilities rc
-              JOIN {$CFG->prefix}capabilities cap ON cap.name = rc.capability
-             WHERE ".sql_bitand('cap.riskbitmask', (RISK_XSS | RISK_CONFIG | RISK_DATALOSS))." <> 0
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid = $frontpage_role->id";
+              FROM {role_capabilities} rc
+              JOIN {capabilities} cap ON cap.name = rc.capability
+             WHERE ".$DB->sql_bitand('cap.riskbitmask', (RISK_XSS | RISK_CONFIG | RISK_DATALOSS))." <> 0
+                   AND rc.permission = :capallow
+                   AND rc.roleid = :roleid";
 
-    $riskycount = count_records_sql($sql);
+    $riskycount = $DB->count_records_sql($sql, $params);
 
     // there is no legacy role type for frontpage yet - anyway we can not allow teachers or admins there!
-    $sql = "SELECT rc.capability, 1
-              FROM {$CFG->prefix}role_capabilities rc
-             WHERE rc.capability LIKE 'moodle/legacy:%'
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid = $frontpage_role->id";
-    $legacycaps = get_records_sql($sql);
-    $legacyok = (!isset($legacycaps['moodle/legacy:teacher'])
-                 and !isset($legacycaps['moodle/legacy:editingteacher'])
-                 and !isset($legacycaps['moodle/legacy:coursecreator'])
-                 and !isset($legacycaps['moodle/legacy:admin']));
-
-    if ($anythingcount or $riskycount or !$legacyok) {
-        $result->status  = REPORT_SECURITY_CRITICAL;
-        $result->info    = get_string('check_frontpagerole_error', 'report_security', format_string($frontpage_role->name));
-
-    } else {
-        $result->status  = REPORT_SECURITY_OK;
-        $result->info    = get_string('check_frontpagerole_ok', 'report_security');
-    }
-
-    if ($detailed) {
-        $result->details = get_string('check_frontpagerole_details', 'report_security');
-    }
-
-    return $result;
-}
-
-/**
- * Verifies sanity of site default course role.
- * @param bool $detailed
- * @return object result
- */
-function report_security_check_defaultcourserole($detailed=false) {
-    global $CFG;
-
-    $problems = array();
-
-    $result = new object();
-    $result->issue   = 'report_security_check_defaultcourserole';
-    $result->name    = get_string('check_defaultcourserole_name', 'report_security');
-    $result->info    = null;
-    $result->details = null;
-    $result->status  = null;
-    $result->link    = "<a href=\"$CFG->wwwroot/$CFG->admin/settings.php?section=userpolicies\">".get_string('userpolicies', 'admin').'</a>';;
-
-    if ($detailed) {
-        $result->details = get_string('check_defaultcourserole_details', 'report_security');
-    }
-
-    if (!$student_role = get_record('role', 'id', $CFG->defaultcourseroleid)) {
-        $result->status  = REPORT_SECURITY_WARNING;
-        $result->info    = get_string('check_defaultcourserole_notset', 'report_security');
-        $result->details = get_string('check_defaultcourserole_details', 'report_security');
-
-        return $result;
-    }
-
-    // first test if do anything enabled - that would be really crazy!
-    $sql = "SELECT DISTINCT rc.contextid
-              FROM {$CFG->prefix}role_capabilities rc
-             WHERE rc.capability = 'moodle/site:doanything'
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid = $student_role->id";
-
-    if ($anything_contexts = get_records_sql($sql)) {
-        foreach($anything_contexts as $contextid) {
-            if ($contextid == SYSCONTEXTID) {
-                $a = "$CFG->wwwroot/$CFG->admin/roles/manage.php?action=view&amp;roleid=$CFG->defaultcourseroleid";
-            } else {
-                $a = "$CFG->wwwroot/$CFG->admin/roles/override.php?contextid=$contextid&amp;roleid=$CFG->defaultcourseroleid";
-            }
-            $problems[] = get_string('check_defaultcourserole_anything', 'report_security', $a);
-        }
-    }
-
-    // risky caps - usually very dangerous
-    $sql = "SELECT DISTINCT rc.contextid
-              FROM {$CFG->prefix}role_capabilities rc
-              JOIN {$CFG->prefix}capabilities cap ON cap.name = rc.capability
-             WHERE ".sql_bitand('cap.riskbitmask', (RISK_XSS | RISK_CONFIG | RISK_DATALOSS))." <> 0
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid = $student_role->id";
-
-    if ($riskycontexts = get_records_sql($sql)) {
-        foreach($riskycontexts as $contextid=>$unused) {
-            if ($contextid == SYSCONTEXTID) {
-                $a = "$CFG->wwwroot/$CFG->admin/roles/manage.php?action=view&amp;roleid=$CFG->defaultcourseroleid";
+    if ($frontpage_role->archetype === 'teacher' or $frontpage_role->archetype === 'editingteacher'
+      or $frontpage_role->archetype === 'coursecreator' or $frontpage_role->archetype === 'manager') {
+        $legacyok = false;
             } else {
-                $a = "$CFG->wwwroot/$CFG->admin/roles/override.php?contextid=$contextid&amp;roleid=$CFG->defaultcourseroleid";
-            }
-            $problems[] = get_string('check_defaultcourserole_risky', 'report_security', $a);
-        }
-    }
-
-    // course creator or administrator does not make any sense here
-    $sql = "SELECT rc.capability, 1
-              FROM {$CFG->prefix}role_capabilities rc
-             WHERE rc.capability LIKE 'moodle/legacy:%'
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid = $student_role->id";
-    $legacycaps = get_records_sql($sql);
-    if (isset($legacycaps['moodle/legacy:coursecreator']) or isset($legacycaps['moodle/legacy:admin'])) {
-        $problems[] = get_string('check_defaultcourserole_legacy', 'report_security');
+        $legacyok = true;
     }
 
-    if ($problems) {
+    if ($riskycount or !$legacyok) {
         $result->status  = REPORT_SECURITY_CRITICAL;
-        $result->info    = get_string('check_defaultcourserole_error', 'report_security', format_string($student_role->name));
-        if ($detailed) {
-            $result->details .= "<ul>";
-            foreach ($problems as $problem) {
-                $result->details .= "<li>$problem</li>";
-            }
-            $result->details .= "</ul>";
-        }
+        $result->info    = get_string('check_frontpagerole_error', 'report_security', format_string($frontpage_role->name));
 
     } else {
         $result->status  = REPORT_SECURITY_OK;
-        $result->info    = get_string('check_defaultcourserole_ok', 'report_security');
-    }
-
-    return $result;
-}
-
-/**
- * Verifies sanity of default roles in courses.
- * @param bool $detailed
- * @return object result
- */
-function report_security_check_courserole($detailed=false) {
-    global $CFG, $SITE;
-
-    $problems = array();
-
-    $result = new object();
-    $result->issue   = 'report_security_check_courserole';
-    $result->name    = get_string('check_courserole_name', 'report_security');
-    $result->info    = null;
-    $result->details = null;
-    $result->status  = null;
-    $result->link    = null;
-
-    if ($detailed) {
-        $result->details = get_string('check_courserole_details', 'report_security');
-    }
-
-    // get list of all student roles selected in courses excluding the default course role
-    $sql = "SELECT r.*
-              FROM {$CFG->prefix}role r
-              JOIN {$CFG->prefix}course c ON c.defaultrole = r.id
-             WHERE c.id <> $SITE->id AND r.id <> $CFG->defaultcourseroleid";
-
-    if (!$student_roles = get_records_sql($sql)) {
-        $result->status  = REPORT_SECURITY_OK;
-        $result->info    = get_string('check_courserole_notyet', 'report_security');
-        $result->details = get_string('check_courserole_details', 'report_security');
-
-        return $result;
-    }
-
-    $roleids = array_keys($student_roles);
-
-    $sql = "SELECT DISTINCT rc.roleid
-              FROM {$CFG->prefix}role_capabilities rc
-             WHERE (rc.capability = 'moodle/legacy:coursecreator' OR rc.capability = 'moodle/legacy:admin'
-                    OR rc.capability = 'moodle/legacy:teacher' OR rc.capability = 'moodle/legacy:editingteacher')
-                   AND rc.permission = ".CAP_ALLOW."";
-
-    $riskyroleids = get_records_sql($sql);
-    $riskyroleids = array_keys($riskyroleids);
-
-
-    // first test if do anything enabled - that would be really crazy!!!!!!
-    $inroles = implode(',', $roleids);
-    $sql = "SELECT rc.roleid, rc.contextid
-              FROM {$CFG->prefix}role_capabilities rc
-             WHERE rc.capability = 'moodle/site:doanything'
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND rc.roleid IN ($inroles)
-          GROUP BY rc.roleid, rc.contextid
-          ORDER BY rc.roleid, rc.contextid";
-
-    $rs = get_recordset_sql($sql);
-    while ($res = rs_fetch_next_record($rs)) {
-        $roleid    = $res->roleid;
-        $contextid = $res->contextid;
-        if ($contextid == SYSCONTEXTID) {
-            $a = "$CFG->wwwroot/$CFG->admin/roles/manage.php?action=view&amp;roleid=$roleid";
-        } else {
-            $a = "$CFG->wwwroot/$CFG->admin/roles/override.php?contextid=$contextid&amp;roleid=$roleid";
-        }
-        $problems[] = get_string('check_courserole_anything', 'report_security', $a);
-    }
-    rs_close($rs);
-
-    // any XSS legacy cap does not make any sense here!
-    $inroles = implode(',', $riskyroleids);
-    $sql = "SELECT DISTINCT c.id, c.shortname
-              FROM {$CFG->prefix}course c
-             WHERE c.defaultrole IN ($inroles)
-          ORDER BY c.sortorder";
-    if ($courses = get_records_sql($sql)) {
-        foreach ($courses as $course) {
-            $a = (object)array('url'=>"$CFG->wwwroot/course/edit.php?id=$course->id", 'shortname'=>$course->shortname);
-            $problems[] = get_string('check_courserole_riskylegacy', 'report_security', $a);
-        }
-    }
-
-    // risky caps in any level for roles not marked as risky yet - usually very dangerous!!
-    if ($checkroles = array_diff($roleids, $riskyroleids)) {
-        $inroles = implode(',', $checkroles);
-        $sql = "SELECT rc.roleid, rc.contextid
-                  FROM {$CFG->prefix}role_capabilities rc
-                  JOIN {$CFG->prefix}capabilities cap ON cap.name = rc.capability
-                 WHERE ".sql_bitand('cap.riskbitmask', (RISK_XSS | RISK_CONFIG | RISK_DATALOSS))." <> 0
-                       AND rc.permission = ".CAP_ALLOW."
-                       AND rc.roleid IN ($inroles)
-              GROUP BY rc.roleid, rc.contextid
-              ORDER BY rc.roleid, rc.contextid";
-        $rs = get_recordset_sql($sql);
-        while ($res = rs_fetch_next_record($rs)) {
-            $roleid    = $res->roleid;
-            $contextid = $res->contextid;
-            if ($contextid == SYSCONTEXTID) {
-                $a = "$CFG->wwwroot/$CFG->admin/roles/manage.php?action=view&amp;roleid=$roleid";
-            } else {
-                $a = "$CFG->wwwroot/$CFG->admin/roles/override.php?contextid=$contextid&amp;roleid=$roleid";
-            }
-            $problems[] = get_string('check_courserole_risky', 'report_security', $a);
-        }
-        rs_close($rs);
+        $result->info    = get_string('check_frontpagerole_ok', 'report_security');
     }
 
-
-    if ($problems) {
-        $result->status  = REPORT_SECURITY_CRITICAL;
-        $result->info    = get_string('check_courserole_error', 'report_security');
         if ($detailed) {
-            $result->details .= "<ul>";
-            foreach ($problems as $problem) {
-                $result->details .= "<li>$problem</li>";
-            }
-            $result->details .= "</ul>";
-        }
-
-    } else {
-        $result->status  = REPORT_SECURITY_OK;
-        $result->info    = get_string('check_courserole_ok', 'report_security');
+        $result->details = get_string('check_frontpagerole_details', 'report_security');
     }
 
     return $result;
@@ -1016,9 +730,9 @@ function report_security_check_courserole($detailed=false) {
  * @return object result
  */
 function report_security_check_riskadmin($detailed=false) {
-    global $CFG;
+    global $DB, $CFG;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_riskadmin';
     $result->name    = get_string('check_riskadmin_name', 'report_security');
     $result->info    = null;
@@ -1026,34 +740,13 @@ function report_security_check_riskadmin($detailed=false) {
     $result->status  = null;
     $result->link    = null;
 
-    $sql = "SELECT DISTINCT u.id, u.firstname, u.lastname, u.picture, u.imagealt, u.email
-              FROM {$CFG->prefix}role_capabilities rc
-              JOIN {$CFG->prefix}role_assignments ra ON (ra.contextid = rc.contextid AND ra.roleid = rc.roleid)
-              JOIN {$CFG->prefix}user u ON u.id = ra.userid
-             WHERE rc.capability = 'moodle/site:doanything'
-                   AND rc.permission = ".CAP_ALLOW."
-                   AND u.deleted = 0
-                   AND rc.contextid = ".SYSCONTEXTID."";
+    $sql = "SELECT u.id, u.firstname, u.lastname, u.picture, u.imagealt, u.email
+              FROM {user} u
+             WHERE u.id IN ($CFG->siteadmins)";
 
-    $admins = get_records_sql($sql);
+    $admins = $DB->get_records_sql($sql);
     $admincount = count($admins);
 
-    $sqlunsup = "SELECT u.id, u.firstname, u.lastname, u.picture, u.imagealt, u.email, ra.contextid, ra.roleid
-                  FROM (SELECT rcx.*
-                        FROM {$CFG->prefix}role_capabilities rcx
-                       WHERE rcx.capability = 'moodle/site:doanything' AND rcx.permission = ".CAP_ALLOW.") rc,
-                     {$CFG->prefix}context c,
-                     {$CFG->prefix}context sc,
-                     {$CFG->prefix}role_assignments ra,
-                     {$CFG->prefix}user u
-               WHERE c.id = rc.contextid
-                     AND (sc.path = c.path OR sc.path LIKE ".sql_concat('c.path', "'/%'")." OR c.path LIKE ".sql_concat('sc.path', "'/%'").")
-                     AND u.id = ra.userid AND u.deleted = 0
-                     AND ra.contextid = sc.id AND ra.roleid = rc.roleid AND ra.contextid <> ".SYSCONTEXTID."
-            GROUP BY u.id, u.firstname, u.lastname, u.picture, u.imagealt, u.email, ra.contextid, ra.roleid";
-
-    $unsupcount = count_records_sql("SELECT COUNT('x') FROM ($sqlunsup) unsup");
-
     if ($detailed) {
         foreach ($admins as $uid=>$user) {
             $url = "$CFG->wwwroot/user/view.php?id=$user->id";
@@ -1062,7 +755,6 @@ function report_security_check_riskadmin($detailed=false) {
         $admins = '<ul>'.implode($admins).'</ul>';
     }
 
-    if (!$unsupcount) {
         $result->status  = REPORT_SECURITY_OK;
         $result->info = get_string('check_riskadmin_ok', 'report_security', $admincount);
 
@@ -1070,27 +762,6 @@ function report_security_check_riskadmin($detailed=false) {
             $result->details = get_string('check_riskadmin_detailsok', 'report_security', $admins);
         }
 
-    } else {
-        $result->status  = REPORT_SECURITY_WARNING;
-        $a = (object)array('admincount'=>$admincount, 'unsupcount'=>$unsupcount);
-        $result->info = get_string('check_riskadmin_warning', 'report_security', $a);
-
-        if ($detailed) {
-            $sqlunsup .= " ORDER BY u.lastname, u.firstname";
-            $rs = get_recordset_sql($sqlunsup);
-            $users = array();
-            while ($user = rs_fetch_next_record($rs)) {
-                $url = "$CFG->wwwroot/$CFG->admin/roles/assign.php?contextid=$user->contextid&amp;roleid=$user->roleid";
-                $a = (object)array('fullname'=>fullname($user), 'url'=>$url, 'email'=>$user->email);
-                $users[] = '<li>'.get_string('check_riskadmin_unassign', 'report_security', $a).'</li>';
-            }
-            rs_close($rs);
-            $users = '<ul>'.implode($users).'</ul>';
-            $a = (object)array('admins'=>$admins, 'unsupported'=>$users);
-            $result->details = get_string('check_riskadmin_detailswarning', 'report_security', $a);
-        }
-    }
-
     return $result;
 }
 
@@ -1100,9 +771,9 @@ function report_security_check_riskadmin($detailed=false) {
  * @return object result
  */
 function report_security_check_riskbackup($detailed=false) {
-    global $CFG;
+    global $CFG, $DB;
 
-    $result = new object();
+    $result = new stdClass();
     $result->issue   = 'report_security_check_riskbackup';
     $result->name    = get_string('check_riskbackup_name', 'report_security');
     $result->info    = null;
@@ -1112,36 +783,44 @@ function report_security_check_riskbackup($detailed=false) {
 
     $syscontext = get_context_instance(CONTEXT_SYSTEM);
 
-    $systemroles = get_records_sql(
-        "SELECT DISTINCT r.id, r.name, r.shortname, r.sortorder
-           FROM {$CFG->prefix}role r
-           JOIN {$CFG->prefix}role_capabilities rc ON rc.roleid = r.id
-          WHERE rc.capability = 'moodle/backup:userinfo' AND rc.contextid = $syscontext->id AND rc.permission = ".CAP_ALLOW."");
-
-    $overriddenroles = get_records_sql(
-        "SELECT DISTINCT r.id, r.name, r.shortname, r.sortorder, rc.contextid
-           FROM {$CFG->prefix}role r
-           JOIN {$CFG->prefix}role_capabilities rc ON rc.roleid = r.id
-          WHERE rc.capability = 'moodle/backup:userinfo' AND rc.contextid <> $syscontext->id AND rc.permission = ".CAP_ALLOW."");
+    $params = array('capability'=>'moodle/backup:userinfo', 'permission'=>CAP_ALLOW, 'contextid'=>$syscontext->id);
+    $sql = "SELECT DISTINCT r.id, r.name, r.shortname, r.sortorder, r.archetype
+              FROM {role} r
+              JOIN {role_capabilities} rc ON rc.roleid = r.id
+             WHERE rc.capability = :capability
+               AND rc.contextid  = :contextid
+               AND rc.permission = :permission";
+    $systemroles = $DB->get_records_sql($sql, $params);
+
+    $params = array('capability'=>'moodle/backup:userinfo', 'permission'=>CAP_ALLOW, 'contextid'=>$syscontext->id);
+    $sql = "SELECT DISTINCT r.id, r.name, r.shortname, r.sortorder, r.archetype, rc.contextid
+              FROM {role} r
+              JOIN {role_capabilities} rc ON rc.roleid = r.id
+             WHERE rc.capability = :capability
+               AND rc.contextid <> :contextid
+               AND rc.permission = :permission";
+    $overriddenroles = $DB->get_records_sql($sql, $params);
 
     // list of users that are able to backup personal info
     // note: "sc" is context where is role assigned,
-    //       "c" is context where is role overriden or system context if in role definition
+    //       "c" is context where is role overridden or system context if in role definition
+    $params = array('capability'=>'moodle/backup:userinfo', 'permission'=>CAP_ALLOW, 'context1'=>CONTEXT_COURSE, 'context2'=>CONTEXT_COURSE);
+
     $sqluserinfo = "
         FROM (SELECT rcx.*
-                FROM {$CFG->prefix}role_capabilities rcx
-               WHERE rcx.permission = ".CAP_ALLOW." AND rcx.capability = 'moodle/backup:userinfo') rc,
-             {$CFG->prefix}context c,
-             {$CFG->prefix}context sc,
-             {$CFG->prefix}role_assignments ra,
-             {$CFG->prefix}user u
+                FROM {role_capabilities} rcx
+               WHERE rcx.permission = :permission AND rcx.capability = :capability) rc,
+             {context} c,
+             {context} sc,
+             {role_assignments} ra,
+             {user} u
        WHERE c.id = rc.contextid
-             AND (sc.path = c.path OR sc.path LIKE ".sql_concat('c.path', "'/%'")." OR c.path LIKE ".sql_concat('sc.path', "'/%'").")
+             AND (sc.path = c.path OR sc.path LIKE ".$DB->sql_concat('c.path', "'/%'")." OR c.path LIKE ".$DB->sql_concat('sc.path', "'/%'").")
              AND u.id = ra.userid AND u.deleted = 0
              AND ra.contextid = sc.id AND ra.roleid = rc.roleid
-             AND sc.contextlevel <= ".CONTEXT_COURSE." AND c.contextlevel <= ".CONTEXT_COURSE."";
+             AND sc.contextlevel <= :context1 AND c.contextlevel <= :context2";
 
-    $usercount = count_records_sql("SELECT COUNT('x') FROM (SELECT DISTINCT u.id $sqluserinfo) userinfo");
+    $usercount = $DB->count_records_sql("SELECT COUNT('x') FROM (SELECT DISTINCT u.id $sqluserinfo) userinfo", $params);
     $systemrolecount = empty($systemroles) ? 0 : count($systemroles);
     $overriddenrolecount = empty($overriddenroles) ? 0 : count($overriddenroles);
 
@@ -1182,18 +861,18 @@ function report_security_check_riskbackup($detailed=false) {
         }
 
         // Get a list of affected users as well
-        $rs = get_recordset_sql("SELECT DISTINCT u.id, u.firstname, u.lastname, u.picture, u.imagealt, u.email, ra.contextid, ra.roleid
-            $sqluserinfo ORDER BY u.lastname, u.firstname");
-
         $users = array();
-        while ($user = rs_fetch_next_record($rs)) {
+
+        $rs = $DB->get_recordset_sql("SELECT DISTINCT u.id, u.firstname, u.lastname, u.picture, u.imagealt, u.email, ra.contextid, ra.roleid
+            $sqluserinfo ORDER BY u.lastname, u.firstname", $params);
+
+        foreach ($rs as $user) {
             $context = get_context_instance_by_id($user->contextid);
             $url = "$CFG->wwwroot/$CFG->admin/roles/assign.php?contextid=$user->contextid&amp;roleid=$user->roleid";
             $a = (object)array('fullname'=>fullname($user), 'url'=>$url, 'email'=>$user->email,
                                'contextname'=>print_context_name($context));
             $users[] = '<li>'.get_string('check_riskbackup_unassign', 'report_security', $a).'</li>';
         }
-        rs_close($rs);
         if (!empty($users)) {
             $users = '<ul>'.implode($users).'</ul>';
             $result->details .= get_string('check_riskbackup_details_users', 'report_security', $users);
