diff --git a/admin/index.php b/admin/index.php
index 0874183..0c42497 100644
--- a/admin/index.php
+++ b/admin/index.php
@@ -1,699 +1,467 @@
-<?php // $Id$
-
-/// Check that config.php exists, if not then call the install script
-    if (!file_exists('../config.php')) {
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Main administration script.
+ *
+ * @package    core
+ * @copyright  1999 onwards Martin Dougiamas (http://dougiamas.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// Check that config.php exists, if not then call the install script
+if (!file_exists('../config.php')) {
         header('Location: ../install.php');
         die;
-    }
+}
 
-/// Check that PHP is of a sufficient version
-/// Moved here because older versions do not allow while(@ob_end_clean());
-    if (version_compare(phpversion(), "4.3.0") < 0) {
+// Check that PHP is of a sufficient version as soon as possible
+if (version_compare(phpversion(), '5.3.2') < 0) {
         $phpversion = phpversion();
-        echo "Sorry, Moodle requires PHP 4.3.0 or later (currently using version $phpversion)";
+    // do NOT localise - lang strings would not work here and we CAN NOT move it to later place
+    echo "Moodle 2.1 or later requires at least PHP 5.3.2 (currently using version $phpversion).<br />";
+    echo "Please upgrade your server software or install older Moodle version.";
         die;
-    }
-
-/// Turn off time limits and try to flush everything all the time, sometimes upgrades can be slow.
-
-    @set_time_limit(0);
-    @ob_implicit_flush(true);
-    while(@ob_end_clean()); // ob_end_flush prevents sending of headers
+}
 
+define('NO_OUTPUT_BUFFERING', true);
 
-    require_once('../config.php');
-    require_once($CFG->libdir.'/adminlib.php');  // Contains various admin-only functions
-    require_once($CFG->libdir.'/ddllib.php'); // Install/upgrade related db functions
-    require_once($CFG->libdir.'/db/upgradelib.php');  // Upgrade-related functions
+require('../config.php');
+require_once($CFG->libdir.'/adminlib.php');    // various admin-only functions
+require_once($CFG->libdir.'/upgradelib.php');  // general upgrade/install related functions
 
-    $id             = optional_param('id', '', PARAM_TEXT);
-    $confirmupgrade = optional_param('confirmupgrade', 0, PARAM_BOOL);
-    $confirmrelease = optional_param('confirmrelease', 0, PARAM_BOOL);
-    $agreelicense   = optional_param('agreelicense', 0, PARAM_BOOL);
-    $autopilot      = optional_param('autopilot', 0, PARAM_BOOL);
-    $ignoreupgradewarning = optional_param('ignoreupgradewarning', 0, PARAM_BOOL);
-    $confirmplugincheck = optional_param('confirmplugincheck', 0, PARAM_BOOL);
+$id             = optional_param('id', '', PARAM_TEXT);
+$confirmupgrade = optional_param('confirmupgrade', 0, PARAM_BOOL);
+$confirmrelease = optional_param('confirmrelease', 0, PARAM_BOOL);
+$confirmplugins = optional_param('confirmplugincheck', 0, PARAM_BOOL);
+$showallplugins = optional_param('showallplugins', 0, PARAM_BOOL);
+$agreelicense   = optional_param('agreelicense', 0, PARAM_BOOL);
 
-/// check upgrade status first
-    if ($ignoreupgradewarning and !empty($_SESSION['upgraderunning'])) {
-        $_SESSION['upgraderunning'] = 0;
-    }
-    upgrade_check_running("Upgrade already running in this session, please wait!<br />Click on the exclamation marks to ignore this warning (<a href=\"index.php?ignoreupgradewarning=1\">!!!</a>).", 10);
+// Check some PHP server settings
 
-/// set install/upgrade autocontinue session flag
-    if ($autopilot) {
-        $_SESSION['installautopilot'] = $autopilot;
-    }
+$PAGE->set_url('/admin/index.php');
+$PAGE->set_pagelayout('admin'); // Set a default pagelayout
 
-/// Check some PHP server settings
+$documentationlink = '<a href="http://docs.moodle.org/en/Installation">Installation docs</a>';
 
-    $documentationlink = '<a href="http://docs.moodle.org/19/en/Installation">Installation docs</a>';
+if (ini_get_bool('session.auto_start')) {
+    print_error('phpvaroff', 'debug', '', (object)array('name'=>'session.auto_start', 'link'=>$documentationlink));
+}
 
-    if (ini_get_bool('session.auto_start')) {
-        error("The PHP server variable 'session.auto_start' should be Off - $documentationlink");
-    }
-
-    if (ini_get_bool('magic_quotes_runtime')) {
-        error("The PHP server variable 'magic_quotes_runtime' should be Off - $documentationlink");
-    }
+if (ini_get_bool('magic_quotes_runtime')) {
+    print_error('phpvaroff', 'debug', '', (object)array('name'=>'magic_quotes_runtime', 'link'=>$documentationlink));
+}
 
-    if (!ini_get_bool('file_uploads')) {
-        error("The PHP server variable 'file_uploads' is not turned On - $documentationlink");
-    }
+if (!ini_get_bool('file_uploads')) {
+    print_error('phpvaron', 'debug', '', (object)array('name'=>'file_uploads', 'link'=>$documentationlink));
+}
 
-    if (is_float_problem()) {
+if (is_float_problem()) {
         print_error('phpfloatproblem', 'admin', '', $documentationlink);
-    }
-
-    if (empty($CFG->prefix) && $CFG->dbfamily != 'mysql') {  //Enforce prefixes for everybody but mysql
-        error('$CFG->prefix can\'t be empty for your target DB (' . $CFG->dbtype . ')');
-    }
-
-    if ($CFG->dbfamily == 'oracle' && strlen($CFG->prefix) > 2) { //Max prefix length for Oracle is 2cc
-        error('$CFG->prefix maximum allowed length for Oracle DBs is 2cc.');
-    }
-
-/// Check that config.php has been edited
-
-    if ($CFG->wwwroot == "http://example.com/moodle") {
-        error("Moodle has not been configured yet.  You need to edit config.php first.");
-    }
-
+}
+
+// Set some necessary variables during set-up to avoid PHP warnings later on this page
+if (!isset($CFG->framename)) {
+    $CFG->framename = '_top';
+}
+if (!isset($CFG->release)) {
+    $CFG->release = '';
+}
+if (!isset($CFG->version)) {
+    $CFG->version = '';
+}
+
+$version = null;
+$release = null;
+require("$CFG->dirroot/version.php");       // defines $version, $release and $maturity
+$CFG->target_release = $release;            // used during installation and upgrades
+
+if (!$version or !$release) {
+    print_error('withoutversion', 'debug'); // without version, stop
+}
+
+// Turn off xmlstrictheaders during upgrade.
+$origxmlstrictheaders = !empty($CFG->xmlstrictheaders);
+$CFG->xmlstrictheaders = false;
+
+if (!core_tables_exist()) {
+    $PAGE->set_pagelayout('maintenance');
+    $PAGE->set_popup_notification_allowed(false);
+
+    // fake some settings
+    $CFG->docroot = 'http://docs.moodle.org';
 
-/// Check settings in config.php
+    $strinstallation = get_string('installation', 'install');
 
-    $dirroot = dirname(realpath("../index.php"));
-    if (!empty($dirroot) and $dirroot != $CFG->dirroot) {
-        error("Please fix your settings in config.php:
-              <p>You have:
-              <p>\$CFG->dirroot = \"".addslashes($CFG->dirroot)."\";
-              <p>but it should be:
-              <p>\$CFG->dirroot = \"".addslashes($dirroot)."\";",
-              "./");
-    }
+    // remove current session content completely
+    session_get_instance()->terminate_current();
 
-/// Set some necessary variables during set-up to avoid PHP warnings later on this page
-    if (!isset($CFG->framename)) {
-        $CFG->framename = "_top";
-    }
-    if (!isset($CFG->release)) {
-        $CFG->release = "";
-    }
-    if (!isset($CFG->version)) {
-        $CFG->version = "";
+    if (empty($agreelicense)) {
+        $strlicense = get_string('license');
+        $PAGE->navbar->add($strlicense);
+        $PAGE->set_title($strinstallation.' - Moodle '.$CFG->target_release);
+        $PAGE->set_heading($strinstallation);
+        $PAGE->set_cacheable(false);
+        echo $OUTPUT->header();
+        echo $OUTPUT->heading('<a href="http://moodle.org">Moodle</a> - Modular Object-Oriented Dynamic Learning Environment');
+        echo $OUTPUT->heading(get_string('copyrightnotice'));
+        $copyrightnotice = text_to_html(get_string('gpl3'));
+        $copyrightnotice = str_replace('target="_blank"', 'onclick="this.target=\'_blank\'"', $copyrightnotice); // extremely ugly validation hack
+        echo $OUTPUT->box($copyrightnotice, 'copyrightnotice');
+        echo '<br />';
+        $continue = new single_button(new moodle_url('/admin/index.php', array('lang'=>$CFG->lang, 'agreelicense'=>1)), get_string('continue'), 'get');
+        echo $OUTPUT->confirm(get_string('doyouagree'), $continue, "http://docs.moodle.org/dev/License");
+        echo $OUTPUT->footer();
+        die;
     }
+    if (empty($confirmrelease)) {
+        $strcurrentrelease = get_string('currentrelease');
+        $PAGE->navbar->add($strcurrentrelease);
+        $PAGE->set_title($strinstallation);
+        $PAGE->set_heading($strinstallation . ' - Moodle ' . $CFG->target_release);
+        $PAGE->set_cacheable(false);
+        echo $OUTPUT->header();
+        echo $OUTPUT->heading("Moodle $release");
 
-    if (is_readable("$CFG->dirroot/version.php")) {
-        include_once("$CFG->dirroot/version.php");              # defines $version
+        if (isset($maturity)) {
+            // main version.php declares moodle code maturity
+            if ($maturity < MATURITY_STABLE) {
+                $maturitylevel = get_string('maturity'.$maturity, 'admin');
+                echo $OUTPUT->box(
+                    $OUTPUT->container(get_string('maturitycorewarning', 'admin', $maturitylevel)) .
+                    $OUTPUT->container($OUTPUT->doc_link('admin/versions', get_string('morehelp'))),
+                    'generalbox maturitywarning');
     }
-
-    if (!$version or !$release) {
-        error('Main version.php was not readable or specified');# without version, stop
     }
 
-/// Check if the main tables have been installed yet or not.
-
-    if (! $tables = $db->Metatables() ) {    // No tables yet at all.
-        $maintables = false;
+        $releasenoteslink = get_string('releasenoteslink', 'admin', 'http://docs.moodle.org/dev/Releases');
+        $releasenoteslink = str_replace('target="_blank"', 'onclick="this.target=\'_blank\'"', $releasenoteslink); // extremely ugly validation hack
+        echo $OUTPUT->box($releasenoteslink, 'generalbox releasenoteslink');
 
-    } else {                                 // Check for missing main tables
-        $maintables = true;
-        $mtables = array("config", "course", "course_categories", "course_modules",
-                         "course_sections", "log", "log_display", "modules",
-                         "user");
-        foreach ($mtables as $mtable) {
-            if (!in_array($CFG->prefix.$mtable, $tables)) {
-                $maintables = false;
-                break;
-            }
-        }
+        require_once($CFG->libdir.'/environmentlib.php');
+        if (!check_moodle_environment(normalize_version($release), $environment_results, true, ENV_SELECT_RELEASE)) {
+            print_upgrade_reload("index.php?agreelicense=1&amp;lang=$CFG->lang");
+        } else {
+            echo $OUTPUT->notification(get_string('environmentok', 'admin'), 'notifysuccess');
+            echo $OUTPUT->continue_button(new moodle_url('/admin/index.php', array('agreelicense'=>1, 'confirmrelease'=>1, 'lang'=>$CFG->lang)));
     }
     
-    if (! $maintables) {
-    /// hide errors from headers in case debug enabled in config.php
-        $origdebug = $CFG->debug;
-        $CFG->debug = DEBUG_MINIMAL;
-        error_reporting($CFG->debug);
-        if (empty($agreelicense)) {
-            $strlicense = get_string('license');
-            $navigation = build_navigation(array(array('name'=>$strlicense, 'link'=>null, 'type'=>'misc')));
-            print_header($strlicense, $strlicense, $navigation, "", "", false, "&nbsp;", "&nbsp;");
-            print_heading("<a href=\"http://moodle.org\">Moodle</a> - Modular Object-Oriented Dynamic Learning Environment");
-            print_heading(get_string('copyrightnotice'));
-            print_box(text_to_html(get_string('gpl')), 'copyrightnotice');
-            echo "<br />";
-            notice_yesno(get_string('doyouagree'), "index.php?agreelicense=1",
-                                                   "http://docs.moodle.org/dev/License");
-            print_footer('none');
-            exit;
-        }
-        if (empty($confirmrelease)) {
-            $strcurrentrelease = get_string("currentrelease");
-            $navigation = build_navigation(array(array('name'=>$strcurrentrelease, 'link'=>null, 'type'=>'misc')));
-            print_header($strcurrentrelease, $strcurrentrelease, $navigation, "", "", false, "&nbsp;", "&nbsp;");
-            print_heading("Moodle $release");
-            print_box(get_string('releasenoteslink', 'admin', 'http://docs.moodle.org/19/en/Release_Notes'), 'generalbox boxaligncenter boxwidthwide');
-            echo '<form action="index.php"><div>';
-            echo '<input type="hidden" name="agreelicense" value="1" />';
-            echo '<input type="hidden" name="confirmrelease" value="1" />';
-            echo '</div>';
-            echo '<div class="continuebutton"><input name="autopilot" id="autopilot" type="checkbox" value="1" /><label for="autopilot">'.get_string('unattendedoperation', 'admin').'</label>';
-            echo '<br /><br /><input type="submit" value="'.get_string('continue').'" /></div>';
-            echo '</form>';
-            print_footer('none');
+        echo $OUTPUT->footer();
             die;
         }
 
+    $strdatabasesetup = get_string('databasesetup');
+    upgrade_init_javascript();
+    $PAGE->navbar->add($strdatabasesetup);
+    $PAGE->set_title($strinstallation.' - Moodle '.$CFG->target_release);
+    $PAGE->set_heading($strinstallation);
+    $PAGE->set_cacheable(false);
+    echo $OUTPUT->header();
 
-        $strdatabasesetup    = get_string("databasesetup");
-        $strdatabasesuccess  = get_string("databasesuccess");
-        $navigation = build_navigation(array(array('name'=>$strdatabasesetup, 'link'=>null, 'type'=>'misc')));
-        print_header($strdatabasesetup, $strdatabasesetup, $navigation,
-                        "", upgrade_get_javascript(), false, "&nbsp;", "&nbsp;");
-    /// return to original debugging level
-        $CFG->debug = $origdebug;
-        error_reporting($CFG->debug);
-        upgrade_log_start();
-        $db->debug = true;
-
-    /// Both old .sql files and new install.xml are supported
-    /// But we prioritise install.xml (XMLDB) if present
-
-        change_db_encoding(); // first try to change db encoding to utf8
-        if (!setup_is_unicodedb()) {
+    if (!$DB->setup_is_unicodedb()) {
+        if (!$DB->change_db_encoding()) {
             // If could not convert successfully, throw error, and prevent installation
             print_error('unicoderequired', 'admin');
         }
-
-        $status = false;
-        if (file_exists("$CFG->libdir/db/install.xml")) {
-            $status = install_from_xmldb_file("$CFG->libdir/db/install.xml"); //New method
-        } else if (file_exists("$CFG->libdir/db/$CFG->dbtype.sql")) {
-            $status = modify_database("$CFG->libdir/db/$CFG->dbtype.sql"); //Old method
-        } else {
-            error("Error: Your database ($CFG->dbtype) is not yet fully supported by Moodle or install.xml is not present.  See the lib/db directory.");
-        }
-
-        // all new installs are in unicode - keep for backwards compatibility and 1.8 upgrade checks
-        set_config('unicodedb', 1);
-
-    /// Continue with the instalation
-        $db->debug = false;
-        if ($status) {
-
-            /// Groups install is now in core above.
-
-            // Install the roles system.
-            moodle_install_roles();
-            set_config('statsrolesupgraded',time());
-
-            // install core event handlers
-            events_update_definition();
-
-            /// This is used to handle any settings that must exist in $CFG but which do not exist in
-            /// admin_get_root()/$ADMIN as admin_setting objects (there are some exceptions).
-            apply_default_exception_settings(array('auth' => 'email',
-                                                   'auth_pop3mailbox' => 'INBOX',
-                                                   'enrol' => 'manual',
-                                                   'enrol_plugins_enabled' => 'manual',
-                                                   'style' => 'default',
-                                                   'template' => 'default',
-                                                   'theme' => 'standardwhite',
-                                                   'filter_multilang_converted' => 1));
-
-            // Write default settings unconditionally (i.e. even if a setting is already set, overwrite it)
-            // (this should only have any effect during initial install).
-            admin_apply_default_settings(NULL, true);
-
-            notify($strdatabasesuccess, "green");
-            require_once $CFG->dirroot.'/mnet/lib.php';
-        } else {
-            error("Error: Main databases NOT set up successfully");
-        }
-        print_continue('index.php');
-        print_footer('none');
-        die;
     }
 
+    install_core($version, true);
+}
 
-/// Check version of Moodle code on disk compared with database
-/// and upgrade if possible.
 
-    if (file_exists("$CFG->dirroot/lib/db/$CFG->dbtype.php")) {
-        include_once("$CFG->dirroot/lib/db/$CFG->dbtype.php");  # defines old upgrades
-    }
-    if (file_exists("$CFG->dirroot/lib/db/upgrade.php")) {
-        include_once("$CFG->dirroot/lib/db/upgrade.php");  # defines new upgrades
-    }
+// Check version of Moodle code on disk compared with database
+// and upgrade if possible.
 
-    $stradministration = get_string("administration");
+$stradministration = get_string('administration');
+$PAGE->set_context(get_context_instance(CONTEXT_SYSTEM));
 
-    if ($CFG->version) {
-        if ($version > $CFG->version) {  // upgrade
+if (empty($CFG->version)) {
+    print_error('missingconfigversion', 'debug');
+}
 
-        /// If the database is not already Unicode then we do not allow upgrading!
-        /// Instead, we print an error telling them to upgrade to 1.7 first.  MDL-6857
-            if (empty($CFG->unicodedb)) {
-                print_error('unicodeupgradeerror', 'error', '', $version);
-            }
+if ($version > $CFG->version) {  // upgrade
+    purge_all_caches();
+    $PAGE->set_pagelayout('maintenance');
+    $PAGE->set_popup_notification_allowed(false);
 
             $a->oldversion = "$CFG->release ($CFG->version)";
             $a->newversion = "$release ($version)";
-            $strdatabasechecking = get_string("databasechecking", "", $a);
-
-            // hide errors from headers in case debug is enabled
-            $origdebug = $CFG->debug;
-            $CFG->debug = DEBUG_MINIMAL;
-            error_reporting($CFG->debug);
-
-            // logo ut in case we are upgrading from pre 1.9 version in order to prevent
-            // weird session/role problems caused by incorrect data in USER and SESSION
-            if ($CFG->version < 2007101500) {
-                require_logout();
-            }
+    $strdatabasechecking = get_string('databasechecking', '', $a);
 
             if (empty($confirmupgrade)) {
-                $navigation = build_navigation(array(array('name'=>$strdatabasechecking, 'link'=>null, 'type'=>'misc')));
-                print_header($strdatabasechecking, $stradministration, $navigation,
-                        "", "", false, "&nbsp;", "&nbsp;");
-
-                notice_yesno(get_string('upgradesure', 'admin', $a->newversion), 'index.php?confirmupgrade=1', 'index.php');
-                print_footer('none');
+        $PAGE->set_title($stradministration);
+        $PAGE->set_heading($strdatabasechecking);
+        $PAGE->set_cacheable(false);
+        echo $OUTPUT->header();
+        if (isset($maturity)) {
+            // main version.php declares moodle code maturity
+            if ($maturity < MATURITY_STABLE) {
+                $maturitylevel = get_string('maturity'.$maturity, 'admin');
+                echo $OUTPUT->box(
+                    $OUTPUT->container(get_string('maturitycorewarning', 'admin', $maturitylevel)) .
+                    $OUTPUT->container($OUTPUT->doc_link('admin/versions', get_string('morehelp'))),
+                    'generalbox maturitywarning');
+}
+        }
+        $continueurl = new moodle_url('index.php', array('confirmupgrade' => 1));
+        $cancelurl = new moodle_url('index.php');
+        echo $OUTPUT->confirm(get_string('upgradesure', 'admin', $a->newversion), $continueurl, $cancelurl);
+        echo $OUTPUT->footer();
                 exit;
 
             } else if (empty($confirmrelease)){
-                $strcurrentrelease = get_string("currentrelease");
-                $navigation = build_navigation(array(array('name'=>$strcurrentrelease, 'link'=>null, 'type'=>'misc')));
-                print_header($strcurrentrelease, $strcurrentrelease, $navigation, "", "", false, "&nbsp;", "&nbsp;");
-                print_heading("Moodle $release");
-                print_box(get_string('releasenoteslink', 'admin', 'http://docs.moodle.org/19/en/Release_Notes'));
+        $strcurrentrelease = get_string('currentrelease');
+        $PAGE->navbar->add($strcurrentrelease);
+        $PAGE->set_title($strcurrentrelease);
+        $PAGE->set_heading($strcurrentrelease);
+        $PAGE->set_cacheable(false);
+        echo $OUTPUT->header();
+        echo $OUTPUT->heading("Moodle $release");
+        $releasenoteslink = get_string('releasenoteslink', 'admin', 'http://docs.moodle.org/dev/Releases');
+        $releasenoteslink = str_replace('target="_blank"', 'onclick="this.target=\'_blank\'"', $releasenoteslink); // extremely ugly validation hack
+        echo $OUTPUT->box($releasenoteslink);
 
                 require_once($CFG->libdir.'/environmentlib.php');
-                print_heading(get_string('environment', 'admin'));
-                remove_dir($CFG->dataroot . '/environment'); /// Always delete downloaded env. info to force use of the released one. MDL-9796
-                if (!check_moodle_environment($release, $environment_results, true)) {
-                    if (empty($CFG->skiplangupgrade)) {
-                        print_box_start('generalbox', 'notice'); // MDL-8330
-                        print_string('langpackwillbeupdated', 'admin');
-                        print_box_end();
-                    }
-                    notice_yesno(get_string('environmenterrorupgrade', 'admin'),
-                                 'index.php?confirmupgrade=1&amp;confirmrelease=1', 'index.php');
+        if (!check_moodle_environment($release, $environment_results, true, ENV_SELECT_RELEASE)) {
+            print_upgrade_reload('index.php?confirmupgrade=1');
                 } else {
-                    notify(get_string('environmentok', 'admin'), 'notifysuccess');
+            echo $OUTPUT->notification(get_string('environmentok', 'admin'), 'notifysuccess');
                     if (empty($CFG->skiplangupgrade)) {
-                        print_box_start('generalbox', 'notice'); // MDL-8330
+                echo $OUTPUT->box_start('generalbox', 'notice');
                         print_string('langpackwillbeupdated', 'admin');
-                        print_box_end();
+                echo $OUTPUT->box_end();
                     }
-                    echo '<form action="index.php"><div>';
-                    echo '<input type="hidden" name="confirmupgrade" value="1" />';
-                    echo '<input type="hidden" name="confirmrelease" value="1" />';
-                    echo '</div>';
-                    echo '<div class="continuebutton">';
-                    echo '<br /><br /><input type="submit" value="'.get_string('continue').'" /></div>';
-                    echo '</form>';
+            echo $OUTPUT->continue_button('index.php?confirmupgrade=1&confirmrelease=1');
                 }
 
-                print_footer('none');
+        echo $OUTPUT->footer();
                 die;
-            } elseif (empty($confirmplugincheck)) { 
+
+    } elseif (empty($confirmplugins)) {
                 $strplugincheck = get_string('plugincheck');
-                $navigation = build_navigation(array(array('name'=>$strplugincheck, 'link'=>null, 'type'=>'misc')));
-                print_header($strplugincheck, $strplugincheck, $navigation, "", "", false, "&nbsp;", "&nbsp;");
-                print_heading($strplugincheck);
-                print_box_start('generalbox', 'notice'); // MDL-8330
-                print_string('pluginchecknotice');
-                print_box_end();
-                print_plugin_tables();
-                echo "<br />";
-                echo '<div class="continuebutton">';
-                echo '<a href="index.php?confirmupgrade=1&amp;confirmrelease=1" title="'.get_string('reload').'" ><img src="'.$CFG->pixpath.'/i/reload.gif" alt="" /> '.get_string('reload').'</a>';
-                echo '</div><br />';
-                echo '<form action="index.php"><div>';
-                echo '<input type="hidden" name="confirmupgrade" value="1" />';
-                echo '<input type="hidden" name="confirmrelease" value="1" />';
-                echo '<input type="hidden" name="confirmplugincheck" value="1" />';
-                echo '</div>';
-                echo '<div class="continuebutton"><input name="autopilot" id="autopilot" type="checkbox" value="1" /><label for="autopilot">'.get_string('unattendedoperation', 'admin').'</label>';
-                echo '<br /><br /><input type="submit" value="'.get_string('continue').'" /></div>';
-                echo '</form>';
-                print_footer('none');
+        $PAGE->navbar->add($strplugincheck);
+        $PAGE->set_title($strplugincheck);
+        $PAGE->set_heading($strplugincheck);
+        $PAGE->set_cacheable(false);
+        $output = $PAGE->get_renderer('core', 'admin');
+        $pluginman = plugin_manager::instance();
+
+        echo $output->header();
+        echo $output->box_start('generalbox');
+        echo $output->container(get_string('pluginchecknotice', 'core_plugin'), 'generalbox', 'notice');
+        echo $output->plugins_check($pluginman->get_plugins(), array('full' => $showallplugins));
+        echo $output->box_end();
+        print_upgrade_reload('index.php?confirmupgrade=1&amp;confirmrelease=1');
+        $button = new single_button(new moodle_url('index.php', array('confirmupgrade'=>1, 'confirmrelease'=>1, 'confirmplugincheck'=>1)), get_string('upgradestart', 'admin'), 'get');
+        $button->class = 'continuebutton';
+        echo $output->render($button);
+        echo $output->footer();
                 die();
     
             } else {
-                $strdatabasesuccess  = get_string("databasesuccess");
-                $navigation = build_navigation(array(array('name'=>$strdatabasesuccess, 'link'=>null, 'type'=>'misc')));
-                print_header($strdatabasechecking, $stradministration, $navigation,
-                        "", upgrade_get_javascript(), false, "&nbsp;", "&nbsp;");
-
-            /// return to original debugging level
-                $CFG->debug = $origdebug;
-                error_reporting($CFG->debug);
-                upgrade_log_start();
-
-            /// Upgrade current language pack if we can
-                if (empty($CFG->skiplangupgrade)) {
-                    upgrade_language_pack();
-                }
-
-                print_heading($strdatabasechecking);
-                $db->debug=true;
-            /// Launch the old main upgrade (if exists)
-                $status = true;
-                if (function_exists('main_upgrade')) {
-                    $status = main_upgrade($CFG->version);
-                }
-            /// If succesful and exists launch the new main upgrade (XMLDB), called xmldb_main_upgrade
-                if ($status && function_exists('xmldb_main_upgrade')) {
-                    $status = xmldb_main_upgrade($CFG->version);
-                }
-                $db->debug=false;
-            /// If successful, continue upgrading roles and setting everything properly
-                if ($status) {
-                    if (empty($CFG->rolesactive)) {
-
-                        /// Groups upgrade is now in core above.
-
-                        // Upgrade to the roles system.
-                        moodle_install_roles();
-                        set_config('rolesactive', 1);
-                    } else if (!update_capabilities()) {
-                        error('Had trouble upgrading the core capabilities for the Roles System');
-                    }
-                    // update core events
-                    events_update_definition();
-
-                    require_once($CFG->libdir.'/statslib.php');
-                    if (!stats_upgrade_for_roles_wrapper()) {
-                        notify('Couldn\'t upgrade the stats tables to use the new roles system');
+        // Launch main upgrade
+        upgrade_core($version, true);
+    }
+} else if ($version < $CFG->version) {
+    // better stop here, we can not continue with plugin upgrades or anything else
+    throw new moodle_exception('downgradedcore', 'error', new moodle_url('/admin/'));
+}
+
+// Updated human-readable release version if necessary
+if ($release <> $CFG->release) {  // Update the release version
+    set_config('release', $release);
+}
+
+if (moodle_needs_upgrading()) {
+    if (!$PAGE->headerprinted) {
+        // means core upgrade or installation was not already done
+        if (!$confirmplugins) {
+            $PAGE->set_pagelayout('maintenance');
+            $PAGE->set_popup_notification_allowed(false);
+            $strplugincheck = get_string('plugincheck');
+            $PAGE->navbar->add($strplugincheck);
+            $PAGE->set_title($strplugincheck);
+            $PAGE->set_heading($strplugincheck);
+            $PAGE->set_cacheable(false);
+            $output = $PAGE->get_renderer('core', 'admin');
+            $pluginman = plugin_manager::instance();
+
+            echo $output->header();
+            echo $output->box_start('generalbox');
+            echo $output->container(get_string('pluginchecknotice', 'core_plugin'), 'generalbox', 'notice');
+            echo $output->plugins_check($pluginman->get_plugins(), array('full' => $showallplugins));
+            echo $output->box_end();
+            print_upgrade_reload('index.php');
+            $button = new single_button(new moodle_url('index.php', array('confirmplugincheck'=>1)), get_string('upgradestart', 'admin'), 'get');
+            $button->class = 'continuebutton';
+            echo $output->render($button);
+            echo $output->footer();
+            die();
                     }
-                    if (set_config("version", $version)) {
-                        remove_dir($CFG->dataroot . '/cache', true); // flush cache
-                        notify($strdatabasesuccess, "green");
-                        print_continue("upgradesettings.php");
-                        print_footer('none');
-                        exit;
-                    } else {
-                        error('Upgrade failed!  (Could not update version in config table)');
                     }
-            /// Main upgrade not success
+    // install/upgrade all plugins and other parts
+    upgrade_noncore(true);
+}
+
+// If this is the first install, indicate that this site is fully configured
+// except the admin password
+if (during_initial_install()) {
+    set_config('rolesactive', 1); // after this, during_initial_install will return false.
+    set_config('adminsetuppending', 1);
+    // we need this redirect to setup proper session
+    upgrade_finished("index.php?sessionstarted=1&amp;lang=$CFG->lang");
+}
+
+// make sure admin user is created - this is the last step because we need
+// session to be working properly in order to edit admin account
+ if (!empty($CFG->adminsetuppending)) {
+    $sessionstarted = optional_param('sessionstarted', 0, PARAM_BOOL);
+    if (!$sessionstarted) {
+        redirect("index.php?sessionstarted=1&lang=$CFG->lang");
                 } else {
-                    notify('Main Upgrade failed!  See lib/db/upgrade.php');
-                    print_continue('index.php?confirmupgrade=1&amp;confirmrelease=1&amp;confirmplugincheck=1');
-                    print_footer('none');
-                    die;
-                }
-                upgrade_log_finish();
-            }
-        } else if ($version < $CFG->version) {
-            upgrade_log_start();
-            notify("WARNING!!!  The code you are using is OLDER than the version that made these databases!");
-            upgrade_log_finish();
-        }
+        $sessionverify = optional_param('sessionverify', 0, PARAM_BOOL);
+        if (!$sessionverify) {
+            $SESSION->sessionverify = 1;
+            redirect("index.php?sessionstarted=1&sessionverify=1&lang=$CFG->lang");
     } else {
-        if (!set_config("version", $version)) {
-            error("A problem occurred inserting current version into databases");
-        }
-    }
-
-/// Updated human-readable release version if necessary
-
-    if ($release <> $CFG->release) {  // Update the release version
-        if (!set_config("release", $release)) {
-            error("ERROR: Could not update release version in database!!");
-        }
-    }
-
-/// Groups install/upgrade is now in core above.
-
-
-/// Find and check all main modules and load them up or upgrade them if necessary
-/// first old *.php update and then the new upgrade.php script
-    upgrade_activity_modules("$CFG->wwwroot/$CFG->admin/index.php");  // Return here afterwards
-
-/// Check all questiontype plugins and upgrade if necessary
-/// first old *.php update and then the new upgrade.php script
-/// It is important that this is done AFTER the quiz module has been upgraded
-    upgrade_plugins('qtype', 'question/type', "$CFG->wwwroot/$CFG->admin/index.php");  // Return here afterwards
-
-/// Upgrade backup/restore system if necessary
-/// first old *.php update and then the new upgrade.php script
-    require_once("$CFG->dirroot/backup/lib.php");
-    upgrade_backup_db("$CFG->wwwroot/$CFG->admin/index.php");  // Return here afterwards
-
-/// Upgrade blocks system if necessary
-/// first old *.php update and then the new upgrade.php script
-    require_once("$CFG->dirroot/lib/blocklib.php");
-    upgrade_blocks_db("$CFG->wwwroot/$CFG->admin/index.php");  // Return here afterwards
-
-/// Check all blocks and load (or upgrade them if necessary)
-/// first old *.php update and then the new upgrade.php script
-    upgrade_blocks_plugins("$CFG->wwwroot/$CFG->admin/index.php");  // Return here afterwards
-
-/// Check all enrolment plugins and upgrade if necessary
-/// first old *.php update and then the new upgrade.php script
-    upgrade_plugins('enrol', 'enrol', "$CFG->wwwroot/$CFG->admin/index.php");  // Return here afterwards
-
-/// Check all auth plugins and upgrade if necessary
-    upgrade_plugins('auth','auth',"$CFG->wwwroot/$CFG->admin/index.php");
-
-/// Check all course formats and upgrade if necessary
-    upgrade_plugins('format','course/format',"$CFG->wwwroot/$CFG->admin/index.php");
-
-/// Check for local database customisations
-/// first old *.php update and then the new upgrade.php script
-    require_once("$CFG->dirroot/lib/locallib.php");
-    upgrade_local_db("$CFG->wwwroot/$CFG->admin/index.php");  // Return here afterwards
-
-/// Check for changes to RPC functions
-    require_once("$CFG->dirroot/$CFG->admin/mnet/adminlib.php");
-    upgrade_RPC_functions("$CFG->wwwroot/$CFG->admin/index.php");  // Return here afterwards
-
-/// Upgrade all plugins for gradebook
-    upgrade_plugins('gradeexport', 'grade/export', "$CFG->wwwroot/$CFG->admin/index.php");
-    upgrade_plugins('gradeimport', 'grade/import', "$CFG->wwwroot/$CFG->admin/index.php");
-    upgrade_plugins('gradereport', 'grade/report', "$CFG->wwwroot/$CFG->admin/index.php");
-
-/// Check all message output plugins and upgrade if necessary
-    upgrade_plugins('message','message/output',"$CFG->wwwroot/$CFG->admin/index.php");
-
-/// Check all course report plugins and upgrade if necessary
-    upgrade_plugins('coursereport', 'course/report', "$CFG->wwwroot/$CFG->admin/index.php");
-
-/// Check all admin report plugins and upgrade if necessary
-    upgrade_plugins('report', $CFG->admin.'/report', "$CFG->wwwroot/$CFG->admin/index.php");
-
-
-/// just make sure upgrade logging is properly terminated
-    upgrade_log_finish();
-
-    unset($_SESSION['installautopilot']);
-
-/// Set up the blank site - to be customized later at the end of install.
-    if (! $site = get_site()) {
-        // We are about to create the site "course"
-        require_once($CFG->libdir.'/blocklib.php');
-
-        $newsite = new object();
-        $newsite->fullname = "";
-        $newsite->shortname = "";
-        $newsite->summary = NULL;
-        $newsite->newsitems = 3;
-        $newsite->numsections = 0;
-        $newsite->category = 0;
-        $newsite->format = 'site';  // Only for this course
-        $newsite->teacher = get_string("defaultcourseteacher");
-        $newsite->teachers = get_string("defaultcourseteachers");
-        $newsite->student = get_string("defaultcoursestudent");
-        $newsite->students = get_string("defaultcoursestudents");
-        $newsite->timemodified = time();
-
-        if (!$newid = insert_record('course', $newsite)) {
-            error("Serious Error! Could not set up the site!");
-        }
-        // make sure course context exists
-        get_context_instance(CONTEXT_COURSE, $newid);
-
-        // Site created, add blocks for it
-        $page = page_create_object(PAGE_COURSE_VIEW, $newid);
-        blocks_repopulate_page($page); // Return value not checked because you can always edit later
-
-        $cat = new object();
-        $cat->name = get_string('miscellaneous');
-        $cat->depth = 1;
-        if (!$catid = insert_record('course_categories', $cat)) {
-            error("Serious Error! Could not set up a default course category!");
-        }
-        // make sure category context exists
-        get_context_instance(CONTEXT_COURSECAT, $catid);
-        mark_context_dirty('/'.SYSCONTEXTID);
-
-        redirect('index.php');
-    }
-
-    // initialise default blocks on admin and site page if needed
-    if (empty($CFG->adminblocks_initialised)) {
-        require_once("$CFG->dirroot/$CFG->admin/pagelib.php");
-        require_once($CFG->libdir.'/blocklib.php');
-        page_map_class(PAGE_ADMIN, 'page_admin');
-        $page = page_create_object(PAGE_ADMIN, 0); // there must be some id number
-        blocks_repopulate_page($page);
-
-        //add admin_tree block to site if not already present
-        if ($admintree = get_record('block', 'name', 'admin_tree')) {
-            $page = page_create_object(PAGE_COURSE_VIEW, SITEID);
-            $pageblocks=blocks_get_by_page($page);
-            blocks_execute_action($page, $pageblocks, 'add', (int)$admintree->id, false, false);
-            if ($admintreeinstance = get_record('block_instance', 'pagetype', $page->type, 'pageid', SITEID, 'blockid', $admintree->id)) {
-                $pageblocks=blocks_get_by_page($page); // Needs to be re-got, since has just changed
-                blocks_execute_action($page, $pageblocks, 'moveleft', $admintreeinstance, false, false);
+            if (empty($SESSION->sessionverify)) {
+                print_error('installsessionerror', 'admin', "index.php?sessionstarted=1&lang=$CFG->lang");
             }
+            unset($SESSION->sessionverify);
         }
-
-        set_config('adminblocks_initialised', 1);
     }
 
-/// Define the unique site ID code if it isn't already set. This getter does that as a side-effect.
-    get_site_identifier();
+    // at this stage there can be only one admin - users may change username, so do not rely on that
+    $adminuser = get_complete_user_data('id', $CFG->siteadmins);
 
-/// Check if the guest user exists.  If not, create one.
-    if (! record_exists("user", "username", "guest")) {
-        if (! $guest = create_guest_record()) {
-            notify("Could not create guest user record !!!");
+    if ($adminuser->password === 'adminsetuppending') {
+        // prevent installation hijacking
+        if ($adminuser->lastip !== getremoteaddr()) {
+            print_error('installhijacked', 'admin');
         }
-    }
-
+        // login user and let him set password and admin details
+        $adminuser->newadminuser = 1;
+        complete_user_login($adminuser, false);
+        redirect("$CFG->wwwroot/user/editadvanced.php?id=$adminuser->id"); // Edit thyself
 
-/// Set up the admin user
-    if (empty($CFG->rolesactive)) {
-        build_context_path(); // just in case - should not be needed
-        create_admin_user();
+    } else {
+        unset_config('adminsetuppending');
     }
 
-/// Check for valid admin user - no guest autologin
-    require_login(0, false);
+} else {
+    // just make sure upgrade logging is properly terminated
+    upgrade_finished('upgradesettings.php');
+}
 
-    $context = get_context_instance(CONTEXT_SYSTEM);
+// Turn xmlstrictheaders back on now.
+$CFG->xmlstrictheaders = $origxmlstrictheaders;
+unset($origxmlstrictheaders);
 
-    require_capability('moodle/site:config', $context);
+// Check for valid admin user - no guest autologin
+require_login(0, false);
+$context = get_context_instance(CONTEXT_SYSTEM);
+require_capability('moodle/site:config', $context);
 
-/// check that site is properly customized
-    if (empty($site->shortname)) {
+// check that site is properly customized
+$site = get_site();
+if (empty($site->shortname)) {
         // probably new installation - lets return to frontpage after this step
         // remove settings that we want uninitialised
         unset_config('registerauth');
         redirect('upgradesettings.php?return=site');
-    }
-
-/// Check if we are returning from moodle.org registration and if so, we mark that fact to remove reminders
+}
 
-    if (!empty($id)) {
-        if ($id == $CFG->siteidentifier) {
+// Check if we are returning from moodle.org registration and if so, we mark that fact to remove reminders
+if (!empty($id) and $id == $CFG->siteidentifier) {
             set_config('registered', time());
-        }
-    }
+}
 
-/// setup critical warnings before printing admin tree block
-    $insecuredataroot         = is_dataroot_insecure(true);
-    $register_globals_enabled = ini_get_bool('register_globals'); 
+// setup critical warnings before printing admin tree block
+$insecuredataroot = is_dataroot_insecure(true);
+$SESSION->admin_critical_warning = ($insecuredataroot==INSECURE_DATAROOT_ERROR);
 
-    $SESSION->admin_critical_warning = ($register_globals_enabled || $insecuredataroot==INSECURE_DATAROOT_ERROR); 
+$adminroot = admin_get_root();
 
-    $adminroot =& admin_get_root();
-
-/// Check if there are any new admin settings which have still yet to be set
-    if (any_new_admin_settings($adminroot)){
+// Check if there are any new admin settings which have still yet to be set
+if (any_new_admin_settings($adminroot)){
         redirect('upgradesettings.php');
-    }
-
-/// Everything should now be set up, and the user is an admin
-
-/// Print default admin page with notifications.
-
-    admin_externalpage_setup('adminnotifications');
-    admin_externalpage_print_header();
-
-/// Deprecated database! Warning!!
-    if (!empty($CFG->migrated_to_new_db)) {
-        print_box(print_string('dbmigrationdeprecateddb', 'admin'), 'generalbox adminwarning');
-    }
-
-/// Check for any special upgrades that might need to be run
-    if (!empty($CFG->upgrade)) {
-        print_box(get_string("upgrade$CFG->upgrade", "admin", "$CFG->wwwroot/$CFG->admin/upgrade$CFG->upgrade.php"));
-    }
-
-    if ($register_globals_enabled) {
-        print_box(get_string('globalswarning', 'admin'), 'generalbox adminerror');
-    }
-
-    if ($insecuredataroot == INSECURE_DATAROOT_WARNING) {
-        print_box(get_string('datarootsecuritywarning', 'admin', $CFG->dataroot), 'generalbox adminwarning');
-    } else if ($insecuredataroot == INSECURE_DATAROOT_ERROR) {
-        print_box(get_string('datarootsecurityerror', 'admin', $CFG->dataroot), 'generalbox adminerror');
-        
-    }
-
-    if (empty($CFG->passwordsaltmain)) {
-        $path = $CFG->docroot.'/'.str_replace('_utf8', '', current_language()).'/report/security/report_security_check_passwordsaltmain';
-        print_box(get_string('upgrade197notice', 'admin')."\n".get_string('upgrade197salt', 'admin', $path));
-    }
-
-    if (defined('WARN_DISPLAY_ERRORS_ENABLED')) {
-        print_box(get_string('displayerrorswarning', 'admin'), 'generalbox adminwarning');
-    }
-
-    if (substr($CFG->wwwroot, -1) == '/') {
-        print_box(get_string('cfgwwwrootslashwarning', 'admin'), 'generalbox adminwarning');
-    }
-    if (strpos($ME, $CFG->httpswwwroot.'/') === false) {
-        print_box(get_string('cfgwwwrootwarning', 'admin'), 'generalbox adminwarning');
-    }
-
-/// If no recently cron run
-    $lastcron = get_field_sql('SELECT max(lastcron) FROM ' . $CFG->prefix . 'modules');
-    if (time() - $lastcron > 3600 * 24) {
-        $strinstallation = get_string('installation', 'install');
-        $helpbutton = helpbutton('install', $strinstallation, 'moodle', true, false, '', true);
-        print_box(get_string('cronwarning', 'admin')."&nbsp;".$helpbutton, 'generalbox adminwarning');
-    }
-
-/// Print multilang upgrade notice if needed
-    if (empty($CFG->filter_multilang_converted)) {
-        print_box(get_string('multilangupgradenotice', 'admin'), 'generalbox adminwarning');
-    }
-
-/// Alert if we are currently in maintenance mode
-    if (file_exists($CFG->dataroot.'/1/maintenance.html')) {
-        print_box(get_string('sitemaintenancewarning', 'admin'), 'generalbox adminwarning');
-    }
-
-
-/// Print slightly annoying registration button
-    $options = array();
-    $options['sesskey'] = $USER->sesskey;
-    print_box_start('generalbox adminwarning');
-    if(!isset($CFG->registered)) {
-       print_string('pleaseregister', 'admin');
-    }
-    else { /* if (isset($CFG->registered) && $CFG->registered < (time() - 3600*24*30*6)) { */
-       print_string('pleaserefreshregistration', 'admin', userdate($CFG->registered));
-    }
-    print_single_button('register.php', $options, get_string('registration'));
-    print_box_end();
-
-
-    //////////////////////////////////////////////////////////////////////////////////////////////////
-    ////  IT IS ILLEGAL AND A VIOLATION OF THE GPL TO HIDE, REMOVE OR MODIFY THIS COPYRIGHT NOTICE ///
-    $copyrighttext = '<a href="http://moodle.org/">Moodle</a> '.
+}
+
+// Everything should now be set up, and the user is an admin
+
+// Print default admin page with notifications.
+admin_externalpage_setup('adminnotifications');
+echo $OUTPUT->header();
+
+// Unstable code warning
+if (isset($maturity)) {
+    if ($maturity < MATURITY_STABLE) {
+        $maturitylevel = get_string('maturity'.$maturity, 'admin');
+        echo $OUTPUT->box(
+            get_string('maturitycoreinfo', 'admin', $maturitylevel) . ' ' .
+            $OUTPUT->doc_link('admin/versions', get_string('morehelp')),
+            'generalbox adminwarning maturityinfo');
+    }
+}
+
+if ($insecuredataroot == INSECURE_DATAROOT_WARNING) {
+    echo $OUTPUT->box(get_string('datarootsecuritywarning', 'admin', $CFG->dataroot), 'generalbox adminwarning');
+} else if ($insecuredataroot == INSECURE_DATAROOT_ERROR) {
+    echo $OUTPUT->box(get_string('datarootsecurityerror', 'admin', $CFG->dataroot), 'generalbox adminerror');
+
+}
+
+if (defined('WARN_DISPLAY_ERRORS_ENABLED')) {
+    echo $OUTPUT->box(get_string('displayerrorswarning', 'admin'), 'generalbox adminwarning');
+}
+
+// If no recently cron run
+$lastcron = $DB->get_field_sql('SELECT MAX(lastcron) FROM {modules}');
+if (time() - $lastcron > 3600 * 24) {
+    $helpbutton = $OUTPUT->help_icon('cron', 'admin');
+    echo $OUTPUT->box(get_string('cronwarning', 'admin').'&nbsp;'.$helpbutton, 'generalbox adminwarning');
+}
+
+// Hidden bloglevel upgrade
+$showbloglevelupgrade = ($CFG->bloglevel == BLOG_COURSE_LEVEL || $CFG->bloglevel == BLOG_GROUP_LEVEL) && empty($CFG->bloglevel_upgrade_complete);
+if ($showbloglevelupgrade) {
+    echo $OUTPUT->box(get_string('bloglevelupgradenotice', 'admin'), 'generalbox adminwarning');
+}
+
+// diagnose DB, especially the sloppy MyISAM tables
+$diagnose = $DB->diagnose();
+if ($diagnose !== NULL) {
+    echo $OUTPUT->box($diagnose, 'generalbox adminwarning');
+}
+
+// Alert if we are currently in maintenance mode
+if (!empty($CFG->maintenance_enabled)) {
+    echo $OUTPUT->box(get_string('sitemaintenancewarning2', 'admin', "$CFG->wwwroot/$CFG->admin/settings.php?section=maintenancemode"), 'generalbox adminwarning');
+}
+
+//////////////////////////////////////////////////////////////////////////////////////////////////
+////  IT IS ILLEGAL AND A VIOLATION OF THE GPL TO HIDE, REMOVE OR MODIFY THIS COPYRIGHT NOTICE ///
+$copyrighttext = '<a href="http://moodle.org/">Moodle</a> '.
                      '<a href="http://docs.moodle.org/dev/Releases" title="'.$CFG->version.'">'.$CFG->release.'</a><br />'.
                      'Copyright &copy; 1999 onwards, Martin Dougiamas<br />'.
                      'and <a href="http://docs.moodle.org/dev/Credits">many other contributors</a>.<br />'.
                      '<a href="http://docs.moodle.org/dev/License">GNU Public License</a>';
-    print_box($copyrighttext, 'copyright');
-    //////////////////////////////////////////////////////////////////////////////////////////////////
+echo $OUTPUT->box($copyrighttext, 'copyright');
+//////////////////////////////////////////////////////////////////////////////////////////////////
 
-    admin_externalpage_print_footer();
+echo $OUTPUT->footer();
 
-?>
