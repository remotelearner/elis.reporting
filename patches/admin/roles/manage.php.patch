diff --git a/admin/roles/manage.php b/admin/roles/manage.php
old mode 100755
new mode 100644
index 43ce876..411abc8
--- a/admin/roles/manage.php
+++ b/admin/roles/manage.php
@@ -1,575 +1,268 @@
-<?php //$Id$
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lets the user define and edit roles.
+ *
+ * Responds to actions:
+ *   [blank]   - list roles.
+ *   delete    - delete a role (with are-you-sure)
+ *   moveup    - change the sort order
+ *   movedown  - change the sort order
+ *   reset     - set a role's permissions back to the default for that legacy role type.
+ *
+ * For all but the first two of those, you also need a roleid parameter, and
+ * possibly some other data.
+ *
+ * @package    core
+ * @subpackage role
+ * @copyright  1999 onwards Martin Dougiamas (http://dougiamas.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+    require_once(dirname(__FILE__) . '/../../config.php');
+    require_once($CFG->dirroot . '/' . $CFG->admin . '/roles/lib.php');
 
-    require_once('../../config.php');
-
-    require_once($CFG->libdir.'/adminlib.php');
-
-    $roleid      = optional_param('roleid', 0, PARAM_INT);             // if set, we are editing a role
-    $name        = optional_param('name', '', PARAM_MULTILANG);        // new role name
-    $shortname   = optional_param('shortname', '', PARAM_RAW);         // new role shortname, special cleaning before storage
-    $description = optional_param('description', '', PARAM_CLEAN);     // new role desc
     $action      = optional_param('action', '', PARAM_ALPHA);
-    $confirm     = optional_param('confirm', 0, PARAM_BOOL);
-    $cancel      = optional_param('cancel', 0, PARAM_BOOL);
-
-    admin_externalpage_setup('defineroles', '', array('roleid' => $roleid));
-
-    $sitecontext = get_context_instance(CONTEXT_SYSTEM);
-
-    require_capability('moodle/role:manage', $sitecontext);
-
-    if ($cancel) {
-        redirect('manage.php');
+    if ($action) {
+        $roleid = required_param('roleid', PARAM_INT);
     }
 
-    $errors = array();
-    $newrole = false;
+/// Get the base URL for this and related pages into a convenient variable.
+    $baseurl = $CFG->wwwroot . '/' . $CFG->admin . '/roles/manage.php';
+    $defineurl = $CFG->wwwroot . '/' . $CFG->admin . '/roles/define.php';
 
-    $roles = get_all_roles();
-    $rolescount = count($roles);
+/// Check access permissions.
+    $systemcontext = get_context_instance(CONTEXT_SYSTEM);
+    require_login();
+    require_capability('moodle/role:manage', $systemcontext);
+    admin_externalpage_setup('defineroles');
 
-/// fix sort order if needed
-    $rolesort = array();
-    $i = 0;
-    foreach ($roles as $rolex) {
-        $rolesort[$i] = $rolex->id;
-        if ($rolex->sortorder != $i) {
-            $r = new object();
-            $r->id = $rolex->id;
-            $r->sortorder = $i;
-            update_record('role', $r);
-            $roles[$rolex->id]->sortorder = $i;
-        }
-        $i++;
-    }
+/// Get some basic data we are going to need.
+    $roles = get_all_roles();
+    role_fix_names($roles, $systemcontext, ROLENAME_ORIGINAL);
 
-    // do not delete these default system roles
-    $defaultroles = array();
-    $defaultroles[] = $CFG->notloggedinroleid;
-    $defaultroles[] = $CFG->guestroleid;
-    $defaultroles[] = $CFG->defaultuserroleid;
-    $defaultroles[] = $CFG->defaultcourseroleid;
+    $undeletableroles = array();
+    $undeletableroles[$CFG->notloggedinroleid] = 1;
+    $undeletableroles[$CFG->guestroleid] = 1;
+    $undeletableroles[$CFG->defaultuserroleid] = 1;
 
-/// form processing, editing a role, adding a role, deleting a role etc.
+///.Process submitted data.
+    $confirmed = optional_param('confirm', false, PARAM_BOOL) && data_submitted() && confirm_sesskey();
     switch ($action) {
-        case 'add':
-            if ($data = data_submitted() and confirm_sesskey()) {
-
-                $shortname = moodle_strtolower(clean_param(clean_filename($shortname), PARAM_SAFEDIR)); // only lowercase safe ASCII characters
-                $legacytype = required_param('legacytype', PARAM_RAW);
-
-                $legacyroles = get_legacy_roles();
-                if (!array_key_exists($legacytype, $legacyroles)) {
-                    $legacytype = '';
-                }
-
-                if (empty($name)) {
-                    $errors['name'] = get_string('errorbadrolename', 'role');
-                } else if (count_records('role', 'name', $name)) {
-                    $errors['name'] = get_string('errorexistsrolename', 'role');
-                }
-
-                if (empty($shortname)) {
-                    $errors['shortname'] = get_string('errorbadroleshortname', 'role');
-                } else if (count_records('role', 'shortname', $shortname)) {
-                    $errors['shortname'] = get_string('errorexistsroleshortname', 'role');
-                }
-
-                if (empty($errors)) {
-                    $newroleid = create_role($name, $shortname, $description);
-
-                    // set proper legacy type
-                    if (!empty($legacytype)) {
-                        assign_capability($legacyroles[$legacytype], CAP_ALLOW, $newroleid, $sitecontext->id);
-                    }
-
-                } else {
-                    $newrole = new object();
-                    $newrole->name        = $name;
-                    $newrole->shortname   = $shortname;
-                    $newrole->description = $description;
-                    $newrole->legacytype  = $legacytype;
-                }
-
-                $allowed_values = array(CAP_INHERIT, CAP_ALLOW, CAP_PREVENT, CAP_PROHIBIT);
-                $capabilities = fetch_context_capabilities($sitecontext); // capabilities applicable in this context
-
-                foreach ($capabilities as $cap) {
-                    if (!isset($data->{$cap->name})) {
-                        continue;
-                    }
-
-                    // legacy caps have their own selector
-                    if (islegacy($data->{$cap->name})) {
-                        continue;
-                    }
-
-                    $capname = $cap->name;
-                    $value = clean_param($data->{$cap->name}, PARAM_INT);
-                    if (!in_array($value, $allowed_values)) {
-                        continue;
-                    }
-
-                    if (empty($errors)) {
-                        assign_capability($capname, $value, $newroleid, $sitecontext->id);
-                    } else {
-                        $newrole->$capname = $value;
-                    }
-                }
-
-                // added a role sitewide...
-                mark_context_dirty($sitecontext->path);
-
-                if (empty($errors)) {
-                    $rolename = get_field('role', 'name', 'id', $newroleid);
-                    add_to_log(SITEID, 'role', 'add', 'admin/roles/manage.php?action=add', $rolename, '', $USER->id);
-                    redirect('manage.php');
-                }
-            }
-            
-            break;
-
-        case 'edit':
-            if ($data = data_submitted() and confirm_sesskey()) {
-
-                $shortname = moodle_strtolower(clean_param(clean_filename($shortname), PARAM_SAFEDIR)); // only lowercase safe ASCII characters
-                $legacytype = required_param('legacytype', PARAM_RAW);
-
-                $legacyroles = get_legacy_roles();
-                if (!array_key_exists($legacytype, $legacyroles)) {
-                    $legacytype = '';
-                }
-
-                if (empty($name)) {
-                    $errors['name'] = get_string('errorbadrolename', 'role');
-                } else if ($rs = get_records('role', 'name', $name)) {
-                    unset($rs[$roleid]);
-                    if (!empty($rs)) {
-                        $errors['name'] = get_string('errorexistsrolename', 'role');
-                    }
-                }
-
-                if (empty($shortname)) {
-                    $errors['shortname'] = get_string('errorbadroleshortname', 'role');
-                } else if ($rs = get_records('role', 'shortname', $shortname)) {
-                    unset($rs[$roleid]);
-                    if (!empty($rs)) {
-                        $errors['shortname'] = get_string('errorexistsroleshortname', 'role');
-                    }
-                }
-                if (!empty($errors)) {
-                    $newrole = new object();
-                    $newrole->name        = $name;
-                    $newrole->shortname   = $shortname;
-                    $newrole->description = $description;
-                    $newrole->legacytype  = $legacytype;
-                }
-
-                $allowed_values = array(CAP_INHERIT, CAP_ALLOW, CAP_PREVENT, CAP_PROHIBIT);
-                $capabilities = fetch_context_capabilities($sitecontext); // capabilities applicable in this context
-
-                foreach ($capabilities as $cap) {
-                    if (!isset($data->{$cap->name})) {
-                        continue;
-                    }
-
-                    // legacy caps have their own selector
-                    if (islegacy($data->{$cap->name}) === 0 ) {
-                        continue;
-                    }
-
-                    $capname = $cap->name;
-                    $value = clean_param($data->{$cap->name}, PARAM_INT);
-                    if (!in_array($value, $allowed_values)) {
-                        continue;
-                    }
-
-                    if (!empty($errors)) {
-                        $newrole->$capname = $value;
-                        continue;
-                    }
-
-                    // edit default caps
-                    $SQL = "SELECT * FROM {$CFG->prefix}role_capabilities
-                            WHERE roleid = $roleid AND capability = '$capname'
-                              AND contextid = $sitecontext->id";
-
-                    $localoverride = get_record_sql($SQL);
-
-                    if ($localoverride) { // update current overrides
-                        if ($value == CAP_INHERIT) { // inherit = delete
-                            unassign_capability($capname, $roleid, $sitecontext->id);
-
-                        } else {
-                            $localoverride->permission = $value;
-                            $localoverride->timemodified = time();
-                            $localoverride->modifierid = $USER->id;
-                            update_record('role_capabilities', $localoverride);
-                        }
-                    } else { // insert a record
-                        if ($value != CAP_INHERIT) {
-                            assign_capability($capname, $value, $roleid, $sitecontext->id);
-                        }
-                    }
-
-                }
-
-                if (empty($errors)) {
-                    // update normal role settings
-                    $role->id = $roleid;
-                    $role->name = $name;
-                    $role->shortname = $shortname;
-                    $role->description = $description;
-
-                    if (!update_record('role', $role)) {
-                        error('Could not update role!');
-                    }
-
-                    // set proper legacy type
-                    foreach($legacyroles as $ltype=>$lcap) {
-                        if ($ltype == $legacytype) {
-                            assign_capability($lcap, CAP_ALLOW, $roleid, $sitecontext->id);
-                        } else {
-                            unassign_capability($lcap, $roleid);
-                        } 
-                    }                    
-
-                    // edited a role sitewide...
-                    mark_context_dirty($sitecontext->path);
-                    add_to_log(SITEID, 'role', 'edit', 'admin/roles/manage.php?action=edit&roleid='.$role->id, $role->name, '', $USER->id);
-
-                    redirect('manage.php');
-                }
-
-                // edited a role sitewide - with errors, but still...
-                mark_context_dirty($sitecontext->path);
-            }
-
-            break;
-
         case 'delete':
-            if (in_array($roleid, $defaultroles)) {
-                error('This role is used as one of the default system roles, it can not be deleted');
+            if (isset($undeletableroles[$roleid])) {
+                print_error('cannotdeletethisrole', '', $baseurl);
             }
-            if ($confirm and data_submitted() and confirm_sesskey()) {
-                if (!delete_role($roleid)) {
-
-                    // partially deleted a role sitewide...?
-                    mark_context_dirty($sitecontext->path);
-
-                    error('Could not delete role with ID '.$roleid);
-                }
-                // deleted a role sitewide...
-                mark_context_dirty($sitecontext->path);
-
-            } else if (confirm_sesskey()){
+            if (!$confirmed) {
                 // show confirmation
-                admin_externalpage_print_header();
+                echo $OUTPUT->header();
                 $optionsyes = array('action'=>'delete', 'roleid'=>$roleid, 'sesskey'=>sesskey(), 'confirm'=>1);
-                $a = new object();
+                $a = new stdClass();
                 $a->id = $roleid;
                 $a->name = $roles[$roleid]->name;
                 $a->shortname = $roles[$roleid]->shortname;
-                $a->count = (int)count_records('role_assignments', 'roleid', $roleid);
-                notice_yesno(get_string('deleterolesure', 'role', $a), 'manage.php', 'manage.php', $optionsyes, NULL, 'post', 'get');
-                admin_externalpage_print_footer();
+                $a->count = $DB->count_records('role_assignments', array('roleid'=>$roleid));
+
+                $formcontinue = new single_button(new moodle_url($baseurl, $optionsyes), get_string('yes'));
+                $formcancel = new single_button(new moodle_url($baseurl), get_string('no'), 'get');
+                echo $OUTPUT->confirm(get_string('deleterolesure', 'role', $a), $formcontinue, $formcancel);
+                echo $OUTPUT->footer();
                 die;
             }
-
-            redirect('manage.php');
+            if (!delete_role($roleid)) {
+                // The delete failed, but mark the context dirty in case.
+                mark_context_dirty($systemcontext->path);
+                print_error('cannotdeleterolewithid', 'error', $baseurl, $roleid);
+            }
+            // Deleted a role sitewide...
+            mark_context_dirty($systemcontext->path);
+            add_to_log(SITEID, 'role', 'delete', 'admin/roles/manage.php', $roles[$roleid]->localname, '', $USER->id);
+            redirect($baseurl);
             break;
 
         case 'moveup':
-            if (array_key_exists($roleid, $roles) and confirm_sesskey()) {
-                $role = $roles[$roleid];
-                if ($role->sortorder > 0) {
-                    $above = $roles[$rolesort[$role->sortorder - 1]];
-
-                    if (!switch_roles($role, $above)) {
-                        error("Cannot move role with ID $roleid");
+            if (confirm_sesskey()) {
+                $prevrole = null;
+                $thisrole = null;
+                foreach ($roles as $role) {
+                    if ($role->id == $roleid) {
+                        $thisrole = $role;
+                        break;
+                    } else {
+                        $prevrole = $role;
+                    }
+                }
+                if (is_null($thisrole) || is_null($prevrole)) {
+                    print_error('cannotmoverolewithid', 'error', '', $roleid);
                     }
+                if (!switch_roles($thisrole, $prevrole)) {
+                    print_error('cannotmoverolewithid', 'error', '', $roleid);
                 }
             }
 
-            redirect('manage.php');
+            redirect($baseurl);
             break;
 
         case 'movedown':
-            if (array_key_exists($roleid, $roles) and confirm_sesskey()) {
-                $role = $roles[$roleid];
-                if ($role->sortorder + 1 < $rolescount) {
-                    $below = $roles[$rolesort[$role->sortorder + 1]];
-
-                    if (!switch_roles($role, $below)) {
-                        error("Cannot move role with ID $roleid");
+            if (confirm_sesskey()) {
+                $thisrole = null;
+                $nextrole = null;
+                foreach ($roles as $role) {
+                    if ($role->id == $roleid) {
+                        $thisrole = $role;
+                    } else if (!is_null($thisrole)) {
+                        $nextrole = $role;
+                        break;
                     }
                 }
+                if (is_null($nextrole)) {
+                    print_error('cannotmoverolewithid', 'error', '', $roleid);
             }
-
-            redirect('manage.php');
-            break;
-
-        case 'duplicate':
-            if (!array_key_exists($roleid, $roles)) {
-                redirect('manage.php');
+                if (!switch_roles($thisrole, $nextrole)) {
+                    print_error('cannotmoverolewithid', 'error', '', $roleid);
             }
-
-            if ($confirm and data_submitted() and confirm_sesskey()) {
-                //ok - lets duplicate!
-            } else {
-                // show confirmation
-                admin_externalpage_print_header();
-                $optionsyes = array('action'=>'duplicate', 'roleid'=>$roleid, 'sesskey'=>sesskey(), 'confirm'=>1);
-                $optionsno  = array('action'=>'view', 'roleid'=>$roleid);
-                $a = new object();
-                $a->id = $roleid;
-                $a->name = $roles[$roleid]->name;
-                $a->shortname = $roles[$roleid]->shortname;
-                notice_yesno(get_string('duplicaterolesure', 'role', $a), 'manage.php', 'manage.php', $optionsyes, $optionsno, 'post', 'get');
-                admin_externalpage_print_footer();
-                die;
             }
 
-            // duplicate current role
-            $sourcerole = get_record('role','id',$roleid);
-
-            $fullname = $sourcerole->name;
-            $shortname = $sourcerole->shortname;
-            $currentfullname = "";
-            $currentshortname = "";
-            $counter = 0;
-
-            // find a name for the duplicated role
-            do {
-                if ($counter) {
-                    $suffixfull = " ".get_string("copyasnoun")." ".$counter;
-                    $suffixshort = "_".$counter;
-                } else {
-                    $suffixfull = "";
-                    $suffixshort = "";
-                }
-                $currentfullname = $fullname.$suffixfull;
-                // Limit the size of shortname - database column accepts <= 100 chars
-                $currentshortname = substr($shortname, 0, 100 - strlen($suffixshort)).$suffixshort;
-                $coursefull  = get_record("role","name",addslashes($currentfullname));
-                $courseshort = get_record("role","shortname",addslashes($currentshortname));
-                $counter++;
-            } while ($coursefull || $courseshort);
-
-            $description = 'duplicate of '.$fullname;
-            if ($newrole = create_role($currentfullname, $currentshortname, $description)) {
-                // dupilcate all the capabilities
-                role_cap_duplicate($sourcerole, $newrole);
-
-                // dup'ed a role sitewide...
-                mark_context_dirty($sitecontext->path);
-
-            }
-            $rolename = get_field('role', 'name', 'id', $newrole);
-            add_to_log(SITEID, 'role', 'duplicate', 'admin/roles/manage.php?roleid='.$newrole.'&action=duplicate', $rolename, '', $USER->id);
-            redirect('manage.php');
+            redirect($baseurl);
             break;
 
         case 'reset':
-            if (!array_key_exists($roleid, $roles)) {
-                redirect('manage.php');
-            }
-
-            if ($confirm and data_submitted() and confirm_sesskey()) {
-                reset_role_capabilities($roleid);
-
-                // reset a role sitewide...
-                mark_context_dirty($sitecontext->path);
-
-                $rolename = get_field('role', 'name', 'id', $roleid);
-                add_to_log(SITEID, 'role', 'reset', 'admin/roles/manage.php?roleid='.$roleid.'&action=reset', $rolename, '', $USER->id);
-
-                redirect('manage.php?action=view&amp;roleid='.$roleid);
-
-            } else {
+            if (!$confirmed) {
                 // show confirmation
-                admin_externalpage_print_header();
+                echo $OUTPUT->header();
                 $optionsyes = array('action'=>'reset', 'roleid'=>$roleid, 'sesskey'=>sesskey(), 'confirm'=>1);
                 $optionsno  = array('action'=>'view', 'roleid'=>$roleid);
-                $a = new object();
+                $a = new stdClass();
                 $a->id = $roleid;
                 $a->name = $roles[$roleid]->name;
                 $a->shortname = $roles[$roleid]->shortname;
-                $a->legacytype = get_legacy_type($roleid);
+                $a->legacytype = $roles[$roleid]->archetype;
                 if (empty($a->legacytype)) {
                     $warning = get_string('resetrolesurenolegacy', 'role', $a);
                 } else {
                     $warning = get_string('resetrolesure', 'role', $a);
                 }
-                notice_yesno($warning, 'manage.php', 'manage.php', $optionsyes, $optionsno, 'post', 'get');
-                admin_externalpage_print_footer();
+                $formcontinue = new single_button(new moodle_url('manage.php', $optionsyes), get_string('yes'));
+                $formcancel = new single_button(new moodle_url('manage.php', $optionsno), get_string('no'), 'get');
+                echo $OUTPUT->confirm($warning, $formcontinue, $formcancel);
+                echo $OUTPUT->footer();
                 die;
             }
 
-            break;
-
-        default:
-            break;
+            // Reset context levels for standard archetypes
+            if ($roles[$roleid]->archetype) {
+                set_role_contextlevels($roleid, get_default_contextlevels($roles[$roleid]->archetype));
     }
 
-/// print UI now
-
-    admin_externalpage_print_header('');
-
-    $currenttab = 'manage';
-    include_once('managetabs.php');
-
-    if (($roleid and ($action == 'view' or $action == 'edit')) or $action == 'add') { // view or edit role details
-
-        if ($action == 'add') {
-            $roleid = 0;
-            if (empty($errors) or empty($newrole)) {
-                $role = new object();
-                $role->name        = '';
-                $role->shortname   = '';
-                $role->description = '';
-                $role->legacytype  = '';
-            } else {
-                $role = stripslashes_safe($newrole);
-            }
-        } else if ($action == 'edit' and !empty($errors) and !empty($newrole)) {
-                $role = stripslashes_safe($newrole);
-        } else {
-            if(!$role = get_record('role', 'id', $roleid)) {
-                error('Incorrect role ID!');
-            }
-            $role->legacytype = get_legacy_type($role->id);
-        }
-
-        foreach ($roles as $rolex) {
-            $roleoptions[$rolex->id] = strip_tags(format_string($rolex->name));
-        }
-
-        // this is the array holding capabilities of this role sorted till this context
-        $r_caps = role_context_capabilities($roleid, $sitecontext);
-
-        // this is the available capabilities assignable in this context
-        $capabilities = fetch_context_capabilities($sitecontext);
-
-        $usehtmleditor = can_use_html_editor();
+            //reset or delete the capabilities
+            reset_role_capabilities($roleid);
 
-        switch ($action) {
-            case 'add':
-                print_heading_with_help(get_string('addrole', 'role'), 'roles');
-                break;
-            case 'view':
-                print_heading_with_help(get_string('viewrole', 'role'), 'roles');
-                break;
-            case 'edit':
-                print_heading_with_help(get_string('editrole', 'role'), 'roles');
+            // Mark context dirty, log and redirect.
+            mark_context_dirty($systemcontext->path);
+            add_to_log(SITEID, 'role', 'reset', 'admin/roles/manage.php?action=reset&roleid=' . $roleid, $roles[$roleid]->localname, '', $USER->id);
+            redirect($defineurl . '?action=view&roleid=' . $roleid);
                 break;
         }
 
-        echo '<div class="selector">';
-        if ($action == 'view') {
-            popup_form('manage.php?action=view&amp;roleid=', $roleoptions, 'switchrole', $roleid, '', '', '',
-                       false, 'self', get_string('selectrole', 'role'));
-
-            echo '<div class="buttons">';
-
-            $legacytype = get_legacy_type($roleid); 
-            $options = array();
-            $options['roleid'] = $roleid;
-            $options['action'] = 'edit';
-            print_single_button('manage.php', $options, get_string('edit'));
-            $options['action'] = 'reset';
-            if (empty($legacytype)) {
-                print_single_button('manage.php', $options, get_string('resetrolenolegacy', 'role'));
-            } else {
-                print_single_button('manage.php', $options, get_string('resetrole', 'role'));
-            }
-            $options['action'] = 'duplicate';
-            print_single_button('manage.php', $options, get_string('duplicaterole', 'role'));
-            print_single_button('manage.php', null, get_string('listallroles', 'role'));
-            echo '</div>';
-        }
-        echo '</div>';
-
-        $lang = str_replace('_utf8', '', current_language());
-
-        print_simple_box_start('center');
-        include_once('manage.html');
-        print_simple_box_end();
-
-        if ($usehtmleditor) {
-            use_html_editor('description');
-        }
-
-    } else {
+/// Print the page header and tabs.
+    echo $OUTPUT->header();
 
-        print_heading_with_help(get_string('roles', 'role'), 'roles');
-
-        $table = new object;
+    $currenttab = 'manage';
+    include_once('managetabs.php');
 
+/// Initialise table.
+    $table = new html_table();
         $table->tablealign = 'center';
-        $table->align = array('right', 'left', 'left', 'left');
+    $table->align = array('left', 'left', 'left', 'left');
         $table->wrap = array('nowrap', '', 'nowrap','nowrap');
-        $table->cellpadding = 5;
-        $table->cellspacing = 0;
         $table->width = '90%';
-        $table->data = array();
-
-        $table->head = array(get_string('name'),
+    $table->head = array(
+        get_string('role') . ' ' . $OUTPUT->help_icon('roles', 'role'),
                              get_string('description'),
-                             get_string('shortname'),
-                             get_string('edit'));
-
-        /*************************
-         * List all current roles *
-         **************************/
-
-        foreach ($roles as $role) {
+        get_string('roleshortname', 'role'),
+        get_string('edit')
+    );
 
+/// Get some strings outside the loop.
             $stredit     = get_string('edit');
+    $strduplicate = get_string('duplicate');
             $strdelete   = get_string('delete');
             $strmoveup   = get_string('moveup');
             $strmovedown = get_string('movedown');
 
-            $row = array();
-            $row[0] = '<a href="manage.php?roleid='.$role->id.'&amp;action=view">'.format_string($role->name).'</a>';
-            $row[1] = format_text($role->description, FORMAT_HTML);
-            $row[2] = s($role->shortname);
-            $row[3] = '<a title="'.$stredit.'" href="manage.php?action=edit&amp;roleid='.$role->id.'">'.
-                         '<img src="'.$CFG->pixpath.'/t/edit.gif" class="iconsmall" alt="'.$stredit.'" /></a> ';
-            if (in_array($role->id, $defaultroles)) {
-                $row[3] .= '<img src="'.$CFG->wwwroot.'/pix/spacer.gif" class="iconsmall" alt="" /> ';
+/// Print a list of roles with edit/copy/delete/reorder icons.
+    $table->data = array();
+    $firstrole = reset($roles);
+    $lastrole = end($roles);
+    foreach ($roles as $role) {
+
+    /// Basic data.
+        $row = array(
+            '<a href="' . $defineurl . '?action=view&amp;roleid=' . $role->id . '">' . $role->localname . '</a>',
+            format_text($role->description, FORMAT_HTML),
+            s($role->shortname),
+            '',
+        );
+
+    /// Icons:
+        // move up
+        if ($role->sortorder != $firstrole->sortorder) {
+            $row[3] .= get_action_icon($baseurl . '?action=moveup&amp;roleid=' . $role->id . '&amp;sesskey=' . sesskey(), 'up', $strmoveup, $strmoveup);
             } else {
-                $row[3] .= '<a title="'.$strdelete.'" href="manage.php?action=delete&amp;roleid='.$role->id.'&amp;sesskey='.sesskey().'">'.
-                             '<img src="'.$CFG->pixpath.'/t/delete.gif" class="iconsmall" alt="'.$strdelete.'" /></a> ';
+            $row[3] .= get_spacer();
             }
-            if ($role->sortorder != 0) {
-                $row[3] .= '<a title="'.$strmoveup.'" href="manage.php?action=moveup&amp;roleid='.$role->id.'&amp;sesskey='.sesskey().'">'.
-                     '<img src="'.$CFG->pixpath.'/t/up.gif" class="iconsmall" alt="'.$strmoveup.'" /></a> ';
+        // move down
+        if ($role->sortorder != $lastrole->sortorder) {
+            $row[3] .= get_action_icon($baseurl . '?action=movedown&amp;roleid=' . $role->id . '&amp;sesskey=' . sesskey(), 'down', $strmovedown, $strmovedown);
             } else {
-                $row[3] .= '<img src="'.$CFG->wwwroot.'/pix/spacer.gif" class="iconsmall" alt="" /> ';
-            }
-            if ($role->sortorder+1 < $rolescount) {
-                $row[3] .= '<a title="'.$strmovedown.'" href="manage.php?action=movedown&amp;roleid='.$role->id.'&amp;sesskey='.sesskey().'">'.
-                     '<img src="'.$CFG->pixpath.'/t/down.gif" class="iconsmall" alt="'.$strmovedown.'" /></a> ';
+            $row[3] .= get_spacer();
+        }
+        // edit
+        $row[3] .= get_action_icon($defineurl . '?action=edit&amp;roleid=' . $role->id,
+                'edit', $stredit, get_string('editxrole', 'role', $role->localname));
+        // duplicate
+        $row[3] .= get_action_icon($defineurl . '?action=duplicate&amp;roleid=' . $role->id,
+                'copy', $strduplicate, get_string('createrolebycopying', 'role', $role->localname));
+        // delete
+        if (isset($undeletableroles[$role->id])) {
+            $row[3] .= get_spacer();
             } else {
-                $row[3] .= '<img src="'.$CFG->wwwroot.'/pix/spacer.gif" class="iconsmall" alt="" /> ';
+            $row[3] .= get_action_icon($baseurl . '?action=delete&amp;roleid=' . $role->id,
+                  'delete', $strdelete, get_string('deletexrole', 'role', $role->localname));
             }
 
             $table->data[] = $row;
-
         }
-        print_table($table);
+    echo html_writer::table($table);
 
-        $options = new object();
-        $options->action = 'add';
-        echo '<div class="buttons">';
-        print_single_button('manage.php', $options, get_string('addrole', 'role'), 'get');
-        echo '</div>';
-    }
+    echo $OUTPUT->container_start('buttons');
+    echo $OUTPUT->single_button(new moodle_url($defineurl, array('action' => 'add')), get_string('addrole', 'role'), 'get');
+    echo $OUTPUT->container_end();
 
-    admin_externalpage_print_footer();
+    echo $OUTPUT->footer();
     die;
 
-
-
-?>
+function get_action_icon($url, $icon, $alt, $tooltip) {
+    global $OUTPUT;
+    return '<a title="' . $tooltip . '" href="'. $url . '">' .
+            '<img src="' . $OUTPUT->pix_url('t/' . $icon) . '" class="iconsmall" alt="' . $alt . '" /></a> ';
+}
+function get_spacer() {
+    global $OUTPUT;
+    return '<img src="' . $OUTPUT->pix_url('spacer') . '" class="iconsmall" alt="" /> ';
+}
