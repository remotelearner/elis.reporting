diff --git a/admin/langimport.php b/admin/langimport.php
old mode 100755
new mode 100644
index bcffb56..4aa614b
--- a/admin/langimport.php
+++ b/admin/langimport.php
@@ -1,107 +1,96 @@
-<?php //$Id$
-///This file only manages the installation of 1.6 lang packs.
-///in downloads.moodle.org, they are store in separate directory /lang16
-///in local server, they are stored in $CFG->dataroot/lang
-///This helps to avoid confusion.
-
-    require_once('../config.php');
-    require_once($CFG->libdir.'/adminlib.php');
-    require_once($CFG->libdir.'/filelib.php');
-    require_once($CFG->libdir.'/componentlib.class.php');
-
-    admin_externalpage_setup('langimport');
-
-    if (!empty($CFG->skiplangupgrade)) {
-        admin_externalpage_print_header();
-        print_box(get_string('langimportdisabled', 'admin'));
-        print_footer();
-        die;
-    }
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Fetches language packages from download.moodle.org server
+ *
+ * Language packages are available at http://download.moodle.org/langpack/
+ * in ZIP format together with a file languages.md5 containing their hashes
+ * and meta info.
+ * Locally, language packs are saved into $CFG->dataroot/lang/
+ *
+ * @package   core
+ * @copyright 2005 Yu Zhang
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 
-    $mode          = optional_param('mode', 0, PARAM_INT);     //phase
-    $pack          = optional_param('pack', array(), PARAM_FILE);   //pack to install
-    $displaylang   = $pack;
-    $uninstalllang = optional_param('uninstalllang', '', PARAM_FILE);
-    $confirm       = optional_param('confirm', 0, PARAM_BOOL);
-    $sitelang      = optional_param('sitelangconfig', '', PARAM_FILE);
-
-    define('INSTALLATION_OF_SELECTED_LANG', 2);
-    define('DELETION_OF_SELECTED_LANG', 4);
-    define('UPDATE_ALL_LANG', 5);
-
-    $strlang         = get_string('langimport','admin');
-    $strlanguage     = get_string('language');
-    $strthislanguage = get_string('thislanguage');
-    $title           = $strlang;
-
-    //reset and diagnose lang cache permissions
-    @unlink($CFG->dataroot.'/cache/languages');
-    if (file_exists($CFG->dataroot.'/cache/languages')) {
-        error('Language cache can not be deleted, please fix permissions in dataroot/cache/languages!');
-    }
-    get_list_of_languages(true); //refresh lang cache
+require_once(dirname(dirname(__FILE__)).'/config.php');
+require_once($CFG->libdir.'/adminlib.php');
+require_once($CFG->libdir.'/filelib.php');
+require_once($CFG->libdir.'/componentlib.class.php');
 
-    $notice_ok     = array();
-    $notice_error = array();
+admin_externalpage_setup('langimport');
 
-    switch ($mode){
+if (!empty($CFG->skiplangupgrade)) {
+    echo $OUTPUT->header();
+    echo $OUTPUT->box(get_string('langimportdisabled', 'admin'));
+    echo $OUTPUT->footer();
+    die;
+}
 
-        case INSTALLATION_OF_SELECTED_LANG:    ///installation of selected language pack
+$mode          = optional_param('mode', 0, PARAM_INT);              // action
+$pack          = optional_param('pack', array(), PARAM_SAFEDIR);    // pack to install
+$uninstalllang = optional_param('uninstalllang', '', PARAM_LANG);   // installed pack to uninstall
+$confirm       = optional_param('confirm', 0, PARAM_BOOL);          // uninstallation confirmation
 
-            if (confirm_sesskey() and !empty($pack)) {
-                set_time_limit(0);
-                @mkdir ($CFG->dataroot.'/temp/', $CFG->directorypermissions);    //make it in case it's a fresh install, it might not be there
-                @mkdir ($CFG->dataroot.'/lang/', $CFG->directorypermissions);
+define('INSTALLATION_OF_SELECTED_LANG', 2);
+define('DELETION_OF_SELECTED_LANG', 4);
+define('UPDATE_ALL_LANG', 5);
 
-                if (is_array($pack)) {
-                    $packs = $pack;
-                } else {
-                    $packs = array($pack);
-                }
+get_string_manager()->reset_caches();
 
-                foreach ($packs as $pack) {
-                    if ($cd = new component_installer('http://download.moodle.org', 'lang16',
-                                                        $pack.'.zip', 'languages.md5', 'lang')) {
-                        $status = $cd->install(); //returns COMPONENT_(ERROR | UPTODATE | INSTALLED)
-                        switch ($status) {
-
-                            case COMPONENT_ERROR:
-                                if ($cd->get_error() == 'remotedownloaderror') {
-                                    $a = new object();
-                                    $a->url = 'http://download.moodle.org/lang16/'.$pack.'.zip';
-                                    $a->dest= $CFG->dataroot.'/lang';
-                                    print_error($cd->get_error(), 'error', 'langimport.php', $a);
-                                } else {
-                                    print_error($cd->get_error(), 'error', 'langimport.php');
-                                }
-                            break;
+$notice_ok    = array();
+$notice_error = array();
 
-                            case COMPONENT_INSTALLED:
-                                $notice_ok[] = get_string('langpackinstalled','admin',$pack);
+if (($mode == INSTALLATION_OF_SELECTED_LANG) and confirm_sesskey() and !empty($pack)) {
+    set_time_limit(0);
+    make_upload_directory('temp');
+    make_upload_directory('lang');
+
+    $installer = new lang_installer($pack);
+    $results = $installer->run();
+    foreach ($results as $langcode => $langstatus) {
+        switch ($langstatus) {
+        case lang_installer::RESULT_DOWNLOADERROR:
+            $a       = new stdClass();
+            $a->url  = $installer->lang_pack_url($langcode);
+            $a->dest = $CFG->dataroot.'/lang';
+            print_error('remotedownloaderror', 'error', 'langimport.php', $a);
                             break;
-
-                            case COMPONENT_UPTODATE:
+        case lang_installer::RESULT_INSTALLED:
+            $notice_ok[] = get_string('langpackinstalled', 'admin', $langcode);
+            break;
+        case lang_installer::RESULT_UPTODATE:
+            $notice_ok[] = get_string('langpackuptodate', 'admin', $langcode);
                             break;
-
-                        }
-                    } else {
-                        notify('Had an unspecified error with the component installer, sorry.');
-                    }
                 }
             }
-        break;
+}
 
-        case DELETION_OF_SELECTED_LANG:    //delete a directory(ies) containing a lang pack completely
+if ($mode == DELETION_OF_SELECTED_LANG and !empty($uninstalllang)) {
+    if ($uninstalllang == 'en') {
+        $notice_error[] = 'English language pack can not be uninstalled';
 
-            if ($uninstalllang == 'en_utf8') {
-                $notice_error[] = 'en_utf8 can not be uninstalled!';
-
-            } else if (!$confirm && confirm_sesskey()) {
-                admin_externalpage_print_header();
-                notice_yesno(get_string('uninstallconfirm', 'admin', $uninstalllang),
-                             'langimport.php?mode='.DELETION_OF_SELECTED_LANG.'&amp;uninstalllang='.$uninstalllang.'&amp;confirm=1&amp;sesskey='.sesskey(),
+    } else if (!$confirm and confirm_sesskey()) {
+        echo $OUTPUT->header();
+        echo $OUTPUT->confirm(get_string('uninstallconfirm', 'admin', $uninstalllang),
+                     'langimport.php?mode='.DELETION_OF_SELECTED_LANG.'&uninstalllang='.$uninstalllang.'&confirm=1',
                              'langimport.php');
-                print_footer();
+        echo $OUTPUT->footer();
                 die;
 
             } else if (confirm_sesskey()) {
@@ -115,39 +104,31 @@
                 if (file_exists($dest2)){
                     $rm2 = remove_dir($dest2);
                 }
-                get_list_of_languages(true); //refresh lang cache
-                //delete the direcotries
                 if ($rm1 or $rm2) {
                     $notice_ok[] = get_string('langpackremoved','admin');
                 } else {    //nothing deleted, possibly due to permission error
                     $notice_error[] = 'An error has occurred, language pack is not completely uninstalled, please check file permissions';
                 }
             }
-        break;
+}
 
-        case UPDATE_ALL_LANG:    //1 click update for all updatable language packs
+if ($mode == UPDATE_ALL_LANG) {
             set_time_limit(0);
 
-            //0th pull a list from download.moodle.org,
-            //key = langname, value = md5
-            $md5array = array();
-            $updated = 0;    //any packs updated?
-            $alllangs = array_keys(get_list_of_languages(false, true)); //get all available langs
-            $lang16 = array();   //all the Moodle 1.6 unicode lang packs (updated and not updated)
-            $packs = array();    //all the packs that needs updating
-
+    $installer = new lang_installer();
 
-            if (!$availablelangs = get_remote_list_of_languages()) {
-                print_error('cannotdownloadlanguageupdatelist');
+    if (!$availablelangs = $installer->get_remote_list_of_languages()) {
+        print_error('cannotdownloadlanguageupdatelist', 'error');
             }
-
-            //and build an associative array
+    $md5array = array();    // (string)langcode => (string)md5
             foreach ($availablelangs as $alang) {
                 $md5array[$alang[0]] = $alang[1];
             }
 
-            //filtering out non-16 and unofficial packs
-            foreach ($alllangs as $clang) {
+    // filter out unofficial packs
+    $currentlangs = array_keys(get_string_manager()->get_list_of_translations(true));
+    $updateablelangs = array();
+    foreach ($currentlangs as $clang) {
                 if (!array_key_exists($clang, $md5array)) {
                     $notice_ok[] = get_string('langpackupdateskipped', 'admin', $clang);
                     continue;
@@ -156,26 +137,28 @@
                 $dest2 = $CFG->dirroot.'/lang/'.$clang;
 
                 if (file_exists($dest1.'/langconfig.php') || file_exists($dest2.'/langconfig.php')){
-                    $lang16[] = $clang;
+            $updateablelangs[] = $clang;
                 }
             }
 
-            //then filter out packs that have the same md5 key
-            foreach ($lang16 as $clang) {
-                if (!is_installed_lang($clang, $md5array[$clang])){
-                    $packs[] = $clang;
+    // then filter out packs that have the same md5 key
+    $neededlangs = array();   // all the packs that needs updating
+    foreach ($updateablelangs as $ulang) {
+        if (!is_installed_lang($ulang, $md5array[$ulang])) {
+            $neededlangs[] = $ulang;
                 }
             }
 
-            @mkdir ($CFG->dataroot.'/temp/', $CFG->directorypermissions);
-            @mkdir ($CFG->dataroot.'/lang/', $CFG->directorypermissions);
-            foreach ($packs as $pack){    //for each of the remaining in the list, we
-                if ($pack == 'en_utf8') {    // no update for en_utf8
+    make_upload_directory('temp');
+    make_upload_directory('lang');
+
+    // clean-up currently installed versions of the packs
+    foreach ($neededlangs as $packindex => $pack) {
+        if ($pack == 'en') {
                     continue;
                 }
 
-                //1. delete old director(ies)
-
+        // delete old directories
                 $dest1 = $CFG->dataroot.'/lang/'.$pack;
                 $dest2 = $CFG->dirroot.'/lang/'.$pack;
                 $rm1 = false;
@@ -183,45 +166,38 @@
                 if (file_exists($dest1)) {
                     if (!remove_dir($dest1)) {
                         $notice_error[] = 'Could not delete old directory '.$dest1.', update of '.$pack.' failed, please check permissions.';
+                unset($neededlangs[$packindex]);
                         continue;
                     }
                 }
                 if (file_exists($dest2)) {
                     if (!remove_dir($dest2)) {
                         $notice_error[] = 'Could not delete old directory '.$dest2.', update of '.$pack.' failed, please check permissions.';
+                unset($neededlangs[$packindex]);
                         continue;
                     }
                 }
+    }
 
-                //2. copy & unzip into new
-
-                if ($cd = new component_installer('http://download.moodle.org', 'lang16',
-                                       $pack.'.zip', 'languages.md5', 'lang')) {
-                $status = $cd->install(); //returns COMPONENT_(ERROR | UPTODATE | INSTALLED)
-                switch ($status) {
-
-                    case COMPONENT_ERROR:
-                        if ($cd->get_error() == 'remotedownloaderror') {
+    // install all needed language packs
+    $installer->set_queue($neededlangs);
+    $results = $installer->run();
+    $updated = false;    // any packs updated?
+    foreach ($results as $langcode => $langstatus) {
+        switch ($langstatus) {
+        case lang_installer::RESULT_DOWNLOADERROR:
                             $a = new stdClass();
-                            $a->url = 'http://download.moodle.org/lang16/'.$pack.'.zip';
-                            $a->dest= $CFG->dataroot.'/lang';
-                            print_error($cd->get_error(), 'error', "", $a); // not probable
-                        } else {
-                            print_error($cd->get_error(), 'error'); // not probable
-                        }
-                    break;
-                    case COMPONENT_UPTODATE:
-                        //Print error string or whatever you want to do
+            $a->url  = $installer->lang_pack_url($langcode);
+            $a->dest = $CFG->dataroot.'/lang';
+            print_error('remotedownloaderror', 'error', 'langimport.php', $a);
                     break;
-                    case COMPONENT_INSTALLED:
-                        $notice_ok[] = get_string('langpackupdated', 'admin', $pack);
+        case lang_installer::RESULT_INSTALLED:
                         $updated = true;
-                        //Print/do whatever you want
+            $notice_ok[] = get_string('langpackinstalled', 'admin', $langcode);
+            break;
+        case lang_installer::RESULT_UPTODATE:
+            $notice_ok[] = get_string('langpackuptodate', 'admin', $langcode);
                     break;
-                    default:
-                    }
-                } else {
-
                 }
             }
 
@@ -231,216 +207,135 @@
                 $notice_ok[] = get_string('nolangupdateneeded','admin');
             }
 
-        break;
-    }    //close of main switch
-
-
-    admin_externalpage_print_header();
+    unset($installer);
+}
+get_string_manager()->reset_caches();
 
-    $installedlangs = get_list_of_languages(true, true);
+echo $OUTPUT->header();
+echo $OUTPUT->heading(get_string('langimport', 'admin'));
 
-    $missingparents = array();
-    $oldlang = isset($SESSION->lang) ? $SESSION->lang : null; // override current lang
+$installedlangs = get_string_manager()->get_list_of_translations(true);
 
-    foreach($installedlangs as $l=>$unused) {
-        $SESSION->lang = $l;
-        $parent = get_string('parentlanguage');
-        if ($parent == 'en_utf8') {
+$missingparents = array();
+foreach ($installedlangs as $installedlang => $unused) {
+    $parent = get_parent_language($installedlang);
+    if (empty($parent)) {
             continue;
         }
-        if (empty($parent) || strpos($parent, '[[') !== false) {
-            continue; // no parent
-        }
         if (!isset($installedlangs[$parent])) {
-            $missingparents[$l] = $parent;
-        }
-    }
-    if (isset($oldlang)) {
-        $SESSION->lang = $oldlang;
-    } else {
-        unset($SESSION->lang);
+        $missingparents[$installedlang] = $parent;
     }
+}
 
-    if ($availablelangs = get_remote_list_of_languages()) {
-        $remote = 1;
-    } else {
-        $remote = 0;    //flag for reading from remote or local
-        $availablelangs = get_local_list_of_languages();
-    }
+$installer = new lang_installer();
 
-    if (!$remote) {
-        print_box_start();
+if ($availablelangs = $installer->get_remote_list_of_languages()) {
+    $remote = true;
+} else {
+    $remote = false;
+    $availablelangs = array();
+    echo $OUTPUT->box_start();
         print_string('remotelangnotavailable', 'admin', $CFG->dataroot.'/lang/');
-        print_box_end();
-    }
+    echo $OUTPUT->box_end();
+}
 
-    if ($notice_ok) {
+if ($notice_ok) {
         $info = implode('<br />', $notice_ok);
-        notify($info, 'notifysuccess');
-    }
+    echo $OUTPUT->notification($info, 'notifysuccess');
+}
 
-    if ($notice_error) {
+if ($notice_error) {
         $info = implode('<br />', $notice_error);
-        notify($info, 'notifyproblem');
-    }
+    echo $OUTPUT->notification($info, 'notifyproblem');
+}
 
-    if ($missingparents) {
+if ($missingparents) {
         foreach ($missingparents as $l=>$parent) {
-            $a = new object();
+        $a = new stdClass();
             $a->lang   = $installedlangs[$l];
             $a->parent = $parent;
             foreach ($availablelangs as $alang) {
                 if ($alang[0] == $parent) {
-                    if (substr($alang[0], -5) == '_utf8') {   //Remove the _utf8 suffix from the lang to show
-                        $shortlang = substr($alang[0], 0, -5);
-                    } else {
                         $shortlang = $alang[0];
-                    }
                     $a->parent = $alang[2].' ('.$shortlang.')';
                 }
             }
             $info = get_string('missinglangparent', 'admin', $a);
-            notify($info, 'notifyproblem');
-        }
-    }
-
-    print_box_start();
-    echo '<table summary="">';
-    echo '<tr><td align="center" valign="top">';
-    echo '<form id="uninstallform" action="langimport.php?mode='.DELETION_OF_SELECTED_LANG.'" method="post">';
-    echo '<fieldset class="invisiblefieldset">';
-    echo '<input name="sesskey" type="hidden" value="'.sesskey().'" />';
-
-    /// display installed langs here
-
-    echo '<label for="uninstalllang">'.get_string('installedlangs','admin')."</label><br />\n";
-    echo '<select name="uninstalllang" id="uninstalllang" size="15">';
-    foreach ($installedlangs as $clang =>$ilang){
-        echo '<option value="'.$clang.'">'.$ilang.'</option>';
-    }
-    echo '</select>';
-    echo '<br /><input type="submit" value="'.get_string('uninstall','admin').'" />';
-    echo '</fieldset>';
-    echo '</form>';
-
-    if ($remote) {
-        echo '<form id="updateform" action="langimport.php?mode='.UPDATE_ALL_LANG.'" method="post">';
-        echo '<div>';
-        echo '<br /><input type="submit" value="'.get_string('updatelangs','admin').'" />';
-        echo '</div>';
-        echo '</form>';
-    }
-
-    /// Display option to change site language
-
-    /// display to be installed langs here
-
-    echo '</td><td align="center" valign="top">';
-    //availabe langs table
-    $empty = 1;    //something to pring
-
-    /// if this language pack is not already installed, then we allow installation
-
-    echo '<form id="installform" method="post" action="langimport.php?mode='.INSTALLATION_OF_SELECTED_LANG.'">';
-    echo '<fieldset class="invisiblefieldset">';
-    echo '<input name="sesskey" type="hidden" value="'.sesskey().'" />';
-    echo '<label for="pack">'.get_string('availablelangs','admin')."</label><br />\n";
-    if ($remote) {
-        echo '<select name="pack[]" id="pack" size="15" multiple="multiple">';
-    }
-
-    foreach ($availablelangs as $alang) {
-        if ($alang[0] == '') {
-            continue;
-        }
-        if (trim($alang[0]) != "en_utf8") {
-            if ($remote) {
-                if (substr($alang[0], -5) == '_utf8') {   //Remove the _utf8 suffix from the lang to show
-                    $shortlang = substr($alang[0], 0, -5);
-                } else {
-                    $shortlang = $alang[0];
-                }
-                if (!is_installed_lang($alang[0], $alang[1])){    //if not already installed
-                    echo '<option value="'.$alang[0].'">'.$alang[2].' ('.$shortlang.')</option>';
-                }
-            } else {    //print list in local format, and instruction to install
-                echo '<tr><td>'.$alang[2].'</td><td><a href="http://download.moodle.org/lang16/'.$alang[0].'.zip">'.get_string('download','admin').'</a></td></tr>';
-            }
-            $empty = 0;
-        }
-    }
-    if ($remote) {
-        echo '</select>';
-        echo '<br /><input type="submit" value="'.$THEME->larrow.' '.get_string('install','admin').'" />';
-    }
-    echo '</fieldset>';
-    echo '</form>';
-
-    if ($empty) {
-        echo '<br />';
-        print_string('nolanguagetodownload','admin');
-    }
-
-    //close available langs table
-    echo '</td></tr></table>';
-    print_box_end();
-
-    admin_externalpage_print_footer();
-
-    /**
-     * Returns a list of available language packs from a
-     * local copy shipped with standard moodle distro
-     * this is for site that can't download components.
-     * @return array
-     */
-    function get_local_list_of_languages() {
-        global $CFG;
-        $source = $CFG->dirroot.'/lib/languages.md5';
-        $availablelangs = array();
-        if ($fp = fopen($source, 'r')) {
-            while(!feof ($fp)) {
-                $availablelangs[] = split(',', fgets($fp,1024));
-            }
-        }
-        return $availablelangs;
-    }
-
-    /**
+        echo $OUTPUT->notification($info, 'notifyproblem');
+    }
+}
+
+echo $OUTPUT->box_start();
+
+echo html_writer::start_tag('table');
+echo html_writer::start_tag('tr');
+
+// list of installed languages
+$url = new moodle_url('/admin/langimport.php', array('mode' => DELETION_OF_SELECTED_LANG));
+echo html_writer::start_tag('td', array('valign' => 'top'));
+echo html_writer::start_tag('form', array('id' => 'uninstallform', 'action' => $url->out(), 'method' => 'post'));
+echo html_writer::start_tag('fieldset');
+echo html_writer::label(get_string('installedlangs','admin'), 'uninstalllang');
+echo html_writer::empty_tag('br');
+echo html_writer::select($installedlangs, 'uninstalllang', '', false, array('size' => 15));
+echo html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'sesskey', 'value' => sesskey()));
+echo html_writer::empty_tag('br');
+echo html_writer::empty_tag('input', array('type' => 'submit', 'value' => get_string('uninstall','admin')));
+echo html_writer::end_tag('fieldset');
+echo html_writer::end_tag('form');
+if ($remote) {
+    $url = new moodle_url('/admin/langimport.php', array('mode' => UPDATE_ALL_LANG));
+    echo html_writer::start_tag('form', array('id' => 'updateform', 'action' => $url->out(), 'method' => 'post'));
+    echo html_writer::tag('fieldset', html_writer::empty_tag('input', array('type' => 'submit', 'value' => get_string('updatelangs','admin'))));
+    echo html_writer::end_tag('form');
+}
+echo html_writer::end_tag('td');
+
+// list of available languages
+$options = array();
+foreach ($availablelangs as $alang) {
+    if (!empty($alang[0]) and trim($alang[0]) !== 'en' and !is_installed_lang($alang[0], $alang[1])) {
+        $options[$alang[0]] = $alang[2].' ('.$alang[0].')';
+    }
+}
+if (!empty($options)) {
+    echo html_writer::start_tag('td', array('valign' => 'top'));
+    $url = new moodle_url('/admin/langimport.php', array('mode' => INSTALLATION_OF_SELECTED_LANG));
+    echo html_writer::start_tag('form', array('id' => 'installform', 'action' => $url->out(), 'method' => 'post'));
+    echo html_writer::start_tag('fieldset');
+    echo html_writer::label(get_string('availablelangs','install'), 'pack');
+    echo html_writer::empty_tag('br');
+    echo html_writer::select($options, 'pack[]', '', false, array('size' => 15, 'multiple' => 'multiple'));
+    echo html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'sesskey', 'value' => sesskey()));
+    echo html_writer::empty_tag('br');
+    echo html_writer::empty_tag('input', array('type' => 'submit', 'value' => get_string('install','admin')));
+    echo html_writer::end_tag('fieldset');
+    echo html_writer::end_tag('form');
+    echo html_writer::end_tag('td');
+}
+
+echo html_writer::end_tag('tr');
+echo html_writer::end_tag('table');
+echo $OUTPUT->box_end();
+echo $OUTPUT->footer();
+die();
+
+////////////////////////////////////////////////////////////////////////////////
+// Local functions /////////////////////////////////////////////////////////////
+////////////////////////////////////////////////////////////////////////////////
+
+/**
      * checks the md5 of the zip file, grabbed from download.moodle.org,
      * against the md5 of the local language file from last update
      * @param string $lang
      * @param string $md5check
      * @return bool
      */
-    function is_installed_lang($lang, $md5check) {
+function is_installed_lang($lang, $md5check) {
         global $CFG;
         $md5file = $CFG->dataroot.'/lang/'.$lang.'/'.$lang.'.md5';
         if (file_exists($md5file)){
             return (file_get_contents($md5file) == $md5check);
         }
         return false;
-    }
-
-    /**
-     * Returns the latest list of available language packs from
-     * moodle.org
-     * @return array or false if can not download
-     */
-    function get_remote_list_of_languages() {
-        $source = 'http://download.moodle.org/lang16/languages.md5';
-        $availablelangs = array();
-
-        if ($content = download_file_content($source)) {
-            $alllines = split("\n", $content);
-            foreach($alllines as $line) {
-                if (!empty($line)){
-                    $availablelangs[] = split(',', $line);
-                }
-            }
-            return $availablelangs;
-
-        } else {
-            return false;
-        }
-    }
-?>
+}
