diff --git a/admin/uploadpicture.php b/admin/uploadpicture.php
index 4b6d4a4..c57e136 100644
--- a/admin/uploadpicture.php
+++ b/admin/uploadpicture.php
@@ -1,4 +1,4 @@
-<?php // $Id$
+<?php
 
 ///////////////////////////////////////////////////////////////////////////
 //                                                                       //
@@ -21,7 +21,6 @@
 ///////////////////////////////////////////////////////////////////////////
 
 require_once('../config.php');
-require_once($CFG->libdir.'/uploadlib.php');
 require_once($CFG->libdir.'/adminlib.php');
 require_once($CFG->libdir.'/gdlib.php');
 require_once('uploadpicture_form.php');
@@ -36,17 +35,15 @@ require_login();
 
 require_capability('moodle/site:uploadusers', get_context_instance(CONTEXT_SYSTEM));
 
-if (!$site = get_site()) {
-    error("Could not find site-level course");
-}
+$site = get_site();
 
 if (!$adminuser = get_admin()) {
-    error("Could not find site admin");
+    print_error('noadmins', 'error');
 }
 
 $strfile = get_string('file');
 $struser = get_string('user');
-$strusersupdated = get_string('usersupdated');
+$strusersupdated = get_string('usersupdated', 'admin');
 $struploadpictures = get_string('uploadpictures','admin');
 
 $userfields = array (
@@ -58,34 +55,34 @@ $userfield = optional_param('userfield', 0, PARAM_INT);
 $overwritepicture = optional_param('overwritepicture', 0, PARAM_BOOL);
 
 /// Print the header
-admin_externalpage_print_header();
-print_heading_with_help($struploadpictures, 'uploadpictures');
+echo $OUTPUT->header();
+
+echo $OUTPUT->heading_with_help($struploadpictures, 'uploadpictures', 'admin');
 
 $mform = new admin_uploadpicture_form(null, $userfields);
 if ($formdata = $mform->get_data()) {
     if (!array_key_exists($userfield, $userfields)) {
-        notify(get_string('uploadpicture_baduserfield','admin'));
+        echo $OUTPUT->notification(get_string('uploadpicture_baduserfield','admin'));
     } else {
         // Large files are likely to take their time and memory. Let PHP know
         // that we'll take longer, and that the process should be recycled soon
         // to free up memory.
         @set_time_limit(0);
-        @raise_memory_limit("192M");
-        if (function_exists('apache_child_terminate')) {
-            @apache_child_terminate();
-        }
+        raise_memory_limit(MEMORY_EXTRA);
         
         // Create a unique temporary directory, to process the zip file
         // contents.
         $zipdir = my_mktempdir($CFG->dataroot.'/temp/', 'usrpic');
+        $dstfile = $zipdir.'/images.zip';
         
-        if (!$mform->save_files($zipdir)) {
-            notify(get_string('uploadpicture_cannotmovezip','admin'));
+        if (!$mform->save_file('userpicturesfile', $dstfile, true)) {
+            echo $OUTPUT->notification(get_string('uploadpicture_cannotmovezip','admin'));
             @remove_dir($zipdir);
         } else {
-            $dstfile = $zipdir.'/'.$mform->get_new_filename();
-            if(!unzip_file($dstfile, $zipdir, false)) {
-                notify(get_string('uploadpicture_cannotunzip','admin'));
+            $fp = get_file_packer('application/zip');
+            $unzipresult = $fp->extract_to_pathname($dstfile, $zipdir);
+            if (!$unzipresult) {
+                echo $OUTPUT->notification(get_string('uploadpicture_cannotunzip','admin'));
                 @remove_dir($zipdir);
             } else {
                 // We don't need the zip file any longer, so delete it to make
@@ -96,17 +93,18 @@ if ($formdata = $mform->get_data()) {
 
                 process_directory($zipdir, $userfields[$userfield], $overwritepicture, $results);
             
+
                 // Finally remove the temporary directory with all the user images and print some stats.
                 remove_dir($zipdir);
-                notify(get_string('usersupdated', 'admin') . ": " . $results['updated']);
-                notify(get_string('errors', 'admin') . ": " . $results['errors']);
+                echo $OUTPUT->notification(get_string('usersupdated', 'admin') . ": " . $results['updated']);
+                echo $OUTPUT->notification(get_string('errors', 'admin') . ": " . $results['errors']);
                 echo '<hr />';
             }
         }
     }
 }
 $mform->display();
-admin_externalpage_print_footer();
+echo $OUTPUT->footer();
 exit;
 
 // ----------- Internal functions ----------------
@@ -118,18 +116,21 @@ exit;
  *
  * @param string $dir where to create the temp directory.
  * @param string $prefix prefix for the temp directory name (default '')
- * @param string $mode permissions for the temp directory (default 700)
  *
  * @return string The full path to the temp directory.
  */
-function my_mktempdir($dir, $prefix='', $mode=0700) {
+function my_mktempdir($dir, $prefix='') {
+    global $CFG;
+
     if (substr($dir, -1) != '/') {
         $dir .= '/';
     }
 
     do {
         $path = $dir.$prefix.mt_rand(0, 9999999);
-    } while (!mkdir($path, $mode));
+    } while (file_exists($path));
+
+    check_dir_exists($path);
 
     return $path;
 }
@@ -148,8 +149,9 @@ function my_mktempdir($dir, $prefix='', $mode=0700) {
  * @return nothing
  */
 function process_directory ($dir, $userfield, $overwrite, &$results) {
+    global $OUTPUT;
     if(!($handle = opendir($dir))) {
-        notify(get_string('uploadpicture_cannotprocessdir','admin'));
+        echo $OUTPUT->notification(get_string('uploadpicture_cannotprocessdir','admin'));
         return;
     }
 
@@ -190,6 +192,8 @@ function process_directory ($dir, $userfield, $overwrite, &$results) {
  *                  PIX_FILE_SKIPPED
  */
 function process_file ($file, $userfield, $overwrite) {
+    global $DB, $OUTPUT;
+
     // Add additional checks on the filenames, as they are user
     // controlled and we don't want to open any security holes.    
     $path_parts = pathinfo(cleardoubleslashes($file));
@@ -203,26 +207,26 @@ function process_file ($file, $userfield, $overwrite) {
                         strlen($extension) - 1);
 
     // userfield names are safe, so don't quote them.    
-    if (!($user = get_record('user', $userfield, addslashes($uservalue),'deleted',0))) {
-        $a = new Object();
+    if (!($user = $DB->get_record('user', array ($userfield => $uservalue, 'deleted' => 0)))) {
+        $a = new stdClass();
         $a->userfield = clean_param($userfield, PARAM_CLEANHTML);
         $a->uservalue = clean_param($uservalue, PARAM_CLEANHTML);
-        notify(get_string('uploadpicture_usernotfound', 'admin', $a));
+        echo $OUTPUT->notification(get_string('uploadpicture_usernotfound', 'admin', $a));
         return PIX_FILE_ERROR;
     }
 
-    $haspicture = get_field('user', 'picture', 'id', $user->id);
+    $haspicture = $DB->get_field('user', 'picture', array('id'=>$user->id));
     if ($haspicture && !$overwrite) {
-        notify(get_string('uploadpicture_userskipped', 'admin', $user->username));
+        echo $OUTPUT->notification(get_string('uploadpicture_userskipped', 'admin', $user->username));
         return PIX_FILE_SKIPPED;
     }
 
     if (my_save_profile_image($user->id, $file)) {
-        set_field('user', 'picture', 1, 'id', $user->id);
-        notify(get_string('uploadpicture_userupdated', 'admin', $user->username));
+        $DB->set_field('user', 'picture', 1, array('id'=>$user->id));
+        echo $OUTPUT->notification(get_string('uploadpicture_userupdated', 'admin', $user->username));
         return PIX_FILE_UPDATED;
     } else {
-        notify(get_string('uploadpicture_cannotsave', 'admin', $user->username));
+        echo $OUTPUT->notification(get_string('uploadpicture_cannotsave', 'admin', $user->username));
         return PIX_FILE_ERROR;
     }
 }
@@ -238,12 +242,8 @@ function process_file ($file, $userfield, $overwrite) {
  * @return bool 
  */
 function my_save_profile_image($id, $originalfile) {
-    $destination = create_profile_image_destination($id, 'user');
-    if ($destination === false) {
-        return false;
-    }
-
-    return process_profile_image($originalfile, $destination);
+    $context = get_context_instance(CONTEXT_USER, $id);
+    return process_new_icon($context, 'user', 'icon', 0, $originalfile);
 }
 
-?>
+
