diff --git a/admin/uploaduser.php b/admin/uploaduser.php
old mode 100755
new mode 100644
index f917566..3ee02a3
--- a/admin/uploaduser.php
+++ b/admin/uploaduser.php
@@ -1,38 +1,46 @@
-<?php  // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
-/// Bulk user registration script from a comma separated file
-/// Returns list of users with their user ids
+/**
+ * Bulk user registration script from a comma separated file
+ *
+ * @package    core
+ * @subpackage admin
+ * @copyright  2004 onwards Martin Dougiamas (http://dougiamas.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 
 require('../config.php');
 require_once($CFG->libdir.'/adminlib.php');
 require_once($CFG->libdir.'/csvlib.class.php');
 require_once($CFG->dirroot.'/user/profile/lib.php');
+require_once($CFG->dirroot.'/group/lib.php');
+require_once('uploaduserlib.php');
 require_once('uploaduser_form.php');
 
 $iid         = optional_param('iid', '', PARAM_INT);
 $previewrows = optional_param('previewrows', 10, PARAM_INT);
-$readcount   = optional_param('readcount', 0, PARAM_INT);
-
-define('UU_ADDNEW', 0);
-define('UU_ADDINC', 1);
-define('UU_ADD_UPDATE', 2);
-define('UU_UPDATE', 3);
-
-@set_time_limit(3600); // 1 hour should be enough
-@raise_memory_limit('256M');
-if (function_exists('apache_child_terminate')) {
-    // if we are running from Apache, give httpd a hint that
-    // it can recycle the process after it's done. Apache's
-    // memory management is truly awful but we can help it.
-    @apache_child_terminate();
-}
 
+@set_time_limit(60*60); // 1 hour should be enough
+raise_memory_limit(MEMORY_HUGE);
+
+require_login();
 admin_externalpage_setup('uploadusers');
 require_capability('moodle/site:uploadusers', get_context_instance(CONTEXT_SYSTEM));
 
-$textlib = textlib_get_instance();
-$systemcontext = get_context_instance(CONTEXT_SYSTEM);
-
 $struserrenamed             = get_string('userrenamed', 'admin');
 $strusernotrenamedexists    = get_string('usernotrenamedexists', 'error');
 $strusernotrenamedmissing   = get_string('usernotrenamedmissing', 'error');
@@ -44,6 +52,8 @@ $strusernotupdated          = get_string('usernotupdatederror', 'error');
 $strusernotupdatednotexists = get_string('usernotupdatednotexists', 'error');
 $strusernotupdatedadmin     = get_string('usernotupdatedadmin', 'error');
 
+$struseruptodate            = get_string('useraccountuptodate', 'admin');
+
 $struseradded               = get_string('newuser');
 $strusernotadded            = get_string('usernotaddedregistered', 'error');
 $strusernotaddederror       = get_string('usernotaddederror', 'error');
@@ -55,94 +65,103 @@ $strusernotdeletedoff       = get_string('usernotdeletedoff', 'error');
 $strusernotdeletedadmin     = get_string('usernotdeletedadmin', 'error');
 
 $strcannotassignrole        = get_string('cannotassignrole', 'error');
-$strduplicateusername       = get_string('duplicateusername', 'error');
 
 $struserauthunsupported     = get_string('userauthunsupported', 'error');
-$stremailduplicate          = get_string('useremailduplicate', 'error');;
+$stremailduplicate          = get_string('useremailduplicate', 'error');
 
+$strinvalidpasswordpolicy   = get_string('invalidpasswordpolicy', 'error');
 $errorstr                   = get_string('error');
 
-$returnurl = $CFG->wwwroot.'/'.$CFG->admin.'/uploaduser.php';
-$bulknurl  = $CFG->wwwroot.'/'.$CFG->admin.'/user/user_bulk.php';
+$returnurl = new moodle_url('/admin/uploaduser.php');
+$bulknurl  = new moodle_url('/admin/user/user_bulk.php');
+
+$today = time();
+$today = make_timestamp(date('Y', $today), date('m', $today), date('d', $today), 0, 0, 0);
 
 // array of all valid fields for validation
 $STD_FIELDS = array('id', 'firstname', 'lastname', 'username', 'email', 
-        'city', 'country', 'lang', 'auth', 'timezone', 'mailformat', 
+        'city', 'country', 'lang', 'timezone', 'mailformat',
         'maildisplay', 'maildigest', 'htmleditor', 'ajax', 'autosubscribe', 
-        'mnethostid', 'institution', 'department', 'idnumber', 'skype', 
+        'institution', 'department', 'idnumber', 'skype',
         'msn', 'aim', 'yahoo', 'icq', 'phone1', 'phone2', 'address', 
-        'url', 'description', 'oldusername', 'emailstop', 'deleted',  
-        'password');
+        'url', 'description', 'descriptionformat', 'password',
+        'auth',        // watch out when changing auth type or using external auth plugins!
+        'oldusername', // use when renaming users - this is the original username
+        'deleted',     // 1 means delete user
+    );
 
 $PRF_FIELDS = array();
 
-if ($prof_fields = get_records('user_info_field')) {
+if ($prof_fields = $DB->get_records('user_info_field')) {
     foreach ($prof_fields as $prof_field) {
         $PRF_FIELDS[] = 'profile_field_'.$prof_field->shortname;
     }
-    unset($prof_fields);
 }
+unset($prof_fields);
 
 if (empty($iid)) {
-    $mform = new admin_uploaduser_form1();
+    $mform1 = new admin_uploaduser_form1();
 
-    if ($formdata = $mform->get_data()) {
+    if ($formdata = $mform1->get_data()) {
         $iid = csv_import_reader::get_new_iid('uploaduser');
         $cir = new csv_import_reader($iid, 'uploaduser');
 
-        $content = $mform->get_file_content('userfile');
+        $content = $mform1->get_file_content('userfile');
 
-        $readcount = $cir->load_csv_content($content, $formdata->encoding, $formdata->delimiter_name, 'validate_user_upload_columns');
+        $readcount = $cir->load_csv_content($content, $formdata->encoding, $formdata->delimiter_name);
         unset($content);
 
         if ($readcount === false) {
-            error($cir->get_error(), $returnurl);
+            print_error('csvloaderror', '', $returnurl);
         } else if ($readcount == 0) {
             print_error('csvemptyfile', 'error', $returnurl);
         }
+        // test if columns ok
+        $filecolumns = uu_validate_user_upload_columns($cir, $STD_FIELDS, $PRF_FIELDS, $returnurl);
         // continue to form2
 
     } else {
-        admin_externalpage_print_header();
-        print_heading_with_help(get_string('uploadusers'), 'uploadusers2');
-        $mform->display();
-        admin_externalpage_print_footer();
+        echo $OUTPUT->header();
+
+        echo $OUTPUT->heading_with_help(get_string('uploadusers', 'admin'), 'uploadusers', 'admin');
+
+        $mform1->display();
+        echo $OUTPUT->footer();
         die;
     }
 } else {
     $cir = new csv_import_reader($iid, 'uploaduser');
+    $filecolumns = uu_validate_user_upload_columns($cir, $STD_FIELDS, $PRF_FIELDS, $returnurl);
 }
 
-if (!$columns = $cir->get_columns()) {
-    error('Error reading temporary file', $returnurl);
-}
-$mform = new admin_uploaduser_form2(null, $columns);
-// get initial date from form1
-$mform->set_data(array('iid'=>$iid, 'previewrows'=>$previewrows, 'readcount'=>$readcount));
+$mform2 = new admin_uploaduser_form2(null, array('columns'=>$filecolumns, 'data'=>array('iid'=>$iid, 'previewrows'=>$previewrows)));
 
 // If a file has been uploaded, then process it
-if ($formdata = $mform->is_cancelled()) {
+if ($formdata = $mform2->is_cancelled()) {
     $cir->cleanup(true);
     redirect($returnurl);
 
-} else if ($formdata = $mform->get_data(false)) { // no magic quotes here!!!
+} else if ($formdata = $mform2->get_data()) {
     // Print the header
-    admin_externalpage_print_header();
-    print_heading(get_string('uploadusersresult', 'admin'));
+    echo $OUTPUT->header();
+    echo $OUTPUT->heading(get_string('uploadusersresult', 'admin'));
 
     $optype = $formdata->uutype;
 
-    $createpasswords   = (!empty($formdata->uupasswordnew) and $optype != UU_UPDATE);
-    $updatepasswords   = (!empty($formdata->uupasswordold)  and $optype != UU_ADDNEW and $optype != UU_ADDINC);
-    $allowrenames      = (!empty($formdata->uuallowrenames) and $optype != UU_ADDNEW and $optype != UU_ADDINC);
-    $allowdeletes      = (!empty($formdata->uuallowdeletes) and $optype != UU_ADDNEW and $optype != UU_ADDINC);
     $updatetype        = isset($formdata->uuupdatetype) ? $formdata->uuupdatetype : 0;
+    $createpasswords   = (!empty($formdata->uupasswordnew) and $optype != UU_USER_UPDATE);
+    $updatepasswords   = (!empty($formdata->uupasswordold)  and $optype != UU_USER_ADDNEW and $optype != UU_USER_ADDINC and ($updatetype == UU_UPDATE_FILEOVERRIDE or $updatetype == UU_UPDATE_ALLOVERRIDE));
+    $allowrenames      = (!empty($formdata->uuallowrenames) and $optype != UU_USER_ADDNEW and $optype != UU_USER_ADDINC);
+    $allowdeletes      = (!empty($formdata->uuallowdeletes) and $optype != UU_USER_ADDNEW and $optype != UU_USER_ADDINC);
     $bulk              = $formdata->uubulk;
     $noemailduplicates = $formdata->uunoemailduplicates;
+    $standardusernames = $formdata->uustandardusernames;
+    $resetpasswords    = isset($formdata->uuforcepasswordchange) ? $formdata->uuforcepasswordchange : UU_PWRESET_NONE;
 
     // verification moved to two places: after upload and into form2
     $usersnew     = 0;
     $usersupdated = 0;
+    $usersuptodate = 0; //not printed yet anywhere
     $userserrors  = 0;
     $deletes      = 0;
     $deleteerrors = 0;
@@ -153,24 +172,16 @@ if ($formdata = $mform->is_cancelled()) {
 
     // caches
     $ccache    = array(); // course cache - do not fetch all courses here, we  will not probably use them all anyway!
-    $rolecache = array(); // roles lookup cache
+    $rolecache      = uu_allowed_roles_cache(); // roles lookup cache
+    $manualcache    = array(); // cache of used manual enrol plugins in each course
+    $supportedauths = uu_supported_auths(); // officially supported plugins that are enabled
 
-    $allowedauths   = uu_allowed_auths();
-    $allowedauths   = array_keys($allowedauths);
-    $availableauths = get_list_of_plugins('auth');
-
-    $allowedroles = uu_allowed_roles(true);
-    foreach ($allowedroles as $rid=>$rname) {
-        $rolecache[$rid] = new object();
-        $rolecache[$rid]->id = $rid;
-        $rolecache[$rid]->name = $rname;
-        if (!is_numeric($rname)) { // only non-numeric shornames are supported!!!
-            $rolecache[$rname] = new object();
-            $rolecache[$rname]->id = $rid;
-            $rolecache[$rname]->name = $rname;
-        }
+    // we use only manual enrol plugin here, if it is disabled no enrol is done
+    if (enrol_is_enabled('manual')) {
+        $manual = enrol_get_plugin('manual');
+    } else {
+        $manual = NULL;
     }
-    unset($allowedroles);
 
     // clear bulk selection
     if ($bulk) {
@@ -183,7 +194,7 @@ if ($formdata = $mform->is_cancelled()) {
 
     // init upload progress tracker
     $upt = new uu_progress_tracker();
-    $upt->init(); // start table
+    $upt->start(); // start table
 
     while ($line = $cir->next()) {
         $upt->flush();
@@ -191,46 +202,43 @@ if ($formdata = $mform->is_cancelled()) {
 
         $upt->track('line', $linenum);
 
-        $forcechangepassword = false;
+        $user = new stdClass();
 
-        $user = new object();
-        // by default, use the local mnet id (this may be changed in the file)
-        $user->mnethostid = $CFG->mnet_localhost_id;
         // add fields to user object
-        foreach ($line as $key => $value) {
-            if ($value !== '') {
-                $key = $columns[$key];
-                // password is special field
-                if ($key == 'password') {
-                    if ($value !== '') {
-                        $user->password = hash_internal_user_password($value);
-                        if (!empty($CFG->passwordpolicy) and !check_password_policy($value, $errmsg)) {
-                            $forcechangepassword = true;
-                            $weakpasswords++;
-                        }
-                    }
+        foreach ($line as $keynum => $value) {
+            if (!isset($filecolumns[$keynum])) {
+                // this should not happen
+                continue;
+            }
+            $key = $filecolumns[$keynum];
+            if (strpos($key, 'profile_field_') === 0) {
+                //NOTE: bloody mega hack alert!!
+                if (isset($USER->$key) and is_array($USER->$key)) {
+                    // this must be some hacky field that is abusing arrays to store content and format
+                    $user->$key = array();
+                    $user->$key['text']   = $value;
+                    $user->$key['format'] = FORMAT_MOODLE;
                 } else {
                     $user->$key = $value;
-                    if (in_array($key, $upt->columns)) {
-                        $upt->track($key, $value);
                     }
+            } else {
+                $user->$key = $value;
                 }
+
+            if (in_array($key, $upt->columns)) {
+                // default value in progress tracking table, can be changed later
+                $upt->track($key, s($value), 'normal');
             }
         }
-
-        // get username, first/last name now - we need them in templates!!
-        if ($optype == UU_UPDATE) {
-            // when updating only username is required
             if (!isset($user->username)) {
-                $upt->track('status', get_string('missingfield', 'error', 'username'), 'error');
-                $upt->track('username', $errorstr, 'error');
-                $userserrors++;
-                continue;
+            // prevent warnings bellow
+            $user->username = '';
             }
 
-        } else {
+        if ($optype == UU_USER_ADDNEW or $optype == UU_USER_ADDINC) {
+            // user creation is a special case - the username may be constructed from templates using firstname and lastname
+            // better never try this in mixed update types
             $error = false;
-            // when all other ops need firstname and lastname
             if (!isset($user->firstname) or $user->firstname === '') {
                 $upt->track('status', get_string('missingfield', 'error', 'firstname'), 'error');
                 $upt->track('firstname', $errorstr, 'error');
@@ -246,45 +254,50 @@ if ($formdata = $mform->is_cancelled()) {
                 continue;
             }
             // we require username too - we might use template for it though
-            if (!isset($user->username)) {
-                if (!isset($formdata->username) or $formdata->username === '') {
-                    $upt->track('status', get_string('missingfield', 'error', 'username'), 'error');
-                    $upt->track('username', $errorstr, 'error');
-                    $userserrors++;
-                    continue;
-                } else {
-                    $user->username = process_template($formdata->username, $user);
-                    $upt->track('username', $user->username);
-                }
+            if (empty($user->username) and !empty($formdata->username)) {
+                $user->username = uu_process_template($formdata->username, $user);
+                $upt->track('username', s($user->username));
             }
         }
 
         // normalize username
-        $user->username = $textlib->strtolower($user->username);
-        if (empty($CFG->extendedusernamechars)) {
-            $user->username = eregi_replace('[^(-\.[:alnum:])]', '', $user->username);
+        $originalusername = $user->username;
+        if ($standardusernames) {
+            $user->username = clean_param($user->username, PARAM_USERNAME);
         }
+
+        // make sure we really have username
         if (empty($user->username)) {
             $upt->track('status', get_string('missingfield', 'error', 'username'), 'error');
             $upt->track('username', $errorstr, 'error');
             $userserrors++;
             continue;
+        } else if ($user->username === 'guest') {
+            $upt->track('status', get_string('guestnoeditprofileother', 'error'), 'error');
+            $userserrors++;
+            continue;
         }
 
-        if ($existinguser = get_record('user', 'username', addslashes($user->username), 'mnethostid', $user->mnethostid)) {
+        if ($existinguser = $DB->get_record('user', array('username'=>$user->username, 'mnethostid'=>$CFG->mnet_localhost_id))) {
             $upt->track('id', $existinguser->id, 'normal', false);
         }
 
         // find out in username incrementing required
-        if ($existinguser and $optype == UU_ADDINC) {
-            $oldusername = $user->username;
-            $user->username = increment_username($user->username, $user->mnethostid);
-            $upt->track('username', '', 'normal', false); // clear previous
-            $upt->track('username', $oldusername.'-->'.$user->username, 'info');
+        if ($existinguser and $optype == UU_USER_ADDINC) {
+            $user->username = uu_increment_username($user->username);
             $existinguser = false;
         }
 
+        // notify about nay username changes
+        if ($originalusername !== $user->username) {
+            $upt->track('username', '', 'normal', false); // clear previous
+            $upt->track('username', s($originalusername).'-->'.s($user->username), 'info');
+        } else {
+            $upt->track('username', s($user->username), 'normal', false);
+        }
+
         // add default values for remaining fields
+        $formdefaults = array();
         foreach ($STD_FIELDS as $field) {
             if (isset($user->$field)) {
                 continue;
@@ -292,7 +305,11 @@ if ($formdata = $mform->is_cancelled()) {
             // all validation moved to form2
             if (isset($formdata->$field)) {
                 // process templates
-                $user->$field = process_template($formdata->$field, $user);
+                $user->$field = uu_process_template($formdata->$field, $user);
+                $formdefaults[$field] = true;
+                if (in_array($field, $upt->columns)) {
+                    $upt->track($field, s($user->$field), 'normal');
+                }
             }
         }
         foreach ($PRF_FIELDS as $field) {
@@ -301,7 +318,8 @@ if ($formdata = $mform->is_cancelled()) {
             }
             if (isset($formdata->$field)) {
                 // process templates
-                $user->$field = process_template($formdata->$field, $user);
+                $user->$field = uu_process_template($formdata->$field, $user);
+                $formdefaults[$field] = true;
             }
         }
 
@@ -313,7 +331,7 @@ if ($formdata = $mform->is_cancelled()) {
                 continue;
             }
             if ($existinguser) {
-                if (has_capability('moodle/site:doanything', $systemcontext, $existinguser->id)) {
+                if (is_siteadmin($existinguser->id)) {
                     $upt->track('status', $strusernotdeletedadmin, 'error');
                     $deleteerrors++;
                     continue;
@@ -336,7 +354,6 @@ if ($formdata = $mform->is_cancelled()) {
 
         // renaming requested?
         if (!empty($user->oldusername) ) {
-            $oldusername = $textlib->strtolower($user->oldusername);
             if (!$allowrenames) {
                 $usersskipped++;
                 $upt->track('status', $strusernotrenamedoff, 'warning');
@@ -349,24 +366,32 @@ if ($formdata = $mform->is_cancelled()) {
                 continue;
             }
 
-            if ($olduser = get_record('user', 'username', addslashes($oldusername), 'mnethostid', addslashes($user->mnethostid))) {
+            if ($user->username === 'guest') {
+                $upt->track('status', get_string('guestnoeditprofileother', 'error'), 'error');
+                $renameerrors++;
+                continue;
+            }
+
+            if ($standardusernames) {
+                $oldusername = clean_param($user->oldusername, PARAM_USERNAME);
+            } else {
+                $oldusername = $user->oldusername;
+            }
+
+            // no guessing when looking for old username, it must be exact match
+            if ($olduser = $DB->get_record('user', array('username'=>$oldusername, 'mnethostid'=>$CFG->mnet_localhost_id))) {
                 $upt->track('id', $olduser->id, 'normal', false);
-                if (has_capability('moodle/site:doanything', $systemcontext, $olduser->id)) {
+                if (is_siteadmin($olduser->id)) {
                     $upt->track('status', $strusernotrenamedadmin, 'error');
                     $renameerrors++;
                     continue;
                 }
-                if (set_field('user', 'username', addslashes($user->username), 'id', $olduser->id)) {
+                $DB->set_field('user', 'username', $user->username, array('id'=>$olduser->id));
                     $upt->track('username', '', 'normal', false); // clear previous
-                    $upt->track('username', $oldusername.'-->'.$user->username, 'info');
+                $upt->track('username', s($oldusername).'-->'.s($user->username), 'info');
                     $upt->track('status', $struserrenamed);
                     $renames++;
                 } else {
-                    $upt->track('status', $strusernotrenamedexists, 'error');
-                    $renameerrors++;
-                    continue;
-                }
-            } else {
                 $upt->track('status', $strusernotrenamedmissing, 'error');
                 $renameerrors++;
                 continue;
@@ -378,33 +403,37 @@ if ($formdata = $mform->is_cancelled()) {
         // can we process with update or insert?
         $skip = false;
         switch ($optype) {
-            case UU_ADDNEW:
+            case UU_USER_ADDNEW:
                 if ($existinguser) {
                     $usersskipped++;
                     $upt->track('status', $strusernotadded, 'warning');
-                    $skip = true;;
+                    $skip = true;
                 }
                 break;
 
-            case UU_ADDINC:
+            case UU_USER_ADDINC:
                 if ($existinguser) {
                     //this should not happen!
                     $upt->track('status', $strusernotaddederror, 'error');
                     $userserrors++;
-                    continue;
+                    $skip = true;
                 }
                 break;
 
-            case UU_ADD_UPDATE:
+            case UU_USER_ADD_UPDATE:
                 break;
 
-            case UU_UPDATE:
+            case UU_USER_UPDATE:
                 if (!$existinguser) {
                     $usersskipped++;
                     $upt->track('status', $strusernotupdatednotexists, 'warning');
                     $skip = true;
                 }
                 break;
+
+            default:
+                // unknown type
+                $skip = true;
         }
 
         if ($skip) {
@@ -414,47 +443,59 @@ if ($formdata = $mform->is_cancelled()) {
         if ($existinguser) {
             $user->id = $existinguser->id;
 
-            if (has_capability('moodle/site:doanything', $systemcontext, $user->id)) {
+            $upt->track('username', html_writer::link(new moodle_url('/user/profile.php', array('id'=>$existinguser->id)), s($existinguser->username)), 'normal', false);
+
+            if (is_siteadmin($user->id)) {
                 $upt->track('status', $strusernotupdatedadmin, 'error');
                 $userserrors++;
                 continue;
             }
 
-            if (!$updatetype) {
-                // no updates of existing data at all
-            } else {
                 $existinguser->timemodified = time();
+            // do NOT mess with timecreated or firstaccess here!
+
                 //load existing profile data
                 profile_load_data($existinguser);
 
-                $allowed = array();
-                if ($updatetype == 1) {
-                    $allowed = $columns;
-                } else if ($updatetype == 2 or $updatetype == 3) {
-                    $allowed = array_merge($STD_FIELDS, $PRF_FIELDS);
+            $upt->track('auth', $existinguser->auth, 'normal', false);
+
+            $doupdate = false;
+
+            if ($updatetype != UU_UPDATE_NOCHANGES) {
+                if (!empty($user->auth) and $user->auth !== $existinguser->auth) {
+                    $upt->track('auth', s($existinguser->auth).'-->'.s($user->auth), 'info', false);
+                    $existinguser->auth = $user->auth;
+                    if (!isset($supportedauths[$user->auth])) {
+                        $upt->track('auth', $struserauthunsupported, 'warning');
                 }
-                foreach ($allowed as $column) {
-                    if ($column == 'username') {
-                        continue;
+                    $doupdate = true;
                     }
-                    if ($column == 'password') {
-                        if (!$updatepasswords or $updatetype == 3) {
+                $allcolumns = array_merge($STD_FIELDS, $PRF_FIELDS);
+                foreach ($allcolumns as $column) {
+                    if ($column === 'username' or $column === 'password' or $column === 'auth') {
+                        // these can not be changed here
                             continue;
-                        } else if (!empty($user->password)) {
-                            $upt->track('password', get_string('updated'));
-                            if ($forcechangepassword) {
-                                set_user_preference('auth_forcepasswordchange', 1, $existinguser->id);
                             }
+                    if (!property_exists($user, $column) or !property_exists($existinguser, $column)) {
+                        // this should never happen
+                        continue;
                         }
+                    if ($updatetype == UU_UPDATE_MISSING) {
+                        if (!is_null($existinguser->$column) and $existinguser->$column !== '') {
+                            continue;
                     }
-                    if ((array_key_exists($column, $existinguser) and array_key_exists($column, $user)) or in_array($column, $PRF_FIELDS)) {
-                        if ($updatetype == 3 and $existinguser->$column !== '') {
-                            //missing == non-empty only
+                    } else if ($updatetype == UU_UPDATE_ALLOVERRIDE) {
+                        // we override everything
+
+                    } else if ($updatetype == UU_UPDATE_FILEOVERRIDE) {
+                        if (!empty($formdefaults[$column])) {
+                            // do not override with form defaults
                             continue;
                         }
+                    }
                         if ($existinguser->$column !== $user->$column) {
-                            if ($column == 'email') {
-                                if (record_exists('user', 'email', addslashes($user->email))) {
+                        if ($column === 'email') {
+                            if ($DB->record_exists('user', array('email'=>$user->email))) {
                                     if ($noemailduplicates) {
                                         $upt->track('email', $stremailduplicate, 'error');
                                         $upt->track('status', $strusernotupdated, 'error');
@@ -464,69 +505,126 @@ if ($formdata = $mform->is_cancelled()) {
                                         $upt->track('email', $stremailduplicate, 'warning');
                                     }
                                 }
+                            if (!validate_email($user->email)) {
+                                $upt->track('email', get_string('invalidemail'), 'warning');
                             }
-                            if ($column != 'password' and in_array($column, $upt->columns)) {
-                                $upt->track($column, '', 'normal', false); // clear previous
-                                $upt->track($column, $existinguser->$column.'-->'.$user->$column, 'info');
+                        }
+
+                        if (in_array($column, $upt->columns)) {
+                            $upt->track($column, s($existinguser->$column).'-->'.s($user->$column), 'info', false);
                             }
                             $existinguser->$column = $user->$column;
+                        $doupdate = true;
                         }
                     }
                 }
 
-                // do not update record if new auth plguin does not exist!
-                if (!in_array($existinguser->auth, $availableauths)) {
-                    $upt->track('auth', get_string('userautherror', 'error', $existinguser->auth), 'error');
+            try {
+                $auth = get_auth_plugin($existinguser->auth);
+            } catch (Exception $e) {
+                $upt->track('auth', get_string('userautherror', 'error', s($existinguser->auth)), 'error');
                     $upt->track('status', $strusernotupdated, 'error');
                     $userserrors++;
                     continue;
-                } else if (!in_array($existinguser->auth, $allowedauths)) {
-                    $upt->track('auth', $struserauthunsupported, 'warning');
                 }
+            $isinternalauth = $auth->is_internal();
 
-                if (update_record('user', addslashes_recursive($existinguser))) {
-                    $upt->track('status', $struserupdated);
-                    $usersupdated++;
+            // changing of passwords is a special case
+            // do not force password changes for external auth plugins!
+            $oldpw = $existinguser->password;
+            if (!$isinternalauth) {
+                $existinguser->password = 'not cached';
+                $upt->track('password', '-', 'normal', false);
+                // clean up prefs
+                unset_user_preference('create_password', $existinguser);
+                unset_user_preference('auth_forcepasswordchange', $existinguser);
+
+            } else if (!empty($user->password)) {
+                if ($updatepasswords) {
+                    $errmsg = null;
+                    $weak = !check_password_policy($user->password, $errmsg);
+                    if ($resetpasswords == UU_PWRESET_ALL or ($resetpasswords == UU_PWRESET_WEAK and $weak)) {
+                        if ($weak) {
+                            $weakpasswords++;
+                            $upt->track('password', $strinvalidpasswordpolicy, 'warning');
+                        }
+                        set_user_preference('auth_forcepasswordchange', 1, $existinguser);
                 } else {
-                    $upt->track('status', $strusernotupdated, 'error');
-                    $userserrors++;
-                    continue;
+                        unset_user_preference('auth_forcepasswordchange', $existinguser);
                 }
+                    unset_user_preference('create_password', $existinguser); // no need to create password any more
+                    $existinguser->password = hash_internal_user_password($user->password);
+                    $upt->track('password', $user->password, 'normal', false);
+                } else {
+                    // do not print password when not changed
+                    $upt->track('password', '', 'normal', false);
+                }
+            }
+
+            if ($doupdate or $existinguser->password !== $oldpw) {
+                // we want only users that were really updated
+
+                $DB->update_record('user', $existinguser);
+
+                $upt->track('status', $struserupdated);
+                $usersupdated++;
                 // save custom profile fields data from csv file
-                profile_save_data(addslashes_recursive($existinguser));
+                profile_save_data($existinguser);
+
+                events_trigger('user_updated', $existinguser);
+
+                if ($bulk == UU_BULK_UPDATED or $bulk == UU_BULK_ALL) {
+                    if (!in_array($user->id, $SESSION->bulk_users)) {
+                        $SESSION->bulk_users[] = $user->id;
+                    }
             }
 
-            if ($bulk == 2 or $bulk == 3) {
+            } else {
+                // no user information changed
+                $upt->track('status', $struseruptodate);
+                $usersuptodate++;
+
+                if ($bulk == UU_BULK_ALL) {
                 if (!in_array($user->id, $SESSION->bulk_users)) {
                     $SESSION->bulk_users[] = $user->id;
                 }
             }
+            }
 
         } else {
-            // save the user to the database
+            // save the new user to the database
             $user->confirmed = 1;
             $user->timemodified = time();
+            $user->timecreated  = time();
+            $user->mnethostid   = $CFG->mnet_localhost_id; // we support ONLY local accounts here, sorry
 
-            if (!$createpasswords and empty($user->password)) {
-                $upt->track('password', get_string('missingfield', 'error', 'password'), 'error');
+            if (empty($user->auth)) {
+                $user->auth = 'manual';
+            }
+            $upt->track('auth', $user->auth, 'normal', false);
+
+            // do not insert record if new auth plugin does not exist!
+            try {
+                $auth = get_auth_plugin($user->auth);
+            } catch (Exception $e) {
+                $upt->track('auth', get_string('userautherror', 'error', s($user->auth)), 'error');
                 $upt->track('status', $strusernotaddederror, 'error');
                 $userserrors++;
                 continue;
             }
+            if (!isset($supportedauths[$user->auth])) {
+                $upt->track('auth', $struserauthunsupported, 'warning');
+            }
 
-            // do not insert record if new auth plguin does not exist!
-            if (isset($user->auth)) {
-                if (!in_array($user->auth, $availableauths)) {
-                    $upt->track('auth', get_string('userautherror', 'error', $user->auth), 'error');
+            $isinternalauth = $auth->is_internal();
+
+            if (empty($user->email)) {
+                $upt->track('email', get_string('invalidemail'), 'error');
                     $upt->track('status', $strusernotaddederror, 'error');
                     $userserrors++;
                     continue;
-                } else if (!in_array($user->auth, $allowedauths)) {
-                    $upt->track('auth', $struserauthunsupported, 'warning');
-                }
-            }
 
-            if (record_exists('user', 'email', addslashes($user->email))) {
+            } else if ($DB->record_exists('user', array('email'=>$user->email))) {
                 if ($noemailduplicates) {
                     $upt->track('email', $stremailduplicate, 'error');
                     $upt->track('status', $strusernotaddederror, 'error');
@@ -536,51 +634,87 @@ if ($formdata = $mform->is_cancelled()) {
                     $upt->track('email', $stremailduplicate, 'warning');
                 }
             }
-
-            if ($user->id = insert_record('user', addslashes_recursive($user))) {
-                $info = ': ' . $user->username .' (ID = ' . $user->id . ')';
-                $upt->track('status', $struseradded);
-                $upt->track('id', $user->id, 'normal', false);
-                $usersnew++;
-                if ($createpasswords and empty($user->password)) {
-                    // passwords will be created and sent out on cron
-                    set_user_preference('create_password', 1, $user->id);
-                    set_user_preference('auth_forcepasswordchange', 1, $user->id);
-                    $upt->track('password', get_string('new'));
-                }
-                if ($forcechangepassword) {
-                    set_user_preference('auth_forcepasswordchange', 1, $user->id);
+            if (!validate_email($user->email)) {
+                $upt->track('email', get_string('invalidemail'), 'warning');
                 }
+
+            $forcechangepassword = false;
+
+            if ($isinternalauth) {
+                if (empty($user->password)) {
+                    if ($createpasswords) {
+                        $user->password = 'to be generated';
+                        $upt->track('password', '', 'normal', false);
+                        $upt->track('password', get_string('uupasswordcron', 'admin'), 'warning', false);
             } else {
-                // Record not added -- possibly some other error
+                        $upt->track('password', '', 'normal', false);
+                        $upt->track('password', get_string('missingfield', 'error', 'password'), 'error');
                 $upt->track('status', $strusernotaddederror, 'error');
                 $userserrors++;
                 continue;
             }
+                } else {
+                    $errmsg = null;
+                    $weak = !check_password_policy($user->password, $errmsg);
+                    if ($resetpasswords == UU_PWRESET_ALL or ($resetpasswords == UU_PWRESET_WEAK and $weak)) {
+                        if ($weak) {
+                            $weakpasswords++;
+                            $upt->track('password', $strinvalidpasswordpolicy, 'warning');
+                        }
+                        $forcechangepassword = true;
+                    }
+                    $user->password = hash_internal_user_password($user->password);
+                }
+            } else {
+                $user->password = 'not cached';
+                $upt->track('password', '-', 'normal', false);
+            }
+
+            // create user - insert_record ignores any extra properties
+            $user->id = $DB->insert_record('user', $user);
+            $upt->track('username', html_writer::link(new moodle_url('/user/profile.php', array('id'=>$user->id)), s($user->username)), 'normal', false);
+
             // save custom profile fields data
-            profile_save_data(addslashes_recursive($user));
+            profile_save_data($user);
+
+            if ($forcechangepassword) {
+                set_user_preference('auth_forcepasswordchange', 1, $user);
+            }
+            if ($user->password === 'to be generated') {
+                set_user_preference('create_password', 1, $user);
+            }
+
+            $upt->track('status', $struseradded);
+            $upt->track('id', $user->id, 'normal', false);
+            $usersnew++;
 
             // make sure user context exists
             get_context_instance(CONTEXT_USER, $user->id);
 
-            if ($bulk == 1 or $bulk == 3) {
+            events_trigger('user_created', $user);
+
+            if ($bulk == UU_BULK_NEW or $bulk == UU_BULK_ALL) {
                 if (!in_array($user->id, $SESSION->bulk_users)) {
                     $SESSION->bulk_users[] = $user->id;
                 }
             }
         }
 
-        // find course enrolments, groups and roles/types
-        foreach ($columns as $column) {
+        // find course enrolments, groups, roles/types and enrol periods
+        // this is again a special case, we always do this for any updated or created users
+        foreach ($filecolumns as $column) {
             if (!preg_match('/^course\d+$/', $column)) {
                 continue;
             }
             $i = substr($column, 6);
 
+            if (empty($user->{'course'.$i})) {
+                continue;
+            }
             $shortname = $user->{'course'.$i};
             if (!array_key_exists($shortname, $ccache)) {
-                if (!$course = get_record('course', 'shortname', addslashes($shortname), '', '', '', '', 'id, shortname, defaultrole')) {
-                    $upt->track('enrolments', get_string('unknowncourse', 'error', $shortname), 'error');
+                if (!$course = $DB->get_record('course', array('shortname'=>$shortname), 'id, shortname')) {
+                    $upt->track('enrolments', get_string('unknowncourse', 'error', s($shortname)), 'error');
                     continue;
                 }
                 $ccache[$shortname] = $course;
@@ -588,6 +722,21 @@ if ($formdata = $mform->is_cancelled()) {
             }
             $courseid      = $ccache[$shortname]->id;
             $coursecontext = get_context_instance(CONTEXT_COURSE, $courseid);
+            if (!isset($manualcache[$courseid])) {
+                $manualcache[$courseid] = false;
+                if ($manual) {
+                    if ($instances = enrol_get_instances($courseid, false)) {
+                        foreach ($instances as $instance) {
+                            if ($instance->enrol === 'manual') {
+                                $manualcache[$courseid] = $instance;
+                                break;
+                            }
+                        }
+                    }
+                }
+            }
+
+            if ($manual and $manualcache[$courseid]) {
 
             // find role
             $rid = false;
@@ -596,7 +745,7 @@ if ($formdata = $mform->is_cancelled()) {
                 if (array_key_exists($addrole, $rolecache)) {
                     $rid = $rolecache[$addrole]->id;
                 } else {
-                    $upt->track('enrolments', get_string('unknownrole', 'error', $addrole), 'error');
+                        $upt->track('enrolments', get_string('unknownrole', 'error', s($addrole)), 'error');
                     continue;
                 }
 
@@ -606,52 +755,52 @@ if ($formdata = $mform->is_cancelled()) {
                 if ($addtype < 1 or $addtype > 3) {
                     $upt->track('enrolments', $strerror.': typeN = 1|2|3', 'error');
                     continue;
-                } else if ($addtype == 1 and empty($formdata->uulegacy1)) {
-                    if (empty($ccache[$shortname]->defaultrole)) {
-                        $rid = $CFG->defaultcourseroleid;
+                    } else if (empty($formdata->{'uulegacy'.$addtype})) {
+                        continue;
                     } else {
-                        $rid = $ccache[$shortname]->defaultrole;
+                        $rid = $formdata->{'uulegacy'.$addtype};
                     }
                 } else {
-                    $rid = $formdata->{'uulegacy'.$addtype};
+                    // no role specified, use the default from manual enrol plugin
+                    $rid = $manualcache[$courseid]->roleid;
                 }
 
-            } else {
-                // no role specified, use the default
-                if (empty($ccache[$shortname]->defaultrole)) {
-                    $rid = $CFG->defaultcourseroleid;
-                } else {
-                    $rid = $ccache[$shortname]->defaultrole;
+                if ($rid) {
+                    // find duration
+                    $timeend   = 0;
+                    if (!empty($user->{'enrolperiod'.$i})) {
+                        $duration = (int)$user->{'enrolperiod'.$i} * 60*60*24; // convert days to seconds
+                        if ($duration > 0) { // sanity check
+                            $timeend = $today + $duration;
                 }
             }
-            if ($rid) {
-                $a = new object();
+
+                    $manual->enrol_user($manualcache[$courseid], $user->id, $rid, $today, $timeend);
+
+                    $a = new stdClass();
                 $a->course = $shortname;
                 $a->role   = $rolecache[$rid]->name;
-                if (role_assign($rid, $user->id, 0, $coursecontext->id)) {
-                    $upt->track('enrolments', get_string('enrolledincourserole', '', $a));
-                } else {
-                    $upt->track('enrolments', get_string('enrolledincoursenotrole', '', $a), 'error');
+                    $upt->track('enrolments', get_string('enrolledincourserole', 'enrol_manual', $a));
                 }
             }
 
             // find group to add to
             if (!empty($user->{'group'.$i})) {
                 // make sure user is enrolled into course before adding into groups
-                if (!has_capability('moodle/course:view', $coursecontext, $user->id, false)) {
-                    $upt->track('enrolments', get_string('addedtogroupnotenrolled', '', $gname), 'error');
+                if (!is_enrolled($coursecontext, $user->id)) {
+                    $upt->track('enrolments', get_string('addedtogroupnotenrolled', '', $user->{'group'.$i}), 'error');
                     continue;
                 }
                 //build group cache
                 if (is_null($ccache[$shortname]->groups)) {
                     $ccache[$shortname]->groups = array();
-                    if ($groups = get_groups($courseid)) {
+                    if ($groups = groups_get_all_groups($courseid)) {
                         foreach ($groups as $gid=>$group) {
-                            $ccache[$shortname]->groups[$gid] = new object();
+                            $ccache[$shortname]->groups[$gid] = new stdClass();
                             $ccache[$shortname]->groups[$gid]->id   = $gid;
                             $ccache[$shortname]->groups[$gid]->name = $group->name;
                             if (!is_numeric($group->name)) { // only non-numeric names are supported!!!
-                            $ccache[$shortname]->groups[$group->name] = new object();
+                                $ccache[$shortname]->groups[$group->name] = new stdClass();
                             $ccache[$shortname]->groups[$group->name]->id   = $gid;
                             $ccache[$shortname]->groups[$group->name]->name = $group->name;
                             }
@@ -662,40 +811,43 @@ if ($formdata = $mform->is_cancelled()) {
                 $addgroup = $user->{'group'.$i};
                 if (!array_key_exists($addgroup, $ccache[$shortname]->groups)) {
                     // if group doesn't exist,  create it
-                    $newgroupdata = new object();
+                    $newgroupdata = new stdClass();
                     $newgroupdata->name = $addgroup;
                     $newgroupdata->courseid = $ccache[$shortname]->id;
-                    if ($ccache[$shortname]->groups[$addgroup]->id = groups_create_group(addslashes_recursive($newgroupdata))){
+                    if ($ccache[$shortname]->groups[$addgroup]->id = groups_create_group($newgroupdata)){
                         $ccache[$shortname]->groups[$addgroup]->name = $newgroupdata->name;
                     } else {
-                        $upt->track('enrolments', get_string('unknowngroup', 'error', $addgroup), 'error');
+                        $upt->track('enrolments', get_string('unknowngroup', 'error', s($addgroup)), 'error');
                         continue;
                     }
                 }
                 $gid   = $ccache[$shortname]->groups[$addgroup]->id;
                 $gname = $ccache[$shortname]->groups[$addgroup]->name;
 
+                try {
                 if (groups_add_member($gid, $user->id)) {
-                    $upt->track('enrolments', get_string('addedtogroup', '', $gname));
+                        $upt->track('enrolments', get_string('addedtogroup', '', s($gname)));
                 } else {
-                    $upt->track('enrolments', get_string('addedtogroupnot', '', $gname), 'error');
+                        $upt->track('enrolments', get_string('addedtogroupnot', '', s($gname)), 'error');
+                    }
+                } catch (moodle_exception $e) {
+                    $upt->track('enrolments', get_string('addedtogroupnot', '', s($gname)), 'error');
                     continue;
                 }
             }
         }
     }
-    $upt->flush();
     $upt->close(); // close table
 
     $cir->close();
     $cir->cleanup(true);
 
-    print_box_start('boxwidthnarrow boxaligncenter generalbox', 'uploadresults');
+    echo $OUTPUT->box_start('boxwidthnarrow boxaligncenter generalbox', 'uploadresults');
     echo '<p>';
-    if ($optype != UU_UPDATE) {
+    if ($optype != UU_USER_UPDATE) {
         echo get_string('userscreated', 'admin').': '.$usersnew.'<br />';
     }
-    if ($optype == UU_UPDATE or $optype == UU_ADD_UPDATE) {
+    if ($optype == UU_USER_UPDATE or $optype == UU_USER_ADD_UPDATE) {
         echo get_string('usersupdated', 'admin').': '.$usersupdated.'<br />';
     }
     if ($allowdeletes) {
@@ -711,286 +863,94 @@ if ($formdata = $mform->is_cancelled()) {
     }
     echo get_string('usersweakpassword', 'admin').': '.$weakpasswords.'<br />';
     echo get_string('errors', 'admin').': '.$userserrors.'</p>';
-    print_box_end();
+    echo $OUTPUT->box_end();
 
     if ($bulk) {
-        print_continue($bulknurl);
+        echo $OUTPUT->continue_button($bulknurl);
     } else {
-        print_continue($returnurl);
+        echo $OUTPUT->continue_button($returnurl);
     }
-    admin_externalpage_print_footer();
+    echo $OUTPUT->footer();
     die;
 }
 
 // Print the header
-admin_externalpage_print_header();
+echo $OUTPUT->header();
 
-/// Print the form
-print_heading_with_help(get_string('uploaduserspreview', 'admin'), 'uploadusers2');
+echo $OUTPUT->heading(get_string('uploaduserspreview', 'admin'));
 
-$ci = 0;
-$ri = 0;
-
-echo '<table id="uupreview" class="generaltable boxaligncenter" summary="'.get_string('uploaduserspreview', 'admin').'">';
-echo '<tr class="heading r'.$ri++.'">';
-foreach ($columns as $col) {
-    echo '<th class="header c'.$ci++.'" scope="col">'.s($col).'</th>';
-}
-echo '</tr>';
+// NOTE: this is JUST csv processing preview, we must not prevent import from here if there is something in the file!!
+//       this was intended for validation of csv formatting and encoding, not filtering the data!!!!
+//       we definitely must not process the whole file!
 
+// preview table data
+$data = array();
 $cir->init();
-while ($fields = $cir->next()) {
-    if ($ri > $previewrows) {
-        echo '<tr class="r'.$ri++.'">';
-        foreach ($fields as $field) {
-            echo '<td class="cell c'.$ci++.'">...</td>';;
-        }
-        break;
-    }
-    $ci = 0;
-    echo '<tr class="r'.$ri++.'">';
-    foreach ($fields as $field) {
-        echo '<td class="cell c'.$ci++.'">'.s($field).'</td>';;
+$linenum = 1; //column header is first line
+while ($linenum <= $previewrows and $fields = $cir->next()) {
+    $linenum++;
+    $rowcols = array();
+    $rowcols['line'] = $linenum;
+    foreach($fields as $key => $field) {
+        $rowcols[$filecolumns[$key]] = s($field);
     }
-    echo '</tr>';
-}
-$cir->close();
-
-echo '</table>';
-echo '<div class="centerpara">'.get_string('uupreprocessedcount', 'admin', $readcount).'</div>';
-$mform->display();
-admin_externalpage_print_footer();
-die;
+    $rowcols['status'] = array();
 
-/////////////////////////////////////
-/// Utility functions and classes ///
-/////////////////////////////////////
-
-class uu_progress_tracker {
-    var $_row;
-    var $columns = array('status', 'line', 'id', 'username', 'firstname', 'lastname', 'email', 'password', 'auth', 'enrolments', 'deleted');
-
-    function uu_progress_tracker() {
-    }
-
-    function init() {
-        $ci = 0;
-        echo '<table id="uuresults" class="generaltable boxaligncenter" summary="'.get_string('uploadusersresult', 'admin').'">';
-        echo '<tr class="heading r0">';
-        echo '<th class="header c'.$ci++.'" scope="col">'.get_string('status').'</th>';
-        echo '<th class="header c'.$ci++.'" scope="col">'.get_string('uucsvline', 'admin').'</th>';
-        echo '<th class="header c'.$ci++.'" scope="col">ID</th>';
-        echo '<th class="header c'.$ci++.'" scope="col">'.get_string('username').'</th>';
-        echo '<th class="header c'.$ci++.'" scope="col">'.get_string('firstname').'</th>';
-        echo '<th class="header c'.$ci++.'" scope="col">'.get_string('lastname').'</th>';
-        echo '<th class="header c'.$ci++.'" scope="col">'.get_string('email').'</th>';
-        echo '<th class="header c'.$ci++.'" scope="col">'.get_string('password').'</th>';
-        echo '<th class="header c'.$ci++.'" scope="col">'.get_string('authentication').'</th>';
-        echo '<th class="header c'.$ci++.'" scope="col">'.get_string('enrolments').'</th>';
-        echo '<th class="header c'.$ci++.'" scope="col">'.get_string('delete').'</th>';
-        echo '</tr>';
-        $this->_row = null;
-    }
-
-    function flush() {
-        if (empty($this->_row) or empty($this->_row['line']['normal'])) {
-            $this->_row = array();
-            foreach ($this->columns as $col) {
-                $this->_row[$col] = array('normal'=>'', 'info'=>'', 'warning'=>'', 'error'=>'');
-            }
-            return;
-        }
-        $ci = 0;
-        $ri = 1;
-        echo '<tr class="r'.$ri++.'">';
-        foreach ($this->_row as $field) {
-            foreach ($field as $type=>$content) {
-                if ($field[$type] !== '') {
-                    $field[$type] = '<span class="uu'.$type.'">'.$field[$type].'</span>';
-                } else {
-                    unset($field[$type]);
+    if (isset($rowcols['username'])) {
+        $stdusername = clean_param($rowcols['username'], PARAM_USERNAME);
+        if ($rowcols['username'] !== $stdusername) {
+            $rowcols['status'][] = get_string('invalidusernameupload');
                 }
+        if ($userid = $DB->get_field('user', 'id', array('username'=>$stdusername, 'mnethostid'=>$CFG->mnet_localhost_id))) {
+            $rowcols['username'] = html_writer::link(new moodle_url('/user/profile.php', array('id'=>$userid)), $rowcols['username']);
             }
-            echo '<td class="cell c'.$ci++.'">';
-            if (!empty($field)) {
-                echo implode('<br />', $field);
             } else {
-                echo '&nbsp;';
-            }
-            echo '</td>';
-        }
-        echo '</tr>';
-        foreach ($this->columns as $col) {
-            $this->_row[$col] = array('normal'=>'', 'info'=>'', 'warning'=>'', 'error'=>'');
-        }
+        $rowcols['status'][] = get_string('missingusername');
     }
 
-    function track($col, $msg, $level='normal', $merge=true) {
-        if (empty($this->_row)) {
-            $this->flush(); //init arrays
+    if (isset($rowcols['email'])) {
+        if (!validate_email($rowcols['email'])) {
+            $rowcols['status'][] = get_string('invalidemail');
         }
-        if (!in_array($col, $this->columns)) {
-            debugging('Incorrect column:'.$col);
-            return;
-        }
-        if ($merge) {
-            if ($this->_row[$col][$level] != '') {
-                $this->_row[$col][$level] .='<br />';
-            }
-            $this->_row[$col][$level] .= s($msg);
-        } else {
-            $this->_row[$col][$level] = s($msg);
+        if ($DB->record_exists('user', array('email'=>$rowcols['email']))) {
+            $rowcols['status'][] = $stremailduplicate;
         }
     }
 
-    function close() {
-        echo '</table>';
+    if (isset($rowcols['city'])) {
+        $rowcols['city'] = trim($rowcols['city']);
+        if (empty($rowcols['city'])) {
+            $rowcols['status'][] = get_string('fieldrequired', 'error', 'city');
     }
-}
-
-/**
- * Validation callback function - verified the column line of csv file.
- * Converts column names to lowercase too.
- */
-function validate_user_upload_columns(&$columns) {
-    global $STD_FIELDS, $PRF_FIELDS;
-
-    if (count($columns) < 2) {
-        return get_string('csvfewcolumns', 'error');
     }
 
-    // test columns
-    $processed = array();
-    foreach ($columns as $key=>$unused) {
-        $columns[$key] = strtolower($columns[$key]); // no unicode expected here, ignore case
-        $field = $columns[$key];
-        if (!in_array($field, $STD_FIELDS) && !in_array($field, $PRF_FIELDS) &&// if not a standard field and not an enrolment field, then we have an error
-            !preg_match('/^course\d+$/', $field) && !preg_match('/^group\d+$/', $field) &&
-            !preg_match('/^type\d+$/', $field) && !preg_match('/^role\d+$/', $field)) {
-            return get_string('invalidfieldname', 'error', $field);
-        }
-        if (in_array($field, $processed)) {
-            return get_string('csvcolumnduplicates', 'error');
-        }
-        $processed[] = $field;
-    }
-    return true;
+    $rowcols['status'] = implode('<br />', $rowcols['status']);
+    $data[] = $rowcols;
 }
-
-/**
- * Increments username - increments trailing number or adds it if not present.
- * Varifies that the new username does not exist yet
- * @param string $username
- * @return incremented username which does not exist yet
- */
-function increment_username($username, $mnethostid) {
-    if (!preg_match_all('/(.*?)([0-9]+)$/', $username, $matches)) {
-        $username = $username.'2';
-    } else {
-        $username = $matches[1][0].($matches[2][0]+1);
-    }
-
-    if (record_exists('user', 'username', addslashes($username), 'mnethostid', addslashes($mnethostid))) {
-        return increment_username($username, $mnethostid);
-    } else {
-        return $username;
-    }
+if ($fields = $cir->next()) {
+    $data[] = array_fill(0, count($fields) + 2, '...');
 }
+$cir->close();
 
-/**
- * Check if default field contains templates and apply them.
- * @param string template - potential tempalte string
- * @param object user object- we need username, firstname and lastname
- * @return string field value
- */
-function process_template($template, $user) {
-    if (strpos($template, '%') === false) {
-        return $template;
-    }
-
-    // very very ugly hack!
-    global $template_globals;
-    $template_globals = new object();
-    $template_globals->username  = isset($user->username)  ? $user->username  : '';
-    $template_globals->firstname = isset($user->firstname) ? $user->firstname : '';
-    $template_globals->lastname  = isset($user->lastname)  ? $user->lastname  : '';
-
-    $result = preg_replace_callback('/(?<!%)%([+-~])?(\d)*([flu])/', 'process_template_callback', $template);
-
-    $template_globals = null;
-
-    if (is_null($result)) {
-        return $template; //error during regex processing??
-    } else {
-        return $result;
-    }
-}
-
-/**
- * Internal callback function.
- */
-function process_template_callback($block) {
-    global $template_globals;
-    $textlib = textlib_get_instance();
-    $repl = $block[0];
-
-    switch ($block[3]) {
-        case 'u': $repl = $template_globals->username; break;
-        case 'f': $repl = $template_globals->firstname; break;
-        case 'l': $repl = $template_globals->lastname; break;
-    }
-    switch ($block[1]) {
-        case '+': $repl = $textlib->strtoupper($repl); break;
-        case '-': $repl = $textlib->strtolower($repl); break;
-        case '~': $repl = $textlib->strtotitle($repl); break;
-    }
-    if (!empty($block[2])) {
-        $repl = $textlib->substr($repl, 0 , $block[2]);
-    }
-
-    return $repl;
+$table = new html_table();
+$table->id = "uupreview";
+$table->attributes['class'] = 'generaltable';
+$table->tablealign = 'center';
+$table->summary = get_string('uploaduserspreview', 'admin');
+$table->head = array();
+$table->data = $data;
+
+$table->head[] = get_string('uucsvline', 'admin');
+foreach ($filecolumns as $column) {
+    $table->head[] = $column;
 }
+$table->head[] = get_string('status');
 
-/**
- * Returns list of auth plugins that are enabled and known to work.
- */
-function uu_allowed_auths() {
-    global $CFG;
-
-    // only following plugins are guaranteed to work properly
-    // TODO: add support for more plguins in 2.0
-    $whitelist = array('manual', 'nologin', 'none', 'email');
-    $plugins = get_enabled_auth_plugins();
-    $choices = array();
-    foreach ($plugins as $plugin) {
-        $choices[$plugin] = auth_get_plugin_title ($plugin);
-    }
+echo html_writer::tag('div', html_writer::table($table), array('class'=>'flexible-wrap'));
 
-    return $choices;
-}
+/// Print the form
 
-/**
- * Returns list of non administrator roles
- */
-function uu_allowed_roles($shortname=false) {
-    global $CFG;
-
-    $roles = get_all_roles();
-    $choices = array();
-    foreach($roles as $role) {
-        if ($shortname) {
-            $choices[$role->id] = $role->shortname;
-        } else {
-            $choices[$role->id] = format_string($role->name);
-        }
-    }
-    // get rid of all admin roles
-    if ($adminroles = get_roles_with_capability('moodle/site:doanything', CAP_ALLOW)) {
-        foreach($adminroles as $adminrole) {
-            unset($choices[$adminrole->id]);
-        }
-    }
+$mform2->display();
+echo $OUTPUT->footer();
+die;
 
-    return $choices;
-}
-?>
\ No newline at end of file
