diff --git a/admin/xmldb/actions/check_bigints/check_bigints.class.php b/admin/xmldb/actions/check_bigints/check_bigints.class.php
index 0765691..502b273 100644
--- a/admin/xmldb/actions/check_bigints/check_bigints.class.php
+++ b/admin/xmldb/actions/check_bigints/check_bigints.class.php
@@ -1,40 +1,46 @@
-<?php // $Id$
-
-///////////////////////////////////////////////////////////////////////////
-//                                                                       //
-// NOTICE OF COPYRIGHT                                                   //
-//                                                                       //
-// Moodle - Modular Object-Oriented Dynamic Learning Environment         //
-//          http://moodle.com                                            //
-//                                                                       //
-// Copyright (C) 1999 onwards Martin Dougiamas        http://dougiamas.com  //
-//           (C) 2001-3001 Eloy Lafuente (stronk7) http://contiento.com  //
-//                                                                       //
-// This program is free software; you can redistribute it and/or modify  //
-// it under the terms of the GNU General Public License as published by  //
-// the Free Software Foundation; either version 2 of the License, or     //
-// (at your option) any later version.                                   //
-//                                                                       //
-// This program is distributed in the hope that it will be useful,       //
-// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
-// GNU General Public License for more details:                          //
-//                                                                       //
-//          http://www.gnu.org/copyleft/gpl.html                         //
-//                                                                       //
-///////////////////////////////////////////////////////////////////////////
-
-/// This class will check all the int(10) fields existing in the DB
-/// reporting about the ones not phisically implemented as BIGINTs
-/// and providing one SQL script to fix all them. Also, under MySQL,
-/// it performs one check of signed bigints. MDL-11038
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package   xmldb-editor
+ * @copyright 2003 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 
-class check_bigints extends XMLDBAction {
+/**
+ * reporting about the ones not physically implemented as BIGINTs
+ * and providing one SQL script to fix all them. Also, under MySQL,
+ * it performs one check of signed bigints. MDL-11038
+ *
+ * @package   xmldb-editor
+ * @copyright 2003 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class check_bigints extends XMLDBCheckAction {
+    private $correct_type;
+    private $dbfamily;
 
     /**
      * Init method, every subclass will have its own
      */
     function init() {
+        global $DB;
+
+        $this->introstr = 'confirmcheckbigints';
         parent::init();
 
     /// Set own core attributes
@@ -43,139 +49,30 @@ class check_bigints extends XMLDBAction {
 
     /// Get needed strings
         $this->loadStrings(array(
-            'confirmcheckbigints' => 'xmldb',
-            'ok' => '',
-            'wrong' => 'xmldb',
-            'table' => 'xmldb',
-            'field' => 'xmldb',
-            'searchresults' => 'xmldb',
             'wrongints' => 'xmldb',
-            'completelogbelow' => 'xmldb',
             'nowrongintsfound' => 'xmldb',
             'yeswrongintsfound' => 'xmldb',
             'mysqlextracheckbigints' => 'xmldb',
-            'yes' => '',
-            'no' => '',
-            'error' => '',
-            'back' => 'xmldb'
-
         ));
-    }
-
-    /**
-     * Invoke method, every class will have its own
-     * returns true/false on completion, setting both
-     * errormsg and output as necessary
-     */
-    function invoke() {
-        parent::invoke();
-
-        $result = true;
-
-    /// Set own core attributes
-        $this->does_generate = ACTION_GENERATE_HTML;
-
-    /// These are always here
-        global $CFG, $XMLDB, $db;
-
-    /// And we nedd some ddl suff
-        require_once ($CFG->libdir . '/ddllib.php');
-
-    /// Here we'll acummulate all the wrong fields found
-        $wrong_fields = array();
 
     /// Correct fields must be type bigint for MySQL and int8 for PostgreSQL
-        switch ($CFG->dbfamily) {
+        $this->dbfamily = $DB->get_dbfamily();
+        switch ($this->dbfamily) {
             case 'mysql':
-                $correct_type = 'bigint';
+                $this->correct_type = 'bigint';
                 break;
             case 'postgres':
-                $correct_type = 'int8';
+                $this->correct_type = 'int8';
                 break;
             default:
-                $correct_type = NULL;
+                $this->correct_type = NULL;
         }
-
-    /// Do the job, setting $result as needed
-
-    /// Get the confirmed to decide what to do
-        $confirmed = optional_param('confirmed', false, PARAM_BOOL);
-
-    /// If  not confirmed, show confirmation box
-        if (!$confirmed) {
-            $o = '<table class="generalbox" border="0" cellpadding="5" cellspacing="0" id="notice">';
-            $o.= '  <tr><td class="generalboxcontent">';
-            $o.= '    <p class="centerpara">' . $this->str['confirmcheckbigints'] . '</p>';
-            if ($CFG->dbfamily == 'mysql') {
-                $o.= '    <p class="centerpara">' . $this->str['mysqlextracheckbigints'] . '</p>';
             }
-            $o.= '    <table class="boxaligncenter" cellpadding="20"><tr><td>';
-            $o.= '      <div class="singlebutton">';
-            $o.= '        <form action="index.php?action=check_bigints&amp;sesskey=' . sesskey() . '&amp;confirmed=yes" method="post"><fieldset class="invisiblefieldset">';
-            $o.= '          <input type="submit" value="'. $this->str['yes'] .'" /></fieldset></form></div>';
-            $o.= '      </td><td>';
-            $o.= '      <div class="singlebutton">';
-            $o.= '        <form action="index.php?action=main_view" method="post"><fieldset class="invisiblefieldset">';
-            $o.= '          <input type="submit" value="'. $this->str['no'] .'" /></fieldset></form></div>';
-            $o.= '      </td></tr>';
-            $o.= '    </table>';
-            $o.= '  </td></tr>';
-            $o.= '</table>';
-
-            $this->output = $o;
-        } else {
-        /// The back to edit table button
-            $b = ' <p class="centerpara buttons">';
-            $b .= '<a href="index.php">[' . $this->str['back'] . ']</a>';
-            $b .= '</p>';
 
-        /// Iterate over $XMLDB->dbdirs, loading their XML data to memory
-            if ($XMLDB->dbdirs) {
-                $dbdirs =& $XMLDB->dbdirs;
-                $o='<ul>';
-                foreach ($dbdirs as $dbdir) {
-                /// Only if the directory exists
-                    if (!$dbdir->path_exists) {
-                        continue;
-                    }
-                /// Load the XML file
-                    $xmldb_file = new XMLDBFile($dbdir->path . '/install.xml');
-                /// Load the needed XMLDB generator
-                    $classname = 'XMLDB' . $CFG->dbtype;
-                    $generator = new $classname();
-                    $generator->setPrefix($CFG->prefix);
+    protected function check_table(xmldb_table $xmldb_table, array $metacolumns) {
+        $o = '';
+        $wrong_fields = array();
 
-                /// Only if the file exists
-                    if (!$xmldb_file->fileExists()) {
-                        continue;
-                    }
-                /// Load the XML contents to structure
-                    $loaded = $xmldb_file->loadXMLStructure();
-                    if (!$loaded || !$xmldb_file->isLoaded()) {
-                        notify('Errors found in XMLDB file: '. $dbdir->path . '/install.xml');
-                        continue;
-                    }
-                /// Arriving here, everything is ok, get the XMLDB structure
-                    $structure = $xmldb_file->getStructure();
-                    $o.='    <li>' . str_replace($CFG->dirroot . '/', '', $dbdir->path . '/install.xml');
-                /// Getting tables
-                    if ($xmldb_tables = $structure->getTables()) {
-                        $o.='        <ul>';
-                    /// Foreach table, process its fields
-                        foreach ($xmldb_tables as $xmldb_table) {
-                        /// Skip table if not exists
-                            if (!table_exists($xmldb_table)) {
-                                continue;
-                            }
-                        /// Fetch metadata from phisical DB. All the columns info.
-                            if ($metacolumns = $db->MetaColumns($CFG->prefix . $xmldb_table->getName())) {
-                                $metacolumns = array_change_key_case($metacolumns, CASE_LOWER);
-                            } else {
-                            //// Skip table if no metacolumns is available for it
-                                continue;
-                            }
-                        /// Table processing starts here
-                            $o.='            <li>' . $xmldb_table->getName();
                         /// Get and process XMLDB fields
                             if ($xmldb_fields = $xmldb_table->getFields()) {
                                 $o.='        <ul>';
@@ -192,11 +89,11 @@ class check_bigints extends XMLDBAction {
                                     $metacolumn = $metacolumns[$xmldb_field->getName()];
                                 /// Going to check this field in DB
                                     $o.='            <li>' . $this->str['field'] . ': ' . $xmldb_field->getName() . ' ';
-                                /// Detect if the phisical field is wrong and, under mysql, check for incorrect signed fields too
-                                    if ($metacolumn->type != $correct_type || ($CFG->dbfamily == 'mysql' && $xmldb_field->getUnsigned() && !$metacolumn->unsigned)) {
+            /// Detect if the physical field is wrong and, under mysql, check for incorrect signed fields too
+                if ($metacolumn->type != $this->correct_type || ($this->dbfamily == 'mysql' && $xmldb_field->getUnsigned() && !$metacolumn->unsigned)) {
                                         $o.='<font color="red">' . $this->str['wrong'] . '</font>';
                                     /// Add the wrong field to the list
-                                        $obj = new object;
+                    $obj = new stdClass();
                                         $obj->table = $xmldb_table;
                                         $obj->field = $xmldb_field;
                                         $wrong_fields[] = $obj;
@@ -207,20 +104,14 @@ class check_bigints extends XMLDBAction {
                                 }
                                 $o.='        </ul>';
                             }
-                            $o.='    </li>';
-                        /// Give the script some more time (resetting to current if exists)
-                            if ($currenttl = @ini_get('max_execution_time')) {
-                                @ini_set('max_execution_time',$currenttl);
-                            }
-                        }
-                        $o.='        </ul>';
-                    }
-                    $o.='    </li>';
-                }
-                $o.='</ul>';
+
+        return array($o, $wrong_fields);
             }
 
-        /// We have finished, let's show the results of the search
+    protected function display_results(array $wrong_fields) {
+        global $DB;
+        $dbman = $DB->get_manager();
+
             $s = '';
             $r = '<table class="generalbox boxaligncenter boxwidthwide" border="0" cellpadding="5" cellspacing="0" id="results">';
             $r.= '  <tr><td class="generalboxcontent">';
@@ -237,18 +128,22 @@ class check_bigints extends XMLDBAction {
                     $xmldb_table = $obj->table;
                     $xmldb_field = $obj->field;
                 /// MySQL directly supports this
-                    if ($CFG->dbfamily == 'mysql') {
-                        $sqlarr = $xmldb_table->getAlterFieldSQL($CFG->dbtype, $CFG->prefix, $xmldb_field, true);
+
+// TODO: move this hack to generators!!
+
+                if ($this->dbfamily == 'mysql') {
+                    $sqlarr = $dbman->generator->getAlterFieldSQL($xmldb_table, $xmldb_field);
                 /// PostgreSQL (XMLDB implementation) is a bit, er... imperfect.
-                    } else if ($CFG->dbfamily == 'postgres') {
-                        $sqlarr = array('ALTER TABLE ' . $CFG->prefix . $xmldb_table->getName() .
+                } else if ($this->dbfamily == 'postgres') {
+                    $sqlarr = array('ALTER TABLE ' . $DB->get_prefix() . $xmldb_table->getName() .
                                   ' ALTER COLUMN ' . $xmldb_field->getName() . ' TYPE BIGINT;');
                     }
                     $r.= '            <li>' . $this->str['table'] . ': ' . $xmldb_table->getName() . '. ' .
                                               $this->str['field'] . ': ' . $xmldb_field->getName() . '</li>';
                 /// Add to output if we have sentences
                     if ($sqlarr) {
-                        $s.= '<code>' . str_replace("\n", '<br />', implode('<br />', $sqlarr)) . '</code><br />';
+                    $sqlarr = $dbman->generator->getEndedStatements($sqlarr);
+                    $s.= '<code>' . str_replace("\n", '<br />', implode('<br />', $sqlarr)). '</code><br />';
                     }
                 }
                 $r.= '        </ul>';
@@ -264,16 +159,6 @@ class check_bigints extends XMLDBAction {
             $r.= '  </td></tr>';
             $r.= '</table>';
 
-            $this->output = $b . $r . $o;
-        }
-
-    /// Launch postaction if exists (leave this here!)
-        if ($this->getPostAction() && $result) {
-            return $this->launch($this->getPostAction());
-        }
-
-    /// Return ok if arrived here
-        return $result;
+        return $r;
     }
 }
-?>
