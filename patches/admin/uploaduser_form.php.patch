diff --git a/admin/uploaduser_form.php b/admin/uploaduser_form.php
index e142b01..d3db70c 100644
--- a/admin/uploaduser_form.php
+++ b/admin/uploaduser_form.php
@@ -1,29 +1,55 @@
-<?php // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Bulk user upload forms
+ *
+ * @package    core
+ * @subpackage admin
+ * @copyright  2007 Dan Poltawski
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 
-if (!defined('MOODLE_INTERNAL')) {
-    die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
-}
+defined('MOODLE_INTERNAL') || die();
 
 require_once $CFG->libdir.'/formslib.php';
 
-class admin_uploaduser_form1 extends moodleform {
-    function definition (){
-        global $CFG, $USER;
 
-        $mform =& $this->_form;
-
-        $this->set_upload_manager(new upload_manager('userfile', false, false, null, false, 0, true, true, false));
+/**
+ * Upload a file CVS file with user information.
+ *
+ * @package    core
+ * @subpackage admin
+ * @copyright  2007 Petr Skoda  {@link http://skodak.org}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class admin_uploaduser_form1 extends moodleform {
+    function definition () {
+        $mform = $this->_form;
 
         $mform->addElement('header', 'settingsheader', get_string('upload'));
 
-        $mform->addElement('file', 'userfile', get_string('file'), 'size="40"');
+        $mform->addElement('filepicker', 'userfile', get_string('file'));
         $mform->addRule('userfile', null, 'required');
 
         $choices = csv_import_reader::get_delimiter_list();
         $mform->addElement('select', 'delimiter_name', get_string('csvdelimiter', 'admin'), $choices);
         if (array_key_exists('cfg', $choices)) {
             $mform->setDefault('delimiter_name', 'cfg');
-        } else if (get_string('listsep') == ';') {
+        } else if (get_string('listsep', 'langconfig') == ';') {
             $mform->setDefault('delimiter_name', 'semicolon');
         } else {
             $mform->setDefault('delimiter_name', 'comma');
@@ -38,75 +64,94 @@ class admin_uploaduser_form1 extends moodleform {
         $mform->addElement('select', 'previewrows', get_string('rowpreviewnum', 'admin'), $choices);
         $mform->setType('previewrows', PARAM_INT);
 
-        $this->add_action_buttons(false, get_string('uploadusers'));
+        $this->add_action_buttons(false, get_string('uploadusers', 'admin'));
     }
 }
 
+
+/**
+ * Specify user upload details
+ *
+ * @package    core
+ * @subpackage admin
+ * @copyright  2007 Petr Skoda  {@link http://skodak.org}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 class admin_uploaduser_form2 extends moodleform {
-    function definition (){
+    function definition () {
         global $CFG, $USER;
 
-        //no editors here - we need proper empty fields
-        $CFG->htmleditor = null;
-
-        $mform   =& $this->_form;
-        $columns =& $this->_customdata;
+        $mform   = $this->_form;
+        $columns = $this->_customdata['columns'];
+        $data    = $this->_customdata['data'];
 
         // I am the template user, why should it be the administrator? we have roles now, other ppl may use this script ;-)
         $templateuser = $USER;
 
-// upload settings and file
+        // upload settings and file
         $mform->addElement('header', 'settingsheader', get_string('settings'));
 
-        $choices = array(UU_ADDNEW    => get_string('uuoptype_addnew', 'admin'),
-                         UU_ADDINC    => get_string('uuoptype_addinc', 'admin'),
-                         UU_ADD_UPDATE => get_string('uuoptype_addupdate', 'admin'),
-                         UU_UPDATE     => get_string('uuoptype_update', 'admin'));
+        $choices = array(UU_USER_ADDNEW     => get_string('uuoptype_addnew', 'admin'),
+                         UU_USER_ADDINC     => get_string('uuoptype_addinc', 'admin'),
+                         UU_USER_ADD_UPDATE => get_string('uuoptype_addupdate', 'admin'),
+                         UU_USER_UPDATE     => get_string('uuoptype_update', 'admin'));
         $mform->addElement('select', 'uutype', get_string('uuoptype', 'admin'), $choices);
 
         $choices = array(0 => get_string('infilefield', 'auth'), 1 => get_string('createpasswordifneeded', 'auth'));
         $mform->addElement('select', 'uupasswordnew', get_string('uupasswordnew', 'admin'), $choices);
-        $mform->setDefault('uupasswordnew', 0);
-        $mform->disabledIf('uupasswordnew', 'uutype', 'eq', UU_UPDATE);
+        $mform->setDefault('uupasswordnew', 1);
+        $mform->disabledIf('uupasswordnew', 'uutype', 'eq', UU_USER_UPDATE);
 
-        $choices = array(0 => get_string('nochanges', 'admin'),
-                         1 => get_string('uuupdatefromfile', 'admin'),
-                         2 => get_string('uuupdateall', 'admin'),
-                         3 => get_string('uuupdatemissing', 'admin'));
+        $choices = array(UU_UPDATE_NOCHANGES    => get_string('nochanges', 'admin'),
+                         UU_UPDATE_FILEOVERRIDE => get_string('uuupdatefromfile', 'admin'),
+                         UU_UPDATE_ALLOVERRIDE  => get_string('uuupdateall', 'admin'),
+                         UU_UPDATE_MISSING      => get_string('uuupdatemissing', 'admin'));
         $mform->addElement('select', 'uuupdatetype', get_string('uuupdatetype', 'admin'), $choices);
-        $mform->setDefault('uuupdatetype', 0);
-        $mform->disabledIf('uuupdatetype', 'uutype', 'eq', UU_ADDNEW);
-        $mform->disabledIf('uuupdatetype', 'uutype', 'eq', UU_ADDINC);
+        $mform->setDefault('uuupdatetype', UU_UPDATE_NOCHANGES);
+        $mform->disabledIf('uuupdatetype', 'uutype', 'eq', UU_USER_ADDNEW);
+        $mform->disabledIf('uuupdatetype', 'uutype', 'eq', UU_USER_ADDINC);
 
         $choices = array(0 => get_string('nochanges', 'admin'), 1 => get_string('update'));
         $mform->addElement('select', 'uupasswordold', get_string('uupasswordold', 'admin'), $choices);
         $mform->setDefault('uupasswordold', 0);
-        $mform->disabledIf('uupasswordold', 'uutype', 'eq', UU_ADDNEW);
-        $mform->disabledIf('uupasswordold', 'uutype', 'eq', UU_ADDINC);
+        $mform->disabledIf('uupasswordold', 'uutype', 'eq', UU_USER_ADDNEW);
+        $mform->disabledIf('uupasswordold', 'uutype', 'eq', UU_USER_ADDINC);
         $mform->disabledIf('uupasswordold', 'uuupdatetype', 'eq', 0);
         $mform->disabledIf('uupasswordold', 'uuupdatetype', 'eq', 3);
 
+        $choices = array(UU_PWRESET_WEAK => get_string('usersweakpassword', 'admin'),
+                         UU_PWRESET_NONE => get_string('none'),
+                         UU_PWRESET_ALL  => get_string('all'));
+        if (empty($CFG->passwordpolicy)) {
+            unset($choices[UU_PWRESET_WEAK]);
+        }
+        $mform->addElement('select', 'uuforcepasswordchange', get_string('forcepasswordchange', 'core'), $choices);
+
+
         $mform->addElement('selectyesno', 'uuallowrenames', get_string('allowrenames', 'admin'));
         $mform->setDefault('uuallowrenames', 0);
-        $mform->disabledIf('uuallowrenames', 'uutype', 'eq', UU_ADDNEW);
-        $mform->disabledIf('uuallowrenames', 'uutype', 'eq', UU_ADDINC);
+        $mform->disabledIf('uuallowrenames', 'uutype', 'eq', UU_USER_ADDNEW);
+        $mform->disabledIf('uuallowrenames', 'uutype', 'eq', UU_USER_ADDINC);
 
         $mform->addElement('selectyesno', 'uuallowdeletes', get_string('allowdeletes', 'admin'));
         $mform->setDefault('uuallowdeletes', 0);
-        $mform->disabledIf('uuallowdeletes', 'uutype', 'eq', UU_ADDNEW);
-        $mform->disabledIf('uuallowdeletes', 'uutype', 'eq', UU_ADDINC);
+        $mform->disabledIf('uuallowdeletes', 'uutype', 'eq', UU_USER_ADDNEW);
+        $mform->disabledIf('uuallowdeletes', 'uutype', 'eq', UU_USER_ADDINC);
 
         $mform->addElement('selectyesno', 'uunoemailduplicates', get_string('uunoemailduplicates', 'admin'));
-        $mform->setDefault('uunoemailduplicates', 0);
+        $mform->setDefault('uunoemailduplicates', 1);
 
-        $choices = array(0 => get_string('no'),
-                         1 => get_string('uubulknew', 'admin'),
-                         2 => get_string('uubulkupdated', 'admin'),
-                         3 => get_string('uubulkall', 'admin'));
+        $mform->addElement('selectyesno', 'uustandardusernames', get_string('uustandardusernames', 'admin'));
+        $mform->setDefault('uustandardusernames', 1);
+
+        $choices = array(UU_BULK_NONE    => get_string('no'),
+                         UU_BULK_NEW     => get_string('uubulknew', 'admin'),
+                         UU_BULK_UPDATED => get_string('uubulkupdated', 'admin'),
+                         UU_BULK_ALL     => get_string('uubulkall', 'admin'));
         $mform->addElement('select', 'uubulk', get_string('uubulk', 'admin'), $choices);
         $mform->setDefault('uubulk', 0);
 
-// roles selection
+        // roles selection
         $showroles = false;
         foreach ($columns as $column) {
             if (preg_match('/^type\d+$/', $column)) {
@@ -119,52 +164,63 @@ class admin_uploaduser_form2 extends moodleform {
 
             $choices = uu_allowed_roles(true);
 
-            $choices[0] = get_string('uucoursedefaultrole', 'admin');
             $mform->addElement('select', 'uulegacy1', get_string('uulegacy1role', 'admin'), $choices);
-            $mform->setDefault('uulegacy1', 0);
-            unset($choices[0]);
+            if ($studentroles = get_archetype_roles('student')) {
+                foreach ($studentroles as $role) {
+                    if (isset($choices[$role->id])) {
+                        $mform->setDefault('uulegacy1', $role->id);
+                        break;
+                    }
+                }
+                unset($studentroles);
+            }
 
             $mform->addElement('select', 'uulegacy2', get_string('uulegacy2role', 'admin'), $choices);
-            if ($editteacherroles = get_roles_with_capability('moodle/legacy:editingteacher', CAP_ALLOW)) {
-                $editteacherrole = array_shift($editteacherroles);   /// Take the first one
-                $mform->setDefault('uulegacy2', $editteacherrole->id);
+            if ($editteacherroles = get_archetype_roles('editingteacher')) {
+                foreach ($editteacherroles as $role) {
+                    if (isset($choices[$role->id])) {
+                        $mform->setDefault('uulegacy2', $role->id);
+                        break;
+                    }
+                }
                 unset($editteacherroles);
-            } else {
-                $mform->setDefault('uulegacy2', $CFG->defaultcourseroleid);
             }
 
             $mform->addElement('select', 'uulegacy3', get_string('uulegacy3role', 'admin'), $choices);
-            if ($teacherroles = get_roles_with_capability('moodle/legacy:teacher', CAP_ALLOW)) {
-                $teacherrole = array_shift($teacherroles);   /// Take the first one
-                $mform->setDefault('uulegacy3', $teacherrole->id);
+            if ($teacherroles = get_archetype_roles('teacher')) {
+                foreach ($teacherroles as $role) {
+                    if (isset($choices[$role->id])) {
+                        $mform->setDefault('uulegacy3', $role->id);
+                        break;
+                    }
+                }
                 unset($teacherroles);
-            } else {
-                $mform->setDefault('uulegacy3', $CFG->defaultcourseroleid);
             }
         }
 
-// default values
+        // default values
         $mform->addElement('header', 'defaultheader', get_string('defaultvalues', 'admin'));
 
-        $mform->addElement('text', 'username', get_string('username'), 'size="20"');
+        $mform->addElement('text', 'username', get_string('uuusernametemplate', 'admin'), 'size="20"');
         $mform->addRule('username', get_string('requiredtemplate', 'admin'), 'required', null, 'client');
+        $mform->disabledIf('username', 'uutype', 'eq', UU_USER_ADD_UPDATE);
+        $mform->disabledIf('username', 'uutype', 'eq', UU_USER_UPDATE);
+
+        $mform->addElement('text', 'email', get_string('email'), 'maxlength="100" size="30"');
+        $mform->disabledIf('email', 'uutype', 'eq', UU_USER_ADD_UPDATE);
+        $mform->disabledIf('email', 'uutype', 'eq', UU_USER_UPDATE);
 
         // only enabled and known to work plugins
-        $choices = uu_allowed_auths();
+        $choices = uu_supported_auths();
         $mform->addElement('select', 'auth', get_string('chooseauthmethod','auth'), $choices);
         $mform->setDefault('auth', 'manual'); // manual is a sensible backwards compatible default
-        $mform->setHelpButton('auth', array('authchange', get_string('chooseauthmethod','auth')));
+        $mform->addHelpButton('auth', 'chooseauthmethod', 'auth');
         $mform->setAdvanced('auth');
 
-        $mform->addElement('text', 'email', get_string('email'), 'maxlength="100" size="30"');
-
         $choices = array(0 => get_string('emaildisplayno'), 1 => get_string('emaildisplayyes'), 2 => get_string('emaildisplaycourse'));
         $mform->addElement('select', 'maildisplay', get_string('emaildisplay'), $choices);
         $mform->setDefault('maildisplay', 2);
 
-        $choices = array(0 => get_string('emailenable'), 1 => get_string('emaildisable'));
-        $mform->addElement('select', 'emailstop', get_string('emailactive'), $choices);
-
         $choices = array(0 => get_string('textformat'), 1 => get_string('htmlformat'));
         $mform->addElement('select', 'mailformat', get_string('emailformat'), $choices);
         $mform->setDefault('mailformat', 1);
@@ -175,18 +231,22 @@ class admin_uploaduser_form2 extends moodleform {
         $mform->setDefault('maildigest', 0);
         $mform->setAdvanced('maildigest');
 
-        $choices = array(0 => get_string('autosubscribeyes'), 1 => get_string('autosubscribeno'));
+        $choices = array(1 => get_string('autosubscribeyes'), 0 => get_string('autosubscribeno'));
         $mform->addElement('select', 'autosubscribe', get_string('autosubscribe'), $choices);
         $mform->setDefault('autosubscribe', 1);
 
-        if ($CFG->htmleditor) {
-            $choices = array(0 => get_string('texteditor'), 1 => get_string('htmleditor'));
+        $editors = editors_get_enabled();
+        if (count($editors) > 1) {
+            $choices = array();
+            $choices['0'] = get_string('texteditor');
+            $choices['1'] = get_string('htmleditor');
             $mform->addElement('select', 'htmleditor', get_string('textediting'), $choices);
             $mform->setDefault('htmleditor', 1);
         } else {
-            $mform->addElement('static', 'htmleditor', get_string('textediting'), get_string('texteditor'));
+            $mform->addElement('hidden', 'htmleditor');
+            $mform->setDefault('htmleditor', 1);
+            $mform->setType('htmleditor', PARAM_INT);
         }
-        $mform->setAdvanced('htmleditor');
 
         if (empty($CFG->enableajax)) {
             $mform->addElement('static', 'ajax', get_string('ajaxuse'), get_string('ajaxno'));
@@ -199,10 +259,19 @@ class admin_uploaduser_form2 extends moodleform {
 
         $mform->addElement('text', 'city', get_string('city'), 'maxlength="100" size="25"');
         $mform->setType('city', PARAM_MULTILANG);
+        if (empty($CFG->defaultcity)) {
         $mform->setDefault('city', $templateuser->city);
+        } else {
+            $mform->setDefault('city', $CFG->defaultcity);
+        }
+        $mform->addRule('city', get_string('required'), 'required');
 
-        $mform->addElement('select', 'country', get_string('selectacountry'), get_list_of_countries());
+        $mform->addElement('select', 'country', get_string('selectacountry'), get_string_manager()->get_list_of_countries());
+        if (empty($CFG->country)) {
         $mform->setDefault('country', $templateuser->country);
+        } else {
+            $mform->setDefault('country', $CFG->country);
+        }
         $mform->setAdvanced('country');
 
         $choices = get_list_of_timezones();
@@ -211,20 +280,21 @@ class admin_uploaduser_form2 extends moodleform {
         $mform->setDefault('timezone', $templateuser->timezone);
         $mform->setAdvanced('timezone');
 
-        $mform->addElement('select', 'lang', get_string('preferredlanguage'), get_list_of_languages());
+        $mform->addElement('select', 'lang', get_string('preferredlanguage'), get_string_manager()->get_list_of_translations());
         $mform->setDefault('lang', $templateuser->lang);
         $mform->setAdvanced('lang');
 
-        $mform->addElement('htmleditor', 'description', get_string('userdescription'));
-        $mform->setType('description', PARAM_CLEAN);
-        $mform->setHelpButton('description', array('text', get_string('helptext')));
+        $editoroptions = array('maxfiles'=>0, 'maxbytes'=>0, 'trusttext'=>false, 'forcehttps'=>false);
+        $mform->addElement('editor', 'description', get_string('userdescription'), null, $editoroptions);
+        $mform->setType('description', PARAM_CLEANHTML);
+        $mform->addHelpButton('description', 'userdescription');
         $mform->setAdvanced('description');
 
         $mform->addElement('text', 'url', get_string('webpage'), 'maxlength="255" size="50"');
         $mform->setAdvanced('url');
 
         $mform->addElement('text', 'idnumber', get_string('idnumber'), 'maxlength="64" size="25"');
-        $mform->setType('idnumber', PARAM_CLEAN);
+        $mform->setType('idnumber', PARAM_NOTAGS);
 
         $mform->addElement('text', 'institution', get_string('institution'), 'maxlength="40" size="25"');
         $mform->setType('institution', PARAM_MULTILANG);
@@ -235,45 +305,51 @@ class admin_uploaduser_form2 extends moodleform {
         $mform->setDefault('department', $templateuser->department);
 
         $mform->addElement('text', 'phone1', get_string('phone'), 'maxlength="20" size="25"');
-        $mform->setType('phone1', PARAM_CLEAN);
+        $mform->setType('phone1', PARAM_NOTAGS);
         $mform->setAdvanced('phone1');
 
         $mform->addElement('text', 'phone2', get_string('phone2'), 'maxlength="20" size="25"');
-        $mform->setType('phone2', PARAM_CLEAN);
+        $mform->setType('phone2', PARAM_NOTAGS);
         $mform->setAdvanced('phone2');
 
         $mform->addElement('text', 'address', get_string('address'), 'maxlength="70" size="25"');
         $mform->setType('address', PARAM_MULTILANG);
         $mform->setAdvanced('address');
 
-        /// Next the profile defaults
+        // Next the profile defaults
         profile_definition($mform);
 
-// hidden fields
+        // hidden fields
         $mform->addElement('hidden', 'iid');
         $mform->setType('iid', PARAM_INT);
 
         $mform->addElement('hidden', 'previewrows');
         $mform->setType('previewrows', PARAM_INT);
 
-        $mform->addElement('hidden', 'readcount');
-        $mform->setType('readcount', PARAM_INT);
+        $this->add_action_buttons(true, get_string('uploadusers', 'admin'));
 
-        $this->add_action_buttons(true, get_string('uploadusers'));
+        $this->set_data($data);
     }
 
     /**
      * Form tweaks that depend on current data.
      */
     function definition_after_data() {
-        $mform   =& $this->_form;
-        $columns =& $this->_customdata;
+        $mform   = $this->_form;
+        $columns = $this->_customdata['columns'];
 
         foreach ($columns as $column) {
             if ($mform->elementExists($column)) {
                 $mform->removeElement($column);
             }
         }
+
+        if (!in_array('password', $columns)) {
+            // password resetting makes sense only if password specified in csv file
+            if ($mform->elementExists('uuforcepasswordchange')) {
+                $mform->removeElement('uuforcepasswordchange');
+            }
+        }
     }
 
     /**
@@ -281,19 +357,19 @@ class admin_uploaduser_form2 extends moodleform {
      */
     function validation($data, $files) {
         $errors = parent::validation($data, $files);
-        $columns =& $this->_customdata;
+        $columns = $this->_customdata['columns'];
         $optype  = $data['uutype'];
 
         // detect if password column needed in file
         if (!in_array('password', $columns)) {
             switch ($optype) {
-                case UU_UPDATE:
+                case UU_USER_UPDATE:
                     if (!empty($data['uupasswordold'])) {
                         $errors['uupasswordold'] = get_string('missingfield', 'error', 'password');
                     }
                     break;
 
-                case UU_ADD_UPDATE:
+                case UU_USER_ADD_UPDATE:
                     if (empty($data['uupasswordnew'])) {
                         $errors['uupasswordnew'] = get_string('missingfield', 'error', 'password');
                     }
@@ -302,8 +378,12 @@ class admin_uploaduser_form2 extends moodleform {
                     }
                     break;
 
-                case UU_ADDNEW:
-                case UU_ADDINC:
+                case UU_USER_ADDNEW:
+                    if (empty($data['uupasswordnew'])) {
+                        $errors['uupasswordnew'] = get_string('missingfield', 'error', 'password');
+                    }
+                    break;
+                case UU_USER_ADDINC:
                     if (empty($data['uupasswordnew'])) {
                         $errors['uupasswordnew'] = get_string('missingfield', 'error', 'password');
                     }
@@ -312,7 +392,7 @@ class admin_uploaduser_form2 extends moodleform {
         }
 
         // look for other required data
-        if ($optype != UU_UPDATE) {
+        if ($optype != UU_USER_UPDATE) {
             if (!in_array('firstname', $columns)) {
                 $errors['uutype'] = get_string('missingfield', 'error', 'firstname');
             }
@@ -329,13 +409,24 @@ class admin_uploaduser_form2 extends moodleform {
             if (!in_array('email', $columns) and empty($data['email'])) {
                 $errors['email'] = get_string('requiredtemplate', 'admin');
             }
+        }
 
-            if (!in_array('city', $columns) and empty($data['city'])) {
-                $errors['city'] = get_string('required');
+        return $errors;
             }
+
+    /**
+     * Used to reformat the data from the editor component
+     *
+     * @return stdClass
+     */
+    function get_data() {
+        $data = parent::get_data();
+
+        if ($data !== null and isset($data->description)) {
+            $data->descriptionformat = $data->description['format'];
+            $data->description = $data->description['text'];
         }
 
-        return $errors;
+        return $data;
     }
 }
-?>
