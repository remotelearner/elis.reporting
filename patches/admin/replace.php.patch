diff --git a/admin/replace.php b/admin/replace.php
index 4c0ec39..8217876 100644
--- a/admin/replace.php
+++ b/admin/replace.php
@@ -1,71 +1,59 @@
-<?php /// $Id$
+<?php
       /// Search and replace strings throughout all texts in the whole database
 
+define('NO_OUTPUT_BUFFERING', true);
+
 require_once('../config.php');
 require_once($CFG->dirroot.'/course/lib.php');
 require_once($CFG->libdir.'/adminlib.php');
 
-// workaround for problems with compression
-if (ini_get('zlib.output_compression')) {
-    @ini_set('zlib.output_compression', 'Off');
-}
-
 admin_externalpage_setup('replace');
 
 $search  = optional_param('search', '', PARAM_RAW);
 $replace = optional_param('replace', '', PARAM_RAW);
+$sure    = optional_param('sure', 0, PARAM_BOOL);
 
 ###################################################################
-admin_externalpage_print_header();
+echo $OUTPUT->header();
 
-print_heading('Search and replace text throughout the whole database');
+echo $OUTPUT->heading('Search and replace text throughout the whole database');
 
+if ($DB->get_dbfamily() !== 'mysql' and $DB->get_dbfamily() !== 'postgres') {
+    //TODO: add $DB->text_replace() to DML drivers
+    echo $OUTPUT->notification('Sorry, this feature is implemented only for MySQL and PostgreSQL databases.');
+    echo $OUTPUT->footer();
+    die;
+}
 
-if (!data_submitted() or !$search or !$replace or !confirm_sesskey()) {   /// Print a form
+if (!data_submitted() or !$search or !$replace or !confirm_sesskey() or !$sure) {   /// Print a form
+    echo $OUTPUT->notification('This script is not supported, always make complete backup before proceeding!<br />This operation can not be reverted!');
 
-    print_simple_box_start('center');
+    echo $OUTPUT->box_start();
     echo '<div class="mdl-align">';
-    echo '<form action="replace.php" method="post">';
-    echo '<input type="hidden" name="sesskey" value="'.$USER->sesskey.'" />';
-    echo 'Search whole database for: <input type="text" name="search" /><br />';
-    echo 'Replace with this string: <input type="text" name="replace" /><br />';
-    echo '<input type="submit" value="Yes, do it now" /><br />';
-    echo '</form>';
+    echo '<form action="replace.php" method="post"><div>';
+    echo '<input type="hidden" name="sesskey" value="'.sesskey().'" />';
+    echo '<div><label for="search">Search whole database for: </label><input id="search" type="text" name="search" size="40" /> (usually previous server URL)</div>';
+    echo '<div><label for="replace">Replace with this string: </label><input type="text" id="replace" name="replace" size="40" /> (usually new server URL)</div>';
+    echo '<div><label for="sure">I understand the risks of this operation: </label><input type="checkbox" id="sure" name="sure" value="1" /></div>';
+    echo '<div class="buttons"><input type="submit" class="singlebutton" value="Yes, do it now" /></div>';
+    echo '</div></form>';
     echo '</div>';
-    print_simple_box_end();
-    admin_externalpage_print_footer();
+    echo $OUTPUT->box_end();
+    echo $OUTPUT->footer();
     die;
 }
 
-print_simple_box_start('center');
-
-if (!db_replace($search, $replace)) {
-    error('An error has occured during this process'); 
-}
-
-print_simple_box_end();
-
-/// Try to replace some well-known serialised contents (html blocks)
-notify('Replacing in html blocks...');
-$sql = "SELECT bi.*
-          FROM {$CFG->prefix}block_instance bi
-          JOIN {$CFG->prefix}block b ON b.id = bi.blockid
-         WHERE b.name = 'html'";
-if ($instances = get_records_sql($sql)) {
-    foreach ($instances as $instance) {
-        $blockobject = block_instance('html', $instance);
-        $blockobject->config->text = str_replace($search, $replace, $blockobject->config->text);
-        $blockobject->instance_config_commit($blockobject->pinned);
-    }
-}
+echo $OUTPUT->box_start();
+db_replace($search, $replace);
+echo $OUTPUT->box_end();
 
 /// Rebuild course cache which might be incorrect now
-notify('Rebuilding course cache...');
+echo $OUTPUT->notification('Rebuilding course cache...', 'notifysuccess');
 rebuild_course_cache();
-notify('...finished');
+echo $OUTPUT->notification('...finished', 'notifysuccess');
+
+echo $OUTPUT->continue_button('index.php');
 
-print_continue('index.php');
+echo $OUTPUT->footer();
 
-admin_externalpage_print_footer();
 
-?>
