diff --git a/grade/lib.php b/grade/lib.php
index 5e7986c..bf41b07 100644
--- a/grade/lib.php
+++ b/grade/lib.php
@@ -15,35 +15,49 @@
 // You should have received a copy of the GNU General Public License
 // along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
+/**
+ * Functions used by gradebook plugins and reports.
+ *
+ * @package   moodlecore
+ * @copyright 2009 Petr Skoda and Nicolas Connault
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
 require_once $CFG->libdir.'/gradelib.php';
 
 /**
  * This class iterates over all users that are graded in a course.
  * Returns detailed info about users and their grades.
+ *
+ * @author Petr Skoda <skodak@moodle.org>
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 class graded_users_iterator {
-    var $course;
-    var $grade_items;
-    var $groupid;
-    var $users_rs;
-    var $grades_rs;
-    var $gradestack;
-    var $sortfield1;
-    var $sortorder1;
-    var $sortfield2;
-    var $sortorder2;
+    public $course;
+    public $grade_items;
+    public $groupid;
+    public $users_rs;
+    public $grades_rs;
+    public $gradestack;
+    public $sortfield1;
+    public $sortorder1;
+    public $sortfield2;
+    public $sortorder2;
 
     /**
      * Constructor
-     * @param $course object
-     * @param array grade_items array of grade items, if not specified only user info returned
+     *
+     * @param object $course A course object
+     * @param array  $grade_items array of grade items, if not specified only user info returned
      * @param int $groupid iterate only group users if present
      * @param string $sortfield1 The first field of the users table by which the array of users will be sorted
      * @param string $sortorder1 The order in which the first sorting field will be sorted (ASC or DESC)
      * @param string $sortfield2 The second field of the users table by which the array of users will be sorted
      * @param string $sortorder2 The order in which the second sorting field will be sorted (ASC or DESC)
      */
-    function graded_users_iterator($course, $grade_items=null, $groupid=0, $sortfield1='lastname', $sortorder1='ASC', $sortfield2='firstname', $sortorder2='ASC') {
+    public function graded_users_iterator($course, $grade_items=null, $groupid=0,
+                                          $sortfield1='lastname', $sortorder1='ASC',
+                                          $sortfield2='firstname', $sortorder2='ASC') {
         $this->course      = $course;
         $this->grade_items = $grade_items;
         $this->groupid     = $groupid;
@@ -59,8 +73,8 @@ class graded_users_iterator {
      * Initialise the iterator
      * @return boolean success
      */
-    function init() {
-        global $CFG;
+    public function init() {
+        global $CFG, $DB;
 
         $this->close();
 
@@ -71,17 +85,22 @@ class graded_users_iterator {
             return false;
         }
 
-        if (strpos($CFG->gradebookroles, ',') === false) {
-            $gradebookroles = " = {$CFG->gradebookroles}";
-        } else {
-            $gradebookroles = " IN ({$CFG->gradebookroles})";
-        }
+        $coursecontext = get_context_instance(CONTEXT_COURSE, $this->course->id);
+        $relatedcontexts = get_related_contexts_string($coursecontext);
+
+        list($gradebookroles_sql, $params) =
+            $DB->get_in_or_equal(explode(',', $CFG->gradebookroles), SQL_PARAMS_NAMED, 'grbr');
 
-        $relatedcontexts = get_related_contexts_string(get_context_instance(CONTEXT_COURSE, $this->course->id));
+        //limit to users with an active enrolment
+        list($enrolledsql, $enrolledparams) = get_enrolled_sql($coursecontext);
+
+        $params = array_merge($params, $enrolledparams);
 
         if ($this->groupid) {
-            $groupsql = "INNER JOIN {$CFG->prefix}groups_members gm ON gm.userid = u.id";
-            $groupwheresql = "AND gm.groupid = {$this->groupid}";
+            $groupsql = "INNER JOIN {groups_members} gm ON gm.userid = u.id";
+            $groupwheresql = "AND gm.groupid = :groupid";
+            // $params contents: gradebookroles
+            $params['groupid'] = $this->groupid;
         } else {
             $groupsql = "";
             $groupwheresql = "";
@@ -100,46 +119,51 @@ class graded_users_iterator {
                 $order   .= ", usrt2 $this->sortorder2";
             }
             if ($this->sortfield1 != 'id' and $this->sortfield2 != 'id') {
-                // user order MUST be the same in both queries, must include the only unique user->id if not already present
+                // user order MUST be the same in both queries,
+                // must include the only unique user->id if not already present
                 $ofields .= ", u.id AS usrt";
                 $order   .= ", usrt ASC";
             }
         }
 
+        // $params contents: gradebookroles and groupid (for $groupwheresql)
         $users_sql = "SELECT u.* $ofields
-                        FROM {$CFG->prefix}user u
+                        FROM {user} u
+                        JOIN ($enrolledsql) je ON je.id = u.id
                              $groupsql
                         JOIN (
                                  SELECT DISTINCT ra.userid
-                                   FROM {$CFG->prefix}role_assignments ra
-                                  WHERE ra.roleid $gradebookroles
+                                    FROM {role_assignments} ra
+                                   WHERE ra.roleid $gradebookroles_sql
                                     AND ra.contextid $relatedcontexts
                              ) rainner ON rainner.userid = u.id
                        WHERE u.deleted = 0
                              $groupwheresql
                     ORDER BY $order";
-
-        $this->users_rs = get_recordset_sql($users_sql);
+        $this->users_rs = $DB->get_recordset_sql($users_sql, $params);
 
         if (!empty($this->grade_items)) {
             $itemids = array_keys($this->grade_items);
-            $itemids = implode(',', $itemids);
+            list($itemidsql, $grades_params) = $DB->get_in_or_equal($itemids, SQL_PARAMS_NAMED, 'items');
+            $params = array_merge($params, $grades_params);
+            // $params contents: gradebookroles, enrolledparams, groupid (for $groupwheresql) and itemids
 
             $grades_sql = "SELECT g.* $ofields
-                             FROM {$CFG->prefix}grade_grades g
-                             JOIN {$CFG->prefix}user u ON g.userid = u.id
+                             FROM {grade_grades} g
+                             JOIN {user} u ON g.userid = u.id
+                             JOIN ($enrolledsql) je ON je.id = u.id
                                   $groupsql
                              JOIN (
                                       SELECT DISTINCT ra.userid
-                                        FROM {$CFG->prefix}role_assignments ra
-                                       WHERE ra.roleid $gradebookroles
+                                        FROM {role_assignments} ra
+                                       WHERE ra.roleid $gradebookroles_sql
                                          AND ra.contextid $relatedcontexts
                                   ) rainner ON rainner.userid = u.id
                             WHERE u.deleted = 0
-                              AND g.itemid IN ($itemids)
+                              AND g.itemid $itemidsql
                               $groupwheresql
                          ORDER BY $order, g.itemid ASC";
-            $this->grades_rs = get_recordset_sql($grades_sql);
+            $this->grades_rs = $DB->get_recordset_sql($grades_sql, $params);
         } else {
             $this->grades_rs = false;
         }
@@ -156,12 +180,15 @@ class graded_users_iterator {
             return false; // no users present
         }
 
-        if (!$user = rs_fetch_next_record($this->users_rs)) {
+        if (!$this->users_rs->valid()) {
             if ($current = $this->_pop()) {
                 // this is not good - user or grades updated between the two reads above :-(
             }
 
             return false; // no more users
+        } else {
+            $user = $this->users_rs->current();
+            $this->users_rs->next();
         }
 
         // find grades of this user
@@ -171,6 +198,10 @@ class graded_users_iterator {
                 break; // no more grades
             }
 
+            if (empty($current->userid)) {
+                break;
+            }
+
             if ($current->userid != $user->id) {
                 // grade of the next user, we have all for this user
                 $this->_push($current);
@@ -194,16 +225,16 @@ class graded_users_iterator {
                 } else {
                     $feedbacks[$grade_item->id]->feedback       = '';
                     $feedbacks[$grade_item->id]->feedbackformat = FORMAT_MOODLE;
-                    $grades[$grade_item->id] = new grade_grade(array('userid'=>$user->id, 'itemid'=>$grade_item->id), false);
+                    $grades[$grade_item->id] =
+                        new grade_grade(array('userid'=>$user->id, 'itemid'=>$grade_item->id), false);
                 }
             }
         }
 
-        $result = new object();
+        $result = new stdClass();
         $result->user      = $user;
         $result->grades    = $grades;
         $result->feedbacks = $feedbacks;
-
         return $result;
     }
 
@@ -213,37 +244,46 @@ class graded_users_iterator {
      */
     function close() {
         if ($this->users_rs) {
-            rs_close($this->users_rs);
+            $this->users_rs->close();
             $this->users_rs = null;
         }
         if ($this->grades_rs) {
-            rs_close($this->grades_rs);
+            $this->grades_rs->close();
             $this->grades_rs = null;
         }
         $this->gradestack = array();
     }
 
+
     /**
-     * Internal function
+     * _push
+     *
+     * @param grade_grade $grade Grade object
+     *
+     * @return void
      */
     function _push($grade) {
         array_push($this->gradestack, $grade);
     }
 
+
     /**
-     * Internal function
+     * _pop
+     *
+     * @return object current grade object
      */
     function _pop() {
+        global $DB;
         if (empty($this->gradestack)) {
-            if (!$this->grades_rs) {
-                return NULL; // no grades present
+            if (empty($this->grades_rs) || !$this->grades_rs->valid()) {
+                return null; // no grades present
             }
 
-            if (!$grade = rs_fetch_next_record($this->grades_rs)) {
-                return NULL; // no more grades
-            }
+            $current = $this->grades_rs->current();
 
-            return $grade;
+            $this->grades_rs->next();
+
+            return $current;
         } else {
             return array_pop($this->gradestack);
         }
@@ -253,7 +293,9 @@ class graded_users_iterator {
 /**
  * Print a selection popup form of the graded users in a course.
  *
- * @param int $courseid id of the course
+ * @deprecated since 2.0
+ *
+ * @param int    $course id of the course
  * @param string $actionpage The page receiving the data from the popoup form
  * @param int $userid   id of the currently selected user (or 'all' if they are all selected)
  * @param int $groupid id of requested group, 0 means all
@@ -262,52 +304,50 @@ class graded_users_iterator {
  * @return null
  */
 function print_graded_users_selector($course, $actionpage, $userid=0, $groupid=0, $includeall=true, $return=false) {
-    global $CFG, $USER;
+    global $CFG, $USER, $OUTPUT;
+    return $OUTPUT->render(grade_get_graded_users_select(substr($actionpage, 0, strpos($actionpage, '/')), $course, $userid, $groupid, $includeall));
+}
+
+function grade_get_graded_users_select($report, $course, $userid, $groupid, $includeall) {
+    global $USER;
 
     if (is_null($userid)) {
         $userid = $USER->id;
     }
 
-    $context = get_context_instance(CONTEXT_COURSE, $course->id);
-
     $menu = array(); // Will be a list of userid => user name
-
     $gui = new graded_users_iterator($course, null, $groupid);
     $gui->init();
-    
-
     $label = get_string('selectauser', 'grades');
     if ($includeall) {
         $menu[0] = get_string('allusers', 'grades');
         $label = get_string('selectalloroneuser', 'grades');
     }
-
     while ($userdata = $gui->next_user()) {
         $user = $userdata->user;
         $menu[$user->id] = fullname($user);
     }
-
     $gui->close();
 
     if ($includeall) {
         $menu[0] .= " (" . (count($menu) - 1) . ")";
     }
-
-    return popup_form($CFG->wwwroot.'/grade/' . $actionpage . '&amp;userid=', $menu, 'choosegradeduser', $userid, 'choose', '', '',
-                        $return, 'self', $label);
+    $select = new single_select(new moodle_url('/grade/report/'.$report.'/index.php', array('id'=>$course->id)), 'userid', $menu, $userid);
+    $select->label = $label;
+    $select->formid = 'choosegradeuser';
+    return $select;
 }
 
 /**
  * Print grading plugin selection popup form.
  *
- * @param int $courseid id of course
- * @param string $active_type type of plugin on current page - import, export, report or edit
- * @param string $active_plugin active plugin type - grader, user, cvs, ...
+ * @param array   $plugin_info An array of plugins containing information for the selector
  * @param boolean $return return as string
+ *
  * @return nothing or string if $return true
  */
-function print_grade_plugin_selector($plugin_info, $return=false) {
-    global $CFG;
+function print_grade_plugin_selector($plugin_info, $active_type, $active_plugin, $return=false) {
+    global $CFG, $OUTPUT, $PAGE;
 
     $menu = array();
     $count = 0;
@@ -320,23 +360,31 @@ function print_grade_plugin_selector($plugin_info, $return=false) {
 
         $first_plugin = reset($plugins);
 
-        $menu[$first_plugin['link'].'&amp;'] = '--'.$plugin_info['strings'][$plugin_type];
+        $sectionname = $plugin_info['strings'][$plugin_type];
+        $section = array();
 
-        if (empty($plugins['id'])) {
             foreach ($plugins as $plugin) {
-                $menu[$plugin['link']] = $plugin['string'];
+            $link = $plugin->link->out(false);
+            $section[$link] = $plugin->string;
                 $count++;
+            if ($plugin_type === $active_type and $plugin->id === $active_plugin) {
+                $active = $link;
             }
         }
+
+        if ($section) {
+            $menu[] = array($sectionname=>$section);
+        }
     }
 
-/// finally print/return the popup form
+    // finally print/return the popup form
     if ($count > 1) {
-        $select = popup_form('', $menu, 'choosepluginreport', '', get_string('chooseaction', 'grades'), '', '', true, 'self');
+        $select = new url_select($menu, $active, null, 'choosepluginreport');
+
         if ($return) {
-            return $select;
+            return $OUTPUT->render($select);
         } else {
-            echo $select;
+            echo $OUTPUT->render($select);
         }
     } else {
         // only one option - no plugin selector needed
@@ -347,16 +395,17 @@ function print_grade_plugin_selector($plugin_info, $return=false) {
 /**
  * Print grading plugin selection tab-based navigation.
  *
- * @param int $courseid id of course
  * @param string $active_type type of plugin on current page - import, export, report or edit
  * @param string $active_plugin active plugin type - grader, user, cvs, ...
+ * @param array   $plugin_info Array of plugins
  * @param boolean $return return as string
+ *
  * @return nothing or string if $return true
  */
 function grade_print_tabs($active_type, $active_plugin, $plugin_info, $return=false) {
     global $CFG, $COURSE;
 
-    if (!isset($currenttab)) {
+    if (!isset($currenttab)) { //TODO: this is weird
         $currenttab = '';
     }
 
@@ -375,18 +424,18 @@ function grade_print_tabs($active_type, $active_plugin, $plugin_info, $return=fa
         }
 
         // If $plugins is actually the definition of a child-less parent link:
-        if (!empty($plugins['id'])) {
-            $string = $plugins['string'];
-            if (!empty($plugin_info[$active_type]['parent'])) {
-                $string = $plugin_info[$active_type]['parent']['string'];
+        if (!empty($plugins->id)) {
+            $string = $plugins->string;
+            if (!empty($plugin_info[$active_type]->parent)) {
+                $string = $plugin_info[$active_type]->parent->string;
             }
 
-            $top_row[] = new tabobject($plugin_type, $plugins['link'], $string);
+            $top_row[] = new tabobject($plugin_type, $plugins->link, $string);
             continue;
         }
 
         $first_plugin = reset($plugins);
-        $url = $first_plugin['link'];
+        $url = $first_plugin->link;
 
         if ($plugin_type == 'report') {
             $url = $CFG->wwwroot.'/grade/report/index.php?id='.$COURSE->id;
@@ -396,9 +445,9 @@ function grade_print_tabs($active_type, $active_plugin, $plugin_info, $return=fa
 
         if ($active_type == $plugin_type) {
             foreach ($plugins as $plugin) {
-                $bottom_row[] = new tabobject($plugin['id'], $plugin['link'], $plugin['string']);
-                if ($plugin['id'] == $active_plugin) {
-                    $inactive = array($plugin['id']);
+                $bottom_row[] = new tabobject($plugin->id, $plugin->link, $plugin->string);
+                if ($plugin->id == $active_plugin) {
+                    $inactive = array($plugin->id);
                 }
             }
         }
@@ -414,8 +463,17 @@ function grade_print_tabs($active_type, $active_plugin, $plugin_info, $return=fa
     }
 }
 
+/**
+ * grade_get_plugin_info
+ *
+ * @param int    $courseid The course id
+ * @param string $active_type type of plugin on current page - import, export, report or edit
+ * @param string $active_plugin active plugin type - grader, user, cvs, ...
+ *
+ * @return array
+ */
 function grade_get_plugin_info($courseid, $active_type, $active_plugin) {
-    global $CFG;
+    global $CFG, $SITE;
 
     $context = get_context_instance(CONTEXT_COURSE, $courseid);
 
@@ -425,258 +483,132 @@ function grade_get_plugin_info($courseid, $active_type, $active_plugin) {
     $url_prefix = $CFG->wwwroot . '/grade/';
 
     // Language strings
-    $plugin_info['strings'] = array(
-        'report' => get_string('view'),
-        'edittree' => get_string('edittree', 'grades'),
-        'scale' => get_string('scales'),
-        'outcome' => get_string('outcomes', 'grades'),
-        'letter' => get_string('letters', 'grades'),
-        'export' => get_string('export', 'grades'),
-        'import' => get_string('import'),
-        'preferences' => get_string('mypreferences', 'grades'),
-        'settings' => get_string('settings'));
-
-    // Settings tab first
-    if (has_capability('moodle/course:update', $context)) {
-        $url = $url_prefix.'edit/settings/index.php?id='.$courseid;
-
-        if ($active_type == 'settings' and $active_plugin == 'course') {
-            $active = $url;
-        }
+    $plugin_info['strings'] = grade_helper::get_plugin_strings();
 
-        $plugin_info['settings'] = array();
-        $plugin_info['settings']['course'] = array('id' => 'coursesettings', 'link' => $url, 'string' => get_string('course'));
-        $count++;
-    }
-
-
-/// report plugins with its special structure
-    if ($reports = get_list_of_plugins('grade/report', 'CVS')) {         // Get all installed reports
-        foreach ($reports as $key => $plugin) {                      // Remove ones we can't see
-            // Outcomes are a special core plugin depending on $CFG->enableoutcomes
-            if ($plugin == 'outcomes' && empty($CFG->enableoutcomes)) {
-                unset($reports[$key]);
-            }
-            if (!has_capability('gradereport/'.$plugin.':view', $context)) {
-                unset($reports[$key]);
-            }
-        }
-    }
-
-    $reportnames = array();
-
-    if (!empty($reports)) {
-        foreach ($reports as $plugin) {
-            $url = $url_prefix.'report/'.$plugin.'/index.php?id='.$courseid;
-            if ($active_type == 'report' and $active_plugin == $plugin ) {
-                $active = $url;
-            }
-            $reportnames[$plugin] = array('id' => $plugin, 'link' => $url, 'string' => get_string('modulename', 'gradereport_'.$plugin));
-
-            // Add link to preferences tab if such a page exists
-            if (file_exists($CFG->dirroot . '/grade/report/'.$plugin.'/preferences.php')) {
-                $pref_url = $url_prefix.'report/'.$plugin.'/preferences.php?id='.$courseid;
-                $plugin_info['preferences'][$plugin] = array('id' => $plugin, 'link' => $pref_url, 'string' => get_string('modulename', 'gradereport_'.$plugin));
-            }
-
-            $count++;
-        }
-        asort($reportnames);
-    }
-    if (!empty($reportnames)) {
-        $plugin_info['report']=$reportnames;
-    }
-
-/// editing scripts - not real plugins
-    if (has_capability('moodle/grade:manage', $context)
-      or has_capability('moodle/grade:manageletters', $context)
-      or has_capability('moodle/course:managescales', $context)
-      or has_capability('moodle/course:update', $context)) {
-
-        if (has_capability('moodle/grade:manage', $context)) {
-            $url = $url_prefix.'edit/tree/index.php?sesskey='.sesskey().'&amp;showadvanced=0&amp;id='.$courseid;
-            $url_adv = $url_prefix.'edit/tree/index.php?sesskey='.sesskey().'&amp;showadvanced=1&amp;id='.$courseid;
-
-            if ($active_type == 'edittree' and $active_plugin == 'simpleview') {
-                $active = $url;
-            } elseif ($active_type == 'edittree' and $active_plugin == 'fullview') {
-                $active = $url_adv;
-            }
-
-            $plugin_info['edittree'] = array();
-            $plugin_info['edittree']['simpleview'] = array('id' => 'simpleview', 'link' => $url, 'string' => get_string('simpleview', 'grades'));
-            $plugin_info['edittree']['fullview'] = array('id' => 'fullview', 'link' => $url_adv, 'string' => get_string('fullview', 'grades'));
-            $count++;
-        }
-
-        if (has_capability('moodle/course:managescales', $context)) {
-            $url = $url_prefix.'edit/scale/index.php?id='.$courseid;
-
-            if ($active_type == 'scale' and is_null($active_plugin)) {
-                $active = $url;
-            }
-
-            $plugin_info['scale'] = array();
-
-            if ($active_type == 'scale' and $active_plugin == 'edit') {
-                $edit_url = $url_prefix.'edit/scale/edit.php?courseid='.$courseid.'&amp;id='.optional_param('id', 0, PARAM_INT);
-                $active = $edit_url;
-                $plugin_info['scale']['view'] = array('id' => 'edit', 'link' => $edit_url, 'string' => get_string('edit'),
-                    'parent' => array('id' => 'scale', 'link' => $url, 'string' => get_string('scales')));
-            } else {
-                $plugin_info['scale']['view'] = array('id' => 'scale', 'link' => $url, 'string' => get_string('view'));
+    if ($reports = grade_helper::get_plugins_reports($courseid)) {
+        $plugin_info['report'] = $reports;
             }
 
-            $count++;
+    //showing grade categories and items make no sense if we're not within a course
+    if ($courseid!=$SITE->id) {
+        if ($edittree = grade_helper::get_info_edit_structure($courseid)) {
+            $plugin_info['edittree'] = $edittree;
         }
-
-        if (!empty($CFG->enableoutcomes) && (has_capability('moodle/grade:manage', $context) or
-                                             has_capability('moodle/course:update', $context))) {
-
-            $url_course = $url_prefix.'edit/outcome/course.php?id='.$courseid;
-            $url_edit = $url_prefix.'edit/outcome/index.php?id='.$courseid;
-
-            $plugin_info['outcome'] = array();
-
-            if (has_capability('moodle/course:update', $context)) {  // Default to course assignment
-                $plugin_info['outcome']['course'] = array('id' => 'course', 'link' => $url_course, 'string' => get_string('outcomescourse', 'grades'));
-                $plugin_info['outcome']['edit'] = array('id' => 'edit', 'link' => $url_edit, 'string' => get_string('editoutcomes', 'grades'));
-            } else {
-                $plugin_info['outcome'] = array('id' => 'edit', 'link' => $url_course, 'string' => get_string('outcomescourse', 'grades'));
             }
 
-            if ($active_type == 'outcome' and is_null($active_plugin)) {
-                $active = $url_edit;
-            } elseif ($active_type == 'outcome' and $active_plugin == 'course' ) {
-                $active = $url_course;
-            } elseif ($active_type == 'outcome' and $active_plugin == 'edit' ) {
-                $active = $url_edit;
-            } elseif ($active_type == 'outcome' and $active_plugin == 'import') {
-                $plugin_info['outcome']['import'] = array('id' => 'import', 'link' => null, 'string' => get_string('importoutcomes', 'grades'));
+    if ($scale = grade_helper::get_info_scales($courseid)) {
+        $plugin_info['scale'] = array('view'=>$scale);
             }
 
-            $count++;
+    if ($outcomes = grade_helper::get_info_outcomes($courseid)) {
+        $plugin_info['outcome'] = $outcomes;
         }
 
-        if (has_capability('moodle/grade:manage', $context) or has_capability('moodle/grade:manageletters', $context)) {
-            $course_context = get_context_instance(CONTEXT_COURSE, $courseid);
-            $url = $url_prefix.'edit/letter/index.php?id='.$courseid;
-            $url_edit = $url_prefix.'edit/letter/edit.php?id='.$course_context->id;
-
-            if ($active_type == 'letter' and $active_plugin == 'view' ) {
-                $active = $url;
-            } elseif ($active_type == 'letter' and $active_plugin == 'edit' ) {
-                $active = $url_edit;
+    if ($letters = grade_helper::get_info_letters($courseid)) {
+        $plugin_info['letter'] = $letters;
             }
 
-            $plugin_info['letter'] = array();
-            $plugin_info['letter']['view'] = array('id' => 'view', 'link' => $url, 'string' => get_string('view'));
-            $plugin_info['letter']['edit'] = array('id' => 'edit', 'link' => $url_edit, 'string' => get_string('edit'));
-            $count++;
-        }
+    if ($imports = grade_helper::get_plugins_import($courseid)) {
+        $plugin_info['import'] = $imports;
     }
 
-/// standard import plugins
-    if ($imports = get_list_of_plugins('grade/import', 'CVS')) {         // Get all installed import plugins
-        foreach ($imports as $key => $plugin) {                      // Remove ones we can't see
-            if (!has_capability('gradeimport/'.$plugin.':view', $context)) {
-                unset($imports[$key]);
-            }
-        }
-    }
-    $importnames = array();
-    if (!empty($imports)) {
-        foreach ($imports as $plugin) {
-            $url = $url_prefix.'import/'.$plugin.'/index.php?id='.$courseid;
-            if ($active_type == 'import' and $active_plugin == $plugin ) {
-                $active = $url;
-            }
-            $importnames[$plugin] = array('id' => $plugin, 'link' => $url, 'string' => get_string('modulename', 'gradeimport_'.$plugin));
-            $count++;
-        }
-        asort($importnames);
-    }
-    if (!empty($importnames)) {
-        $plugin_info['import']=$importnames;
+    if ($exports = grade_helper::get_plugins_export($courseid)) {
+        $plugin_info['export'] = $exports;
     }
 
-/// standard export plugins
-    if ($exports = get_list_of_plugins('grade/export', 'CVS')) {         // Get all installed export plugins
-        foreach ($exports as $key => $plugin) {                      // Remove ones we can't see
-            if (!has_capability('gradeexport/'.$plugin.':view', $context)) {
-                unset($exports[$key]);
-            }
+    foreach ($plugin_info as $plugin_type => $plugins) {
+        if (!empty($plugins->id) && $active_plugin == $plugins->id) {
+            $plugin_info['strings']['active_plugin_str'] = $plugins->string;
+            break;
         }
+        foreach ($plugins as $plugin) {
+            if (is_a($plugin, 'grade_plugin_info')) {
+                if ($active_plugin == $plugin->id) {
+                    $plugin_info['strings']['active_plugin_str'] = $plugin->string;
     }
-    $exportnames = array();
-    if (!empty($exports)) {
-        foreach ($exports as $plugin) {
-            $url = $url_prefix.'export/'.$plugin.'/index.php?id='.$courseid;
-            if ($active_type == 'export' and $active_plugin == $plugin ) {
-                $active = $url;
             }
-            $exportnames[$plugin] = array('id' => $plugin, 'link' => $url, 'string' => get_string('modulename', 'gradeexport_'.$plugin));
-            $count++;
         }
-        asort($exportnames);
     }
 
-    if (!empty($exportnames)) {
-        $plugin_info['export']=$exportnames;
+    //hide course settings if we're not in a course
+    if ($courseid!=$SITE->id) {
+        if ($setting = grade_helper::get_info_manage_settings($courseid)) {
+            $plugin_info['settings'] = array('course'=>$setting);
     }
-
-    // Key managers
-    if ($CFG->gradepublishing) {
-        $keymanager_url = $url_prefix.'export/keymanager.php?id='.$courseid;
-        $plugin_info['export']['keymanager'] = array('id' => 'keymanager', 'link' => $keymanager_url, 'string' => get_string('keymanager', 'grades'));
-        if ($active_type == 'export' and $active_plugin == 'keymanager' ) {
-            $active = $keymanager_url;
         }
-        $count++;
 
-        $keymanager_url = $url_prefix.'import/keymanager.php?id='.$courseid;
-        $plugin_info['import']['keymanager'] = array('id' => 'keymanager', 'link' => $keymanager_url, 'string' => get_string('keymanager', 'grades'));
-        if ($active_type == 'import' and $active_plugin == 'keymanager' ) {
-            $active = $keymanager_url;
-        }
-        $count++;
+    // Put preferences last
+    if ($preferences = grade_helper::get_plugins_report_preferences($courseid)) {
+        $plugin_info['preferences'] = $preferences;
     }
 
-
     foreach ($plugin_info as $plugin_type => $plugins) {
-        if (!empty($plugins['id']) && $active_plugin == $plugins['id']) {
-            $plugin_info['strings']['active_plugin_str'] = $plugins['string'];
+        if (!empty($plugins->id) && $active_plugin == $plugins->id) {
+            $plugin_info['strings']['active_plugin_str'] = $plugins->string;
             break;
         }
         foreach ($plugins as $plugin) {
-            if ($active_plugin == $plugin['id']) {
-                $plugin_info['strings']['active_plugin_str'] = $plugin['string'];
+            if (is_a($plugin, 'grade_plugin_info')) {
+                if ($active_plugin == $plugin->id) {
+                    $plugin_info['strings']['active_plugin_str'] = $plugin->string;
             }
         }
     }
-
-    // Put settings last
-    if (!empty($plugin_info['settings'])) {
-        $settings = $plugin_info['settings'];
-        unset($plugin_info['settings']);
-        $plugin_info['settings'] = $settings;
     }
 
-    // Put preferences last
-    if (!empty($plugin_info['preferences'])) {
-        $prefs = $plugin_info['preferences'];
-        unset($plugin_info['preferences']);
-        $plugin_info['preferences'] = $prefs;
-    }
+    return $plugin_info;
+}
 
-    // Check import and export caps
-    if (!has_capability('moodle/grade:export', $context)) {
-        unset($plugin_info['export']);
-    }
-    if (!has_capability('moodle/grade:import', $context)) {
-        unset($plugin_info['import']);
+/**
+ * A simple class containing info about grade plugins.
+ * Can be subclassed for special rules
+ *
+ * @package moodlecore
+ * @copyright 2009 Nicolas Connault
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class grade_plugin_info {
+    /**
+     * A unique id for this plugin
+     *
+     * @var mixed
+     */
+    public $id;
+    /**
+     * A URL to access this plugin
+     *
+     * @var mixed
+     */
+    public $link;
+    /**
+     * The name of this plugin
+     *
+     * @var mixed
+     */
+    public $string;
+    /**
+     * Another grade_plugin_info object, parent of the current one
+     *
+     * @var mixed
+     */
+    public $parent;
+
+    /**
+     * Constructor
+     *
+     * @param int $id A unique id for this plugin
+     * @param string $link A URL to access this plugin
+     * @param string $string The name of this plugin
+     * @param object $parent Another grade_plugin_info object, parent of the current one
+     *
+     * @return void
+     */
+    public function __construct($id, $link, $string, $parent=null) {
+        $this->id = $id;
+        $this->link = $link;
+        $this->string = $string;
+        $this->parent = $parent;
     }
-    return $plugin_info;
 }
 
 /**
@@ -686,8 +618,9 @@ function grade_get_plugin_info($courseid, $active_type, $active_plugin) {
  * !IMPORTANT! Use of tabs.php file in gradebook pages is forbidden unless tabs are switched off at
  * the site level for the gradebook ($CFG->grade_navmethod = GRADE_NAVMETHOD_DROPDOWN).
  *
- * @param int $courseid
- * @param string $active_type The type of the current page (report, settings, import, export, scales, outcomes, letters)
+ * @param int     $courseid Course id
+ * @param string  $active_type The type of the current page (report, settings,
+ *                             import, export, scales, outcomes, letters)
  * @param string $active_plugin The plugin of the current page (grader, fullview etc...)
  * @param string $heading The heading of the page. Tries to guess if none is given
  * @param boolean $return Whether to return (true) or echo (false) the HTML generated by this function
@@ -696,76 +629,55 @@ function grade_get_plugin_info($courseid, $active_type, $active_plugin) {
  *
  * @return string HTML code or nothing if $return == false
  */
-function print_grade_page_head($courseid, $active_type, $active_plugin=null, $heading = false, $return=false, $bodytags='', $buttons=false, $extracss=array()) {
-    global $CFG, $COURSE;
-    $strgrades = get_string('grades');
+function print_grade_page_head($courseid, $active_type, $active_plugin=null,
+                               $heading = false, $return=false,
+                               $buttons=false, $shownavigation=true) {
+    global $CFG, $OUTPUT, $PAGE;
+
     $plugin_info = grade_get_plugin_info($courseid, $active_type, $active_plugin);
 
     // Determine the string of the active plugin
     $stractive_plugin = ($active_plugin) ? $plugin_info['strings']['active_plugin_str'] : $heading;
     $stractive_type = $plugin_info['strings'][$active_type];
 
-    $navlinks = array();
-    $first_link = '';
-
-    if ($active_type == 'settings' && $active_plugin != 'coursesettings') {
-        $first_link = $plugin_info['report'][$active_plugin]['link'];
-    } elseif ($active_type != 'report') {
-        $first_link = $CFG->wwwroot.'/grade/index.php?id='.$COURSE->id;
-    }
-
-    if ($active_type == 'preferences') {
-        $CFG->stylesheets[] = $CFG->wwwroot . '/grade/report/styles.css';
-    }
-
-    foreach ($extracss as $css_url) {
-        $CFG->stylesheets[] = $css_url;
-    }
-
-    $navlinks[] = array('name' => $strgrades,
-                        'link' => $first_link,
-                        'type' => 'misc');
-
-    $active_type_link = '';
-
-    if (!empty($plugin_info[$active_type]['link']) && $plugin_info[$active_type]['link'] != qualified_me()) {
-        $active_type_link = $plugin_info[$active_type]['link'];
+    if (empty($plugin_info[$active_type]->id) || !empty($plugin_info[$active_type]->parent)) {
+        $title = $PAGE->course->fullname.': ' . $stractive_type . ': ' . $stractive_plugin;
+    } else {
+        $title = $PAGE->course->fullname.': ' . $stractive_plugin;
     }
 
-    if (!empty($plugin_info[$active_type]['parent']['link'])) {
-        $active_type_link = $plugin_info[$active_type]['parent']['link'];
-        $navlinks[] = array('name' => $stractive_type, 'link' => $active_type_link, 'type' => 'misc');
+    if ($active_type == 'report') {
+        $PAGE->set_pagelayout('report');
+    } else {
+        $PAGE->set_pagelayout('admin');
     }
-
-    if (empty($plugin_info[$active_type]['id'])) {
-        $navlinks[] = array('name' => $stractive_type, 'link' => $active_type_link, 'type' => 'misc');
+    $PAGE->set_title(get_string('grades') . ': ' . $stractive_type);
+    $PAGE->set_heading($title);
+    if ($buttons instanceof single_button) {
+        $buttons = $OUTPUT->render($buttons);
     }
+    $PAGE->set_button($buttons);
+    grade_extend_settings($plugin_info, $courseid);
 
-    $navlinks[] = array('name' => $stractive_plugin, 'link' => null, 'type' => 'misc');
-
-    $navigation = build_navigation($navlinks);
-
-    $title = ': ' . $stractive_plugin;
-    if (empty($plugin_info[$active_type]['id']) || !empty($plugin_info[$active_type]['parent'])) {
-        $title = ': ' . $stractive_type . ': ' . $stractive_plugin;
+    $returnval = $OUTPUT->header();
+    if (!$return) {
+        echo $returnval;
     }
 
-    $returnval = print_header_simple($strgrades . ': ' . $stractive_type, $title, $navigation, '',
-            $bodytags, true, $buttons, navmenu($COURSE), false, '', $return);
-
     // Guess heading if not given explicitly
     if (!$heading) {
         $heading = $stractive_plugin;
     }
 
+    if ($shownavigation) {
     if ($CFG->grade_navmethod == GRADE_NAVMETHOD_COMBO || $CFG->grade_navmethod == GRADE_NAVMETHOD_DROPDOWN) {
-        $returnval .= print_grade_plugin_selector($plugin_info, $return);
+            $returnval .= print_grade_plugin_selector($plugin_info, $active_type, $active_plugin, $return);
     }
-    $returnval .= print_heading($heading);
-
+        $returnval .= $OUTPUT->heading($heading);
     if ($CFG->grade_navmethod == GRADE_NAVMETHOD_COMBO || $CFG->grade_navmethod == GRADE_NAVMETHOD_TABS) {
         $returnval .= grade_print_tabs($active_type, $active_plugin, $plugin_info, $return);
     }
+    }
 
     if ($return) {
         return $returnval;
@@ -774,19 +686,24 @@ function print_grade_page_head($courseid, $active_type, $active_plugin=null, $he
 
 /**
  * Utility class used for return tracking when using edit and other forms in grade plugins
+ *
+ * @package moodlecore
+ * @copyright 2009 Nicolas Connault
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 class grade_plugin_return {
-    var $type;
-    var $plugin;
-    var $courseid;
-    var $userid;
-    var $page;
+    public $type;
+    public $plugin;
+    public $courseid;
+    public $userid;
+    public $page;
 
     /**
      * Constructor
+     *
      * @param array $params - associative array with return parameters, if null parameter are taken from _GET or _POST
      */
-    function grade_plugin_return ($params=null) {
+    public function grade_plugin_return($params = null) {
         if (empty($params)) {
             $this->type     = optional_param('gpr_type', null, PARAM_SAFEDIR);
             $this->plugin   = optional_param('gpr_plugin', null, PARAM_SAFEDIR);
@@ -796,7 +713,7 @@ class grade_plugin_return {
 
         } else {
             foreach ($params as $key=>$value) {
-                if (array_key_exists($key, $this)) {
+                if (property_exists($this, $key)) {
                     $this->$key = $value;
                 }
             }
@@ -807,7 +724,7 @@ class grade_plugin_return {
      * Returns return parameters as options array suitable for buttons.
      * @return array options
      */
-    function get_options() {
+    public function get_options() {
         if (empty($this->type)) {
             return array();
         }
@@ -835,10 +752,13 @@ class grade_plugin_return {
 
     /**
      * Returns return url
+     *
      * @param string $default default url when params not set
+     * @param array  $extras Extra URL parameters
+     *
      * @return string url
      */
-    function get_return_url($default, $extras=null) {
+    public function get_return_url($default, $extras=null) {
         global $CFG;
 
         if (empty($this->type) or empty($this->plugin)) {
@@ -864,7 +784,7 @@ class grade_plugin_return {
         }
 
         if (!empty($extras)) {
-            foreach($extras as $key=>$value) {
+            foreach ($extras as $key=>$value) {
                 $url .= $glue.$key.'='.$value;
                 $glue = '&amp;';
             }
@@ -877,7 +797,7 @@ class grade_plugin_return {
      * Returns string with hidden return tracking form elements.
      * @return string
      */
-    function get_form_fields() {
+    public function get_form_fields() {
         if (empty($this->type)) {
             return '';
         }
@@ -903,10 +823,12 @@ class grade_plugin_return {
 
     /**
      * Add hidden elements into mform
-     * @param object $mform moodle form object
+     *
+     * @param object &$mform moodle form object
+     *
      * @return void
      */
-    function add_mform_elements(&$mform) {
+    public function add_mform_elements(&$mform) {
         if (empty($this->type)) {
             return;
         }
@@ -937,34 +859,32 @@ class grade_plugin_return {
 
     /**
      * Add return tracking params into url
-     * @param string $url
-     * @return string $url with erturn tracking params
+     *
+     * @param moodle_url $url A URL
+     *
+     * @return string $url with return tracking params
      */
-    function add_url_params($url) {
+    public function add_url_params(moodle_url $url) {
         if (empty($this->type)) {
             return $url;
         }
 
-        if (strpos($url, '?') === false) {
-            $url .= '?gpr_type='.$this->type;
-        } else {
-            $url .= '&amp;gpr_type='.$this->type;
-        }
+        $url->param('gpr_type', $this->type);
 
         if (!empty($this->plugin)) {
-            $url .= '&amp;gpr_plugin='.$this->plugin;
+            $url->param('gpr_plugin', $this->plugin);
         }
 
         if (!empty($this->courseid)) {
-            $url .= '&amp;gpr_courseid='.$this->courseid;
+            $url->param('gpr_courseid' ,$this->courseid);
         }
 
         if (!empty($this->userid)) {
-            $url .= '&amp;gpr_userid='.$this->userid;
+            $url->param('gpr_userid', $this->userid);
         }
 
         if (!empty($this->page)) {
-            $url .= '&amp;gpr_page='.$this->page;
+            $url->param('gpr_page', $this->page);
         }
 
         return $url;
@@ -973,13 +893,16 @@ class grade_plugin_return {
 
 /**
  * Function central to gradebook for building and printing the navigation (breadcrumb trail).
+ *
  * @param string $path The path of the calling script (using __FILE__?)
  * @param string $pagename The language string to use as the last part of the navigation (non-link)
- * @param mixed  $id Either a plain integer (assuming the key is 'id') or an array of keys and values (e.g courseid => $courseid, itemid...)
+ * @param mixed  $id Either a plain integer (assuming the key is 'id') or
+ *                   an array of keys and values (e.g courseid => $courseid, itemid...)
+ *
  * @return string
  */
 function grade_build_nav($path, $pagename=null, $id=null) {
-    global $CFG, $COURSE;
+    global $CFG, $COURSE, $PAGE;
 
     $strgrades = get_string('grades', 'grades');
 
@@ -993,23 +916,20 @@ function grade_build_nav($path, $pagename=null, $id=null) {
     $path_elements_count = count($path_elements);
 
     // First link is always 'grade'
-    $navlinks = array();
-    $navlinks[] = array('name' => $strgrades,
-                        'link' => $CFG->wwwroot.'/grade/index.php?id='.$COURSE->id,
-                        'type' => 'misc');
+    $PAGE->navbar->add($strgrades, new moodle_url('/grade/index.php', array('id'=>$COURSE->id)));
 
-    $link = '';
+    $link = null;
     $numberofelements = 3;
 
     // Prepare URL params string
-    $id_string = '?';
+    $linkparams = array();
     if (!is_null($id)) {
         if (is_array($id)) {
             foreach ($id as $idkey => $idvalue) {
-                $id_string .= "$idkey=$idvalue&amp;";
+                $linkparams[$idkey] = $idvalue;
             }
         } else {
-            $id_string .= "id=$id";
+            $linkparams['id'] = $id;
         }
     }
 
@@ -1034,7 +954,7 @@ function grade_build_nav($path, $pagename=null, $id=null) {
         case 'report':
             // $id is required for this link. Do not print it if $id isn't given
             if (!is_null($id)) {
-                $link = $CFG->wwwroot . '/grade/report/index.php' . $id_string;
+                $link = new moodle_url('/grade/report/index.php', $linkparams);
             }
 
             if ($path_elements[2] == 'grader') {
@@ -1044,11 +964,11 @@ function grade_build_nav($path, $pagename=null, $id=null) {
 
         default:
             // If this element isn't among the ones already listed above, it isn't supported, throw an error.
-            debugging("grade_build_nav() doesn't support ". $path_elements[1] . " as the second path element after 'grade'.");
+            debugging("grade_build_nav() doesn't support ". $path_elements[1] .
+                    " as the second path element after 'grade'.");
             return false;
     }
-
-    $navlinks[] = array('name' => get_string($path_elements[1], 'grades'), 'link' => $link, 'type' => 'misc');
+    $PAGE->navbar->add(get_string($path_elements[1], 'grades'), $link);
 
     // Third level links
     if (empty($pagename)) {
@@ -1057,91 +977,125 @@ function grade_build_nav($path, $pagename=null, $id=null) {
 
     switch ($numberofelements) {
         case 3:
-            $navlinks[] = array('name' => $pagename, 'link' => $link, 'type' => 'misc');
+            $PAGE->navbar->add($pagename, $link);
             break;
         case 4:
-
             if ($path_elements[2] == 'grader' AND $path_elements[3] != 'index.php') {
-                $navlinks[] = array('name' => get_string('modulename', 'gradereport_grader'),
-                                    'link' => "$CFG->wwwroot/grade/report/grader/index.php$id_string",
-                                    'type' => 'misc');
+                $PAGE->navbar->add(get_string('pluginname', 'gradereport_grader'), new moodle_url('/grade/report/grader/index.php', $linkparams));
             }
-            $navlinks[] = array('name' => $pagename, 'link' => '', 'type' => 'misc');
+            $PAGE->navbar->add($pagename);
             break;
     }
-    $navigation = build_navigation($navlinks);
 
-    return $navigation;
+    return '';
 }
 
 /**
  * General structure representing grade items in course
+ *
+ * @package moodlecore
+ * @copyright 2009 Nicolas Connault
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 class grade_structure {
-    var $context;
+    public $context;
 
-    var $courseid;
+    public $courseid;
+
+    /**
+    * Reference to modinfo for current course (for performance, to save
+    * retrieving it from courseid every time). Not actually set except for
+    * the grade_tree type.
+    * @var course_modinfo
+    */
+    public $modinfo;
 
     /**
      * 1D array of grade items only
      */
-    var $items;
+    public $items;
 
     /**
      * Returns icon of element
-     * @param object $element
+     *
+     * @param array &$element An array representing an element in the grade_tree
      * @param bool $spacerifnone return spacer if no icon found
+     *
      * @return string icon or spacer
      */
-    function get_element_icon(&$element, $spacerifnone=false) {
-        global $CFG;
+    public function get_element_icon(&$element, $spacerifnone=false) {
+        global $CFG, $OUTPUT;
 
         switch ($element['type']) {
             case 'item':
             case 'courseitem':
             case 'categoryitem':
+                $is_course   = $element['object']->is_course_item();
+                $is_category = $element['object']->is_category_item();
+                $is_scale    = $element['object']->gradetype == GRADE_TYPE_SCALE;
+                $is_value    = $element['object']->gradetype == GRADE_TYPE_VALUE;
+                $is_outcome  = !empty($element['object']->outcomeid);
+
                 if ($element['object']->is_calculated()) {
                     $strcalc = get_string('calculatedgrade', 'grades');
-                    return '<img src="'.$CFG->pixpath.'/i/calc.gif" class="icon itemicon" title="'.s($strcalc).'" alt="'.s($strcalc).'"/>';
+                    return '<img src="'.$OUTPUT->pix_url('i/calc') . '" class="icon itemicon" title="'.
+                            s($strcalc).'" alt="'.s($strcalc).'"/>';
 
-                } else if (($element['object']->is_course_item() or $element['object']->is_category_item())
-                  and ($element['object']->gradetype == GRADE_TYPE_SCALE or $element['object']->gradetype == GRADE_TYPE_VALUE)) {
+                } else if (($is_course or $is_category) and ($is_scale or $is_value)) {
                     if ($category = $element['object']->get_item_category()) {
                         switch ($category->aggregation) {
+                            case GRADE_AGGREGATE_MEAN:
                             case GRADE_AGGREGATE_MEDIAN:
-                            case GRADE_AGGREGATE_MEDIAN:
-                                return '<img src="'.$CFG->pixpath.'/i/agg_sum.gif" class="icon itemicon" alt="'.get_string('aggregation', 'grades').'"/>';
                             case GRADE_AGGREGATE_WEIGHTED_MEAN:
                             case GRADE_AGGREGATE_WEIGHTED_MEAN2:
                             case GRADE_AGGREGATE_EXTRACREDIT_MEAN:
-                                return '<img src="'.$CFG->pixpath.'/i/agg_mean.gif" class="icon itemicon" alt="'.get_string('aggregation', 'grades').'"/>';
+                                $stragg = get_string('aggregation', 'grades');
+                                return '<img src="'.$OUTPUT->pix_url('i/agg_mean') . '" ' .
+                                        'class="icon itemicon" title="'.s($stragg).'" alt="'.s($stragg).'"/>';
                             case GRADE_AGGREGATE_SUM:
-                                return '<img src="'.$CFG->pixpath.'/i/agg_sum.gif" class="icon itemicon" alt="'.get_string('aggregation', 'grades').'"/>';
+                                $stragg = get_string('aggregation', 'grades');
+                                return '<img src="'.$OUTPUT->pix_url('i/agg_sum') . '" ' .
+                                        'class="icon itemicon" title="'.s($stragg).'" alt="'.s($stragg).'"/>';
                         }
                     }
 
                 } else if ($element['object']->itemtype == 'mod') {
+                    //prevent outcomes being displaying the same icon as the activity they are attached to
+                    if ($is_outcome) {
+                        $stroutcome = s(get_string('outcome', 'grades'));
+                        return '<img src="'.$OUTPUT->pix_url('i/outcomes') . '" ' .
+                            'class="icon itemicon" title="'.$stroutcome.
+                            '" alt="'.$stroutcome.'"/>';
+                    } else {
                     $strmodname = get_string('modulename', $element['object']->itemmodule);
-                    return '<img src="'.$CFG->modpixpath.'/'.$element['object']->itemmodule.'/icon.gif" class="icon itemicon" title="' .s($strmodname).'" alt="' .s($strmodname).'"/>';
-
+                        return '<img src="'.$OUTPUT->pix_url('icon',
+                            $element['object']->itemmodule) . '" ' .
+                            'class="icon itemicon" title="' .s($strmodname).
+                            '" alt="' .s($strmodname).'"/>';
+                    }
                 } else if ($element['object']->itemtype == 'manual') {
                     if ($element['object']->is_outcome_item()) {
                         $stroutcome = get_string('outcome', 'grades');
-                        return '<img src="'.$CFG->pixpath.'/i/outcomes.gif" class="icon itemicon" title="'.s($stroutcome).'" alt="'.s($stroutcome).'"/>';
+                        return '<img src="'.$OUTPUT->pix_url('i/outcomes') . '" ' .
+                                'class="icon itemicon" title="'.s($stroutcome).
+                                '" alt="'.s($stroutcome).'"/>';
                     } else {
                         $strmanual = get_string('manualitem', 'grades');
-                        return '<img src="'.$CFG->pixpath.'/t/manual_item.gif" class="icon itemicon" title="'.s($strmanual).'" alt="'.s($strmanual).'"/>';
+                        return '<img src="'.$OUTPUT->pix_url('t/manual_item') . '" '.
+                                'class="icon itemicon" title="'.s($strmanual).
+                                '" alt="'.s($strmanual).'"/>';
                     }
                 }
                 break;
 
             case 'category':
                 $strcat = get_string('category', 'grades');
-                return '<img src="'.$CFG->pixpath.'/f/folder.gif" class="icon itemicon" title="'.s($strcat).'" alt="'.s($strcat).'" />';
+                return '<img src="'.$OUTPUT->pix_url('f/folder') . '" class="icon itemicon" ' .
+                        'title="'.s($strcat).'" alt="'.s($strcat).'" />';
         }
 
         if ($spacerifnone) {
-            return '<img src="'.$CFG->wwwroot.'/pix/spacer.gif" class="icon itemicon" alt=""/>';
+            return $OUTPUT->spacer().' ';
         } else {
             return '';
         }
@@ -1149,15 +1103,15 @@ class grade_structure {
 
     /**
      * Returns name of element optionally with icon and link
-     * @param object $element
-     * @param bool $withlinks
-     * @param bool $icons
+     *
+     * @param array &$element An array representing an element in the grade_tree
+     * @param bool  $withlink Whether or not this header has a link
+     * @param bool  $icon Whether or not to display an icon with this header
      * @param bool $spacerifnone return spacer if no icon found
-     * @return header string
+     *
+     * @return string header
      */
-    function get_element_header(&$element, $withlink=false, $icon=true, $spacerifnone=false) {
-        global $CFG;
-
+    public function get_element_header(&$element, $withlink=false, $icon=true, $spacerifnone=false) {
         $header = '';
 
         if ($icon) {
@@ -1166,40 +1120,67 @@ class grade_structure {
 
         $header .= $element['object']->get_name();
 
-        if ($element['type'] != 'item' and $element['type'] != 'categoryitem' and $element['type'] != 'courseitem') {
+        if ($element['type'] != 'item' and $element['type'] != 'categoryitem' and
+            $element['type'] != 'courseitem') {
+            return $header;
+        }
+
+        if ($withlink) {
+            $url = $this->get_activity_link($element);
+            if ($url) {
+                $a = new stdClass();
+                $a->name = get_string('modulename', $element['object']->itemmodule);
+                $title = get_string('linktoactivity', 'grades', $a);
+
+                $header = html_writer::link($url, $header, array('title' => $title));
+            }
+        }
+
             return $header;
         }
 
+    private function get_activity_link($element) {
+        global $CFG;
+
         $itemtype     = $element['object']->itemtype;
         $itemmodule   = $element['object']->itemmodule;
         $iteminstance = $element['object']->iteminstance;
 
-        if ($withlink and $itemtype=='mod' and $iteminstance and $itemmodule) {
-            if ($cm = get_coursemodule_from_instance($itemmodule, $iteminstance, $this->courseid)) {
-
-                $a->name = get_string('modulename', $element['object']->itemmodule);
-                $title = get_string('linktoactivity', 'grades', $a);
-                $dir = $CFG->dirroot.'/mod/'.$itemmodule;
-
-                if (file_exists($dir.'/grade.php')) {
-                    $url = $CFG->wwwroot.'/mod/'.$itemmodule.'/grade.php?id='.$cm->id;
-                } else {
-                    $url = $CFG->wwwroot.'/mod/'.$itemmodule.'/view.php?id='.$cm->id;
+        // Links only for module items that have valid instance, module and are
+        // called from grade_tree with valid modinfo
+        if ($itemtype != 'mod' || !$iteminstance || !$itemmodule || !$this->modinfo) {
+            return null;
                 }
 
-                $header = '<a href="'.$url.'" title="'.s($title).'">'.$header.'</a>';
+        // Get $cm efficiently and with visibility information using modinfo
+        $instances = $this->modinfo->get_instances();
+        if (empty($instances[$itemmodule][$iteminstance])) {
+            return null;
             }
+        $cm = $instances[$itemmodule][$iteminstance];
+
+        // Do not add link if activity is not visible to the current user
+        if (!$cm->uservisible) {
+            return null;
         }
 
-        return $header;
+        // If module has grade.php, link to that, otherwise view.php
+        $dir = $CFG->dirroot . '/mod/' . $itemmodule;
+        if (file_exists($dir.'/grade.php')) {
+            return new moodle_url('/mod/' . $itemmodule . '/grade.php', array('id' => $cm->id));
+        } else {
+            return new moodle_url('/mod/' . $itemmodule . '/view.php', array('id' => $cm->id));
+        }
     }
 
     /**
      * Returns the grade eid - the grade may not exist yet.
-     * @param $grade_grade object
+     *
+     * @param grade_grade $grade_grade A grade_grade object
+     *
      * @return string eid
      */
-    function get_grade_eid($grade_grade) {
+    public function get_grade_eid($grade_grade) {
         if (empty($grade_grade->id)) {
             return 'n'.$grade_grade->itemid.'u'.$grade_grade->userid;
         } else {
@@ -1209,18 +1190,27 @@ class grade_structure {
 
     /**
      * Returns the grade_item eid
-     * @param $grade_item object
+     * @param grade_item $grade_item A grade_item object
      * @return string eid
      */
-    function get_item_eid($grade_item) {
+    public function get_item_eid($grade_item) {
         return 'i'.$grade_item->id;
     }
 
-    function get_params_for_iconstr($element) {
+    /**
+     * Given a grade_tree element, returns an array of parameters
+     * used to build an icon for that element.
+     *
+     * @param array $element An array representing an element in the grade_tree
+     *
+     * @return array
+     */
+    public function get_params_for_iconstr($element) {
         $strparams = new stdClass();
         $strparams->category = '';
         $strparams->itemname = '';
         $strparams->itemmodule = '';
+
         if (!method_exists($element['object'], 'get_name')) {
             return $strparams;
         }
@@ -1244,11 +1234,14 @@ class grade_structure {
 
     /**
      * Return edit icon for give element
-     * @param object $element
+     *
+     * @param array  $element An array representing an element in the grade_tree
+     * @param object $gpr A grade_plugin_return object
+     *
      * @return string
      */
-    function get_edit_icon($element, $gpr) {
-        global $CFG;
+    public function get_edit_icon($element, $gpr) {
+        global $CFG, $OUTPUT;
 
         if (!has_capability('moodle/grade:manage', $this->context)) {
             if ($element['type'] == 'grade' and has_capability('moodle/grade:edit', $this->context)) {
@@ -1266,8 +1259,6 @@ class grade_structure {
         }
 
         $strparams = $this->get_params_for_iconstr($element);
-        if ($element['type'] == 'item' or $element['type'] == 'category') {
-        }
 
         $object = $element['object'];
 
@@ -1277,27 +1268,29 @@ class grade_structure {
             case 'courseitem':
                 $stredit = get_string('editverbose', 'grades', $strparams);
                 if (empty($object->outcomeid) || empty($CFG->enableoutcomes)) {
-                    $url = $CFG->wwwroot.'/grade/edit/tree/item.php?courseid='.$this->courseid.'&amp;id='.$object->id;
+                    $url = new moodle_url('/grade/edit/tree/item.php',
+                            array('courseid' => $this->courseid, 'id' => $object->id));
                 } else {
-                    $url = $CFG->wwwroot.'/grade/edit/tree/outcomeitem.php?courseid='.$this->courseid.'&amp;id='.$object->id;
+                    $url = new moodle_url('/grade/edit/tree/outcomeitem.php',
+                            array('courseid' => $this->courseid, 'id' => $object->id));
                 }
-                $url = $gpr->add_url_params($url);
                 break;
 
             case 'category':
                 $stredit = get_string('editverbose', 'grades', $strparams);
-                $url = $CFG->wwwroot.'/grade/edit/tree/category.php?courseid='.$this->courseid.'&amp;id='.$object->id;
-                $url = $gpr->add_url_params($url);
+                $url = new moodle_url('/grade/edit/tree/category.php',
+                        array('courseid' => $this->courseid, 'id' => $object->id));
                 break;
 
             case 'grade':
                 $stredit = $streditgrade;
                 if (empty($object->id)) {
-                    $url = $CFG->wwwroot.'/grade/edit/tree/grade.php?courseid='.$this->courseid.'&amp;itemid='.$object->itemid.'&amp;userid='.$object->userid;
+                    $url = new moodle_url('/grade/edit/tree/grade.php',
+                            array('courseid' => $this->courseid, 'itemid' => $object->itemid, 'userid' => $object->userid));
                 } else {
-                    $url = $CFG->wwwroot.'/grade/edit/tree/grade.php?courseid='.$this->courseid.'&amp;id='.$object->id;
+                    $url = new moodle_url('/grade/edit/tree/grade.php',
+                            array('courseid' => $this->courseid, 'id' => $object->id));
                 }
-                $url = $gpr->add_url_params($url);
                 if (!empty($object->feedback)) {
                     $feedback = addslashes_js(trim(format_string($object->feedback, $object->feedbackformat)));
                 }
@@ -1308,7 +1301,7 @@ class grade_structure {
         }
 
         if ($url) {
-            return '<a href="'.$url.'"><img src="'.$CFG->pixpath.'/t/edit.gif" class="iconsmall" alt="'.s($stredit).'" title="'.s($stredit).'"/></a>';
+            return $OUTPUT->action_icon($gpr->add_url_params($url), new pix_icon('t/edit', $stredit));
 
         } else {
             return '';
@@ -1317,13 +1310,17 @@ class grade_structure {
 
     /**
      * Return hiding icon for give element
-     * @param object $element
+     *
+     * @param array  $element An array representing an element in the grade_tree
+     * @param object $gpr A grade_plugin_return object
+     *
      * @return string
      */
-    function get_hiding_icon($element, $gpr) {
-        global $CFG;
+    public function get_hiding_icon($element, $gpr) {
+        global $CFG, $OUTPUT;
 
-        if (!has_capability('moodle/grade:manage', $this->context) and !has_capability('moodle/grade:hide', $this->context)) {
+        if (!has_capability('moodle/grade:manage', $this->context) and
+            !has_capability('moodle/grade:hide', $this->context)) {
             return '';
         }
 
@@ -1331,144 +1328,157 @@ class grade_structure {
         $strshow = get_string('showverbose', 'grades', $strparams);
         $strhide = get_string('hideverbose', 'grades', $strparams);
 
+        $url = new moodle_url('/grade/edit/tree/action.php', array('id' => $this->courseid, 'sesskey' => sesskey(), 'eid' => $element['eid']));
+        $url = $gpr->add_url_params($url);
+
         if ($element['object']->is_hidden()) {
-            $icon = 'show';
+            $type = 'show';
             $tooltip = $strshow;
 
-            if ($element['type'] != 'category' and $element['object']->get_hidden() > 1) { // Change the icon and add a tooltip showing the date
-                $icon = 'hiddenuntil';
-                $tooltip = get_string('hiddenuntildate', 'grades', userdate($element['object']->get_hidden()));
+            // Change the icon and add a tooltip showing the date
+            if ($element['type'] != 'category' and $element['object']->get_hidden() > 1) {
+                $type = 'hiddenuntil';
+                $tooltip = get_string('hiddenuntildate', 'grades',
+                        userdate($element['object']->get_hidden()));
             }
 
-            $url     = $CFG->wwwroot.'/grade/edit/tree/action.php?id='.$this->courseid.'&amp;action=show&amp;sesskey='.sesskey()
-                     . '&amp;eid='.$element['eid'];
-            $url     = $gpr->add_url_params($url);
-            $action  = '<a href="'.$url.'"><img alt="'.$strshow.'" src="'.$CFG->pixpath.'/t/'.$icon.'.gif" class="iconsmall" title="'.s($tooltip).'"/></a>';
+            $url->param('action', 'show');
+
+            $hideicon = $OUTPUT->action_icon($url, new pix_icon('t/'.$type, $tooltip, 'moodle', array('alt'=>$strshow, 'class'=>'iconsmall')));
 
         } else {
-            $url     = $CFG->wwwroot.'/grade/edit/tree/action.php?id='.$this->courseid.'&amp;action=hide&amp;sesskey='.sesskey()
-                     . '&amp;eid='.$element['eid'];
-            $url     = $gpr->add_url_params($url);
-            $action  = '<a href="'.$url.'"><img src="'.$CFG->pixpath.'/t/hide.gif" class="iconsmall" alt="'.s($strhide).'" title="'.s($strhide).'"/></a>';
+            $url->param('action', 'hide');
+            $hideicon = $OUTPUT->action_icon($url, new pix_icon('t/hide', $strhide));
         }
-        return $action;
+
+        return $hideicon;
     }
 
     /**
      * Return locking icon for given element
-     * @param object $element
+     *
+     * @param array  $element An array representing an element in the grade_tree
+     * @param object $gpr A grade_plugin_return object
+     *
      * @return string
      */
-    function get_locking_icon($element, $gpr) {
-        global $CFG;
+    public function get_locking_icon($element, $gpr) {
+        global $CFG, $OUTPUT;
 
         $strparams = $this->get_params_for_iconstr($element);
         $strunlock = get_string('unlockverbose', 'grades', $strparams);
         $strlock = get_string('lockverbose', 'grades', $strparams);
 
+        $url = new moodle_url('/grade/edit/tree/action.php', array('id' => $this->courseid, 'sesskey' => sesskey(), 'eid' => $element['eid']));
+        $url = $gpr->add_url_params($url);
+
         // Don't allow an unlocking action for a grade whose grade item is locked: just print a state icon
         if ($element['type'] == 'grade' && $element['object']->grade_item->is_locked()) {
             $strparamobj = new stdClass();
             $strparamobj->itemname = $element['object']->grade_item->itemname;
             $strnonunlockable = get_string('nonunlockableverbose', 'grades', $strparamobj);
-            $action  = '<img src="'.$CFG->pixpath.'/t/unlock_gray.gif" alt="'.s($strnonunlockable).'" class="iconsmall" title="'.s($strnonunlockable).'"/>';
-        } elseif ($element['object']->is_locked()) {
-            $icon = 'unlock';
+
+            $action = $OUTPUT->pix_icon('t/unlock_gray', $strnonunlockable);
+
+        } else if ($element['object']->is_locked()) {
+            $type = 'unlock';
             $tooltip = $strunlock;
 
-            if ($element['type'] != 'category' and $element['object']->get_locktime() > 1) { // Change the icon and add a tooltip showing the date
-                $icon = 'locktime';
-                $tooltip = get_string('locktimedate', 'grades', userdate($element['object']->get_locktime()));
+            // Change the icon and add a tooltip showing the date
+            if ($element['type'] != 'category' and $element['object']->get_locktime() > 1) {
+                $type = 'locktime';
+                $tooltip = get_string('locktimedate', 'grades',
+                        userdate($element['object']->get_locktime()));
             }
 
             if (!has_capability('moodle/grade:manage', $this->context) and !has_capability('moodle/grade:unlock', $this->context)) {
-                return '';
+                $action = '';
+            } else {
+                $url->param('action', 'unlock');
+                $action = $OUTPUT->action_icon($url, new pix_icon('t/'.$type, $tooltip, 'moodle', array('alt'=>$strunlock, 'class'=>'smallicon')));
             }
-            $url     = $CFG->wwwroot.'/grade/edit/tree/action.php?id='.$this->courseid.'&amp;action=unlock&amp;sesskey='.sesskey()
-                     . '&amp;eid='.$element['eid'];
-            $url     = $gpr->add_url_params($url);
-            $action  = '<a href="'.$url.'"><img src="'.$CFG->pixpath.'/t/'.$icon.'.gif" alt="'.s($strunlock).'" class="iconsmall" title="'.s($tooltip).'"/></a>';
 
         } else {
             if (!has_capability('moodle/grade:manage', $this->context) and !has_capability('moodle/grade:lock', $this->context)) {
-                return '';
+                $action = '';
+            } else {
+                $url->param('action', 'lock');
+                $action = $OUTPUT->action_icon($url, new pix_icon('t/lock', $strlock));
             }
-            $url     = $CFG->wwwroot.'/grade/edit/tree/action.php?id='.$this->courseid.'&amp;action=lock&amp;sesskey='.sesskey()
-                     . '&amp;eid='.$element['eid'];
-            $url     = $gpr->add_url_params($url);
-            $action  = '<a href="'.$url.'"><img src="'.$CFG->pixpath.'/t/lock.gif" class="iconsmall" alt="'.s($strlock).'" title="'
-                     . s($strlock).'"/></a>';
         }
+
         return $action;
     }
 
     /**
      * Return calculation icon for given element
-     * @param object $element
+     *
+     * @param array  $element An array representing an element in the grade_tree
+     * @param object $gpr A grade_plugin_return object
+     *
      * @return string
      */
-    function get_calculation_icon($element, $gpr) {
-        global $CFG;
+    public function get_calculation_icon($element, $gpr) {
+        global $CFG, $OUTPUT;
         if (!has_capability('moodle/grade:manage', $this->context)) {
             return '';
         }
 
-        $calculation_icon = '';
-
         $type   = $element['type'];
         $object = $element['object'];
 
-
         if ($type == 'item' or $type == 'courseitem' or $type == 'categoryitem') {
             $strparams = $this->get_params_for_iconstr($element);
             $streditcalculation = get_string('editcalculationverbose', 'grades', $strparams);
 
+            $is_scale = $object->gradetype == GRADE_TYPE_SCALE;
+            $is_value = $object->gradetype == GRADE_TYPE_VALUE;
+
             // show calculation icon only when calculation possible
-            if (!$object->is_external_item() and ($object->gradetype == GRADE_TYPE_SCALE or $object->gradetype == GRADE_TYPE_VALUE)) {
+            if (!$object->is_external_item() and ($is_scale or $is_value)) {
                 if ($object->is_calculated()) {
-                    $icon = 'calc.gif';
+                    $icon = 't/calc';
                 } else {
-                    $icon = 'calc_off.gif';
+                    $icon = 't/calc_off';
                 }
-                $url = $CFG->wwwroot.'/grade/edit/tree/calculation.php?courseid='.$this->courseid.'&amp;id='.$object->id;
+
+                $url = new moodle_url('/grade/edit/tree/calculation.php', array('courseid' => $this->courseid, 'id' => $object->id));
                 $url = $gpr->add_url_params($url);
-                $calculation_icon = '<a href="'. $url.'"><img src="'.$CFG->pixpath.'/t/'.$icon.'" class="iconsmall" alt="'
-                                       . s($streditcalculation).'" title="'.s($streditcalculation).'" /></a>'. "\n";
+                return $OUTPUT->action_icon($url, new pix_icon($icon, $streditcalculation)) . "\n";
             }
         }
 
-        return $calculation_icon;
+        return '';
     }
 }
 
 /**
  * Flat structure similar to grade tree.
+ *
+ * @uses grade_structure
+ * @package moodlecore
+ * @copyright 2009 Nicolas Connault
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 class grade_seq extends grade_structure {
 
     /**
-     * A string of GET URL variables, namely courseid and sesskey, used in most URLs built by this class.
-     * @var string $commonvars
-     */
-    var $commonvars;
-
-    /**
      * 1D array of elements
      */
-    var $elements;
+    public $elements;
 
     /**
      * Constructor, retrieves and stores array of all grade_category and grade_item
      * objects for the given courseid. Full objects are instantiated. Ordering sequence is fixed if needed.
-     * @param int $courseid
-     * @param boolean $category_grade_last category grade item is the last child
-     * @param array $collapsed array of collapsed categories
+     *
+     * @param int  $courseid The course id
+     * @param bool $category_grade_last category grade item is the last child
+     * @param bool $nooutcomes Whether or not outcomes should be included
      */
-    function grade_seq($courseid, $category_grade_last=false, $nooutcomes=false) {
+    public function grade_seq($courseid, $category_grade_last=false, $nooutcomes=false) {
         global $USER, $CFG;
 
         $this->courseid   = $courseid;
-        $this->commonvars = "&amp;sesskey=$USER->sesskey&amp;id=$this->courseid";
         $this->context    = get_context_instance(CONTEXT_COURSE, $courseid);
 
         // get course grade tree
@@ -1483,18 +1493,22 @@ class grade_seq extends grade_structure {
 
     /**
      * Static recursive helper - makes the grade_item for category the last children
-     * @static
-     * @param array $element The seed of the recursion
-     * @return void
+     *
+     * @param array &$element The seed of the recursion
+     * @param bool $category_grade_last category grade item is the last child
+     * @param bool $nooutcomes Whether or not outcomes should be included
+     *
+     * @return array
      */
-    function flatten(&$element, $category_grade_last, $nooutcomes) {
+    public function flatten(&$element, $category_grade_last, $nooutcomes) {
         if (empty($element['children'])) {
             return array();
         }
         $children = array();
 
         foreach ($element['children'] as $sortorder=>$unused) {
-            if ($nooutcomes and $element['type'] != 'category' and $element['children'][$sortorder]['object']->is_outcome_item()) {
+            if ($nooutcomes and $element['type'] != 'category' and
+                $element['children'][$sortorder]['object']->is_outcome_item()) {
                 continue;
             }
             $children[] = $element['children'][$sortorder];
@@ -1522,10 +1536,12 @@ class grade_seq extends grade_structure {
     /**
      * Parses the array in search of a given eid and returns a element object with
      * information about the element it has found.
-     * @param int $eid
+     *
+     * @param int $eid Gradetree Element ID
+     *
      * @return object element
      */
-    function locate_element($eid) {
+    public function locate_element($eid) {
         // it is a grade - construct a new object
         if (strpos($eid, 'n') === 0) {
             if (!preg_match('/n(\d+)u(\d+)/', $eid, $matches)) {
@@ -1547,7 +1563,7 @@ class grade_seq extends grade_structure {
             return array('eid'=>'n'.$itemid.'u'.$userid,'object'=>$grade, 'type'=>'grade');
 
         } else if (strpos($eid, 'g') === 0) {
-            $id = (int)substr($eid, 1);
+            $id = (int) substr($eid, 1);
             if (!$grade = grade_grade::fetch(array('id'=>$id))) {
                 return null;
             }
@@ -1575,6 +1591,11 @@ class grade_seq extends grade_structure {
  * organises as an array primarily, but which can also be converted to other formats.
  * It has simple method calls with complex implementations, allowing for easy insertion,
  * deletion and moving of items and categories within the tree.
+ *
+ * @uses grade_structure
+ * @package moodlecore
+ * @copyright 2009 Nicolas Connault
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 class grade_tree extends grade_structure {
 
@@ -1582,40 +1603,45 @@ class grade_tree extends grade_structure {
      * The basic representation of the tree as a hierarchical, 3-tiered array.
      * @var object $top_element
      */
-    var $top_element;
-
-    /**
-     * A string of GET URL variables, namely courseid and sesskey, used in most URLs built by this class.
-     * @var string $commonvars
-     */
-    var $commonvars;
+    public $top_element;
 
     /**
      * 2D array of grade items and categories
+     * @var array $levels
      */
-    var $levels;
+    public $levels;
 
     /**
      * Grade items
+     * @var array $items
      */
-    var $items;
+    public $items;
 
     /**
      * Constructor, retrieves and stores a hierarchical array of all grade_category and grade_item
      * objects for the given courseid. Full objects are instantiated. Ordering sequence is fixed if needed.
-     * @param int $courseid
-     * @param boolean $fillers include fillers and colspans, make the levels var "rectangular"
-     * @param boolean $category_grade_last category grade item is the last child
+     *
+     * @param int   $courseid The Course ID
+     * @param bool  $fillers include fillers and colspans, make the levels var "rectangular"
+     * @param bool  $category_grade_last category grade item is the last child
      * @param array $collapsed array of collapsed categories
+     * @param bool  $nooutcomes Whether or not outcomes should be included
      */
-    function grade_tree($courseid, $fillers=true, $category_grade_last=false, $collapsed=null, $nooutcomes=false) {
-        global $USER, $CFG;
+    public function grade_tree($courseid, $fillers=true, $category_grade_last=false,
+                               $collapsed=null, $nooutcomes=false) {
+        global $USER, $CFG, $COURSE, $DB;
 
         $this->courseid   = $courseid;
-        $this->commonvars = "&amp;sesskey=$USER->sesskey&amp;id=$this->courseid";
         $this->levels     = array();
         $this->context    = get_context_instance(CONTEXT_COURSE, $courseid);
 
+        if (!empty($COURSE->id) && $COURSE->id == $this->courseid) {
+            $course = $COURSE;
+        } else {
+            $course = $DB->get_record('course', array('id' => $this->courseid));
+        }
+        $this->modinfo = get_fast_modinfo($course);
+
         // get course grade tree
         $this->top_element = grade_category::fetch_course_tree($courseid, true);
 
@@ -1647,12 +1673,13 @@ class grade_tree extends grade_structure {
 
     /**
      * Static recursive helper - removes items from collapsed categories
-     * @static
-     * @param array $element The seed of the recursion
+     *
+     * @param array &$element The seed of the recursion
      * @param array $collapsed array of collapsed categories
+     *
      * @return void
      */
-    function category_collapse(&$element, $collapsed) {
+    public function category_collapse(&$element, $collapsed) {
         if ($element['type'] != 'category') {
             return;
         }
@@ -1678,11 +1705,12 @@ class grade_tree extends grade_structure {
 
     /**
      * Static recursive helper - removes all outcomes
-     * @static
-     * @param array $element The seed of the recursion
+     *
+     * @param array &$element The seed of the recursion
+     *
      * @return void
      */
-    function no_outcomes(&$element) {
+    public function no_outcomes(&$element) {
         if ($element['type'] != 'category') {
             return;
         }
@@ -1699,11 +1727,12 @@ class grade_tree extends grade_structure {
 
     /**
      * Static recursive helper - makes the grade_item for category the last children
-     * @static
-     * @param array $element The seed of the recursion
+     *
+     * @param array &$element The seed of the recursion
+     *
      * @return void
      */
-    function category_grade_last(&$element) {
+    public function category_grade_last(&$element) {
         if (empty($element['children'])) {
             return;
         }
@@ -1724,13 +1753,13 @@ class grade_tree extends grade_structure {
 
     /**
      * Static recursive helper - fills the levels array, useful when accessing tree elements of one level
-     * @static
-     * @param int $levels
-     * @param array $element The seed of the recursion
-     * @param int $depth
+     *
+     * @param array &$levels The levels of the grade tree through which to recurse
+     * @param array &$element The seed of the recursion
+     * @param int   $depth How deep are we?
      * @return void
      */
-    function fill_levels(&$levels, &$element, $depth) {
+    public function fill_levels(&$levels, &$element, $depth) {
         if (!array_key_exists($depth, $levels)) {
             $levels[$depth] = array();
         }
@@ -1762,8 +1791,13 @@ class grade_tree extends grade_structure {
 
     /**
      * Static recursive helper - makes full tree (all leafes are at the same level)
+     *
+     * @param array &$element The seed of the recursion
+     * @param int   $depth How deep are we?
+     *
+     * @return int
      */
-    function inject_fillers(&$element, $depth) {
+    public function inject_fillers(&$element, $depth) {
         $depth++;
 
         if (empty($element['children'])) {
@@ -1793,7 +1827,9 @@ class grade_tree extends grade_structure {
                     $type = 'filler';
                 }
                 $oldchild =& $element['children'][$chid];
-                $element['children'][$chid] = array('object'=>'filler', 'type'=>$type, 'eid'=>'', 'depth'=>$element['object']->depth,'children'=>array($oldchild));
+                $element['children'][$chid] = array('object'=>'filler', 'type'=>$type,
+                                                    'eid'=>'', 'depth'=>$element['object']->depth,
+                                                    'children'=>array($oldchild));
             }
         }
 
@@ -1802,8 +1838,12 @@ class grade_tree extends grade_structure {
 
     /**
      * Static recursive helper - add colspan information into categories
+     *
+     * @param array &$element The seed of the recursion
+     *
+     * @return int
      */
-    function inject_colspans(&$element) {
+    public function inject_colspans(&$element) {
         if (empty($element['children'])) {
             return 1;
         }
@@ -1818,10 +1858,10 @@ class grade_tree extends grade_structure {
     /**
      * Parses the array in search of a given eid and returns a element object with
      * information about the element it has found.
-     * @param int $eid
+     * @param int $eid Gradetree Element ID
      * @return object element
      */
-    function locate_element($eid) {
+    public function locate_element($eid) {
         // it is a grade - construct a new object
         if (strpos($eid, 'n') === 0) {
             if (!preg_match('/n(\d+)u(\d+)/', $eid, $matches)) {
@@ -1843,7 +1883,7 @@ class grade_tree extends grade_structure {
             return array('eid'=>'n'.$itemid.'u'.$userid,'object'=>$grade, 'type'=>'grade');
 
         } else if (strpos($eid, 'g') === 0) {
-            $id = (int)substr($eid, 1);
+            $id = (int) substr($eid, 1);
             if (!$grade = grade_grade::fetch(array('id'=>$id))) {
                 return null;
             }
@@ -1869,6 +1909,601 @@ class grade_tree extends grade_structure {
 
         return null;
     }
+
+    /**
+     * Returns a well-formed XML representation of the grade-tree using recursion.
+     *
+     * @param array  $root The current element in the recursion. If null, starts at the top of the tree.
+     * @param string $tabs The control character to use for tabs
+     *
+     * @return string $xml
+     */
+    public function exporttoxml($root=null, $tabs="\t") {
+        $xml = null;
+        $first = false;
+        if (is_null($root)) {
+            $root = $this->top_element;
+            $xml = '<?xml version="1.0" encoding="UTF-8" ?>' . "\n";
+            $xml .= "<gradetree>\n";
+            $first = true;
+        }
+
+        $type = 'undefined';
+        if (strpos($root['object']->table, 'grade_categories') !== false) {
+            $type = 'category';
+        } else if (strpos($root['object']->table, 'grade_items') !== false) {
+            $type = 'item';
+        } else if (strpos($root['object']->table, 'grade_outcomes') !== false) {
+            $type = 'outcome';
+        }
+
+        $xml .= "$tabs<element type=\"$type\">\n";
+        foreach ($root['object'] as $var => $value) {
+            if (!is_object($value) && !is_array($value) && !empty($value)) {
+                $xml .= "$tabs\t<$var>$value</$var>\n";
+            }
+        }
+
+        if (!empty($root['children'])) {
+            $xml .= "$tabs\t<children>\n";
+            foreach ($root['children'] as $sortorder => $child) {
+                $xml .= $this->exportToXML($child, $tabs."\t\t");
+            }
+            $xml .= "$tabs\t</children>\n";
+        }
+
+        $xml .= "$tabs</element>\n";
+
+        if ($first) {
+            $xml .= "</gradetree>";
+        }
+
+        return $xml;
+    }
+
+    /**
+     * Returns a JSON representation of the grade-tree using recursion.
+     *
+     * @param array $root The current element in the recursion. If null, starts at the top of the tree.
+     * @param string $tabs Tab characters used to indent the string nicely for humans to enjoy
+     *
+     * @return string
+     */
+    public function exporttojson($root=null, $tabs="\t") {
+        $json = null;
+        $first = false;
+        if (is_null($root)) {
+            $root = $this->top_element;
+            $first = true;
+        }
+
+        $name = '';
+
+
+        if (strpos($root['object']->table, 'grade_categories') !== false) {
+            $name = $root['object']->fullname;
+            if ($name == '?') {
+                $name = $root['object']->get_name();
+            }
+        } else if (strpos($root['object']->table, 'grade_items') !== false) {
+            $name = $root['object']->itemname;
+        } else if (strpos($root['object']->table, 'grade_outcomes') !== false) {
+            $name = $root['object']->itemname;
+        }
+
+        $json .= "$tabs {\n";
+        $json .= "$tabs\t \"type\": \"{$root['type']}\",\n";
+        $json .= "$tabs\t \"name\": \"$name\",\n";
+
+        foreach ($root['object'] as $var => $value) {
+            if (!is_object($value) && !is_array($value) && !empty($value)) {
+                $json .= "$tabs\t \"$var\": \"$value\",\n";
+            }
+        }
+
+        $json = substr($json, 0, strrpos($json, ','));
+
+        if (!empty($root['children'])) {
+            $json .= ",\n$tabs\t\"children\": [\n";
+            foreach ($root['children'] as $sortorder => $child) {
+                $json .= $this->exportToJSON($child, $tabs."\t\t");
+            }
+            $json = substr($json, 0, strrpos($json, ','));
+            $json .= "\n$tabs\t]\n";
+        }
+
+        if ($first) {
+            $json .= "\n}";
+        } else {
+            $json .= "\n$tabs},\n";
+        }
+
+        return $json;
+    }
+
+    /**
+     * Returns the array of levels
+     *
+     * @return array
+     */
+    public function get_levels() {
+        return $this->levels;
+    }
+
+    /**
+     * Returns the array of grade items
+     *
+     * @return array
+     */
+    public function get_items() {
+        return $this->items;
+    }
+
+    /**
+     * Returns a specific Grade Item
+     *
+     * @param int $itemid The ID of the grade_item object
+     *
+     * @return grade_item
+     */
+    public function get_item($itemid) {
+        if (array_key_exists($itemid, $this->items)) {
+            return $this->items[$itemid];
+        } else {
+            return false;
+        }
+    }
+}
+
+/**
+ * Local shortcut function for creating an edit/delete button for a grade_* object.
+ * @param string $type 'edit' or 'delete'
+ * @param int $courseid The Course ID
+ * @param grade_* $object The grade_* object
+ * @return string html
+ */
+function grade_button($type, $courseid, $object) {
+    global $CFG, $OUTPUT;
+    if (preg_match('/grade_(.*)/', get_class($object), $matches)) {
+        $objectidstring = $matches[1] . 'id';
+    } else {
+        throw new coding_exception('grade_button() only accepts grade_* objects as third parameter!');
+    }
+
+    $strdelete = get_string('delete');
+    $stredit   = get_string('edit');
+
+    if ($type == 'delete') {
+        $url = new moodle_url('index.php', array('id' => $courseid, $objectidstring => $object->id, 'action' => 'delete', 'sesskey' => sesskey()));
+    } else if ($type == 'edit') {
+        $url = new moodle_url('edit.php', array('courseid' => $courseid, 'id' => $object->id));
+    }
+
+    return $OUTPUT->action_icon($url, new pix_icon('t/'.$type, ${'str'.$type}));
+
+}
+
+/**
+ * This method adds settings to the settings block for the grade system and its
+ * plugins
+ *
+ * @global moodle_page $PAGE
+ */
+function grade_extend_settings($plugininfo, $courseid) {
+    global $PAGE;
+
+    $gradenode = $PAGE->settingsnav->prepend(get_string('gradeadministration', 'grades'), null, navigation_node::TYPE_CONTAINER);
+
+    $strings = array_shift($plugininfo);
+
+    if ($reports = grade_helper::get_plugins_reports($courseid)) {
+        foreach ($reports as $report) {
+            $gradenode->add($report->string, $report->link, navigation_node::TYPE_SETTING, null, $report->id, new pix_icon('i/report', ''));
+        }
+    }
+
+    if ($imports = grade_helper::get_plugins_import($courseid)) {
+        $importnode = $gradenode->add($strings['import'], null, navigation_node::TYPE_CONTAINER);
+        foreach ($imports as $import) {
+            $importnode->add($import->string, $import->link, navigation_node::TYPE_SETTING, null, $import->id, new pix_icon('i/restore', ''));
+        }
+    }
+
+    if ($exports = grade_helper::get_plugins_export($courseid)) {
+        $exportnode = $gradenode->add($strings['export'], null, navigation_node::TYPE_CONTAINER);
+        foreach ($exports as $export) {
+            $exportnode->add($export->string, $export->link, navigation_node::TYPE_SETTING, null, $export->id, new pix_icon('i/backup', ''));
+        }
+    }
+
+    if ($setting = grade_helper::get_info_manage_settings($courseid)) {
+        $gradenode->add(get_string('coursegradesettings', 'grades'), $setting->link, navigation_node::TYPE_SETTING, null, $setting->id, new pix_icon('i/settings', ''));
+    }
+
+    if ($preferences = grade_helper::get_plugins_report_preferences($courseid)) {
+        $preferencesnode = $gradenode->add(get_string('myreportpreferences', 'grades'), null, navigation_node::TYPE_CONTAINER);
+        foreach ($preferences as $preference) {
+            $preferencesnode->add($preference->string, $preference->link, navigation_node::TYPE_SETTING, null, $preference->id, new pix_icon('i/settings', ''));
+        }
+    }
+
+    if ($letters = grade_helper::get_info_letters($courseid)) {
+        $letters = array_shift($letters);
+        $gradenode->add($strings['letter'], $letters->link, navigation_node::TYPE_SETTING, null, $letters->id, new pix_icon('i/settings', ''));
+    }
+
+    if ($outcomes = grade_helper::get_info_outcomes($courseid)) {
+        $outcomes = array_shift($outcomes);
+        $gradenode->add($strings['outcome'], $outcomes->link, navigation_node::TYPE_SETTING, null, $outcomes->id, new pix_icon('i/outcomes', ''));
+    }
+
+    if ($scales = grade_helper::get_info_scales($courseid)) {
+        $gradenode->add($strings['scale'], $scales->link, navigation_node::TYPE_SETTING, null, $scales->id, new pix_icon('i/scales', ''));
+    }
+
+    if ($categories = grade_helper::get_info_edit_structure($courseid)) {
+        $categoriesnode = $gradenode->add(get_string('categoriesanditems','grades'), null, navigation_node::TYPE_CONTAINER);
+        foreach ($categories as $category) {
+            $categoriesnode->add($category->string, $category->link, navigation_node::TYPE_SETTING, null, $category->id, new pix_icon('i/report', ''));
+        }
+    }
+
+    if ($gradenode->contains_active_node()) {
+        // If the gradenode is active include the settings base node (gradeadministration) in
+        // the navbar, typcially this is ignored.
+        $PAGE->navbar->includesettingsbase = true;
+
+        // If we can get the course admin node make sure it is closed by default
+        // as in this case the gradenode will be opened
+        if ($coursenode = $PAGE->settingsnav->get('courseadmin', navigation_node::TYPE_COURSE)){
+            $coursenode->make_inactive();
+            $coursenode->forceopen = false;
+        }
+    }
 }
 
-?>
+/**
+ * Grade helper class
+ *
+ * This class provides several helpful functions that work irrespective of any
+ * current state.
+ *
+ * @copyright 2010 Sam Hemelryk
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class grade_helper {
+    /**
+     * Cached manage settings info {@see get_info_settings}
+     * @var grade_plugin_info|false
+     */
+    protected static $managesetting = null;
+    /**
+     * Cached grade report plugins {@see get_plugins_reports}
+     * @var array|false
+     */
+    protected static $gradereports = null;
+    /**
+     * Cached grade report plugins preferences {@see get_info_scales}
+     * @var array|false
+     */
+    protected static $gradereportpreferences = null;
+    /**
+     * Cached scale info {@see get_info_scales}
+     * @var grade_plugin_info|false
+     */
+    protected static $scaleinfo = null;
+    /**
+     * Cached outcome info {@see get_info_outcomes}
+     * @var grade_plugin_info|false
+     */
+    protected static $outcomeinfo = null;
+    /**
+     * Cached info on edit structure {@see get_info_edit_structure}
+     * @var array|false
+     */
+    protected static $edittree = null;
+    /**
+     * Cached leftter info {@see get_info_letters}
+     * @var grade_plugin_info|false
+     */
+    protected static $letterinfo = null;
+    /**
+     * Cached grade import plugins {@see get_plugins_import}
+     * @var array|false
+     */
+    protected static $importplugins = null;
+    /**
+     * Cached grade export plugins {@see get_plugins_export}
+     * @var array|false
+     */
+    protected static $exportplugins = null;
+    /**
+     * Cached grade plugin strings
+     * @var array
+     */
+    protected static $pluginstrings = null;
+
+    /**
+     * Gets strings commonly used by the describe plugins
+     *
+     * report => get_string('view'),
+     * edittree => get_string('edittree', 'grades'),
+     * scale => get_string('scales'),
+     * outcome => get_string('outcomes', 'grades'),
+     * letter => get_string('letters', 'grades'),
+     * export => get_string('export', 'grades'),
+     * import => get_string('import'),
+     * preferences => get_string('mypreferences', 'grades'),
+     * settings => get_string('settings')
+     *
+     * @return array
+     */
+    public static function get_plugin_strings() {
+        if (self::$pluginstrings === null) {
+            self::$pluginstrings = array(
+                'report' => get_string('view'),
+                'edittree' => get_string('edittree', 'grades'),
+                'scale' => get_string('scales'),
+                'outcome' => get_string('outcomes', 'grades'),
+                'letter' => get_string('letters', 'grades'),
+                'export' => get_string('export', 'grades'),
+                'import' => get_string('import'),
+                'preferences' => get_string('mypreferences', 'grades'),
+                'settings' => get_string('settings')
+            );
+        }
+        return self::$pluginstrings;
+    }
+    /**
+     * Get grade_plugin_info object for managing settings if the user can
+     *
+     * @param int $courseid
+     * @return grade_plugin_info
+     */
+    public static function get_info_manage_settings($courseid) {
+        if (self::$managesetting !== null) {
+            return self::$managesetting;
+        }
+        $context = get_context_instance(CONTEXT_COURSE, $courseid);
+        if (has_capability('moodle/course:update', $context)) {
+            self::$managesetting = new grade_plugin_info('coursesettings', new moodle_url('/grade/edit/settings/index.php', array('id'=>$courseid)), get_string('course'));
+        } else {
+            self::$managesetting = false;
+        }
+        return self::$managesetting;
+    }
+    /**
+     * Returns an array of plugin reports as grade_plugin_info objects
+     *
+     * @param int $courseid
+     * @return array
+     */
+    public static function get_plugins_reports($courseid) {
+        global $SITE;
+
+        if (self::$gradereports !== null) {
+            return self::$gradereports;
+        }
+        $context = get_context_instance(CONTEXT_COURSE, $courseid);
+        $gradereports = array();
+        $gradepreferences = array();
+        foreach (get_plugin_list('gradereport') as $plugin => $plugindir) {
+            //some reports make no sense if we're not within a course
+            if ($courseid==$SITE->id && ($plugin=='grader' || $plugin=='user')) {
+                continue;
+            }
+
+            // Remove ones we can't see
+            if (!has_capability('gradereport/'.$plugin.':view', $context)) {
+                continue;
+            }
+
+            $pluginstr = get_string('pluginname', 'gradereport_'.$plugin);
+            $url = new moodle_url('/grade/report/'.$plugin.'/index.php', array('id'=>$courseid));
+            $gradereports[$plugin] = new grade_plugin_info($plugin, $url, $pluginstr);
+
+            // Add link to preferences tab if such a page exists
+            if (file_exists($plugindir.'/preferences.php')) {
+                $url = new moodle_url('/grade/report/'.$plugin.'/preferences.php', array('id'=>$courseid));
+                $gradepreferences[$plugin] = new grade_plugin_info($plugin, $url, $pluginstr);
+            }
+        }
+        if (count($gradereports) == 0) {
+            $gradereports = false;
+            $gradepreferences = false;
+        } else if (count($gradepreferences) == 0) {
+            $gradepreferences = false;
+            asort($gradereports);
+        } else {
+            asort($gradereports);
+            asort($gradepreferences);
+        }
+        self::$gradereports = $gradereports;
+        self::$gradereportpreferences = $gradepreferences;
+        return self::$gradereports;
+    }
+    /**
+     * Returns an array of grade plugin report preferences for plugin reports that
+     * support preferences
+     * @param int $courseid
+     * @return array
+     */
+    public static function get_plugins_report_preferences($courseid) {
+        if (self::$gradereportpreferences !== null) {
+            return self::$gradereportpreferences;
+        }
+        self::get_plugins_reports($courseid);
+        return self::$gradereportpreferences;
+    }
+    /**
+     * Get information on scales
+     * @param int $courseid
+     * @return grade_plugin_info
+     */
+    public static function get_info_scales($courseid) {
+        if (self::$scaleinfo !== null) {
+            return self::$scaleinfo;
+        }
+        if (has_capability('moodle/course:managescales', get_context_instance(CONTEXT_COURSE, $courseid))) {
+            $url = new moodle_url('/grade/edit/scale/index.php', array('id'=>$courseid));
+            self::$scaleinfo = new grade_plugin_info('scale', $url, get_string('view'));
+        } else {
+            self::$scaleinfo = false;
+        }
+        return self::$scaleinfo;
+    }
+    /**
+     * Get information on outcomes
+     * @param int $courseid
+     * @return grade_plugin_info
+     */
+    public static function get_info_outcomes($courseid) {
+        global $CFG, $SITE;
+
+        if (self::$outcomeinfo !== null) {
+            return self::$outcomeinfo;
+        }
+        $context = get_context_instance(CONTEXT_COURSE, $courseid);
+        $canmanage = has_capability('moodle/grade:manage', $context);
+        $canupdate = has_capability('moodle/course:update', $context);
+        if (!empty($CFG->enableoutcomes) && ($canmanage || $canupdate)) {
+            $outcomes = array();
+            if ($canupdate) {
+                if ($courseid!=$SITE->id) {
+                    $url = new moodle_url('/grade/edit/outcome/course.php', array('id'=>$courseid));
+                    $outcomes['course'] = new grade_plugin_info('course', $url, get_string('outcomescourse', 'grades'));
+                }
+                $url = new moodle_url('/grade/edit/outcome/index.php', array('id'=>$courseid));
+                $outcomes['edit'] = new grade_plugin_info('edit', $url, get_string('editoutcomes', 'grades'));
+                $url = new moodle_url('/grade/edit/outcome/import.php', array('courseid'=>$courseid));
+                $outcomes['import'] = new grade_plugin_info('import', $url, get_string('importoutcomes', 'grades'));
+            } else {
+                if ($courseid!=$SITE->id) {
+                    $url = new moodle_url('/grade/edit/outcome/course.php', array('id'=>$courseid));
+                    $outcomes['edit'] = new grade_plugin_info('edit', $url, get_string('outcomescourse', 'grades'));
+                }
+            }
+            self::$outcomeinfo = $outcomes;
+        } else {
+            self::$outcomeinfo = false;
+        }
+        return self::$outcomeinfo;
+    }
+    /**
+     * Get information on editing structures
+     * @param int $courseid
+     * @return array
+     */
+    public static function get_info_edit_structure($courseid) {
+        if (self::$edittree !== null) {
+            return self::$edittree;
+        }
+        if (has_capability('moodle/grade:manage', get_context_instance(CONTEXT_COURSE, $courseid))) {
+            $url = new moodle_url('/grade/edit/tree/index.php', array('sesskey'=>sesskey(), 'showadvanced'=>'0', 'id'=>$courseid));
+            self::$edittree = array(
+                'simpleview' => new grade_plugin_info('simpleview', $url, get_string('simpleview', 'grades')),
+                'fullview' => new grade_plugin_info('fullview', new moodle_url($url, array('showadvanced'=>'1')), get_string('fullview', 'grades'))
+            );
+        } else {
+            self::$edittree = false;
+        }
+        return self::$edittree;
+    }
+    /**
+     * Get information on letters
+     * @param int $courseid
+     * @return array
+     */
+    public static function get_info_letters($courseid) {
+        if (self::$letterinfo !== null) {
+            return self::$letterinfo;
+        }
+        $context = get_context_instance(CONTEXT_COURSE, $courseid);
+        $canmanage = has_capability('moodle/grade:manage', $context);
+        $canmanageletters = has_capability('moodle/grade:manageletters', $context);
+        if ($canmanage || $canmanageletters) {
+            self::$letterinfo = array(
+                'view' => new grade_plugin_info('view', new moodle_url('/grade/edit/letter/index.php', array('id'=>$context->id)), get_string('view')),
+                'edit' => new grade_plugin_info('edit', new moodle_url('/grade/edit/letter/index.php', array('edit'=>1,'id'=>$context->id)), get_string('edit'))
+            );
+        } else {
+            self::$letterinfo = false;
+        }
+        return self::$letterinfo;
+    }
+    /**
+     * Get information import plugins
+     * @param int $courseid
+     * @return array
+     */
+    public static function get_plugins_import($courseid) {
+        global $CFG;
+
+        if (self::$importplugins !== null) {
+            return self::$importplugins;
+        }
+        $importplugins = array();
+        $context = get_context_instance(CONTEXT_COURSE, $courseid);
+
+        if (has_capability('moodle/grade:import', $context)) {
+            foreach (get_plugin_list('gradeimport') as $plugin => $plugindir) {
+                if (!has_capability('gradeimport/'.$plugin.':view', $context)) {
+                    continue;
+                }
+                $pluginstr = get_string('pluginname', 'gradeimport_'.$plugin);
+                $url = new moodle_url('/grade/import/'.$plugin.'/index.php', array('id'=>$courseid));
+                $importplugins[$plugin] = new grade_plugin_info($plugin, $url, $pluginstr);
+            }
+
+
+            if ($CFG->gradepublishing) {
+                $url = new moodle_url('/grade/import/keymanager.php', array('id'=>$courseid));
+                $importplugins['keymanager'] = new grade_plugin_info('keymanager', $url, get_string('keymanager', 'grades'));
+            }
+        }
+
+        if (count($importplugins) > 0) {
+            asort($importplugins);
+            self::$importplugins = $importplugins;
+        } else {
+            self::$importplugins = false;
+        }
+        return self::$importplugins;
+    }
+    /**
+     * Get information export plugins
+     * @param int $courseid
+     * @return array
+     */
+    public static function get_plugins_export($courseid) {
+        global $CFG;
+
+        if (self::$exportplugins !== null) {
+            return self::$exportplugins;
+        }
+        $context = get_context_instance(CONTEXT_COURSE, $courseid);
+        $exportplugins = array();
+        if (has_capability('moodle/grade:export', $context)) {
+            foreach (get_plugin_list('gradeexport') as $plugin => $plugindir) {
+                if (!has_capability('gradeexport/'.$plugin.':view', $context)) {
+                    continue;
+                }
+                $pluginstr = get_string('pluginname', 'gradeexport_'.$plugin);
+                $url = new moodle_url('/grade/export/'.$plugin.'/index.php', array('id'=>$courseid));
+                $exportplugins[$plugin] = new grade_plugin_info($plugin, $url, $pluginstr);
+            }
+
+            if ($CFG->gradepublishing) {
+                $url = new moodle_url('/grade/export/keymanager.php', array('id'=>$courseid));
+                $exportplugins['keymanager'] = new grade_plugin_info('keymanager', $url, get_string('keymanager', 'grades'));
+            }
+        }
+        if (count($exportplugins) > 0) {
+            asort($exportplugins);
+            self::$exportplugins = $exportplugins;
+        } else {
+            self::$exportplugins = false;
+        }
+        return self::$exportplugins;
+    }
+}
