diff --git a/grade/edit/tree/lib.php b/grade/edit/tree/lib.php
old mode 100755
new mode 100644
index 34fbbcb..49af487
--- a/grade/edit/tree/lib.php
+++ b/grade/edit/tree/lib.php
@@ -16,33 +16,38 @@
 // along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
 class grade_edit_tree {
-    var $columns = array();
+    public $columns = array();
 
     /**
      * @var object $gtree          @see grade/lib.php
      */
-    var $gtree;
+    public $gtree;
 
     /**
      * @var grade_plugin_return @see grade/lib.php
      */
-    var $gpr;
+    public $gpr;
 
     /**
      * @var string              $moving The eid of the category or item being moved
      */
-    var $moving;
+    public $moving;
 
-    var $deepest_level;
+    public $deepest_level;
 
-    var $uses_extra_credit = false;
+    public $uses_extra_credit = false;
 
-    var $uses_weight = false;
+    public $uses_weight = false;
 
+    public $table;
+
+    public $categories = array();
     /**
      * Constructor
      */
-    function grade_edit_tree($gtree, $moving=false, $gpr) {
+    public function __construct($gtree, $moving=false, $gpr) {
+        global $USER, $OUTPUT, $COURSE;
+
         $this->gtree = $gtree;
         $this->moving = $moving;
         $this->gpr = $gpr;
@@ -68,6 +73,28 @@ class grade_edit_tree {
         $this->columns[] = grade_edit_tree_column::factory('plusfactor', array('adv' => true));
         $this->columns[] = grade_edit_tree_column::factory('actions');
         $this->columns[] = grade_edit_tree_column::factory('select');
+
+        $mode = ($USER->gradeediting[$COURSE->id]) ? 'advanced' : 'simple';
+
+        $widthstyle = '';
+        if ($mode == 'simple') {
+            $widthstyle = ' style="width:auto;" ';
+        }
+
+        $this->table = new html_table();
+        $this->table->id = "grade_edit_tree_table";
+        $this->table->cellpadding = 5;
+        $this->table->attributes['class'] = 'generaltable ' . $mode;
+        $this->table->style = $widthstyle;
+
+        foreach ($this->columns as $column) {
+            if (!($this->moving && $column->hide_when_moving) && !$column->is_hidden($mode)) {
+                $this->table->head[] = $column->get_header_cell();
+            }
+        }
+
+        $rowcount = 0;
+        $this->table->data = $this->build_html_tree($this->gtree->top_element, true, array(), 0, $rowcount);
     }
 
     /**
@@ -80,8 +107,8 @@ class grade_edit_tree {
      *
      * @return string HTML
      */
-    function build_html_tree($element, $totals, $parents, &$categories, $level, &$row_count) {
-        global $CFG, $COURSE, $USER;
+    public function build_html_tree($element, $totals, $parents, $level, &$row_count) {
+        global $CFG, $COURSE, $USER, $OUTPUT;
 
         $object = $element['object'];
         $eid    = $element['eid'];
@@ -93,9 +120,9 @@ class grade_edit_tree {
             $is_category_item = true;
         }
 
-        $rowclasses = '';
+        $rowclasses = array();
         foreach ($parents as $parent_eid) {
-            $rowclasses .= " $parent_eid ";
+            $rowclasses[] = $parent_eid;
         }
 
         $actions = '';
@@ -108,13 +135,12 @@ class grade_edit_tree {
 
         if ($element['type'] == 'item' or ($element['type'] == 'category' and $element['depth'] > 1)) {
             if ($this->element_deletable($element)) {
-                $actions .= '<a href="index.php?id='.$COURSE->id.'&amp;action=delete&amp;eid='
-                         . $eid.'&amp;sesskey='.sesskey().'"><img src="'.$CFG->pixpath.'/t/delete.gif" class="iconsmall" alt="'
-                         . get_string('delete').'" title="'.get_string('delete').'"/></a>';
+                $aurl = new moodle_url('index.php', array('id' => $COURSE->id, 'action' => 'delete', 'eid' => $eid, 'sesskey' => sesskey()));
+                $actions .= $OUTPUT->action_icon($aurl, new pix_icon('t/delete', get_string('delete')));
             }
-            $actions .= '<a href="index.php?id='.$COURSE->id.'&amp;action=moveselect&amp;eid='
-                     . $eid.'&amp;sesskey='.sesskey().'"><img src="'.$CFG->pixpath.'/t/move.gif" class="iconsmall" alt="'
-                     . get_string('move').'" title="'.get_string('move').'"/></a>';
+
+            $aurl = new moodle_url('index.php', array('id' => $COURSE->id, 'action' => 'moveselect', 'eid' => $eid, 'sesskey' => sesskey()));
+            $actions .= $OUTPUT->action_icon($aurl, new pix_icon('t/move', get_string('move')));
         }
 
         $actions .= $this->gtree->get_hiding_icon($element, $this->gpr);
@@ -122,10 +148,9 @@ class grade_edit_tree {
 
         $mode = ($USER->gradeediting[$COURSE->id]) ? 'advanced' : 'simple';
 
-        $html = '';
+        $returnrows = array();
         $root = false;
 
-
         $id = required_param('id', PARAM_INT);
 
         /// prepare move target if needed
@@ -133,31 +158,33 @@ class grade_edit_tree {
 
         /// print the list items now
         if ($this->moving == $eid) {
-
             // do not diplay children
-            return '<tr><td colspan="12" class="'.$element['type'].' moving">'.$object->name.' ('.get_string('move').')</td></tr>';
-
+            $cell = new html_table_cell();
+            $cell->colspan = 12;
+            $cell->attributes['class'] = $element['type'] . ' moving';
+            $cell->text = $object->name.' ('.get_string('move').')';
+            return array(new html_table_row(array($cell)));
         }
 
         if ($element['type'] == 'category') {
             $level++;
-            $categories[$object->id] = $object->stripped_name;
+            $this->categories[$object->id] = $object->stripped_name;
             $category = grade_category::fetch(array('id' => $object->id));
             $item = $category->get_grade_item();
 
             // Add aggregation coef input if not a course item and if parent category has correct aggregation type
-            $dimmed = ($item->is_hidden()) ? " dimmed " : "";
+            $dimmed = ($item->is_hidden()) ? 'dimmed' : '';
 
             // Before we print the category's row, we must find out how many rows will appear below it (for the filler cell's rowspan)
             $aggregation_position = grade_get_setting($COURSE->id, 'aggregationposition', $CFG->grade_aggregationposition);
             $category_total_data = null; // Used if aggregationposition is set to "last", so we can print it last
 
-            $html_children = '';
+            $html_children = array();
 
             $row_count = 0;
 
             foreach($element['children'] as $child_el) {
-                $moveto = '';
+                $moveto = null;
 
                 if (empty($child_el['object']->itemtype)) {
                     $child_el['object']->itemtype = false;
@@ -171,7 +198,7 @@ class grade_edit_tree {
                 $first = '';
 
                 if ($child_el['object']->itemtype == 'course' || $child_el['object']->itemtype == 'category') {
-                    $first = '&amp;first=1';
+                    $first = array('first' => 1);
                     $child_eid = $eid;
                 }
 
@@ -181,9 +208,18 @@ class grade_edit_tree {
                     $strmovehere = get_string('movehere');
                     $actions = ''; // no action icons when moving
 
-                    $moveto = '<tr><td colspan="12"><a href="index.php?id='.$COURSE->id.'&amp;action=move&amp;eid='.$this->moving.'&amp;moveafter='
-                            . $child_eid.'&amp;sesskey='.sesskey().$first.'"><img class="movetarget" src="'.$CFG->wwwroot.'/pix/movehere.gif" alt="'
-                            . $strmovehere.'" title="'.s($strmovehere).'" /></a></td></tr>';
+                    $aurl = new moodle_url('index.php', array('id' => $COURSE->id, 'action' => 'move', 'eid' => $this->moving, 'moveafter' => $child_eid, 'sesskey' => sesskey()));
+                    if ($first) {
+                        $aurl->params($first);
+                    }
+
+                    $cell = new html_table_cell();
+                    $cell->colspan = 12;
+
+                    $icon = new pix_icon('movehere', $strmovehere, null, array('class'=>'movetarget'));
+                    $cell->text = $OUTPUT->action_icon($aurl, $icon);
+
+                    $moveto = new html_table_row(array($cell));
                 }
 
                 $newparents = $parents;
@@ -194,15 +230,18 @@ class grade_edit_tree {
 
                 // If moving, do not print course and category totals, but still print the moveto target box
                 if ($this->moving && ($child_el['object']->itemtype == 'course' || $child_el['object']->itemtype == 'category')) {
-                    $html_children .= $moveto;
+                    $html_children[] = $moveto;
                 } elseif ($child_el['object']->itemtype == 'course' || $child_el['object']->itemtype == 'category') {
                     // We don't build the item yet because we first need to know the deepest level of categories (for category/name colspans)
-                    $category_total_item = $this->build_html_tree($child_el, $totals, $newparents, $categories, $level, $child_row_count);
+                    $category_total_item = $this->build_html_tree($child_el, $totals, $newparents, $level, $child_row_count);
                     if (!$aggregation_position) {
-                        $html_children .= $category_total_item;
+                        $html_children = array_merge($html_children, $category_total_item);
                     }
                 } else {
-                    $html_children .= $this->build_html_tree($child_el, $totals, $newparents, $categories, $level, $child_row_count) . $moveto;
+                    $html_children = array_merge($html_children, $this->build_html_tree($child_el, $totals, $newparents, $level, $child_row_count));
+                    if (!empty($moveto)) {
+                        $html_children[] = $moveto;
+                    }
 
                     if ($this->moving) {
                         $row_count++;
@@ -219,28 +258,11 @@ class grade_edit_tree {
 
             // Print category total at the end if aggregation position is "last" (1)
             if (!empty($category_total_item) && $aggregation_position) {
-                $html_children .= $category_total_item;
+                $html_children = array_merge($html_children, $category_total_item);
             }
 
-            // now build the header
+            // Determine if we are at the root
             if (isset($element['object']->grade_item) && $element['object']->grade_item->is_course_item()) {
-                // Reduce width if advanced elements are not shown
-                $width_style = '';
-
-                if ($mode == 'simple') {
-                    $width_style = ' style="width:auto;" ';
-                }
-
-                $html .= '<table cellpadding="5" class="generaltable" '.$width_style.'>
-                            <tr>';
-
-                foreach ($this->columns as $column) {
-                    if (!($this->moving && $column->hide_when_moving) && !$column->is_hidden($mode)) {
-                        $html .= $column->get_header_cell();
-                    }
-                }
-
-                $html .= '</tr>';
                 $root = true;
             }
 
@@ -250,24 +272,43 @@ class grade_edit_tree {
                 $row_count_offset = -1;
             }
 
-            $levelclass = " level$level ";
+            $levelclass = "level$level";
 
-            $html .= '
-                    <tr class="category '.$dimmed.$rowclasses.'">
-                      <th scope="row" title="'.s($object->stripped_name).'" class="cell rowspan '.$levelclass.'" rowspan="'.($row_count+1+$row_count_offset).'"></th>';
+            $courseclass = '';
+            if ($level == 1) {
+                $courseclass = 'coursecategory';
+            }
+
+            $row = new html_table_row();
+            $row->attributes['class'] = $courseclass . ' category ' . $dimmed;
+            foreach ($rowclasses as $class) {
+                $row->attributes['class'] .= ' ' . $class;
+            }
+
+            $headercell = new html_table_cell();
+            $headercell->header = true;
+            $headercell->scope = 'row';
+            $headercell->attributes['title'] = $object->stripped_name;
+            $headercell->attributes['class'] = 'cell rowspan ' . $levelclass;
+            $headercell->rowspan = $row_count+1+$row_count_offset;
+            $row->cells[] = $headercell;
 
             foreach ($this->columns as $column) {
                 if (!($this->moving && $column->hide_when_moving) && !$column->is_hidden($mode)) {
-                    $html .= $column->get_category_cell($category, $levelclass, array('id' => $id, 'name' => $object->name, 'level' => $level, 'actions' => $actions, 'eid' => $eid));
+                    $row->cells[] = $column->get_category_cell($category, $levelclass, array('id' => $id, 'name' => $object->name, 'level' => $level, 'actions' => $actions, 'eid' => $eid));
                 }
             }
 
-            $html .= '</tr>';
+            $returnrows[] = $row;
+
+            $returnrows = array_merge($returnrows, $html_children);
 
-            $html .= $html_children;
+            // Print a coloured row to show the end of the category across the table
+            $endcell = new html_table_cell();
+            $endcell->colspan = (19 - $level);
+            $endcell->attributes['class'] = 'colspan ' . $levelclass;
 
-            // Print a coloured row to show the end of the category accross the table
-            $html .= '<tr><td colspan="'.(19 - $level).'" class="colspan '.$levelclass.'"></td></tr>';
+            $returnrows[] = new html_table_row(array($endcell));;
 
         } else { // Dealing with a grade item
 
@@ -275,27 +316,29 @@ class grade_edit_tree {
             $element['type'] = 'item';
             $element['object'] = $item;
 
-            // Determine aggregation coef element
+            $categoryitemclass = '';
+            if ($item->itemtype == 'category') {
+                $categoryitemclass = 'categoryitem';
+            }
 
-            $dimmed = ($item->is_hidden()) ? " dimmed_text " : "";
-            $html .= '<tr class="item'.$dimmed.$rowclasses.'">';
+            $dimmed = ($item->is_hidden()) ? "dimmed_text" : "";
+            $gradeitemrow = new html_table_row();
+            $gradeitemrow->attributes['class'] = $categoryitemclass . ' item ' . $dimmed;
+            foreach ($rowclasses as $class) {
+                $gradeitemrow->attributes['class'] .= ' ' . $class;
+            }
 
             foreach ($this->columns as $column) {
                 if (!($this->moving && $column->hide_when_moving) && !$column->is_hidden($mode)) {
-                    $html .= $column->get_item_cell($item, array('id' => $id, 'name' => $object->name, 'level' => $level, 'actions' => $actions,
+                    $gradeitemrow->cells[] = $column->get_item_cell($item, array('id' => $id, 'name' => $object->name, 'level' => $level, 'actions' => $actions,
                                                                  'element' => $element, 'eid' => $eid, 'itemtype' => $object->itemtype));
                 }
             }
 
-            $html .= '</tr>';
-        }
-
-
-        if ($root) {
-            $html .= "</table>\n";
+            $returnrows[] = $gradeitemrow;
         }
 
-        return $html;
+        return $returnrows;
 
     }
 
@@ -306,8 +349,11 @@ class grade_edit_tree {
      * @return string HTML
      */
     function get_weight_input($item, $type) {
+        global $OUTPUT;
+
         if (!is_object($item) || get_class($item) !== 'grade_item') {
-            error('grade_edit_tree::get_weight_input($item) was given a variable that is not of the required type (grade_item object)');
+            throw new Exception('grade_edit_tree::get_weight_input($item) was given a variable that is not of the required type (grade_item object)');
+            return false;
         }
 
         if ($item->is_course_item()) {
@@ -319,9 +365,9 @@ class grade_edit_tree {
         $aggcoef = $item->get_coefstring();
 
         if ((($aggcoef == 'aggregationcoefweight' || $aggcoef == 'aggregationcoef') && $type == 'weight') ||
-            ($aggcoef == 'aggregationcoefextra' && $type == 'extra')) {
+            ($aggcoef == 'aggregationcoefextraweight' && $type == 'extra')) {
             return '<input type="text" size="6" id="aggregationcoef_'.$item->id.'" name="aggregationcoef_'.$item->id.'"
-                value="'.format_float($item->aggregationcoef, 4).'" />';
+                value="'.grade_edit_tree::format_number($item->aggregationcoef).'" />';
         } elseif ($aggcoef == 'aggregationcoefextrasum' && $type == 'extra') {
             $checked = ($item->aggregationcoef > 0) ? 'checked="checked"' : '';
             return '<input type="hidden" name="extracredit_'.$item->id.'" value="0" />
@@ -331,6 +377,17 @@ class grade_edit_tree {
         }
     }
 
+    //Trims trailing zeros
+    //Used on the 'categories and items' page for grade items settings like aggregation co-efficient
+    //Grader report has its own decimal place settings so they are handled elsewhere
+    function format_number($number) {
+        $formatted = rtrim(format_float($number, 4),'0');
+        if (substr($formatted, -1)=='.') { //if last char is the decimal point
+            $formatted .= '0';
+        }
+        return $formatted;
+    }
+
     /**
      * Given an element of the grade tree, returns whether it is deletable or not (only manual grade items are deletable)
      *
@@ -414,7 +471,7 @@ class grade_edit_tree {
         if ($element['type'] == 'category') {
             if ($coefstring == 'aggregationcoefweight') {
                 $this->uses_weight = true;
-            } elseif ($coefstring ==  'aggregationcoefextra' || $coefstring == 'aggregationcoefextrasum') {
+            } elseif ($coefstring ==  'aggregationcoefextraweight' || $coefstring == 'aggregationcoefextrasum') {
                 $this->uses_extra_credit = true;
             }
 
@@ -430,41 +487,73 @@ class grade_edit_tree {
     }
 }
 
-class grade_edit_tree_column {
-    var $forced;
-    var $hidden;
-    var $forced_hidden;
-    var $advanced_hidden;
-    var $hide_when_moving = true;
+abstract class grade_edit_tree_column {
+    public $forced;
+    public $hidden;
+    public $forced_hidden;
+    public $advanced_hidden;
+    public $hide_when_moving = true;
+    /**
+     * html_table_cell object used as a template for header cells in all categories.
+     * It must be cloned before being used.
+     * @var html_table_cell $headercell
+     */
+    public $headercell;
+    /**
+     * html_table_cell object used as a template for category cells in all categories.
+     * It must be cloned before being used.
+     * @var html_table_cell $categorycell
+     */
+    public $categorycell;
+    /**
+     * html_table_cell object used as a template for item cells in all categories.
+     * It must be cloned before being used.
+     * @var html_table_cell $itemcell
+     */
+    public $itemcell;
 
-    function factory($name, $params=array()) {
+    public static function factory($name, $params=array()) {
         $class_name = "grade_edit_tree_column_$name";
         if (class_exists($class_name)) {
             return new $class_name($params);
         }
     }
 
-    function get_header_cell() {}
+    public abstract function get_header_cell();
+
+    public abstract function get_category_cell($category, $levelclass, $params);
+
+    public abstract function get_item_cell($item, $params);
+
+    public abstract function is_hidden($mode='simple');
 
-    function get_category_cell($category, $levelclass, $params) {}
+    public function __construct() {
+        $this->headercell = new html_table_cell();
+        $this->headercell->header = true;
+        $this->headercell->style = 'whitespace: normal;';
+        $this->headercell->attributes['class'] = 'header';
 
-    function get_item_cell($item, $params) {}
+        $this->categorycell = new html_table_cell();
+        $this->categorycell->attributes['class']  = 'cell';
 
-    function is_hidden($mode='simple') {}
+        $this->itemcell = new html_table_cell();
+        $this->itemcell->attributes['class'] = 'cell';
+    }
 }
 
-class grade_edit_tree_column_category extends grade_edit_tree_column {
+abstract class grade_edit_tree_column_category extends grade_edit_tree_column {
 
-    var $forced;
-    var $advanced;
+    public $forced;
+    public $advanced;
 
-    function grade_edit_tree_column_category($name) {
+    public function __construct($name) {
         global $CFG;
         $this->forced = (int)$CFG->{"grade_$name"."_flag"} & 1;
         $this->advanced = (int)$CFG->{"grade_$name"."_flag"} & 2;
+        parent::__construct();
     }
 
-    function is_hidden($mode='simple') {
+    public function is_hidden($mode='simple') {
         global $CFG;
         if ($mode == 'simple') {
             return $this->advanced;
@@ -479,64 +568,80 @@ class grade_edit_tree_column_category extends grade_edit_tree_column {
 }
 
 class grade_edit_tree_column_name extends grade_edit_tree_column {
-    var $forced = false;
-    var $hidden = false;
-    var $forced_hidden = false;
-    var $advanced_hidden = false;
-    var $deepest_level = 1;
-    var $hide_when_moving = false;
-
-    function grade_edit_tree_column_name($params) {
+    public $forced = false;
+    public $hidden = false;
+    public $forced_hidden = false;
+    public $advanced_hidden = false;
+    public $deepest_level = 1;
+    public $hide_when_moving = false;
+
+    public function __construct($params) {
         if (empty($params['deepest_level'])) {
-            error('Tried to instantiate a grade_edit_tree_column_name object without the "deepest_level" param!');
+            throw new Exception('Tried to instantiate a grade_edit_tree_column_name object without the "deepest_level" param!');
         }
 
         $this->deepest_level = $params['deepest_level'];
+        parent::__construct();
     }
 
-    function get_header_cell() {
-        return '<th class="header name" colspan="'.($this->deepest_level + 1).'" scope="col">'.get_string('name').'</th>';
+    public function get_header_cell() {
+        $headercell = clone($this->headercell);
+        $headercell->attributes['class'] .= ' name';
+        $headercell->colspan = $this->deepest_level + 1;
+        $headercell->text = get_string('name');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
+    public function get_category_cell($category, $levelclass, $params) {
+        global $OUTPUT;
         if (empty($params['name']) || empty($params['level'])) {
-            error('Array key (name or level) missing from 3rd param of grade_edit_tree_column_name::get_category_cell($category, $levelclass, $params)');
+            throw new Exception('Array key (name or level) missing from 3rd param of grade_edit_tree_column_name::get_category_cell($category, $levelclass, $params)');
         }
-
-        return '<td class="cell name '.$levelclass.'" colspan="'.(($this->deepest_level +1) - $params['level']).'"><h4>' . $params['name'] . "</h4></td>\n";
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class'] .= ' name ' . $levelclass;
+        $categorycell->colspan = ($this->deepest_level +1) - $params['level'];
+        $categorycell->text = $OUTPUT->heading($params['name'], 4);
+        return $categorycell;
     }
 
-    function get_item_cell($item, $params) {
+    public function get_item_cell($item, $params) {
         global $CFG;
 
         if (empty($params['element']) || empty($params['name']) || empty($params['level'])) {
-            error('Array key (name, level or element) missing from 2nd param of grade_edit_tree_column_name::get_item_cell($item, $params)');
+            throw new Exception('Array key (name, level or element) missing from 2nd param of grade_edit_tree_column_name::get_item_cell($item, $params)');
         }
 
         $name = $params['name'];
 
-        return '<td class="cell name" colspan="'.(($this->deepest_level + 1) - $params['level']).'">' . $name . '</td>';
+        $itemcell = clone($this->itemcell);
+        $itemcell->attributes['class'] .= ' name';
+        $itemcell->colspan = ($this->deepest_level + 1) - $params['level'];
+        $itemcell->text = $name;
+        return $itemcell;
     }
 
-    function is_hidden($mode='simple') {
+    public function is_hidden($mode='simple') {
         return false;
     }
 }
 
 class grade_edit_tree_column_aggregation extends grade_edit_tree_column_category {
 
-    function grade_edit_tree_column_aggregation($params) {
-        parent::grade_edit_tree_column_category('aggregation');
+    public function __construct($params) {
+        parent::__construct('aggregation');
     }
 
-    function get_header_cell() {
-        return '<th class="header" scope="col">'.get_string('aggregation', 'grades').helpbutton('aggregation', 'aggregation', 'grade', true, false, '', true).'</th>';
+    public function get_header_cell() {
+        global $OUTPUT;
+        $headercell = clone($this->headercell);
+        $headercell->text = get_string('aggregation', 'grades').$OUTPUT->help_icon('aggregation', 'grades');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
-        global $CFG;
+    public function get_category_cell($category, $levelclass, $params) {
+        global $CFG, $OUTPUT;
         if (empty($params['id'])) {
-            error('Array key (id) missing from 3rd param of grade_edit_tree_column_aggregation::get_category_cell($category, $levelclass, $params)');
+            throw new Exception('Array key (id) missing from 3rd param of grade_edit_tree_column_aggregation::get_category_cell($category, $levelclass, $params)');
         }
 
         $options = array(GRADE_AGGREGATE_MEAN             => get_string('aggregatemean', 'grades'),
@@ -556,50 +661,63 @@ class grade_edit_tree_column_aggregation extends grade_edit_tree_column_category
             }
         }
 
-        $script = "window.location='index.php?id={$params['id']}&amp;category={$category->id}&amp;aggregationtype='+this.value+'&amp;sesskey=" . sesskey()."';";
-        $aggregation = choose_from_menu($options, 'aggregation_'.$category->id, $category->aggregation, null, $script, 0, true);
-
         if ($this->forced) {
             $aggregation = $options[$category->aggregation];
+        } else {
+            $attributes = array();
+            $attributes['id'] = 'aggregation_'.$category->id;
+            $aggregation = html_writer::select($options, 'aggregation_'.$category->id, $category->aggregation, null, $attributes);
+            $action = new component_action('change', 'update_category_aggregation', array('courseid' => $params['id'], 'category' => $category->id, 'sesskey' => sesskey()));
+            $OUTPUT->add_action_handler($action, 'aggregation_'.$category->id);
         }
 
-        return '<td class="cell '.$levelclass.'">' . $aggregation . '</td>';
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class'] .= ' ' . $levelclass;
+        $categorycell->text = $aggregation;
+        return $categorycell;
 
     }
 
-    function get_item_cell($item, $params) {
-          return '<td class="cell"> - </td>';
+    public function get_item_cell($item, $params) {
+        $itemcell = clone($this->itemcell);
+        $itemcell->text = ' - ';
+        return $itemcell;
     }
 }
 
 class grade_edit_tree_column_extracredit extends grade_edit_tree_column {
 
-    function get_header_cell() {
-        return '<th class="header" scope="col">'.get_string('extracredit', 'grades').helpbutton('aggregationcoefcombo', 'aggregationcoefcombo', 'grade', true, false, '', true).'</th>';
+    public function get_header_cell() {
+        global $OUTPUT;
+        $headercell = clone($this->headercell);
+        $headercell->text = get_string('aggregationcoefextra', 'grades').$OUTPUT->help_icon('aggregationcoefextra', 'grades');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
-
+    public function get_category_cell($category, $levelclass, $params) {
         $item = $category->get_grade_item();
-        $aggcoef_input = grade_edit_tree::get_weight_input($item, 'extra');
-        return '<td class="cell '.$levelclass.'">' . $aggcoef_input . '</td>';
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class'] .= ' ' . $levelclass;
+        $categorycell->text = grade_edit_tree::get_weight_input($item, 'extra');
+        return $categorycell;
     }
 
-    function get_item_cell($item, $params) {
+    public function get_item_cell($item, $params) {
         if (empty($params['element'])) {
-            error('Array key (element) missing from 2nd param of grade_edit_tree_column_weightorextracredit::get_item_cell($item, $params)');
+            throw new Exception('Array key (element) missing from 2nd param of grade_edit_tree_column_weightorextracredit::get_item_cell($item, $params)');
         }
 
-        $html = '<td class="cell">';
+        $itemcell = clone($this->itemcell);
+        $itemcell->text = '&nbsp;';
 
         if (!in_array($params['element']['object']->itemtype, array('courseitem', 'categoryitem', 'category'))) {
-            $html .= grade_edit_tree::get_weight_input($item, 'extra');
+            $itemcell->text = grade_edit_tree::get_weight_input($item, 'extra');
         }
 
-        return $html.'</td>';
+        return $itemcell;
     }
 
-    function is_hidden($mode='simple') {
+    public function is_hidden($mode='simple') {
         global $CFG;
         if ($mode == 'simple') {
             return strstr($CFG->grade_item_advanced, 'aggregationcoef');
@@ -611,32 +729,37 @@ class grade_edit_tree_column_extracredit extends grade_edit_tree_column {
 
 class grade_edit_tree_column_weight extends grade_edit_tree_column {
 
-    function get_header_cell() {
-        return '<th class="header" scope="col">'.get_string('weightuc', 'grades').helpbutton('aggregationcoefweight', 'aggregationcoefweight', 'grade', true, false, '', true).'</th>';
+    public function get_header_cell() {
+        global $OUTPUT;
+        $headercell = clone($this->headercell);
+        $headercell->text = get_string('weightuc', 'grades').$OUTPUT->help_icon('aggregationcoefweight', 'grades');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
+    public function get_category_cell($category, $levelclass, $params) {
 
         $item = $category->get_grade_item();
-        $aggcoef_input = grade_edit_tree::get_weight_input($item, 'weight');
-        return '<td class="cell '.$levelclass.'">' . $aggcoef_input . '</td>';
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class']  .= ' ' . $levelclass;
+        $categorycell->text = grade_edit_tree::get_weight_input($item, 'weight');
+        return $categorycell;
     }
 
-    function get_item_cell($item, $params) {
+    public function get_item_cell($item, $params) {
         if (empty($params['element'])) {
-            error('Array key (element) missing from 2nd param of grade_edit_tree_column_weightorextracredit::get_item_cell($item, $params)');
+            throw new Exception('Array key (element) missing from 2nd param of grade_edit_tree_column_weightorextracredit::get_item_cell($item, $params)');
         }
-
-        $html = '<td class="cell">';
+        $itemcell = clone($this->itemcell);
+        $itemcell->text = '&nbsp;';
 
         if (!in_array($params['element']['object']->itemtype, array('courseitem', 'categoryitem', 'category'))) {
-            $html .= grade_edit_tree::get_weight_input($item, 'weight');
+            $itemcell->text = grade_edit_tree::get_weight_input($item, 'weight');
         }
 
-        return $html.'</td>';
+        return $itemcell;
     }
 
-    function is_hidden($mode='simple') {
+    public function is_hidden($mode='simple') {
         global $CFG;
         if ($mode == 'simple') {
             return strstr($CFG->grade_item_advanced, 'aggregationcoef');
@@ -648,22 +771,28 @@ class grade_edit_tree_column_weight extends grade_edit_tree_column {
 
 class grade_edit_tree_column_range extends grade_edit_tree_column {
 
-    function get_header_cell() {
-        return '<th class="header" scope="col">'.get_string('maxgrade', 'grades').'</th>';
+    public function get_header_cell() {
+        $headercell = clone($this->headercell);
+        $headercell->text = get_string('maxgrade', 'grades');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
-        return '<td class="cell range '.$levelclass.'"> - </td>';
+    public function get_category_cell($category, $levelclass, $params) {
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class'] .= ' range ' . $levelclass;
+        $categorycell->text = ' - ';
+        return $categorycell;
     }
 
-    function get_item_cell($item, $params) {
+    public function get_item_cell($item, $params) {
+        global $DB, $OUTPUT;
 
         // If the parent aggregation is Sum of Grades, this cannot be changed
         $parent_cat = $item->get_parent_category();
         if ($parent_cat->aggregation == GRADE_AGGREGATE_SUM) {
             $grademax = format_float($item->grademax, $item->get_decimals());
         } elseif ($item->gradetype == GRADE_TYPE_SCALE) {
-            $scale = get_record('scale', 'id', $item->scaleid);
+            $scale = $DB->get_record('scale', array('id' => $item->scaleid));
             $scale_items = null;
             if (empty($scale)) { //if the item is using a scale that's been removed
                 $scale_items = array();
@@ -674,13 +803,15 @@ class grade_edit_tree_column_range extends grade_edit_tree_column {
         } elseif ($item->is_external_item()) {
             $grademax = format_float($item->grademax, $item->get_decimals());
         } else {
-            $grademax = '<input type="text" size="4" id="grademax'.$item->id.'" name="grademax_'.$item->id.'" value="'.format_float($item->grademax, $item->get_decimals()).'" />';
+            $grademax = '<input type="text" size="6" id="grademax'.$item->id.'" name="grademax_'.$item->id.'" value="'.format_float($item->grademax, $item->get_decimals()).'" />';
         }
 
-        return '<td class="cell">'.$grademax.'</td>';
+        $itemcell = clone($this->itemcell);
+        $itemcell->text = $grademax;
+        return $itemcell;
     }
 
-    function is_hidden($mode='simple') {
+    public function is_hidden($mode='simple') {
         global $CFG;
         if ($mode == 'simple') {
             return strstr($CFG->grade_item_advanced, 'grademax');
@@ -692,16 +823,20 @@ class grade_edit_tree_column_range extends grade_edit_tree_column {
 
 class grade_edit_tree_column_aggregateonlygraded extends grade_edit_tree_column_category {
 
-    function grade_edit_tree_column_aggregateonlygraded($params) {
-        parent::grade_edit_tree_column_category('aggregateonlygraded');
+    public function __construct($params) {
+        parent::__construct('aggregateonlygraded');
     }
 
-    function get_header_cell() {
-        return '<th class="header" style="width: 40px" scope="col">'.get_string('aggregateonlygraded', 'grades')
-              .helpbutton('aggregateonlygraded', 'aggregateonlygraded', 'grade', true, false, '', true).'</th>';
+    public function get_header_cell() {
+        global $OUTPUT;
+        $headercell = clone($this->headercell);
+        $headercell->style .= 'width: 40px;';
+        $headercell->text = get_string('aggregateonlygraded', 'grades')
+                . $OUTPUT->help_icon('aggregateonlygraded', 'grades');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
+    public function get_category_cell($category, $levelclass, $params) {
         $onlygradedcheck = ($category->aggregateonlygraded == 1) ? 'checked="checked"' : '';
         $hidden = '<input type="hidden" name="aggregateonlygraded_'.$category->id.'" value="0" />';
         $aggregateonlygraded ='<input type="checkbox" id="aggregateonlygraded_'.$category->id.'" name="aggregateonlygraded_'.$category->id.'" value="1" '.$onlygradedcheck . ' />';
@@ -710,26 +845,35 @@ class grade_edit_tree_column_aggregateonlygraded extends grade_edit_tree_column_
             $aggregateonlygraded = ($category->aggregateonlygraded) ? get_string('yes') : get_string('no');
         }
 
-        return '<td class="cell '.$levelclass.'">'.$hidden.$aggregateonlygraded.'</td>';
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class'] .= ' ' . $levelclass;
+        $categorycell->text = $hidden.$aggregateonlygraded;
+        return $categorycell;
     }
 
-    function get_item_cell($item, $params) {
-        return '<td class="cell"> - </td>';
+    public function get_item_cell($item, $params) {
+        $itemcell = clone($this->itemcell);
+        $itemcell->text = ' - ';
+        return $itemcell;
     }
 }
 
 class grade_edit_tree_column_aggregatesubcats extends grade_edit_tree_column_category {
 
-    function grade_edit_tree_column_aggregatesubcats($params) {
-        parent::grade_edit_tree_column_category('aggregatesubcats');
+    public function __construct($params) {
+        parent::__construct('aggregatesubcats');
     }
 
-    function get_header_cell() {
-        return '<th class="header" style="width: 40px" scope="col">'.get_string('aggregatesubcats', 'grades')
-              .helpbutton('aggregatesubcats', 'aggregatesubcats', 'grade', true, false, '', true).'</th>';
+    public function get_header_cell() {
+        global $OUTPUT;
+        $headercell = clone($this->headercell);
+        $headercell->style .= 'width: 40px;';
+        $headercell->text = get_string('aggregatesubcats', 'grades')
+              .$OUTPUT->help_icon('aggregatesubcats', 'grades');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
+    public function get_category_cell($category, $levelclass, $params) {
         $subcatscheck = ($category->aggregatesubcats == 1) ? 'checked="checked"' : '';
         $hidden = '<input type="hidden" name="aggregatesubcats_'.$category->id.'" value="0" />';
         $aggregatesubcats = '<input type="checkbox" id="aggregatesubcats_'.$category->id.'" name="aggregatesubcats_'.$category->id.'" value="1" ' . $subcatscheck.' />';
@@ -738,28 +882,36 @@ class grade_edit_tree_column_aggregatesubcats extends grade_edit_tree_column_cat
             $aggregatesubcats = ($category->aggregatesubcats) ? get_string('yes') : get_string('no');
         }
 
-        return '<td class="cell '.$levelclass.'">'.$hidden.$aggregatesubcats.'</td>';
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class'] .= ' ' . $levelclass;
+        $categorycell->text = $hidden.$aggregatesubcats;
+        return $categorycell;
 
     }
 
-    function get_item_cell($item, $params) {
-        return '<td class="cell"> - </td>';
+    public function get_item_cell($item, $params) {
+        $itemcell = clone($this->itemcell);
+        $itemcell->text = ' - ';
+        return $itemcell;
     }
 }
 
 class grade_edit_tree_column_aggregateoutcomes extends grade_edit_tree_column_category {
 
-    function grade_edit_tree_column_aggregateoutcomes($params) {
-        parent::grade_edit_tree_column_category('aggregateoutcomes');
+    public function __construct($params) {
+        parent::__construct('aggregateoutcomes');
     }
 
-    function get_header_cell() {
-        return '<th class="header" style="width: 40px" scope="col">'.get_string('aggregateoutcomes', 'grades')
-              .helpbutton('aggregateoutcomes', 'aggregateoutcomes', 'grade', true, false, '', true).'</th>';
+    public function get_header_cell() {
+        global $OUTPUT;
+        $headercell = clone($this->headercell);
+        $headercell->style .= 'width: 40px;';
+        $headercell->text = get_string('aggregateoutcomes', 'grades')
+              .$OUTPUT->help_icon('aggregateoutcomes', 'grades');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
-
+    public function get_category_cell($category, $levelclass, $params) {
         $outcomescheck = ($category->aggregateoutcomes == 1) ? 'checked="checked"' : '';
         $hidden = '<input type="hidden" name="aggregateoutcomes_'.$category->id.'" value="0" />';
         $aggregateoutcomes = '<input type="checkbox" id="aggregateoutcomes_'.$category->id.'" name="aggregateoutcomes_'.$category->id.'" value="1" ' . $outcomescheck.' />';
@@ -768,14 +920,19 @@ class grade_edit_tree_column_aggregateoutcomes extends grade_edit_tree_column_ca
             $aggregateoutcomes = ($category->aggregateoutcomes) ? get_string('yes') : get_string('no');
         }
 
-        return '<td class="cell '.$levelclass.'">'.$hidden.$aggregateoutcomes.'</td>';
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class'] .= ' ' . $levelclass;
+        $categorycell->text = $hidden.$aggregateoutcomes;
+        return $categorycell;
     }
 
-    function get_item_cell($item, $params) {
-        return '<td class="cell"> - </td>';
+    public function get_item_cell($item, $params) {
+        $itemcell = clone($this->itemcell);
+        $itemcell->text = ' - ';
+        return $itemcell;
     }
 
-    function is_hidden($mode='simple') {
+    public function is_hidden($mode='simple') {
         global $CFG;
         if ($CFG->enableoutcomes) {
             return parent::is_hidden($mode);
@@ -787,78 +944,106 @@ class grade_edit_tree_column_aggregateoutcomes extends grade_edit_tree_column_ca
 
 class grade_edit_tree_column_droplow extends grade_edit_tree_column_category {
 
-    function grade_edit_tree_column_droplow($params) {
-        parent::grade_edit_tree_column_category('droplow');
+    public function __construct($params) {
+        parent::__construct('droplow');
     }
 
-    function get_header_cell() {
-        return '<th class="header" scope="col">'.get_string('droplow', 'grades').helpbutton('droplow', 'droplow', 'grade', true, false, '', true).'</th>';
+    public function get_header_cell() {
+        global $OUTPUT;
+        $headercell = clone($this->headercell);
+        $headercell->text = get_string('droplow', 'grades').$OUTPUT->help_icon('droplow', 'grades');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
+    public function get_category_cell($category, $levelclass, $params) {
         $droplow = '<input type="text" size="3" id="droplow_'.$category->id.'" name="droplow_'.$category->id.'" value="'.$category->droplow.'" />';
 
         if ($this->forced) {
             $droplow = $category->droplow;
         }
 
-        return '<td class="cell '.$levelclass.'">' . $droplow . '</td>';
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class']  .= ' ' . $levelclass;
+        $categorycell->text = $droplow;
+        return $categorycell;
     }
 
-    function get_item_cell($item, $params) {
-        return '<td class="cell"> - </td>';
+    public function get_item_cell($item, $params) {
+        $itemcell = clone($this->itemcell);
+        $itemcell->text = ' - ';
+        return $itemcell;
     }
 }
 
 class grade_edit_tree_column_keephigh extends grade_edit_tree_column_category {
 
-    function grade_edit_tree_column_keephigh($params) {
-        parent::grade_edit_tree_column_category('keephigh');
+    public function __construct($params) {
+        parent::__construct('keephigh');
     }
 
-    function get_header_cell() {
-        return '<th class="header" scope="col">'.get_string('keephigh', 'grades').helpbutton('keephigh', 'keephigh', 'grade', true, false, '', true).'</th>';
+    public function get_header_cell() {
+        global $OUTPUT;
+        $headercell = clone($this->headercell);
+        $headercell->text = get_string('keephigh', 'grades').$OUTPUT->help_icon('keephigh', 'grades');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
+    public function get_category_cell($category, $levelclass, $params) {
         $keephigh = '<input type="text" size="3" id="keephigh_'.$category->id.'" name="keephigh_'.$category->id.'" value="'.$category->keephigh.'" />';
 
         if ($this->forced) {
             $keephigh = $category->keephigh;
         }
 
-        return '<td class="cell '.$levelclass.'">' . $keephigh . '</td>';
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class'] .= ' ' . $levelclass;
+        $categorycell->text = $keephigh;
+        return $categorycell;
     }
 
-    function get_item_cell($item, $params) {
-        return '<td class="cell"> - </td>';
+    public function get_item_cell($item, $params) {
+        $itemcell = clone($this->itemcell);
+        $itemcell->text = ' - ';
+        return $itemcell;
     }
 }
 
 class grade_edit_tree_column_multfactor extends grade_edit_tree_column {
 
-    function grade_edit_tree_column_multfactor($params) {
-
+    public function __construct($params) {
+        parent::__construct();
     }
 
-    function get_header_cell() {
-        return '<th class="header" scope="col">'.get_string('multfactor', 'grades').helpbutton('multfactor', 'multfactor', 'grade', true, false, '', true).'</th>';
+    public function get_header_cell() {
+        global $OUTPUT;
+        $headercell = clone($this->headercell);
+        $headercell->text = get_string('multfactor', 'grades').$OUTPUT->help_icon('multfactor', 'grades');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
-
-        return '<td class="cell '.$levelclass.'"> - </td>';
+    public function get_category_cell($category, $levelclass, $params) {
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class'] .= ' ' . $levelclass;
+        $categorycell->text = ' - ';
+        return $categorycell;
     }
 
-    function get_item_cell($item, $params) {
+    public function get_item_cell($item, $params) {
+        global $OUTPUT;
+
+        $itemcell = clone($this->itemcell);
         if (!$item->is_raw_used()) {
-            return '<td class="cell">&nbsp;</td>';
+            $itemcell->text = '&nbsp;';
+            return $itemcell;
         }
-        $multfactor = '<input type="text" size="4" id="multfactor'.$item->id.'" name="multfactor_'.$item->id.'" value="'.format_float($item->multfactor, 4).'" />';
-        return '<td class="cell">'.$multfactor.'</td>';
+
+        $multfactor = '<input type="text" size="4" id="multfactor'.$item->id.'" name="multfactor_'.$item->id.'" value="'.grade_edit_tree::format_number($item->multfactor).'" />';
+
+        $itemcell->text = $multfactor;
+        return $itemcell;
     }
 
-    function is_hidden($mode='simple') {
+    public function is_hidden($mode='simple') {
         global $CFG;
         if ($mode == 'simple') {
             return strstr($CFG->grade_item_advanced, 'multfactor');
@@ -870,25 +1055,38 @@ class grade_edit_tree_column_multfactor extends grade_edit_tree_column {
 
 class grade_edit_tree_column_plusfactor extends grade_edit_tree_column {
 
-    function get_header_cell() {
-        return '<th class="header" scope="col">'.get_string('plusfactor', 'grades').helpbutton('plusfactor', 'plusfactor', 'grade', true, false, '', true).'</th>';
+    public function get_header_cell() {
+        global $OUTPUT;
+        $headercell = clone($this->headercell);
+        $headercell->text = get_string('plusfactor', 'grades').$OUTPUT->help_icon('plusfactor', 'grades');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
-        return '<td class="cell '.$levelclass.'"> - </td>';
+    public function get_category_cell($category, $levelclass, $params) {
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class'] .= ' ' . $levelclass;
+        $categorycell->text = ' - ';
+        return $categorycell;
 
     }
 
-    function get_item_cell($item, $params) {
+    public function get_item_cell($item, $params) {
+        global $OUTPUT;
+
+        $itemcell = clone($this->itemcell);
         if (!$item->is_raw_used()) {
-            return '<td class="cell">&nbsp;</td>';
+            $itemcell->text = '&nbsp;';
+            return $itemcell;
         }
-        $plusfactor = '<input type="text" size="4" id="plusfactor_'.$item->id.'" name="plusfactor_'.$item->id.'" value="'.format_float($item->plusfactor, 4).'" />';
-        return '<td class="cell">'.$plusfactor.'</td>';
+
+        $plusfactor = '<input type="text" size="4" id="plusfactor_'.$item->id.'" name="plusfactor_'.$item->id.'" value="'.grade_edit_tree::format_number($item->plusfactor).'" />';
+
+        $itemcell->text = $plusfactor;
+        return $itemcell;
 
     }
 
-    function is_hidden($mode='simple') {
+    public function is_hidden($mode='simple') {
         global $CFG;
         if ($mode == 'simple') {
             return strstr($CFG->grade_item_advanced, 'plusfactor');
@@ -900,67 +1098,83 @@ class grade_edit_tree_column_plusfactor extends grade_edit_tree_column {
 
 class grade_edit_tree_column_actions extends grade_edit_tree_column {
 
-    function grade_edit_tree_column_actions($params) {
-
+    public function __construct($params) {
+        parent::__construct();
     }
 
-    function get_header_cell() {
-        return '<th class="header actions" scope="col">'.get_string('actions').'</th>';
+    public function get_header_cell() {
+        $headercell = clone($this->headercell);
+        $headercell->attributes['class'] .= ' actions';
+        $headercell->text = get_string('actions');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
+    public function get_category_cell($category, $levelclass, $params) {
 
         if (empty($params['actions'])) {
-            error('Array key (actions) missing from 3rd param of grade_edit_tree_column_actions::get_category_actions($category, $levelclass, $params)');
+            throw new Exception('Array key (actions) missing from 3rd param of grade_edit_tree_column_actions::get_category_actions($category, $levelclass, $params)');
         }
 
-        return '<td class="cell actions '.$levelclass.'">' . $params['actions'] . '</td>';
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class'] .= ' ' . $levelclass;
+        $categorycell->text = $params['actions'];
+        return $categorycell;
     }
 
-    function get_item_cell($item, $params) {
+    public function get_item_cell($item, $params) {
         if (empty($params['actions'])) {
-            error('Array key (actions) missing from 2nd param of grade_edit_tree_column_actions::get_item_cell($item, $params)');
+            throw new Exception('Array key (actions) missing from 2nd param of grade_edit_tree_column_actions::get_item_cell($item, $params)');
         }
-        return '<td class="cell actions">' . $params['actions'] . '</td>';
+        $itemcell = clone($this->itemcell);
+        $itemcell->attributes['class'] .= ' actions';
+        $itemcell->text = $params['actions'];
+        return $itemcell;
     }
 
-    function is_hidden($mode='simple') {
+    public function is_hidden($mode='simple') {
         return false;
     }
 }
 
 class grade_edit_tree_column_select extends grade_edit_tree_column {
 
-    function get_header_cell() {
-        return '<th class="header selection" scope="col">'.get_string('select').'</th>';
+    public function get_header_cell() {
+        $headercell = clone($this->headercell);
+        $headercell->attributes['class'] .= ' selection';
+        $headercell->text = get_string('select');
+        return $headercell;
     }
 
-    function get_category_cell($category, $levelclass, $params) {
-
+    public function get_category_cell($category, $levelclass, $params) {
+        global $OUTPUT;
         if (empty($params['eid'])) {
-            error('Array key (eid) missing from 3rd param of grade_edit_tree_column_select::get_category_cell($category, $levelclass, $params)');
+            throw new Exception('Array key (eid) missing from 3rd param of grade_edit_tree_column_select::get_category_cell($category, $levelclass, $params)');
         }
+        $selectall  = new action_link(new moodle_url('#'), get_string('all'), new component_action('click', 'togglecheckboxes', array('eid' => $params['eid'], 'check' => true)));
+        $selectnone = new action_link(new moodle_url('#'), get_string('none'), new component_action('click', 'togglecheckboxes', array('eid' => $params['eid'], 'check' => false)));
 
-        return '<td class="cell last  '.$levelclass.'" style="text-align: center">
-                    <span class="actionlink" onclick="togglecheckboxes(\''.$params['eid'].'\', true);">'.get_string('all').'</span><br />
-                    <span class="actionlink" onclick="togglecheckboxes(\''.$params['eid'].'\', false);">'.get_string('none').'</span>
-                </td>';
+        $categorycell = clone($this->categorycell);
+        $categorycell->attributes['class'] .= ' last ' . $levelclass;
+        $categorycell->style .= 'text-align: center;';
+        $categorycell->text = $OUTPUT->render($selectall) . '<br />' . $OUTPUT->render($selectnone);
+        return $categorycell;
     }
 
-    function get_item_cell($item, $params) {
+    public function get_item_cell($item, $params) {
         if (empty($params['itemtype']) || empty($params['eid'])) {
             error('Array key (itemtype or eid) missing from 2nd param of grade_edit_tree_column_select::get_item_cell($item, $params)');
         }
         $itemselect = '';
 
         if ($params['itemtype'] != 'course' && $params['itemtype'] != 'category') {
-            $itemselect = '<input class="itemselect" type="checkbox" name="select_'.$params['eid'].'" onchange="toggleCategorySelector();"/>';
+            $itemselect = '<input class="itemselect" type="checkbox" name="select_'.$params['eid'].'" onchange="toggleCategorySelector();"/>'; // TODO: convert to YUI handler
         }
-        return '<td class="cell last selection">' . $itemselect . '</td>';
+        //html_writer::table() will wrap the item cell contents in a <TD> so don't do it here
+        return $itemselect;
     }
 
-    function is_hidden($mode='simple') {
+    public function is_hidden($mode='simple') {
         return false;
     }
 }
-?>
+
