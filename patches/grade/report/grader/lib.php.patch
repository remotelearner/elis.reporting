diff --git a/grade/report/grader/lib.php b/grade/report/grader/lib.php
index d5fa065..5dcd81f 100644
--- a/grade/report/grader/lib.php
+++ b/grade/report/grader/lib.php
@@ -33,13 +33,13 @@ class grade_report_grader extends grade_report {
      * The final grades.
      * @var array $grades
      */
-    var $grades;
+    public $grades;
 
     /**
      * Array of errors for bulk grades updating.
      * @var array $gradeserror
      */
-    var $gradeserror = array();
+    public $gradeserror = array();
 
 //// SQL-RELATED
 
@@ -47,42 +47,51 @@ class grade_report_grader extends grade_report {
      * The id of the grade_item by which this report will be sorted.
      * @var int $sortitemid
      */
-    var $sortitemid;
+    public $sortitemid;
 
     /**
      * Sortorder used in the SQL selections.
      * @var int $sortorder
      */
-    var $sortorder;
+    public $sortorder;
 
     /**
      * An SQL fragment affecting the search for users.
      * @var string $userselect
      */
-    var $userselect;
+    public $userselect;
+
+    /**
+     * The bound params for $userselect
+     * @var array $userselectparams
+     */
+    public $userselectparams = array();
 
     /**
      * List of collapsed categories from user preference
      * @var array $collapsed
      */
-    var $collapsed;
+    public $collapsed;
 
     /**
      * A count of the rows, used for css classes.
      * @var int $rowcount
      */
-    var $rowcount = 0;
+    public $rowcount = 0;
 
     /**
      * Capability check caching
      * */
-    var $canviewhidden;
+    public $canviewhidden;
 
-    /** @var boolean, whether the current user is allowed to see the user report.
-     * This affects the table layout. */
-    var $canviewuserreport;
+    var $preferencespage=false;
 
-    var $preferences_page=false;
+    /**
+     * Length at which feedback will be truncated (to the nearest word) and an ellipsis be added.
+     * TODO replace this by a report preference
+     * @var int $feedback_trunc_length
+     */
+    protected $feedback_trunc_length = 50;
 
     /**
      * Constructor. Sets local copies of user preferences and initialises grade_tree.
@@ -92,12 +101,11 @@ class grade_report_grader extends grade_report {
      * @param int $page The current page being viewed (when report is paged)
      * @param int $sortitemid The id of the grade_item by which to sort the table
      */
-    function grade_report_grader($courseid, $gpr, $context, $page=null, $sortitemid=null) {
+    public function __construct($courseid, $gpr, $context, $page=null, $sortitemid=null) {
         global $CFG;
-        parent::grade_report($courseid, $gpr, $context, $page);
+        parent::__construct($courseid, $gpr, $context, $page);
 
         $this->canviewhidden = has_capability('moodle/grade:viewhidden', get_context_instance(CONTEXT_COURSE, $this->course->id));
-        $this->canviewuserreport = has_capability('gradereport/'.$CFG->grade_profilereport.':view', $this->context);
 
         // load collapsed settings for this report
         if ($collapsed = get_user_preferences('grade_report_grader_collapsed_categories')) {
@@ -124,17 +132,15 @@ class grade_report_grader extends grade_report {
         $this->sortitemid = $sortitemid;
 
         // base url for sorting by first/last name
-        $studentsperpage = $this->get_pref('studentsperpage');
-        $perpage = '';
-        $curpage = '';
 
+        $this->baseurl = new moodle_url('index.php', array('id' => $this->courseid));
+
+        $studentsperpage = $this->get_pref('studentsperpage');
         if (!empty($studentsperpage)) {
-            $perpage = '&amp;perpage='.$studentsperpage;
-            $curpage = '&amp;page='.$this->page;
+            $this->baseurl->params(array('perpage' => $studentsperpage, 'page' => $this->page));
         }
-        $this->baseurl = 'index.php?id='.$this->courseid. $perpage.$curpage.'&amp;';
 
-        $this->pbarurl = 'index.php?id='.$this->courseid.$perpage.'&amp;';
+        $this->pbarurl = new moodle_url('/grade/report/grader/index.php', array('id' => $this->courseid, 'perpage' => $studentsperpage));
 
         $this->setup_groups();
 
@@ -143,11 +149,12 @@ class grade_report_grader extends grade_report {
 
     /**
      * Processes the data sent by the form (grades and feedbacks).
-     * Caller is reposible for all access control checks
+     * Caller is responsible for all access control checks
      * @param array $data form submission (with magic quotes)
      * @return array empty array if success, array of warnings if something fails.
      */
-    function process_data($data) {
+    public function process_data($data) {
+        global $DB;
         $warnings = array();
 
         $separategroups = false;
@@ -172,9 +179,9 @@ class grade_report_grader extends grade_report {
 
             // skip, not a grade nor feedback
             if (strpos($varname, 'grade') === 0) {
-                $data_type = 'grade';
+                $datatype = 'grade';
             } else if (strpos($varname, 'feedback') === 0) {
-                $data_type = 'feedback';
+                $datatype = 'feedback';
             } else {
                 continue;
             }
@@ -190,15 +197,15 @@ class grade_report_grader extends grade_report {
                 continue;
             }
 
-            if (!$grade_item = grade_item::fetch(array('id'=>$itemid, 'courseid'=>$this->courseid))) { // we must verify course id here!
-                error('Incorrect grade item id');
+            if (!$gradeitem = grade_item::fetch(array('id'=>$itemid, 'courseid'=>$this->courseid))) { // we must verify course id here!
+                print_error('invalidgradeitmeid');
             }
 
             // Pre-process grade
-            if ($data_type == 'grade') {
+            if ($datatype == 'grade') {
                 $feedback = false;
                 $feedbackformat = false;
-                if ($grade_item->gradetype == GRADE_TYPE_SCALE) {
+                if ($gradeitem->gradetype == GRADE_TYPE_SCALE) {
                     if ($postedvalue == -1) { // -1 means no grade
                         $finalgrade = null;
                     } else {
@@ -213,7 +220,7 @@ class grade_report_grader extends grade_report {
                 if (is_null($finalgrade)) {
                     // ok
                 } else {
-                    $bounded = $grade_item->bounded_grade($finalgrade);
+                    $bounded = $gradeitem->bounded_grade($finalgrade);
                     if ($bounded > $finalgrade) {
                         $errorstr = 'lessthanmin';
                     } else if ($bounded < $finalgrade) {
@@ -221,20 +228,20 @@ class grade_report_grader extends grade_report {
                     }
                 }
                 if ($errorstr) {
-                    $user = get_record('user', 'id', $userid, '', '', '', '', 'id, firstname, lastname');
-                    $gradestr = new object();
+                    $user = $DB->get_record('user', array('id' => $userid), 'id, firstname, lastname');
+                    $gradestr = new stdClass();
                     $gradestr->username = fullname($user);
-                    $gradestr->itemname = $grade_item->get_name();
+                    $gradestr->itemname = $gradeitem->get_name();
                     $warnings[] = get_string($errorstr, 'grades', $gradestr);
                 }
 
-            } else if ($data_type == 'feedback') {
+            } else if ($datatype == 'feedback') {
                 $finalgrade = false;
                 $trimmed = trim($postedvalue);
                 if (empty($trimmed)) {
                      $feedback = NULL;
                 } else {
-                     $feedback = stripslashes($postedvalue);
+                     $feedback = $postedvalue;
                 }
             }
 
@@ -250,13 +257,13 @@ class grade_report_grader extends grade_report {
                     }
                 }
                 if (!$sharinggroup) {
-                    // either group membership changed or somebedy is hacking grades of other group
+                    // either group membership changed or somebody is hacking grades of other group
                     $warnings[] = get_string('errorsavegrade', 'grades');
                     continue;
                 }
             }
 
-            $grade_item->update_final_grade($userid, $finalgrade, 'gradebook', $feedback, FORMAT_MOODLE);
+            $gradeitem->update_final_grade($userid, $finalgrade, 'gradebook', $feedback, FORMAT_MOODLE);
         }
 
         return $warnings;
@@ -268,7 +275,7 @@ class grade_report_grader extends grade_report {
      * all this should be in the new table class that we might need to use
      * for displaying grades.
      */
-    function setup_sortitemid() {
+    private function setup_sortitemid() {
 
         global $SESSION;
 
@@ -323,13 +330,27 @@ class grade_report_grader extends grade_report {
     /**
      * pulls out the userids of the users to be display, and sorts them
      */
-    function load_users() {
-        global $CFG;
+    public function load_users() {
+        global $CFG, $DB;
+
+        //limit to users with a gradeable role
+        list($gradebookrolessql, $gradebookrolesparams) = $DB->get_in_or_equal(explode(',', $this->gradebookroles), SQL_PARAMS_NAMED, 'grbr0');
+
+        //limit to users with an active enrollment
+        list($enrolledsql, $enrolledparams) = get_enrolled_sql($this->context);
+
+        //fields we need from the user table
+        $userfields = user_picture::fields('u', array('idnumber'));
 
+        $sortjoin = $sort = $params = null;
+
+        //if the user has clicked one of the sort asc/desc arrows
         if (is_numeric($this->sortitemid)) {
-            $sortjoin = "LEFT JOIN {$CFG->prefix}grade_grades g ON " .
-                    "g.userid = u.id AND g.itemid = $this->sortitemid";
+            $params = array_merge(array('gitemid'=>$this->sortitemid), $gradebookrolesparams, $this->groupwheresql_params, $enrolledparams);
+
+            $sortjoin = "LEFT JOIN {grade_grades} g ON g.userid = u.id AND g.itemid = $this->sortitemid";
             $sort = "g.finalgrade $this->sortorder";
+
         } else {
             $sortjoin = '';
             switch($this->sortitemid) {
@@ -344,30 +365,52 @@ class grade_report_grader extends grade_report {
                     $sort = "u.idnumber $this->sortorder";
                     break;
             }
+
+            $params = array_merge($gradebookrolesparams, $this->groupwheresql_params, $enrolledparams);
         }
 
-        $sql = "SELECT u.id, u.firstname, u.lastname, u.imagealt, u.picture, u.idnumber
-                  FROM {$CFG->prefix}user u
+        $sql = "SELECT $userfields
+                  FROM {user} u
+                  JOIN ($enrolledsql) je ON je.id = u.id
                        $this->groupsql
                        $sortjoin
                   JOIN (
                            SELECT DISTINCT ra.userid
-                             FROM {$CFG->prefix}role_assignments ra
+                             FROM {role_assignments} ra
                             WHERE ra.roleid IN ($this->gradebookroles)
                               AND ra.contextid " . get_related_contexts_string($this->context) . "
                        ) rainner ON rainner.userid = u.id
-                 WHERE u.deleted = 0
+                   AND u.deleted = 0
                    $this->groupwheresql
               ORDER BY $sort";
 
-        $this->users = get_records_sql($sql, $this->get_pref('studentsperpage') * $this->page,
-                            $this->get_pref('studentsperpage'));
+        $this->users = $DB->get_records_sql($sql, $params, $this->get_pref('studentsperpage') * $this->page, $this->get_pref('studentsperpage'));
 
         if (empty($this->users)) {
             $this->userselect = '';
             $this->users = array();
+            $this->userselect_params = array();
         } else {
-            $this->userselect = 'AND g.userid in ('.implode(',', array_keys($this->users)).')';
+            list($usql, $uparams) = $DB->get_in_or_equal(array_keys($this->users), SQL_PARAMS_NAMED, 'usid0');
+            $this->userselect = "AND g.userid $usql";
+            $this->userselect_params = $uparams;
+
+            //add a flag to each user indicating whether their enrolment is active
+            $sql = "SELECT ue.userid
+                      FROM {user_enrolments} ue
+                      JOIN {enrol} e ON e.id = ue.enrolid
+                     WHERE ue.userid $usql
+                           AND ue.status = :uestatus
+                           AND e.status = :estatus
+                           AND e.courseid = :courseid
+                  GROUP BY ue.userid";
+            $coursecontext = get_course_context($this->context);
+            $params = array_merge($uparams, array('estatus'=>ENROL_INSTANCE_ENABLED, 'uestatus'=>ENROL_USER_ACTIVE, 'courseid'=>$coursecontext->instanceid));
+            $useractiveenrolments = $DB->get_records_sql($sql, $params);
+
+            foreach ($this->users as $user) {
+                $this->users[$user->id]->suspendedenrolment = !array_key_exists($user->id, $useractiveenrolments);
+            }
         }
 
         return $this->users;
@@ -377,35 +420,36 @@ class grade_report_grader extends grade_report {
      * we supply the userids in this query, and get all the grades
      * pulls out all the grades, this does not need to worry about paging
      */
-    function load_final_grades() {
-        global $CFG;
+    public function load_final_grades() {
+        global $CFG, $DB;
 
-        // please note that we must fetch all grade_grades fields if we want to contruct grade_grade object from it!
+        // please note that we must fetch all grade_grades fields if we want to construct grade_grade object from it!
+        $params = array_merge(array('courseid'=>$this->courseid), $this->userselect_params);
         $sql = "SELECT g.*
-                  FROM {$CFG->prefix}grade_items gi,
-                       {$CFG->prefix}grade_grades g
-                 WHERE g.itemid = gi.id AND gi.courseid = {$this->courseid} {$this->userselect}";
+                  FROM {grade_items} gi,
+                       {grade_grades} g
+                 WHERE g.itemid = gi.id AND gi.courseid = :courseid {$this->userselect}";
 
         $userids = array_keys($this->users);
 
 
-        if ($grades = get_records_sql($sql)) {
+        if ($grades = $DB->get_records_sql($sql, $params)) {
             foreach ($grades as $graderec) {
-                if (in_array($graderec->userid, $userids) and array_key_exists($graderec->itemid, $this->gtree->items)) { // some items may not be present!!
+                if (in_array($graderec->userid, $userids) and array_key_exists($graderec->itemid, $this->gtree->get_items())) { // some items may not be present!!
                     $this->grades[$graderec->userid][$graderec->itemid] = new grade_grade($graderec, false);
-                    $this->grades[$graderec->userid][$graderec->itemid]->grade_item =& $this->gtree->items[$graderec->itemid]; // db caching
+                    $this->grades[$graderec->userid][$graderec->itemid]->grade_item =& $this->gtree->get_item($graderec->itemid); // db caching
                 }
             }
         }
 
         // prefil grades that do not exist yet
         foreach ($userids as $userid) {
-            foreach ($this->gtree->items as $itemid=>$unused) {
+            foreach ($this->gtree->get_items() as $itemid=>$unused) {
                 if (!isset($this->grades[$userid][$itemid])) {
                     $this->grades[$userid][$itemid] = new grade_grade();
                     $this->grades[$userid][$itemid]->itemid = $itemid;
                     $this->grades[$userid][$itemid]->userid = $userid;
-                    $this->grades[$userid][$itemid]->grade_item =& $this->gtree->items[$itemid]; // db caching
+                    $this->grades[$userid][$itemid]->grade_item =& $this->gtree->get_item($itemid); // db caching
                 }
             }
         }
@@ -415,38 +459,38 @@ class grade_report_grader extends grade_report {
      * Builds and returns a div with on/off toggles.
      * @return string HTML code
      */
-    function get_toggles_html() {
-        global $CFG, $USER, $COURSE;
+    public function get_toggles_html() {
+        global $CFG, $USER, $COURSE, $OUTPUT;
 
-        $html = '<div id="grade-report-toggles">';
+        $html = '';
         if ($USER->gradeediting[$this->courseid]) {
             if (has_capability('moodle/grade:manage', $this->context) or has_capability('moodle/grade:hide', $this->context)) {
-                $html .= $this->print_toggle('eyecons', true);
+                $html .= $this->print_toggle('eyecons');
             }
             if (has_capability('moodle/grade:manage', $this->context)
              or has_capability('moodle/grade:lock', $this->context)
              or has_capability('moodle/grade:unlock', $this->context)) {
-                $html .= $this->print_toggle('locks', true);
+                $html .= $this->print_toggle('locks');
             }
             if (has_capability('moodle/grade:manage', $this->context)) {
-                $html .= $this->print_toggle('quickfeedback', true);
+                $html .= $this->print_toggle('quickfeedback');
             }
 
             if (has_capability('moodle/grade:manage', $this->context)) {
-                $html .= $this->print_toggle('calculations', true);
+                $html .= $this->print_toggle('calculations');
             }
         }
 
         if ($this->canviewhidden) {
-            $html .= $this->print_toggle('averages', true);
+            $html .= $this->print_toggle('averages');
         }
 
-        $html .= $this->print_toggle('ranges', true);
+        $html .= $this->print_toggle('ranges');
         if (!empty($CFG->enableoutcomes)) {
-            $html .= $this->print_toggle('nooutcomes', true);
+            $html .= $this->print_toggle('nooutcomes');
         }
-        $html .= '</div>';
-        return $html;
+
+        return $OUTPUT->container($html, 'grade-report-toggles');
     }
 
     /**
@@ -455,273 +499,333 @@ class grade_report_grader extends grade_report {
     * @param bool $return Whether to return the HTML string rather than printing it
     * @return void
     */
-    function print_toggle($type, $return=false) {
-        global $CFG;
+    public function print_toggle($type) {
+        global $CFG, $OUTPUT;
 
-        $icons = array('eyecons' => 't/hide.gif',
-                       'calculations' => 't/calc.gif',
-                       'locks' => 't/lock.gif',
-                       'averages' => 't/mean.gif',
-                       'quickfeedback' => 't/feedback.gif',
-                       'nooutcomes' => 't/outcomes.gif');
+        $icons = array('eyecons' => 't/hide',
+                       'calculations' => 't/calc',
+                       'locks' => 't/lock',
+                       'averages' => 't/mean',
+                       'quickfeedback' => 't/feedback',
+                       'nooutcomes' => 't/outcomes');
 
-        $pref_name = 'grade_report_show' . $type;
+        $prefname = 'grade_report_show' . $type;
 
-        if (array_key_exists($pref_name, $CFG)) {
-            $show_pref = get_user_preferences($pref_name, $CFG->$pref_name);
+        if (array_key_exists($prefname, $CFG)) {
+            $showpref = get_user_preferences($prefname, $CFG->$prefname);
         } else {
-            $show_pref = get_user_preferences($pref_name);
+            $showpref = get_user_preferences($prefname);
         }
 
         $strshow = $this->get_lang_string('show' . $type, 'grades');
         $strhide = $this->get_lang_string('hide' . $type, 'grades');
 
-        $show_hide = 'show';
-        $toggle_action = 1;
+        $showhide = 'show';
+        $toggleaction = 1;
 
-        if ($show_pref) {
-            $show_hide = 'hide';
-            $toggle_action = 0;
+        if ($showpref) {
+            $showhide = 'hide';
+            $toggleaction = 0;
         }
 
         if (array_key_exists($type, $icons)) {
-            $image_name = $icons[$type];
+            $imagename = $icons[$type];
         } else {
-            $image_name = "t/$type.gif";
+            $imagename = "t/$type";
         }
 
-        $string = ${'str' . $show_hide};
+        $string = ${'str' . $showhide};
 
-        $img = '<img src="'.$CFG->pixpath.'/'.$image_name.'" class="iconsmall" alt="'
-                      .$string.'" title="'.$string.'" />'. "\n";
+        $url = new moodle_url($this->baseurl, array('toggle' => $toggleaction, 'toggle_type' => $type));
 
-        $retval = '<div class="gradertoggle">' . $img . '<a href="' . $this->baseurl . "&amp;toggle=$toggle_action&amp;toggle_type=$type\">"
-             . $string . '</a></div>';
+        $retval = $OUTPUT->container($OUTPUT->action_icon($url, new pix_icon($imagename, $string))); // TODO: this container looks wrong here
 
-        if ($return) {
             return $retval;
-        } else {
-            echo $retval;
-        }
     }
 
     /**
-     * Builds and returns the HTML code for the headers.
-     * @return string $headerhtml
+     * Builds and returns the rows that will make up the left part of the grader report
+     * This consists of student names and icons, links to user reports and id numbers, as well
+     * as header cells for these columns. It also includes the fillers required for the
+     * categories displayed on the right side of the report.
+     * @return array Array of html_table_row objects
      */
-    function get_headerhtml() {
-        global $CFG, $USER;
+    public function get_left_rows() {
+        global $CFG, $USER, $OUTPUT;
         
-        $this->rowcount = 0;
-        $fixedstudents = $this->is_fixed_students();
+        $rows = array();
 
-        if (!$fixedstudents) {
-            $strsortasc   = $this->get_lang_string('sortasc', 'grades');
-            $strsortdesc  = $this->get_lang_string('sortdesc', 'grades');
-            $strfirstname = $this->get_lang_string('firstname');
-            $strlastname  = $this->get_lang_string('lastname');
+        $showuserimage = $this->get_pref('showuserimage');
             $showuseridnumber = $this->get_pref('showuseridnumber');
+        $fixedstudents = $this->is_fixed_students();
 
-            if ($this->sortitemid === 'lastname') {
-                if ($this->sortorder == 'ASC') {
-                    $lastarrow = print_arrow('up', $strsortasc, true);
-                } else {
-                    $lastarrow = print_arrow('down', $strsortdesc, true);
+        $strfeedback  = $this->get_lang_string("feedback");
+        $strgrade     = $this->get_lang_string('grade');
+
+        $arrows = $this->get_sort_arrows();
+
+        $colspan = 1;
+
+        if (has_capability('gradereport/'.$CFG->grade_profilereport.':view', $this->context)) {
+            $colspan++;
                 }
-            } else {
-                $lastarrow = '';
+
+        if ($showuseridnumber) {
+            $colspan++;
             }
 
-            if ($this->sortitemid === 'firstname') {
-                if ($this->sortorder == 'ASC') {
-                    $firstarrow = print_arrow('up', $strsortasc, true);
-                } else {
-                    $firstarrow = print_arrow('down', $strsortdesc, true);
+        $levels = count($this->gtree->levels) - 1;
+
+        for ($i = 0; $i < $levels; $i++) {
+            $fillercell = new html_table_cell();
+            $fillercell->attributes['class'] = 'fixedcolumn cell topleft';
+            $fillercell->text = ' ';
+            $fillercell->colspan = $colspan;
+            $row = new html_table_row(array($fillercell));
+            $rows[] = $row;
                 }
-            } else {
-                $firstarrow = '';
+
+        $headerrow = new html_table_row();
+        $headerrow->attributes['class'] = 'heading';
+
+        $studentheader = new html_table_cell();
+        $studentheader->attributes['class'] = 'header';
+        $studentheader->scope = 'col';
+        $studentheader->header = true;
+        $studentheader->id = 'studentheader';
+        if (has_capability('gradereport/'.$CFG->grade_profilereport.':view', $this->context)) {
+            $studentheader->colspan = 2;
             }
+        $studentheader->text = $arrows['studentname'];
+
+        $headerrow->cells[] = $studentheader;
 
+        if ($showuseridnumber) {
+            // TODO: weird, this is not used anywhere
+            $sortidnumberlink = html_writer::link(new moodle_url($this->baseurl, array('sortitemid'=>'idnumber')), get_string('idnumber'));
+
+            $idnumberheader = new html_table_cell();
+            $idnumberheader->attributes['class'] = 'header useridnumber';
+            $idnumberheader->scope = 'col';
+            $idnumberheader->header = true;
+            $idnumberheader->text = $arrows['idnumber'];
+
+            $headerrow->cells[] = $idnumberheader;
         }
 
-        // Prepare Table Headers
-        $headerhtml = '';
+        $rows[] = $headerrow;
 
-        $numrows = count($this->gtree->levels);
+        $rows = $this->get_left_icons_row($rows, $colspan);
 
-        $columns_to_unset = array();
+        $rowclasses = array('even', 'odd');
 
-        foreach ($this->gtree->levels as $key=>$row) {
-            $columncount = 0;
-            if ($key == 0) {
-                // do not display course grade category
-                // continue;
+        $suspendedstring = null;
+        foreach ($this->users as $userid => $user) {
+            $userrow = new html_table_row();
+            $userrow->id = 'fixed_user_'.$userid;
+            $userrow->attributes['class'] = 'r'.$this->rowcount++.' '.$rowclasses[$this->rowcount % 2];
+
+            $usercell = new html_table_cell();
+            $usercell->attributes['class'] = 'user';
+
+            $usercell->header = true;
+            $usercell->scope = 'row';
+
+            if ($showuserimage) {
+                $usercell->text = $OUTPUT->container($OUTPUT->user_picture($user), 'userpic');
             }
 
-            if ($fixedstudents) {
-                $headerhtml .= '<tr class="heading_name_row">';
-            } else {
-                $headerhtml .= '<tr class="heading r'.$this->rowcount++.'">';
-                if ($key == $numrows - 1) {
-                    $headerhtml .= '<th class=" header c'.$columncount++.'" scope="col" colspan="2"><a href="'.$this->baseurl.'&amp;sortitemid=firstname">'
-                                . $strfirstname . '</a> '
-                                . $firstarrow. '/ <a href="'.$this->baseurl.'&amp;sortitemid=lastname">' . $strlastname . '</a>'. $lastarrow .'</th>';
-                    if ($showuseridnumber) {
-                        if ('idnumber' == $this->sortitemid) {
-                            if ($this->sortorder == 'ASC') {
-                                $idnumberarrow = print_arrow('up', $strsortasc, true);
-                            } else {
-                                $idnumberarrow = print_arrow('down', $strsortdesc, true);
+            $usercell->text .= html_writer::link(new moodle_url('/user/view.php', array('id' => $user->id, 'course' => $this->course->id)), fullname($user));
+
+            if (!empty($user->suspendedenrolment)) {
+                $usercell->attributes['class'] .= ' usersuspended';
+
+                //may be lots of suspended users so only get the string once
+                if (empty($suspendedstring)) {
+                    $suspendedstring = get_string('userenrolmentsuspended', 'grades');
                             }
-                        } else {
-                            $idnumberarrow = '';
+                $usercell->text .= html_writer::empty_tag('img', array('src'=>$OUTPUT->pix_url('i/enrolmentsuspended'), 'title'=>$suspendedstring, 'alt'=>$suspendedstring, 'class'=>'usersuspendedicon'));
                         }
-                        $headerhtml .= '<th class="header  c'.$columncount++.' useridnumber" scope="col"><a href="'.$this->baseurl.'&amp;sortitemid=idnumber">'
-                                . get_string('idnumber') . '</a> ' . $idnumberarrow . '</th>';
+
+            $userrow->cells[] = $usercell;
+
+            if (has_capability('gradereport/'.$CFG->grade_profilereport.':view', $this->context)) {
+                $userreportcell = new html_table_cell();
+                $userreportcell->attributes['class'] = 'userreport';
+                $userreportcell->header = true;
+                $a = new stdClass();
+                $a->user = fullname($user);
+                $strgradesforuser = get_string('gradesforuser', 'grades', $a);
+                $url = new moodle_url('/grade/report/'.$CFG->grade_profilereport.'/index.php', array('userid' => $user->id, 'id' => $this->course->id));
+                $userreportcell->text = $OUTPUT->action_icon($url, new pix_icon('t/grades', $strgradesforuser));
+                $userrow->cells[] = $userreportcell;
                     }
-                 } else {
-                    $colspan = 'colspan="2" ';
+
                     if ($showuseridnumber) {
-                        $colspan = 'colspan="3" ';
+                $idnumbercell = new html_table_cell();
+                $idnumbercell->attributes['class'] = 'header useridnumber';
+                $idnumbercell->header = true;
+                $idnumbercell->scope = 'row';
+                $idnumbercell->text = $user->idnumber;
+                $userrow->cells[] = $idnumbercell;
                     }
 
-                    $headerhtml .= '<td '.$colspan.'class="cell c'.$columncount++.' topleft">&nbsp;</td>';
-
-                    if ($showuseridnumber) {
-                        $columncount++;
+            $rows[] = $userrow;
                     }
+
+        $rows = $this->get_left_range_row($rows, $colspan);
+        $rows = $this->get_left_avg_row($rows, $colspan, true);
+        $rows = $this->get_left_avg_row($rows, $colspan);
+
+        return $rows;
                 }
+
+    /**
+     * Builds and returns the rows that will make up the right part of the grader report
+     * @return array Array of html_table_row objects
+     */
+    public function get_right_rows() {
+        global $CFG, $USER, $OUTPUT, $DB, $PAGE;
+
+        $rows = array();
+        $this->rowcount = 0;
+        $numrows = count($this->gtree->get_levels());
+        $numusers = count($this->users);
+        $gradetabindex = 1;
+        $columnstounset = array();
+        $strgrade = $this->get_lang_string('grade');
+        $strfeedback  = $this->get_lang_string("feedback");
+        $arrows = $this->get_sort_arrows();
+
+        $jsarguments = array(
+            'id'        => '#fixed_column',
+            'cfg'       => array('ajaxenabled'=>false),
+            'items'     => array(),
+            'users'     => array(),
+            'feedback'  => array()
+        );
+        $jsscales = array();
+
+        foreach ($this->gtree->get_levels() as $key=>$row) {
+            if ($key == 0) {
+                // do not display course grade category
+                // continue;
             }
 
+            $headingrow = new html_table_row();
+            $headingrow->attributes['class'] = 'heading_name_row';
 
             foreach ($row as $columnkey => $element) {
-                $sort_link = '';
+                $sortlink = clone($this->baseurl);
                 if (isset($element['object']->id)) {
-                    $sort_link = $this->baseurl.'&amp;sortitemid=' . $element['object']->id;
+                    $sortlink->param('sortitemid', $element['object']->id);
                 }
 
                 $eid    = $element['eid'];
                 $object = $element['object'];
                 $type   = $element['type'];
                 $categorystate = @$element['categorystate'];
-                $itemmodule = null;
-                $iteminstance = null;
 
-                $columnclass = 'c' . $columncount++;
                 if (!empty($element['colspan'])) {
-                    $colspan = 'colspan="'.$element['colspan'].'"';
-                    $columnclass = '';
+                    $colspan = $element['colspan'];
                 } else {
-                    $colspan = '';
+                    $colspan = 1;
                 }
 
                 if (!empty($element['depth'])) {
-                    $catlevel = ' catlevel'.$element['depth'];
+                    $catlevel = 'catlevel'.$element['depth'];
                 } else {
                     $catlevel = '';
                 }
 
 // Element is a filler
                 if ($type == 'filler' or $type == 'fillerfirst' or $type == 'fillerlast') {
-                    $headerhtml .= '<th class="'.$columnclass.' '.$type.$catlevel.'" '.$colspan.' scope="col">&nbsp;</th>';
+                    $fillercell = new html_table_cell();
+                    $fillercell->attributes['class'] = $type . ' ' . $catlevel;
+                    $fillercell->colspan = $colspan;
+                    $fillercell->text = '&nbsp;';
+                    $fillercell->header = true;
+                    $fillercell->scope = 'col';
+                    $headingrow->cells[] = $fillercell;
                 }
 // Element is a category
                 else if ($type == 'category') {
-                    //MDL-21088 - IE 7 ignores nowraps on td or th so we put this in a span with a nowrap on it.
-                    $headerhtml .= '<th class=" '. $columnclass.' category'.$catlevel.'" '.$colspan.' scope="col"><span>'
-                                . shorten_text($element['object']->get_name());
-                    $headerhtml .= $this->get_collapsing_icon($element);
+                    $categorycell = new html_table_cell();
+                    $categorycell->attributes['class'] = 'category ' . $catlevel;
+                    $categorycell->colspan = $colspan;
+                    $categorycell->text = shorten_text($element['object']->get_name());
+                    $categorycell->text .= $this->get_collapsing_icon($element);
+                    $categorycell->header = true;
+                    $categorycell->scope = 'col';
 
                     // Print icons
                     if ($USER->gradeediting[$this->courseid]) {
-                        $headerhtml .= $this->get_icons($element);
+                        $categorycell->text .= $this->get_icons($element);
                     }
 
-                    $headerhtml .= '</span></th>';
+                    $headingrow->cells[] = $categorycell;
                 }
 // Element is a grade_item
                 else {
-                    $itemmodule = $element['object']->itemmodule;
-                    $iteminstance = $element['object']->iteminstance;
+                    //$itemmodule = $element['object']->itemmodule;
+                    //$iteminstance = $element['object']->iteminstance;
 
                     if ($element['object']->id == $this->sortitemid) {
                         if ($this->sortorder == 'ASC') {
-                            $arrow = $this->get_sort_arrow('up', $sort_link);
+                            $arrow = $this->get_sort_arrow('up', $sortlink);
                         } else {
-                            $arrow = $this->get_sort_arrow('down', $sort_link);
+                            $arrow = $this->get_sort_arrow('down', $sortlink);
                         }
                     } else {
-                        $arrow = $this->get_sort_arrow('move', $sort_link);
-                    }
-
-                    $hidden = '';
-                    if ($element['object']->is_hidden()) {
-                        $hidden = ' hidden ';
+                        $arrow = $this->get_sort_arrow('move', $sortlink);
                     }
 
                     $headerlink = $this->gtree->get_element_header($element, true, $this->get_pref('showactivityicons'), false);
 
-                    //The width of the table varies depending on fixedstudents.
-                    // $fixedstudents == 0, students and grades display in the same table.
-                    // $fixedstudents == 1, students and grades are display in separate table.
-                    if ($fixedstudents || !$this->canviewuserreport) {
-                        $incrementcellindex = '0';
-                    } else {
-                        $incrementcellindex = '1';
-                    }
-                    //MDL-21088 - IE 7 ignores nowraps on tds or ths so we this in a span with a nowrap on it.
-                    $headerhtml .= '<th class=" '.$columnclass.' '.$type.$catlevel.$hidden.
-                            '" scope="col" onclick="set_col(this.cellIndex,' . $incrementcellindex . ',' . (count($this->gtree->levels) - 1) .
-                            ')"><span>' . shorten_text($headerlink) . $arrow;
-                    $headerhtml .= '</span></th>';
-                }
+                    $itemcell = new html_table_cell();
+                    $itemcell->attributes['class'] = $type . ' ' . $catlevel . 'highlightable';
 
+                    if ($element['object']->is_hidden()) {
+                        $itemcell->attributes['class'] .= ' hidden';
             }
 
-            $headerhtml .= '</tr>';
-        }
+                    $itemcell->colspan = $colspan;
+                    $itemcell->text = shorten_text($headerlink) . $arrow;
+                    $itemcell->header = true;
+                    $itemcell->scope = 'col';
 
-        return $headerhtml;
+                    $headingrow->cells[] = $itemcell;
+                }
+            }
+            $rows[] = $headingrow;
     }
 
-    /**
-     * Builds and return the HTML rows of the table (grades headed by student).
-     * @return string HTML
-     */
-    function get_studentshtml() {
-        global $CFG, $USER;
-
-        $studentshtml = '';
-        $strfeedback  = $this->get_lang_string("feedback");
-        $strgrade     = $this->get_lang_string('grade');
-        $gradetabindex = 1;
-        $numusers      = count($this->users);
-        $showuserimage = $this->get_pref('showuserimage');
-        $showuseridnumber = $this->get_pref('showuseridnumber');
-        $fixedstudents = $this->is_fixed_students();
-        $canviewfullname = has_capability('moodle/site:viewfullnames', $this->context);
+        $rows = $this->get_right_icons_row($rows);
 
         // Preload scale objects for items with a scaleid
-        $scales_list = '';
+        $scaleslist = array();
         $tabindices = array();
 
-        foreach ($this->gtree->items as $item) {
+        foreach ($this->gtree->get_items() as $itemid=>$item) {
+            $scale = null;
             if (!empty($item->scaleid)) {
-                $scales_list .= "$item->scaleid,";
+                $scaleslist[] = $item->scaleid;
+                $jsarguments['items'][$itemid] = array('id'=>$itemid, 'name'=>$item->get_name(true), 'type'=>'scale', 'scale'=>$item->scaleid, 'decimals'=>$item->get_decimals());
+            } else {
+                $jsarguments['items'][$itemid] = array('id'=>$itemid, 'name'=>$item->get_name(true), 'type'=>'value', 'scale'=>false, 'decimals'=>$item->get_decimals());
             }
-
             $tabindices[$item->id]['grade'] = $gradetabindex;
             $tabindices[$item->id]['feedback'] = $gradetabindex + $numusers;
             $gradetabindex += $numusers * 2;
         }
-        $scales_array = array();
+        $scalesarray = array();
 
-        if (!empty($scales_list)) {
-            $scales_list = substr($scales_list, 0, -1);
-            $scales_array = get_records_list('scale', 'id', $scales_list);
+        if (!empty($scaleslist)) {
+            $scalesarray = $DB->get_records_list('scale', 'id', $scaleslist);
         }
+        $jsscales = $scalesarray;
 
-        $row_classes = array(' even ', ' odd ');
+        $rowclasses = array('even', 'odd');
 
         foreach ($this->users as $userid => $user) {
 
@@ -729,50 +833,27 @@ class grade_report_grader extends grade_report {
                 $altered = array();
                 $unknown = array();
             } else {
-                $hiding_affected = grade_grade::get_hiding_affected($this->grades[$userid], $this->gtree->items);
-                $altered = $hiding_affected['altered'];
-                $unknown = $hiding_affected['unknown'];
-                unset($hiding_affected);
+                $hidingaffected = grade_grade::get_hiding_affected($this->grades[$userid], $this->gtree->get_items());
+                $altered = $hidingaffected['altered'];
+                $unknown = $hidingaffected['unknown'];
+                unset($hidingaffected);
             }
 
-            $columncount = 0;
-            if ($fixedstudents) {
-                $studentshtml .= '<tr class="r'.$this->rowcount++ . $row_classes[$this->rowcount % 2] . '">';
-            } else {
-                // Student name and link
-                $user_pic = null;
-                if ($showuserimage) {
-                    $user_pic = '<div class="userpic">' . print_user_picture($user, $this->courseid, null, 0, true) . '</div>';
-                }
 
-                //we're either going to add a th or a colspan to keep things aligned
-                $userreportcell = '';
-                $userreportcellcolspan = '';
-                if ($this->canviewuserreport) {
-                    $a->user = fullname($user, $canviewfullname);
-                    $strgradesforuser = get_string('gradesforuser', 'grades', $a);
-                    $userreportcell = '<th class="header userreport"><a href="'.$CFG->wwwroot.'/grade/report/'.$CFG->grade_profilereport.'/index.php?id='.$this->courseid.'&amp;userid='.$user->id.'">'
-                                    .'<img src="'.$CFG->pixpath.'/t/grades.gif" alt="'.$strgradesforuser.'" title="'.$strgradesforuser.'" /></a></th>';
-                } else {
-                    $userreportcellcolspan = 'colspan=2';
-                }
-
-                $studentshtml .= '<tr class="r'.$this->rowcount++ . $row_classes[$this->rowcount % 2] . '">'
-                              .'<th class="c'.$columncount++.' user" scope="row" onclick="set_row(this.parentNode.rowIndex);" '.$userreportcellcolspan.' >'.$user_pic
-                              .'<a href="'.$CFG->wwwroot.'/user/view.php?id='.$user->id.'&amp;course='.$this->course->id.'">'
-                              .fullname($user, $canviewfullname)."</a></th>$userreportcell\n";
-
-                if ($showuseridnumber) {
-                    $studentshtml .= '<th class="c'.$columncount++.' useridnumber" onclick="set_row(this.parentNode.rowIndex);">'.
-                            $user->idnumber.'</th>';
-                }
+            $itemrow = new html_table_row();
+            $itemrow->id = 'user_'.$userid;
+            $itemrow->attributes['class'] = $rowclasses[$this->rowcount % 2];
 
-            }
+            $jsarguments['users'][$userid] = fullname($user);
 
             foreach ($this->gtree->items as $itemid=>$unused) {
                 $item =& $this->gtree->items[$itemid];
                 $grade = $this->grades[$userid][$item->id];
 
+                $itemcell = new html_table_cell();
+
+                $itemcell->id = 'u'.$userid.'i'.$itemid;
+
                 // Get the decimal points preference for this item
                 $decimalpoints = $item->get_decimals();
 
@@ -789,10 +870,11 @@ class grade_report_grader extends grade_report {
                 if (!$this->canviewhidden and $grade->is_hidden()) {
                     if (!empty($CFG->grade_hiddenasdate) and $grade->get_datesubmitted() and !$item->is_category_item() and !$item->is_course_item()) {
                         // the problem here is that we do not have the time when grade value was modified, 'timemodified' is general modification date for grade_grades records
-                        $studentshtml .= '<td class="cell c'.$columncount++.'"><span class="datesubmitted">'.userdate($grade->get_datesubmitted(),get_string('strftimedatetimeshort')).'</span></td>';
+                        $itemcell->text = html_writer::tag('span', userdate($grade->get_datesubmitted(),get_string('strftimedatetimeshort')), array('class'=>'datesubmitted'));
                     } else {
-                        $studentshtml .= '<td class="cell c'.$columncount++.'">-</td>';
+                        $itemcell->text = '-';
                     }
+                    $itemrow->cells[] = $itemcell;
                     continue;
                 }
 
@@ -800,40 +882,33 @@ class grade_report_grader extends grade_report {
                 $eid = $this->gtree->get_grade_eid($grade);
                 $element = array('eid'=>$eid, 'object'=>$grade, 'type'=>'grade');
 
-                $cellclasses = 'grade cell c'.$columncount++;
+                $itemcell->attributes['class'] .= ' grade';
                 if ($item->is_category_item()) {
-                    $cellclasses .= ' cat';
+                    $itemcell->attributes['class'] .= ' cat';
                 }
                 if ($item->is_course_item()) {
-                    $cellclasses .= ' course';
+                    $itemcell->attributes['class'] .= ' course';
                 }
                 if ($grade->is_overridden()) {
-                    $cellclasses .= ' overridden';
+                    $itemcell->attributes['class'] .= ' overridden';
                 }
 
                 if ($grade->is_excluded()) {
-                    // $cellclasses .= ' excluded';
+                    // $itemcell->attributes['class'] .= ' excluded';
                 }
 
-                $grade_title = '<div class="fullname">'.fullname($user).'</div>';
-                $grade_title .= '<div class="itemname">'.$item->get_name(true).'</div>';
-
-                if (!empty($grade->feedback) && !$USER->gradeediting[$this->courseid]) {
-                    $grade_title .= '<div class="feedback">'
-                                 .wordwrap(trim(format_string($grade->feedback, $grade->feedbackformat)), 34, '<br/ >') . '</div>';
-                } else {
-
+                if (!empty($grade->feedback)) {
+                    //should we be truncating feedback? ie $short_feedback = shorten_text($feedback, $this->feedback_trunc_length);
+                    $jsarguments['feedback'][] = array('user'=>$userid, 'item'=>$itemid, 'content'=>wordwrap(trim(format_string($grade->feedback, $grade->feedbackformat)), 34, '<br/ >'));
                 }
 
-                $studentshtml .= '<td class="'.$cellclasses.'" title="'.s($grade_title).'">';
-
                 if ($grade->is_excluded()) {
-                    $studentshtml .= '<span class="excludedfloater">'.get_string('excluded', 'grades') . '</span> ';
+                    $itemcell->text .= html_writer::tag('span', get_string('excluded', 'grades'), array('class'=>'excludedfloater'));
                 }
 
                 // Do not show any icons if no grade (no record in DB to match)
                 if (!$item->needsupdate and $USER->gradeediting[$this->courseid]) {
-                    $studentshtml .= $this->get_icons($element);
+                    $itemcell->text .= $this->get_icons($element);
                 }
 
                 $hidden = '';
@@ -848,16 +923,16 @@ class grade_report_grader extends grade_report {
                     $gradepass = '';
                 }
 
-                // if in editting mode, we need to print either a text box
+                // if in editing mode, we need to print either a text box
                 // or a drop down (for scales)
                 // grades in item of type grade category or course are not directly editable
                 if ($item->needsupdate) {
-                    $studentshtml .= '<span class="gradingerror'.$hidden.'">'.get_string('error').'</span>';
+                    $itemcell->text .= html_writer::tag('span', get_string('error'), array('class'=>"gradingerror$hidden"));
 
                 } else if ($USER->gradeediting[$this->courseid]) {
 
-                    if ($item->scaleid && !empty($scales_array[$item->scaleid])) {
-                        $scale = $scales_array[$item->scaleid];
+                    if ($item->scaleid && !empty($scalesarray[$item->scaleid])) {
+                        $scale = $scalesarray[$item->scaleid];
                         $gradeval = (int)$gradeval; // scales use only integers
                         $scales = explode(",", $scale->scale);
                         // reindex because scale is off 1
@@ -878,20 +953,18 @@ class grade_report_grader extends grade_report {
                             } else {
                                 $nogradestr = $this->get_lang_string('nooutcome', 'grades');
                             }
-                            $studentshtml .= '<input type="hidden" name="oldgrade_'.$userid.'_'
-                                          .$item->id.'" value="'.$oldval.'"/>';
-                            $studentshtml .= choose_from_menu($scaleopt, 'grade_'.$userid.'_'.$item->id,
-                                                              $gradeval, $nogradestr, '', '-1',
-                                                              true, false, $tabindices[$item->id]['grade']);
+                            $itemcell->text .= '<input type="hidden" id="oldgrade_'.$userid.'_'.$item->id.'" name="oldgrade_'.$userid.'_'.$item->id.'" value="'.$oldval.'"/>';
+                            $attributes = array('tabindex' => $tabindices[$item->id]['grade'], 'id'=>'grade_'.$userid.'_'.$item->id);
+                            $itemcell->text .= html_writer::select($scaleopt, 'grade_'.$userid.'_'.$item->id, $gradeval, array(-1=>$nogradestr), $attributes);;
                         } elseif(!empty($scale)) {
                             $scales = explode(",", $scale->scale);
 
                             // invalid grade if gradeval < 1
                             if ($gradeval < 1) {
-                                $studentshtml .= '<span class="gradevalue'.$hidden.$gradepass.'">-</span>';
+                                $itemcell->text .= html_writer::tag('span', '-', array('class'=>"gradevalue$hidden$gradepass"));
                             } else {
                                 $gradeval = $grade->grade_item->bounded_grade($gradeval); //just in case somebody changes scale
-                                $studentshtml .= '<span class="gradevalue'.$hidden.$gradepass.'">'.$scales[$gradeval-1].'</span>';
+                                $itemcell->text .= html_writer::tag('span', $scales[$gradeval-1], array('class'=>"gradevalue$hidden$gradepass"));
                             }
                         } else {
                             // no such scale, throw error?
@@ -900,12 +973,12 @@ class grade_report_grader extends grade_report {
                     } else if ($item->gradetype != GRADE_TYPE_TEXT) { // Value type
                         if ($this->get_pref('quickgrading') and $grade->is_editable()) {
                             $value = format_float($gradeval, $decimalpoints);
-                            $studentshtml .= '<input type="hidden" name="oldgrade_'.$userid.'_'.$item->id.'" value="'.$value.'" />';
-                            $studentshtml .= '<input size="6" tabindex="' . $tabindices[$item->id]['grade']
-                                          . '" type="text" title="'. $strgrade .'" name="grade_'
-                                          .$userid.'_' .$item->id.'" value="'.$value.'" />';
+                            $itemcell->text .= '<input type="hidden" id="oldgrade_'.$userid.'_'.$item->id.'" name="oldgrade_'.$userid.'_'.$item->id.'" value="'.$value.'" />';
+                            $itemcell->text .= '<input size="6" tabindex="' . $tabindices[$item->id]['grade']
+                                          . '" type="text" class="text" title="'. $strgrade .'" name="grade_'
+                                          .$userid.'_' .$item->id.'" id="grade_'.$userid.'_'.$item->id.'" value="'.$value.'" />';
                         } else {
-                            $studentshtml .= '<span class="gradevalue'.$hidden.$gradepass.'">'.format_float($gradeval, $decimalpoints).'</span>';
+                            $itemcell->text .= html_writer::tag('span', format_float($gradeval, $decimalpoints), array('class'=>"gradevalue$hidden$gradepass"));
                         }
                     }
 
@@ -913,212 +986,296 @@ class grade_report_grader extends grade_report {
                     // If quickfeedback is on, print an input element
                     if ($this->get_pref('showquickfeedback') and $grade->is_editable()) {
 
-                        $studentshtml .= '<input type="hidden" name="oldfeedback_'
-                                      .$userid.'_'.$item->id.'" value="' . s($grade->feedback) . '" />';
-                        $studentshtml .= '<input class="quickfeedback" tabindex="' . $tabindices[$item->id]['feedback']
-                                      . '" size="6" title="' . $strfeedback . '" type="text" name="feedback_'
-                                      .$userid.'_'.$item->id.'" value="' . s($grade->feedback) . '" />';
+                        $itemcell->text .= '<input type="hidden" id="oldfeedback_'.$userid.'_'.$item->id.'" name="oldfeedback_'.$userid.'_'.$item->id.'" value="' . s($grade->feedback) . '" />';
+                        $itemcell->text .= '<input class="quickfeedback" tabindex="' . $tabindices[$item->id]['feedback'].'" id="feedback_'.$userid.'_'.$item->id
+                                      . '" size="6" title="' . $strfeedback . '" type="text" name="feedback_'.$userid.'_'.$item->id.'" value="' . s($grade->feedback) . '" />';
                     }
 
                 } else { // Not editing
                     $gradedisplaytype = $item->get_displaytype();
 
-                    // If feedback present, surround grade with feedback tooltip: Open span here
+                    if ($item->scaleid && !empty($scalesarray[$item->scaleid])) {
+                        $itemcell->attributes['class'] .= ' grade_type_scale';
+                    } else if ($item->gradetype != GRADE_TYPE_TEXT) {
+                        $itemcell->attributes['class'] .= ' grade_type_text';
+                    }
 
-                    if ($item->needsupdate) {
-                        $studentshtml .= '<span class="gradingerror'.$hidden.$gradepass.'">'.get_string('error').'</span>';
+                    if ($this->get_pref('enableajax')) {
+                        $itemcell->attributes['class'] .= ' clickable';
+                    }
 
+                    if ($item->needsupdate) {
+                        $itemcell->text .= html_writer::tag('span', get_string('error'), array('class'=>"gradingerror$hidden$gradepass"));
                     } else {
-                        $studentshtml .= '<span class="gradevalue'.$hidden.$gradepass.'">'.grade_format_gradevalue($gradeval, $item, true, $gradedisplaytype, null).'</span>';
+                        $itemcell->text .= html_writer::tag('span', grade_format_gradevalue($gradeval, $item, true, $gradedisplaytype, null), array('class'=>"gradevalue$hidden$gradepass"));
                     }
                 }
 
                 if (!empty($this->gradeserror[$item->id][$userid])) {
-                    $studentshtml .= $this->gradeserror[$item->id][$userid];
+                    $itemcell->text .= $this->gradeserror[$item->id][$userid];
                 }
 
-                $studentshtml .=  '</td>' . "\n";
-            }
-            $studentshtml .= '</tr>';
+                $itemrow->cells[] = $itemcell;
         }
-        return $studentshtml;
+            $rows[] = $itemrow;
     }
 
-    function get_studentnameshtml() {
-        global $CFG, $USER;
-        $studentshtml = '';
+        if ($this->get_pref('enableajax')) {
+            $jsarguments['cfg']['ajaxenabled'] = true;
+            $jsarguments['cfg']['scales'] = array();
+            foreach ($jsscales as $scale) {
+                $jsarguments['cfg']['scales'][$scale->id] = explode(',',$scale->scale);
+            }
+            $jsarguments['cfg']['feedbacktrunclength'] =  $this->feedback_trunc_length;
 
-        $showuserimage = $this->get_pref('showuserimage');
-        $showuseridnumber = $this->get_pref('showuseridnumber');
-        $fixedstudents = $this->is_fixed_students();
+            //feedbacks are now being stored in $jsarguments['feedback'] in get_right_rows()
+            //$jsarguments['cfg']['feedback'] =  $this->feedbacks;
+        }
+        $jsarguments['cfg']['isediting'] = (bool)$USER->gradeediting[$this->courseid];
+        $jsarguments['cfg']['courseid'] =  $this->courseid;
+        $jsarguments['cfg']['studentsperpage'] =  $this->get_pref('studentsperpage');
+        $jsarguments['cfg']['showquickfeedback'] =  (bool)$this->get_pref('showquickfeedback');
 
-        $strsortasc   = $this->get_lang_string('sortasc', 'grades');
-        $strsortdesc  = $this->get_lang_string('sortdesc', 'grades');
-        $strfirstname = $this->get_lang_string('firstname');
-        $strlastname  = $this->get_lang_string('lastname');
-        $canviewfullname = has_capability('moodle/site:viewfullnames', $this->context);
+        $module = array(
+            'name'      => 'gradereport_grader',
+            'fullpath'  => '/grade/report/grader/module.js',
+            'requires'  => array('base', 'dom', 'event', 'event-mouseenter', 'event-key', 'io', 'json-parse', 'overlay')
+        );
+        $PAGE->requires->js_init_call('M.gradereport_grader.init_report', $jsarguments, false, $module);
+        $PAGE->requires->strings_for_js(array('addfeedback','feedback', 'grade'), 'grades');
+        $PAGE->requires->strings_for_js(array('ajaxchoosescale','ajaxclicktoclose','ajaxerror','ajaxfailedupdate', 'ajaxfieldchanged'), 'gradereport_grader');
         
-        if ($this->sortitemid === 'lastname') {
-            if ($this->sortorder == 'ASC') {
-                $lastarrow = print_arrow('up', $strsortasc, true);
-            } else {
-                $lastarrow = print_arrow('down', $strsortdesc, true);
-            }
-        } else {
-            $lastarrow = '';
-        }
+        $rows = $this->get_right_range_row($rows);
+        $rows = $this->get_right_avg_row($rows, true);
+        $rows = $this->get_right_avg_row($rows);
 
-        if ($this->sortitemid === 'firstname') {
-            if ($this->sortorder == 'ASC') {
-                $firstarrow = print_arrow('up', $strsortasc, true);
-            } else {
-                $firstarrow = print_arrow('down', $strsortdesc, true);
-            }
-        } else {
-            $firstarrow = '';
+        return $rows;
         }
 
-        if ($fixedstudents) {
-            $studentshtml .= '<div class="left_scroller">
-                <table id="fixed_column" class="fixed_grades_column">
-                    <tbody class="leftbody">';
+    /**
+     * Depending on the style of report (fixedstudents vs traditional one-table),
+     * arranges the rows of data in one or two tables, and returns the output of
+     * these tables in HTML
+     * @return string HTML
+     */
+    public function get_grade_table() {
+        global $OUTPUT;
+        $fixedstudents = $this->is_fixed_students();
 
-            $colspan = 'colspan="2"';
-            if ($showuseridnumber) {
-                $colspan = 'colspan="3"';
-            }
+        $leftrows = $this->get_left_rows();
+        $rightrows = $this->get_right_rows();
 
-            $levels = count($this->gtree->levels) - 1;
+        $html = '';
 
 
-            for ($i = 0; $i < $levels; $i++) {
-                $studentshtml .= '
-                        <tr class="heading name_row">
-                            <td '.$colspan.' class="fixedcolumn cell c0 topleft">&nbsp;</td>
-                        </tr>
-                        ';
-            }
+        if ($fixedstudents) {
+            $fixedcolumntable = new html_table();
+            $fixedcolumntable->id = 'fixed_column';
+            $fixedcolumntable->data = $leftrows;
+            $html .= $OUTPUT->container(html_writer::table($fixedcolumntable), 'left_scroller');
 
-            $studentshtml .= '<tr class="heading"><th id="studentheader" colspan="2" class="header c0" scope="col"><a href="'.$this->baseurl.'&amp;sortitemid=firstname">'
-                        . $strfirstname . '</a> '
-                        . $firstarrow. '/ <a href="'.$this->baseurl.'&amp;sortitemid=lastname">' . $strlastname . '</a>'. $lastarrow .'</th>';
+            $righttable = new html_table();
+            $righttable->id = 'user-grades';
+            $righttable->data = $rightrows;
 
-            if ($showuseridnumber) {
-                if ('idnumber' == $this->sortitemid) {
-                    if ($this->sortorder == 'ASC') {
-                        $idnumberarrow = print_arrow('up', $strsortasc, true);
+            $html .= $OUTPUT->container(html_writer::table($righttable), 'right_scroller');
                     } else {
-                        $idnumberarrow = print_arrow('down', $strsortdesc, true);
+            $fulltable = new html_table();
+            $fulltable->attributes['class'] = 'gradestable flexible boxaligncenter generaltable';
+            $fulltable->id = 'user-grades';
+
+            // Extract rows from each side (left and right) and collate them into one row each
+            foreach ($leftrows as $key => $row) {
+                $row->cells = array_merge($row->cells, $rightrows[$key]->cells);
+                $fulltable->data[] = $row;
                     }
-                } else {
-                    $idnumberarrow = '';
+            $html .= html_writer::table($fulltable);
                 }
-                $studentshtml .= '<th class="header c0 useridnumber" scope="col"><a href="'.$this->baseurl.'&amp;sortitemid=idnumber">'
-                        . get_string('idnumber') . '</a> ' . $idnumberarrow . '</th>';
+        return $OUTPUT->container($html, 'gradeparent');
             }
 
-            $studentshtml .= '</tr>';
+    /**
+     * Builds and return the row of icons for the left side of the report.
+     * It only has one cell that says "Controls"
+     * @param array $rows The Array of rows for the left part of the report
+     * @param int $colspan The number of columns this cell has to span
+     * @return array Array of rows for the left part of the report
+     */
+    public function get_left_icons_row($rows=array(), $colspan=1) {
+        global $USER;
 
             if ($USER->gradeediting[$this->courseid]) {
-                $studentshtml .= '<tr class="controls"><th class="header c0 controls" scope="row" '.$colspan.'>'.$this->get_lang_string('controls','grades').'</th></tr>';
-            }
+            $controlsrow = new html_table_row();
+            $controlsrow->attributes['class'] = 'controls';
+            $controlscell = new html_table_cell();
+            $controlscell->attributes['class'] = 'header controls';
+            $controlscell->colspan = $colspan;
+            $controlscell->text = $this->get_lang_string('controls','grades');
 
-            $row_classes = array(' even ', ' odd ');
+            $controlsrow->cells[] = $controlscell;
+            $rows[] = $controlsrow;
+        }
+        return $rows;
+    }
 
-            foreach ($this->users as $userid => $user) {
+    /**
+     * Builds and return the header for the row of ranges, for the left part of the grader report.
+     * @param array $rows The Array of rows for the left part of the report
+     * @param int $colspan The number of columns this cell has to span
+     * @return array Array of rows for the left part of the report
+     */
+    public function get_left_range_row($rows=array(), $colspan=1) {
+        global $CFG, $USER;
 
-                $user_pic = null;
-                if ($showuserimage) {
-                    $user_pic = '<div class="userpic">' . print_user_picture($user, $this->courseid, NULL, 0, true) . "</div>\n";
+        if ($this->get_pref('showranges')) {
+            $rangerow = new html_table_row();
+            $rangerow->attributes['class'] = 'range r'.$this->rowcount++;
+            $rangecell = new html_table_cell();
+            $rangecell->attributes['class'] = 'header range';
+            $rangecell->colspan = $colspan;
+            $rangecell->header = true;
+            $rangecell->scope = 'row';
+            $rangecell->text = $this->get_lang_string('range','grades');
+            $rangerow->cells[] = $rangecell;
+            $rows[] = $rangerow;
                 }
 
-                //either add a th or a colspan to keep things aligned
-                $userreportcell = '';
-                $userreportcellcolspan = '';
-                if ($this->canviewuserreport) {
-                    $a->user = fullname($user, $canviewfullname);
-                    $strgradesforuser = get_string('gradesforuser', 'grades', $a);
-                    $userreportcell = '<th class="userreport"><a href="'.$CFG->wwwroot.'/grade/report/'.$CFG->grade_profilereport.'/index.php?id='.$this->courseid.'&amp;userid='.$user->id.'">'
-                                    .'<img src="'.$CFG->pixpath.'/t/grades.gif" alt="'.$strgradesforuser.'" title="'.$strgradesforuser.'" /></a></th>';
+        return $rows;
                 }
-                else {
-                    $userreportcellcolspan = 'colspan=2';
+
+    /**
+     * Builds and return the headers for the rows of averages, for the left part of the grader report.
+     * @param array $rows The Array of rows for the left part of the report
+     * @param int $colspan The number of columns this cell has to span
+     * @param bool $groupavg If true, returns the row for group averages, otherwise for overall averages
+     * @return array Array of rows for the left part of the report
+     */
+    public function get_left_avg_row($rows=array(), $colspan=1, $groupavg=false) {
+        if (!$this->canviewhidden) {
+            // totals might be affected by hiding, if user can not see hidden grades the aggregations might be altered
+            // better not show them at all if user can not see all hideen grades
+            return $rows;
                 }
 
-                $studentshtml .= '<tr class="r'.$this->rowcount++ . $row_classes[$this->rowcount % 2] . '">'
-                              .'<th class="c0 user" scope="row" onclick="set_row(this.parentNode.rowIndex);" '.$userreportcellcolspan.' >'.$user_pic
-                              .'<a href="'.$CFG->wwwroot.'/user/view.php?id='.$user->id.'&amp;course='.$this->course->id.'">'
-                              .fullname($user, $canviewfullname)."</a></th>$userreportcell\n";
+        $showaverages = $this->get_pref('showaverages');
+        $showaveragesgroup = $this->currentgroup && $showaverages;
+        $straveragegroup = get_string('groupavg', 'grades');
+
+        if ($groupavg) {
+            if ($showaveragesgroup) {
+                $groupavgrow = new html_table_row();
+                $groupavgrow->attributes['class'] = 'groupavg r'.$this->rowcount++;
+                $groupavgcell = new html_table_cell();
+                $groupavgcell->attributes['class'] = 'header range';
+                $groupavgcell->colspan = $colspan;
+                $groupavgcell->header = true;
+                $groupavgcell->scope = 'row';
+                $groupavgcell->text = $straveragegroup;
+                $groupavgrow->cells[] = $groupavgcell;
+                $rows[] = $groupavgrow;
+            }
+        } else {
+            $straverage = get_string('overallaverage', 'grades');
 
-                if ($showuseridnumber) {
-                    $studentshtml .= '<th class="c0 useridnumber" onclick="set_row(this.parentNode.rowIndex);">'. $user->idnumber."</th>\n";
+            if ($showaverages) {
+                $avgrow = new html_table_row();
+                $avgrow->attributes['class'] = 'avg r'.$this->rowcount++;
+                $avgcell = new html_table_cell();
+                $avgcell->attributes['class'] = 'header range';
+                $avgcell->colspan = $colspan;
+                $avgcell->header = true;
+                $avgcell->scope = 'row';
+                $avgcell->text = $straverage;
+                $avgrow->cells[] = $avgcell;
+                $rows[] = $avgrow;
                 }
-                $studentshtml .= "</tr>\n";
             }
 
-            if ($this->get_pref('showranges')) {
-                $studentshtml .= '<tr class="range r'.$this->rowcount++.'">' . '<th class="header c0 range " '.$colspan.' scope="row">'.$this->get_lang_string('range','grades').'</th></tr>';
+        return $rows;
             }
 
-            // Averages heading
+    /**
+     * Builds and return the row of icons when editing is on, for the right part of the grader report.
+     * @param array $rows The Array of rows for the right part of the report
+     * @return array Array of rows for the right part of the report
+     */
+    public function get_right_icons_row($rows=array()) {
+        global $USER;
+        if ($USER->gradeediting[$this->courseid]) {
+            $iconsrow = new html_table_row();
+            $iconsrow->attributes['class'] = 'controls';
 
-            $straverage_group = get_string('groupavg', 'grades');
-            $straverage = get_string('overallaverage', 'grades');
-            $showaverages = $this->get_pref('showaverages');
-            $showaverages_group = $this->currentgroup && $showaverages;
+            $showuseridnumber = $this->get_pref('showuseridnumber');
 
-            if ($showaverages_group) {
-                $studentshtml .= '<tr class="groupavg r'.$this->rowcount++.'"><th class="header c0" '.$colspan.'scope="row">'.$straverage_group.'</th></tr>';
-            }
+            foreach ($this->gtree->items as $itemid=>$unused) {
+                // emulate grade element
+                $item =& $this->gtree->get_item($itemid);
 
-            if ($showaverages) {
-                $studentshtml .= '<tr class="avg r'.$this->rowcount++.'"><th class="header c0" '.$colspan.'scope="row">'.$straverage.'</th></tr>';
+                $eid = $this->gtree->get_item_eid($item);
+                $element = $this->gtree->locate_element($eid);
+                $itemcell = new html_table_cell();
+                $itemcell->attributes['class'] = 'controls icons';
+                $itemcell->text = $this->get_icons($element);
+                $iconsrow->cells[] = $itemcell;
             }
-
-            $studentshtml .= '</tbody>
-                </table>
-            </div>
-            <div class="right_scroller">
-                <table id="user-grades" class="">
-                    <tbody class="righttest">';
-
-        } else {
-            $studentshtml .= '<table id="user-grades" class="gradestable flexible boxaligncenter generaltable">
-                                <tbody>';
+            $rows[] = $iconsrow;
         }
-
-        return $studentshtml;
+        return $rows;
     }
 
     /**
-     * Closes all open elements
+     * Builds and return the row of ranges for the right part of the grader report.
+     * @param array $rows The Array of rows for the right part of the report
+     * @return array Array of rows for the right part of the report
      */
-    function get_endhtml() {
-        global $CFG, $USER;
+    public function get_right_range_row($rows=array()) {
+        global $OUTPUT;
 
-        $fixedstudents = $this->is_fixed_students();
+        if ($this->get_pref('showranges')) {
+            $rangesdisplaytype   = $this->get_pref('rangesdisplaytype');
+            $rangesdecimalpoints = $this->get_pref('rangesdecimalpoints');
+            $rangerow = new html_table_row();
+            $rangerow->attributes['class'] = 'heading range';
 
-        if ($fixedstudents) {
-            return "</tbody></table></div>";
-        } else {
-            return "</tbody></table>";
+            foreach ($this->gtree->items as $itemid=>$unused) {
+                $item =& $this->gtree->items[$itemid];
+                $itemcell = new html_table_cell();
+                $itemcell->header = true;
+                $itemcell->attributes['class'] .= ' header range';
+
+                $hidden = '';
+                if ($item->is_hidden()) {
+                    $hidden = ' hidden ';
         }
+
+                $formattedrange = $item->get_formatted_range($rangesdisplaytype, $rangesdecimalpoints);
+
+                $itemcell->text = $OUTPUT->container($formattedrange, 'rangevalues'.$hidden);
+                $rangerow->cells[] = $itemcell;
+            }
+            $rows[] = $rangerow;
+        }
+        return $rows;
     }
 
     /**
-     * Builds and return the HTML row of column totals.
+     * Builds and return the row of averages for the right part of the grader report.
+     * @param array $rows Whether to return only group averages or all averages.
      * @param  bool $grouponly Whether to return only group averages or all averages.
-     * @return string HTML
+     * @return array Array of rows for the right part of the report
      */
-    function get_avghtml($grouponly=false) {
-        global $CFG, $USER;
+    public function get_right_avg_row($rows=array(), $grouponly=false) {
+        global $CFG, $USER, $DB, $OUTPUT;
 
         if (!$this->canviewhidden) {
             // totals might be affected by hiding, if user can not see hidden grades the aggregations might be altered
-            // better not show them at all if user can not see all hideen grades
-            return;
+            // better not show them at all if user can not see all hidden grades
+            return $rows;
         }
 
+        $showaverages = $this->get_pref('showaverages');
+        $showaveragesgroup = $this->currentgroup && $showaverages;
+
         $averagesdisplaytype   = $this->get_pref('averagesdisplaytype');
         $averagesdecimalpoints = $this->get_pref('averagesdecimalpoints');
         $meanselection         = $this->get_pref('meanselection');
@@ -1132,12 +1289,14 @@ class grade_report_grader extends grade_report {
             $showaverages = $this->currentgroup && $this->get_pref('showaverages');
             $groupsql = $this->groupsql;
             $groupwheresql = $this->groupwheresql;
+            $groupwheresqlparams = $this->groupwheresql_params;
             $avgcssclass = 'groupavg';
         } else {
             $straverage = get_string('overallaverage', 'grades');
             $showaverages = $this->get_pref('showaverages');
             $groupsql = "";
             $groupwheresql = "";
+            $groupwheresqlparams = array();
         }
 
         if ($shownumberofgrades) {
@@ -1146,86 +1305,90 @@ class grade_report_grader extends grade_report {
 
         $totalcount = $this->get_numusers($grouponly);
 
+        //limit to users with a gradeable role
+        list($gradebookrolessql, $gradebookrolesparams) = $DB->get_in_or_equal(explode(',', $this->gradebookroles), SQL_PARAMS_NAMED, 'grbr0');
+
+        //limit to users with an active enrollment
+        list($enrolledsql, $enrolledparams) = get_enrolled_sql($this->context);
+
         if ($showaverages) {
+            $params = array_merge(array('courseid'=>$this->courseid), $gradebookrolesparams, $enrolledparams, $groupwheresqlparams);
 
             // find sums of all grade items in course
             $sql = "SELECT g.itemid, SUM(g.finalgrade) AS sum
-                      FROM {$CFG->prefix}grade_items gi
-                           JOIN {$CFG->prefix}grade_grades g ON g.itemid = gi.id
-                           JOIN {$CFG->prefix}user u ON u.id = g.userid
-                           $groupsql
+                      FROM {grade_items} gi
+                      JOIN {grade_grades} g ON g.itemid = gi.id
+                      JOIN {user} u ON u.id = g.userid
+                      JOIN ($enrolledsql) je ON je.id = u.id
                            JOIN (
                                SELECT DISTINCT ra.userid
-                                 FROM {$CFG->prefix}role_assignments ra
-                                WHERE ra.roleid IN ($this->gradebookroles)
+                                 FROM {role_assignments} ra
+                                WHERE ra.roleid $gradebookrolessql
                                   AND ra.contextid " . get_related_contexts_string($this->context) . "
                            ) rainner ON rainner.userid = u.id
-                       WHERE gi.courseid = $this->courseid
+                      $groupsql
+                     WHERE gi.courseid = :courseid
                        AND u.deleted = 0
                        AND g.finalgrade IS NOT NULL
                        $groupwheresql
                   GROUP BY g.itemid";
-            $sum_array = array();
-            if ($sums = get_records_sql($sql)) {
+            $sumarray = array();
+            if ($sums = $DB->get_records_sql($sql, $params)) {
                 foreach ($sums as $itemid => $csum) {
-                    $sum_array[$itemid] = $csum->sum;
+                    $sumarray[$itemid] = $csum->sum;
                 }
             }
 
-            $columncount=0;
-
-            $avghtml = '<tr class="' . $avgcssclass . ' r'.$this->rowcount++.'">';
-
             // MDL-10875 Empty grades must be evaluated as grademin, NOT always 0
             // This query returns a count of ungraded grades (NULL finalgrade OR no matching record in grade_grades table)
             $sql = "SELECT gi.id, COUNT(DISTINCT u.id) AS count
-                      FROM {$CFG->prefix}grade_items gi
-                           CROSS JOIN {$CFG->prefix}user u
-                           JOIN {$CFG->prefix}role_assignments ra       ON ra.userid = u.id
-                           LEFT OUTER JOIN {$CFG->prefix}grade_grades g ON g.itemid = gi.id AND g.userid = u.id AND g.finalgrade IS NOT NULL
+                      FROM {grade_items} gi
+                      CROSS JOIN {user} u
+                      JOIN ($enrolledsql) je
+                           ON je.id = u.id
+                      JOIN {role_assignments} ra
+                           ON ra.userid = u.id
+                      LEFT OUTER JOIN {grade_grades} g
+                           ON (g.itemid = gi.id AND g.userid = u.id AND g.finalgrade IS NOT NULL)
                            $groupsql
-                     WHERE gi.courseid = $this->courseid
-                           AND ra.roleid IN ($this->gradebookroles)
+                     WHERE gi.courseid = :courseid
+                           AND ra.roleid $gradebookrolessql
+                           AND ra.contextid ".get_related_contexts_string($this->context)."
                            AND u.deleted = 0
-                           AND ra.contextid " . get_related_contexts_string($this->context) . "
                            AND g.id IS NULL
                            $groupwheresql
                   GROUP BY gi.id";
 
-            $ungraded_counts = get_records_sql($sql);
+            $ungradedcounts = $DB->get_records_sql($sql, $params);
 
-            $fixedstudents = $this->is_fixed_students();
-            if (!$fixedstudents) {
-                $colspan='colspan="2" ';
-                if ($this->get_pref('showuseridnumber')) {
-                    $colspan = 'colspan="3" ';
-                }
-                $avghtml .= '<th class="header c0 range" '.$colspan.' scope="row">'.$straverage.'</th>';
-            }
+            $avgrow = new html_table_row();
+            $avgrow->attributes['class'] = 'avg';
 
             foreach ($this->gtree->items as $itemid=>$unused) {
                 $item =& $this->gtree->items[$itemid];
 
                 if ($item->needsupdate) {
-                    $avghtml .= '<td class="cell c' . $columncount++.'"><span class="gradingerror">'.get_string('error').'</span></td>';
+                    $avgcell = new html_table_cell();
+                    $avgcell->text = $OUTPUT->container(get_string('error'), 'gradingerror');
+                    $avgrow->cells[] = $avgcell;
                     continue;
                 }
 
-                if (!isset($sum_array[$item->id])) {
-                    $sum_array[$item->id] = 0;
+                if (!isset($sumarray[$item->id])) {
+                    $sumarray[$item->id] = 0;
                 }
 
-                if (empty($ungraded_counts[$itemid])) {
-                    $ungraded_count = 0;
+                if (empty($ungradedcounts[$itemid])) {
+                    $ungradedcount = 0;
                 } else {
-                    $ungraded_count = $ungraded_counts[$itemid]->count;
+                    $ungradedcount = $ungradedcounts[$itemid]->count;
                 }
 
                 if ($meanselection == GRADE_REPORT_MEAN_GRADED) {
-                    $mean_count = $totalcount - $ungraded_count;
+                    $meancount = $totalcount - $ungradedcount;
                 } else { // Bump up the sum by the number of ungraded items * grademin
-                    $sum_array[$item->id] += $ungraded_count * $item->grademin;
-                    $mean_count = $totalcount;
+                    $sumarray[$item->id] += $ungradedcount * $item->grademin;
+                    $meancount = $totalcount;
                 }
 
                 $decimalpoints = $item->get_decimals();
@@ -1249,106 +1412,29 @@ class grade_report_grader extends grade_report {
                     $decimalpoints = $averagesdecimalpoints;
                 }
 
-                if (!isset($sum_array[$item->id]) || $mean_count == 0) {
-                    $avghtml .= '<td class="cell c' . $columncount++.'">-</td>';
+                if (!isset($sumarray[$item->id]) || $meancount == 0) {
+                    $avgcell = new html_table_cell();
+                    $avgcell->text = '-';
+                    $avgrow->cells[] = $avgcell;
+
                 } else {
-                    $sum = $sum_array[$item->id];
-                    $avgradeval = $sum/$mean_count;
+                    $sum = $sumarray[$item->id];
+                    $avgradeval = $sum/$meancount;
                     $gradehtml = grade_format_gradevalue($avgradeval, $item, true, $displaytype, $decimalpoints);
 
                     $numberofgrades = '';
                     if ($shownumberofgrades) {
-                        $numberofgrades = " ($mean_count)";
-                    }
-
-                    $avghtml .= '<td class="cell c' . $columncount++.'">'.$gradehtml.$numberofgrades.'</td>';
-                }
-            }
-            $avghtml .= '</tr>';
-        }
-        return $avghtml;
-    }
-
-    /**
-     * Builds and return the HTML row of ranges for each column (i.e. range).
-     * @return string HTML
-     */
-    function get_rangehtml() {
-        global $USER, $CFG;
-
-        $rangehtml = '';
-        if ($this->get_pref('showranges')) {
-            $rangesdisplaytype   = $this->get_pref('rangesdisplaytype');
-            $rangesdecimalpoints = $this->get_pref('rangesdecimalpoints');
-
-            $columncount=0;
-            $rangehtml = '<tr class="range r'.$this->rowcount++.' heading">';
-
-            $fixedstudents = $this->is_fixed_students();
-            if (!$fixedstudents) {
-                $colspan='colspan="2" ';
-	                 if ($this->get_pref('showuseridnumber')) {
-                    $colspan = 'colspan="3" ';
-                }
-                $rangehtml .= '<th class="header c0 range" '.$colspan.' scope="row">'.$this->get_lang_string('range','grades').'</th>';
-            }
-
-            foreach ($this->gtree->items as $itemid=>$unused) {
-                $item =& $this->gtree->items[$itemid];
-
-
-                $hidden = '';
-                if ($item->is_hidden()) {
-                    $hidden = ' hidden ';
+                        $numberofgrades = " ($meancount)";
                 }
 
-                $formatted_range = $item->get_formatted_range($rangesdisplaytype, $rangesdecimalpoints);
-
-                $rangehtml .= '<th class="header c'.$columncount++.' range"><span class="rangevalues'.$hidden.'">'. $formatted_range .'</span></th>';
-
-            }
-            $rangehtml .= '</tr>';
-        }
-        return $rangehtml;
-    }
-
-    /**
-     * Builds and return the HTML row of ranges for each column (i.e. range).
-     * @return string HTML
-     */
-    function get_iconshtml() {
-        global $USER, $CFG;
-
-        $iconshtml = '';
-        if ($USER->gradeediting[$this->courseid]) {
-
-            $iconshtml = '<tr class="controls">';
-
-            $fixedstudents = $this->is_fixed_students();
-            $showuseridnumber = $this->get_pref('showuseridnumber');
-
-            $colspan = 'colspan="2"';
-            if ($showuseridnumber) {
-                $colspan = 'colspan="3"';
-            }
-
-            if (!$fixedstudents) {
-                $iconshtml .= '<th class="header c0 controls" scope="row" '.$colspan.'>'.$this->get_lang_string('controls','grades').'</th>';
+                    $avgcell = new html_table_cell();
+                    $avgcell->text = $gradehtml.$numberofgrades;
+                    $avgrow->cells[] = $avgcell;
             }
-
-            $columncount = 0;
-            foreach ($this->gtree->items as $itemid=>$unused) {
-                // emulate grade element
-                $item =& $this->gtree->items[$itemid];
-
-                $eid = $this->gtree->get_item_eid($item);
-                $element = $this->gtree->locate_element($eid);
-
-                $iconshtml .= '<td class="controls cell c'.$columncount++.' icons">' . $this->get_icons($element) . '</td>';
             }
-            $iconshtml .= '</tr>';
+            $rows[] = $avgrow;
         }
-        return $iconshtml;
+        return $rows;
     }
 
     /**
@@ -1359,40 +1445,40 @@ class grade_report_grader extends grade_report {
      * @param object $object
      * @return string HTML
      */
-    function get_icons($element) {
-        global $CFG, $USER;
+    protected function get_icons($element) {
+        global $CFG, $USER, $OUTPUT;
 
         if (!$USER->gradeediting[$this->courseid]) {
             return '<div class="grade_icons" />';
         }
 
         // Init all icons
-        $edit_icon = '';
+        $editicon = '';
 
         if ($element['type'] != 'categoryitem' && $element['type'] != 'courseitem') {
-            $edit_icon             = $this->gtree->get_edit_icon($element, $this->gpr);
+            $editicon = $this->gtree->get_edit_icon($element, $this->gpr);
         }
 
-        $edit_calculation_icon = '';
-        $show_hide_icon        = '';
-        $lock_unlock_icon      = '';
+        $editcalculationicon = '';
+        $showhideicon        = '';
+        $lockunlockicon      = '';
 
         if (has_capability('moodle/grade:manage', $this->context)) {
 
             if ($this->get_pref('showcalculations')) {
-                $edit_calculation_icon = $this->gtree->get_calculation_icon($element, $this->gpr);
+                $editcalculationicon = $this->gtree->get_calculation_icon($element, $this->gpr);
             }
 
             if ($this->get_pref('showeyecons')) {
-               $show_hide_icon = $this->gtree->get_hiding_icon($element, $this->gpr);
+               $showhideicon = $this->gtree->get_hiding_icon($element, $this->gpr);
             }
 
             if ($this->get_pref('showlocks')) {
-                $lock_unlock_icon = $this->gtree->get_locking_icon($element, $this->gpr);
+                $lockunlockicon = $this->gtree->get_locking_icon($element, $this->gpr);
             }
         }
 
-        return '<div class="grade_icons">'.$edit_icon.$edit_calculation_icon.$show_hide_icon.$lock_unlock_icon.'</div>';
+        return $OUTPUT->container($editicon.$editcalculationicon.$showhideicon.$lockunlockicon, 'grade_icons');
     }
 
     /**
@@ -1400,29 +1486,33 @@ class grade_report_grader extends grade_report {
      * @param object $object
      * @return string HTML
      */
-    function get_collapsing_icon($element) {
-        global $CFG;
+    protected function get_collapsing_icon($element) {
+        global $OUTPUT;
 
-        $contract_expand_icon = '';
+        $icon = '';
         // If object is a category, display expand/contract icon
         if ($element['type'] == 'category') {
             // Load language strings
-            $strswitch_minus = $this->get_lang_string('aggregatesonly', 'grades');
-            $strswitch_plus  = $this->get_lang_string('gradesonly', 'grades');
-            $strswitch_whole = $this->get_lang_string('fullmode', 'grades');
+            $strswitchminus = $this->get_lang_string('aggregatesonly', 'grades');
+            $strswitchplus  = $this->get_lang_string('gradesonly', 'grades');
+            $strswitchwhole = $this->get_lang_string('fullmode', 'grades');
 
-            $expand_contract = 'switch_minus'; // Default: expanded
+            $url = new moodle_url($this->gpr->get_return_url(null, array('target'=>$element['eid'], 'sesskey'=>sesskey())));
 
             if (in_array($element['object']->id, $this->collapsed['aggregatesonly'])) {
-                $expand_contract = 'switch_plus';
-            } elseif (!empty($this->collapsed['gradesonly']) && in_array($element['object']->id, $this->collapsed['gradesonly'])) {
-                $expand_contract = 'switch_whole';
+                $url->param('action', 'switch_plus');
+                $icon = $OUTPUT->action_icon($url, new pix_icon('t/switch_plus', $strswitchplus));
+
+            } else if (in_array($element['object']->id, $this->collapsed['gradesonly'])) {
+                $url->param('action', 'switch_whole');
+                $icon = $OUTPUT->action_icon($url, new pix_icon('t/switch_whole', $strswitchwhole));
+
+            } else {
+                $url->param('action', 'switch_minus');
+                $icon = $OUTPUT->action_icon($url, new pix_icon('t/switch_minus', $strswitchminus));
             }
-            $url = $this->gpr->get_return_url(null, array('target'=>$element['eid'], 'action'=>$expand_contract, 'sesskey'=>sesskey()));
-            $contract_expand_icon = '<a href="'.$url.'"><img src="'.$CFG->pixpath.'/t/'.$expand_contract.'.gif" class="iconsmall" alt="'
-                                    .${'str'.$expand_contract}.'" title="'.${'str'.$expand_contract}.'" /></a>';
         }
-        return $contract_expand_icon;
+        return $icon;
     }
 
     /**
@@ -1431,7 +1521,7 @@ class grade_report_grader extends grade_report {
      * @param string $action Which action to take (edit, delete etc...)
      * @return
      */
-    function process_action($target, $action) {
+    public function process_action($target, $action) {
         // TODO: this code should be in some grade_tree static method
         $targettype = substr($target, 0, 1);
         $targetid = substr($target, 1);
@@ -1482,7 +1572,7 @@ class grade_report_grader extends grade_report {
      *
      * @return bool
      */
-    function is_fixed_students() {
+    public function is_fixed_students() {
         global $USER, $CFG;
         return empty($USER->screenreader) && $CFG->grade_report_fixedstudents && 
             (check_browser_version('MSIE', '7.0') || 
@@ -1490,7 +1580,60 @@ class grade_report_grader extends grade_report {
              check_browser_version('Gecko', '2006010100') ||
              check_browser_version('Camino', '1.0') ||
              check_browser_version('Opera', '6.0') ||
-             check_browser_version('Safari', '2.0')); 
+             check_browser_version('Chrome', '6') ||
+             check_browser_version('Safari', '300'));
+    }
+
+    /**
+     * Refactored function for generating HTML of sorting links with matching arrows.
+     * Returns an array with 'studentname' and 'idnumber' as keys, with HTML ready
+     * to inject into a table header cell.
+     * @return array An associative array of HTML sorting links+arrows
+     */
+    public function get_sort_arrows() {
+        global $OUTPUT;
+        $arrows = array();
+
+        $strsortasc   = $this->get_lang_string('sortasc', 'grades');
+        $strsortdesc  = $this->get_lang_string('sortdesc', 'grades');
+        $strfirstname = $this->get_lang_string('firstname');
+        $strlastname  = $this->get_lang_string('lastname');
+
+        $firstlink = html_writer::link(new moodle_url($this->baseurl, array('sortitemid'=>'firstname')), $strfirstname);
+        $lastlink = html_writer::link(new moodle_url($this->baseurl, array('sortitemid'=>'lastname')), $strlastname);
+        $idnumberlink = html_writer::link(new moodle_url($this->baseurl, array('sortitemid'=>'idnumber')), get_string('idnumber'));
+
+        $arrows['studentname'] = $lastlink;
+
+        if ($this->sortitemid === 'lastname') {
+            if ($this->sortorder == 'ASC') {
+                $arrows['studentname'] .= print_arrow('up', $strsortasc, true);
+            } else {
+                $arrows['studentname'] .= print_arrow('down', $strsortdesc, true);
+            }
+        }
+
+        $arrows['studentname'] .= ' ' . $firstlink;
+
+        if ($this->sortitemid === 'firstname') {
+            if ($this->sortorder == 'ASC') {
+                $arrows['studentname'] .= print_arrow('up', $strsortasc, true);
+            } else {
+                $arrows['studentname'] .= print_arrow('down', $strsortdesc, true);
+            }
+        }
+
+        $arrows['idnumber'] = $idnumberlink;
+
+        if ('idnumber' == $this->sortitemid) {
+            if ($this->sortorder == 'ASC') {
+                $arrows['idnumber'] .= print_arrow('up', $strsortasc, true);
+            } else {
+                $arrows['idnumber'] .= print_arrow('down', $strsortdesc, true);
+            }
+        }
+
+        return $arrows;
     }
 }
-?>
+
