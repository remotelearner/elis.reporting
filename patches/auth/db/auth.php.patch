diff --git a/auth/db/auth.php b/auth/db/auth.php
index e3582f5..931b4d2 100644
--- a/auth/db/auth.php
+++ b/auth/db/auth.php
@@ -1,22 +1,20 @@
 <?php
 
 /**
- * @author Martin Dougiamas
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package moodle multiauth
- *
  * Authentication Plugin: External Database Authentication
  *
  * Checks against an external database.
  *
- * 2006-08-28  File created.
+ * @package    auth
+ * @subpackage db
+ * @author     Martin Dougiamas
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU Public License
  */
 
-if (!defined('MOODLE_INTERNAL')) {
-    die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
-}
+defined('MOODLE_INTERNAL') || die();
 
 require_once($CFG->libdir.'/authlib.php');
+require_once($CFG->libdir.'/adodb/adodb.inc.php');
 
 /**
  * External database authentication plugin.
@@ -38,22 +36,21 @@ class auth_plugin_db extends auth_plugin_base {
      * Returns true if the username and password work and false if they are
      * wrong or don't exist.
      *
-     * @param string $username The username (with system magic quotes)
-     * @param string $password The password (with system magic quotes)
+     * @param string $username The username
+     * @param string $password The password
      *
      * @return bool Authentication success or failure.
      */
     function user_login($username, $password) {
-
-        global $CFG;
+        global $CFG, $DB;
 
         $textlib = textlib_get_instance();
-        $extusername = $textlib->convert(stripslashes($username), 'utf-8', $this->config->extencoding);
-        $extpassword = $textlib->convert(stripslashes($password), 'utf-8', $this->config->extencoding);
+        $extusername = $textlib->convert($username, 'utf-8', $this->config->extencoding);
+        $extpassword = $textlib->convert($password, 'utf-8', $this->config->extencoding);
 
         $authdb = $this->db_init();
 
-        if ($this->config->passtype === 'internal') {
+        if ($this->is_internal()) {
             // lookup username externally, but resolve
             // password locally -- to support backend that
             // don't track passwords
@@ -61,16 +58,16 @@ class auth_plugin_db extends auth_plugin_base {
                                      WHERE {$this->config->fielduser} = '".$this->ext_addslashes($extusername)."' ");
             if (!$rs) {
                 $authdb->Close();
-                debugging(get_string('auth_dbcantconnect','auth'));
+                debugging(get_string('auth_dbcantconnect','auth_db'));
                 return false;
             }
 
-            if ( !$rs->EOF ) {
+            if (!$rs->EOF) {
                 $rs->Close();
                 $authdb->Close();
-                // user exists exterally
+                // user exists externally
                 // check username/password internally
-                if ($user = get_record('user', 'username', $username, 'mnethostid', $CFG->mnet_localhost_id)) {
+                if ($user = $DB->get_record('user', array('username'=>$username, 'mnethostid'=>$CFG->mnet_localhost_id))) {
                     return validate_internal_user_password($user, $password);
                 }
             } else {
@@ -81,7 +78,7 @@ class auth_plugin_db extends auth_plugin_base {
             }
 
         } else {
-            // normal case: use external db for passwords
+            // normal case: use external db for both usernames and passwords
 
             if ($this->config->passtype === 'md5') {   // Re-format password accordingly
                 $extpassword = md5($extpassword);
@@ -94,7 +91,7 @@ class auth_plugin_db extends auth_plugin_base {
                                   AND {$this->config->fieldpass} = '".$this->ext_addslashes($extpassword)."' ");
             if (!$rs) {
                 $authdb->Close();
-                debugging(get_string('auth_dbcantconnect','auth'));
+                debugging(get_string('auth_dbcantconnect','auth_db'));
                 return false;
             }
 
@@ -126,6 +123,7 @@ class auth_plugin_db extends auth_plugin_base {
 
         return $authdb;
     }
+
     /**
      * retuns user attribute mappings between moodle and ldap
      *
@@ -146,16 +144,15 @@ class auth_plugin_db extends auth_plugin_base {
      * Reads any other information for a user from external database,
      * then returns it in an array
      *
-     * @param string $username (with system magic quotes)
+     * @param string $username
      *
      * @return array without magic quotes
      */
     function get_userinfo($username) {
-
         global $CFG;
 
         $textlib = textlib_get_instance();
-        $extusername = $textlib->convert(stripslashes($username), 'utf-8', $this->config->extencoding);
+        $extusername = $textlib->convert($username, 'utf-8', $this->config->extencoding);
 
         $authdb = $this->db_init();
 
@@ -175,33 +172,29 @@ class auth_plugin_db extends auth_plugin_base {
                 " WHERE {$this->config->fielduser} = '".$this->ext_addslashes($extusername)."'";
             if ($rs = $authdb->Execute($sql)) {
                 if ( !$rs->EOF ) {
-                    $fields_obj = rs_fetch_record($rs);
+                    $fields_obj = $rs->FetchObj();
                     $fields_obj = (object)array_change_key_case((array)$fields_obj , CASE_LOWER);                 
                     foreach ($selectfields as $localname=>$externalname) {
                         $result[$localname] = $textlib->convert($fields_obj->{$localname}, $this->config->extencoding, 'utf-8');
                      }
                  }
-                 rs_close($rs);
+                 $rs->Close();
             }
         }
         $authdb->Close();
         return $result;
-
     }
 
-
     /**
      * Change a user's password
      *
-     * @param  object  $user        User table object  (with system magic quotes)
-     * @param  string  $newpassword Plaintext password (with system magic quotes)
+     * @param  object  $user        User table object
+     * @param  string  $newpassword Plaintext password
      *
      * @return bool                  True on success
      */
     function user_update_password($user, $newpassword) {
-
-        global $CFG;
-        if ($this->config->passtype === 'internal') {
+        if ($this->is_internal()) {
             return update_internal_user_password($user, $newpassword);
         } else {
             // we should have never been called!
@@ -219,55 +212,52 @@ class auth_plugin_db extends auth_plugin_base {
      * Syncing users removes (disables) users that dont exists anymore in external db.
      * Creates new users and updates coursecreator status of users.
      *
-     * @param bool $do_updates  Optional: set to true to force an update of existing accounts
-     *
      * This implementation is simpler but less scalable than the one found in the LDAP module.
      *
+     * @param bool $do_updates  Optional: set to true to force an update of existing accounts
+     * @return bool success
      */
     function sync_users($do_updates=false) {
-
-        global $CFG;
-        $pcfg = get_config('auth/db');
+        global $CFG, $DB;
 
 /// list external users
         $userlist = $this->get_userlist();
-        $quoteduserlist = implode("', '", addslashes_recursive($userlist));
-        $quoteduserlist = "'$quoteduserlist'";
 
 /// delete obsolete internal users
         if (!empty($this->config->removeuser)) {
 
             // find obsolete users
             if (count($userlist)) {
-                $sql = "SELECT u.id, u.username, u.email, u.auth
-                        FROM {$CFG->prefix}user u
-                        WHERE u.auth='db' AND u.deleted=0 AND u.username NOT IN ($quoteduserlist)";
+                list($notin_sql, $params) = $DB->get_in_or_equal($userlist, SQL_PARAMS_NAMED, 'u', false);
+                $params['authtype'] = $this->authtype;
+                $sql = "SELECT u.*
+                          FROM {user} u
+                         WHERE u.auth=:authtype AND u.deleted=0 AND u.username $notin_sql";
             } else {
-                $sql = "SELECT u.id, u.username, u.email, u.auth
-                        FROM {$CFG->prefix}user u
-                        WHERE u.auth='db' AND u.deleted=0";
+                $sql = "SELECT u.*
+                          FROM {user} u
+                         WHERE u.auth=:authtype AND u.deleted=0";
+                $params = array();
+                $params['authtype'] = $this->authtype;
             }
-            $remove_users = get_records_sql($sql);
+            $remove_users = $DB->get_records_sql($sql, $params);
 
             if (!empty($remove_users)) {
-                print_string('auth_dbuserstoremove','auth', count($remove_users)); echo "\n";
+                print_string('auth_dbuserstoremove','auth_db', count($remove_users)); echo "\n";
 
                 foreach ($remove_users as $user) {
-                    if ($this->config->removeuser == 2) {
+                    if ($this->config->removeuser == AUTH_REMOVEUSER_FULLDELETE) {
                         if (delete_user($user)) {
-                            echo "\t"; print_string('auth_dbdeleteuser', 'auth', array($user->username, $user->id)); echo "\n";
+                            echo "\t"; print_string('auth_dbdeleteuser', 'auth_db', array('name'=>$user->username, 'id'=>$user->id)); echo "\n";
                         } else {
-                            echo "\t"; print_string('auth_dbdeleteusererror', 'auth', $user->username); echo "\n";
+                            echo "\t"; print_string('auth_dbdeleteusererror', 'auth_db', $user->username); echo "\n";
                         }
-                    } else if ($this->config->removeuser == 1) {
-                        $updateuser = new object();
+                    } else if ($this->config->removeuser == AUTH_REMOVEUSER_SUSPEND) {
+                        $updateuser = new stdClass();
                         $updateuser->id   = $user->id;
                         $updateuser->auth = 'nologin';
-                        if (update_record('user', $updateuser)) {
-                            echo "\t"; print_string('auth_dbsuspenduser', 'auth', array($user->username, $user->id)); echo "\n";
-                        } else {
-                            echo "\t"; print_string('auth_dbsuspendusererror', 'auth', $user->username); echo "\n";
-                        }
+                        $DB->update_record('user', $updateuser);
+                        echo "\t"; print_string('auth_dbsuspenduser', 'auth_db', array('name'=>$user->username, 'id'=>$user->id)); echo "\n";
                     }
                 }
             }
@@ -300,15 +290,17 @@ class auth_plugin_db extends auth_plugin_base {
             // only go ahead if we actually
             // have fields to update locally
             if (!empty($updatekeys)) {
-                $sql = 'SELECT u.id, u.username
-                        FROM ' . $CFG->prefix .'user u
-                        WHERE u.auth=\'db\' AND u.deleted=\'0\' AND u.username IN (' . $quoteduserlist . ')';
-                if ($update_users = get_records_sql($sql)) {
+                list($in_sql, $params) = $DB->get_in_or_equal($userlist, SQL_PARAMS_NAMED, 'u', true);
+                $params['authtype'] = $this->authtype;
+                $sql = "SELECT u.id, u.username
+                          FROM {user} u
+                         WHERE u.auth=:authtype AND u.deleted=0 AND u.username {$in_sql}";
+                if ($update_users = $DB->get_records_sql($sql, $params)) {
                     print "User entries to update: ". count($update_users). "\n";
 
                     foreach ($update_users as $user) {
-                        echo "\t"; print_string('auth_dbupdatinguser', 'auth', array($user->username, $user->id));
-                        if (!$this->update_user_record(addslashes($user->username), $updatekeys)) {
+                        echo "\t"; print_string('auth_dbupdatinguser', 'auth_db', array('name'=>$user->username, 'id'=>$user->id));
+                        if (!$this->update_user_record($user->username, $updatekeys)) {
                             echo " - ".get_string('skipped');
                         }
                         echo "\n";
@@ -325,10 +317,10 @@ class auth_plugin_db extends auth_plugin_base {
         // NOTE: this is very memory intensive
         // and generally inefficient
         $sql = 'SELECT u.id, u.username
-                FROM ' . $CFG->prefix .'user u
-                WHERE u.auth=\'db\' AND u.deleted=\'0\'';
+                FROM {user} u
+                WHERE u.auth=\'' . $this->authtype . '\' AND u.deleted=\'0\'';
 
-        $users = get_records_sql($sql);
+        $users = $DB->get_records_sql($sql);
 
         // simplify down to usernames
         $usernames = array();
@@ -343,8 +335,8 @@ class auth_plugin_db extends auth_plugin_base {
         unset($usernames);
 
         if (!empty($add_users)) {
-            print_string('auth_dbuserstoadd','auth',count($add_users)); echo "\n";
-            begin_sql();
+            print_string('auth_dbuserstoadd','auth_db',count($add_users)); echo "\n";
+            $transaction = $DB->start_delegated_transaction();
             foreach($add_users as $user) {
                 $username = $user;
                 $user = $this->get_userinfo_asobj($user);
@@ -353,30 +345,29 @@ class auth_plugin_db extends auth_plugin_base {
                 $user->username   = $username;
                 $user->modified   = time();
                 $user->confirmed  = 1;
-                $user->auth       = 'db';
+                $user->auth       = $this->authtype;
                 $user->mnethostid = $CFG->mnet_localhost_id;
                 if (empty($user->lang)) {
                     $user->lang = $CFG->lang;
                 }
 
-                $user = addslashes_object($user);
                 // maybe the user has been deleted before
-                if ($old_user = get_record('user', 'username', $user->username, 'deleted', 1, 'mnethostid', $user->mnethostid)) {
+                if ($old_user = $DB->get_record('user', array('username'=>$user->username, 'deleted'=>1, 'mnethostid'=>$user->mnethostid))) {
                     $user->id = $old_user->id;
-                    set_field('user', 'deleted', 0, 'username', $user->username);
-                    echo "\t"; print_string('auth_dbreviveduser', 'auth', array(stripslashes($user->username), $user->id)); echo "\n";
-                } elseif ($id = insert_record ('user',$user)) { // it is truly a new user
-                    echo "\t"; print_string('auth_dbinsertuser','auth',array(stripslashes($user->username), $id)); echo "\n";
+                    $DB->set_field('user', 'deleted', 0, array('username'=>$user->username));
+                    echo "\t"; print_string('auth_dbreviveduser', 'auth_db', array('name'=>$user->username, 'id'=>$user->id)); echo "\n";
+
+                } else {
+                    $id = $DB->insert_record ('user',$user); // it is truly a new user
+                    echo "\t"; print_string('auth_dbinsertuser','auth_db',array('name'=>$user->username, 'id'=>$id)); echo "\n";
                     // if relevant, tag for password generation
-                    if ($this->config->passtype === 'internal') {
+                    if ($this->is_internal()) {
                         set_user_preference('auth_forcepasswordchange', 1, $id);
                         set_user_preference('create_password',          1, $id);
                     }
-                } else {
-                    echo "\t"; print_string('auth_dbinsertusererror', 'auth', $user->username); echo "\n";
                 }
             }
-            commit_sql();
+            $transaction->allow_commit();
             unset($add_users); // free mem
         }
         return true;
@@ -388,7 +379,7 @@ class auth_plugin_db extends auth_plugin_base {
         $result = false;
 
         $textlib = textlib_get_instance();
-        $extusername = $textlib->convert(stripslashes($username), 'utf-8', $this->config->extencoding);
+        $extusername = $textlib->convert($username, 'utf-8', $this->config->extencoding);
 
         $authdb = $this->db_init();
 
@@ -396,8 +387,8 @@ class auth_plugin_db extends auth_plugin_base {
                                      WHERE {$this->config->fielduser} = '".$this->ext_addslashes($extusername)."' ");
 
         if (!$rs) {
-            print_error('auth_dbcantconnect','auth');
-        } else if ( !$rs->EOF ) {
+            print_error('auth_dbcantconnect','auth_db');
+        } else if (!$rs->EOF) {
             // user exists exterally
             $result = true;
         }
@@ -419,9 +410,9 @@ class auth_plugin_db extends auth_plugin_base {
                                 FROM   {$this->config->table} ");
 
         if (!$rs) {
-            print_error('auth_dbcantconnect','auth');
-        } else if ( !$rs->EOF ) {
-            while ($rec = rs_fetch_next_record($rs)) {
+            print_error('auth_dbcantconnect','auth_db');
+        } else if (!$rs->EOF) {
+            while ($rec = $rs->FetchRow()) {
                 $rec = (object)array_change_key_case((array)$rec , CASE_LOWER);
                 array_push($result, $rec->username);
             }
@@ -439,7 +430,7 @@ class auth_plugin_db extends auth_plugin_base {
      */
     function get_userinfo_asobj($username) {
         $user_array = truncate_userinfo($this->get_userinfo($username));
-        $user = new object();
+        $user = new stdClass();
         foreach($user_array as $key=>$value) {
             $user->{$key} = $value;
         }
@@ -454,19 +445,19 @@ class auth_plugin_db extends auth_plugin_base {
      * If you don't pass $updatekeys, there is a performance hit and
      * values removed from DB won't be removed from moodle.
      *
-     * @param string $username username (with system magic quotes)
+     * @param string $username username
      */
     function update_user_record($username, $updatekeys=false) {
-        global $CFG;
+        global $CFG, $DB;
 
         //just in case check text case
         $username = trim(moodle_strtolower($username));
 
         // get the current user record
-        $user = get_record('user', 'username', $username, 'mnethostid', $CFG->mnet_localhost_id);
+        $user = $DB->get_record('user', array('username'=>$username, 'mnethostid'=>$CFG->mnet_localhost_id));
         if (empty($user)) { // trouble
             error_log("Cannot update non-existent user: $username");
-            print_error('auth_dbusernotexist','auth',$username);
+            print_error('auth_dbusernotexist','auth_db',$username);
             die;
         }
 
@@ -488,13 +479,13 @@ class auth_plugin_db extends auth_plugin_base {
                 }
 
                 if (!empty($this->config->{'field_updatelocal_' . $key})) {
-                    if ($user->{$key} != $value) { // only update if it's changed
-                        set_field('user', $key, addslashes($value), 'id', $userid);
+                    if (isset($user->{$key}) and $user->{$key} != $value) { // only update if it's changed
+                        $DB->set_field('user', $key, $value, array('id'=>$userid));
                     }
                 }
             }
         }
-        return get_record_select('user', "id = $userid AND deleted = 0");
+        return $DB->get_record('user', array('id'=>$userid, 'deleted'=>0));
     }
 
     /**
@@ -502,8 +493,8 @@ class auth_plugin_db extends auth_plugin_base {
      * Modifies user in external database. It takes olduser (before changes) and newuser (after changes)
      * conpares information saved modified information to external db.
      *
-     * @param mixed $olduser     Userobject before modifications    (without system magic quotes)
-     * @param mixed $newuser     Userobject new modified userobject (without system magic quotes)
+     * @param mixed $olduser     Userobject before modifications
+     * @param mixed $newuser     Userobject new modified userobject
      * @return boolean result
      *
      */
@@ -513,7 +504,7 @@ class auth_plugin_db extends auth_plugin_base {
             return false;
         }
 
-        if (isset($olduser->auth) and $olduser->auth != 'db') {
+        if (isset($olduser->auth) and $olduser->auth != $this->authtype) {
             return true; // just change auth and skip update
         }
 
@@ -539,7 +530,7 @@ class auth_plugin_db extends auth_plugin_base {
             if (!isset($newuser->$key)) {
                 continue;
             }
-            $nuvalue = stripslashes($newuser->$key);
+            $nuvalue = $newuser->$key;
             if ($nuvalue != $value) {
                 $update[] = $this->config->{"field_map_$key"}."='".$this->ext_addslashes($textlib->convert($nuvalue, 'utf-8', $this->config->extencoding))."'";
             }
@@ -565,19 +556,32 @@ class auth_plugin_db extends auth_plugin_base {
     }
 
     function prevent_local_passwords() {
-        if (!isset($this->config->passtype)) {
-            return false;
-        }
-        return ($this->config->passtype != 'internal');
+        return !$this->is_internal();
     }
 
     /**
-     * Returns true if this authentication plugin is 'internal'.
+     * Returns true if this authentication plugin is "internal".
+     *
+     * Internal plugins use password hashes from Moodle user table for authentication.
      *
      * @return bool
      */
     function is_internal() {
-        return ($this->config->passtype == 'internal');
+        if (!isset($this->config->passtype)) {
+            return true;
+        }
+        return ($this->config->passtype === 'internal');
+    }
+
+    /**
+     * Indicates if moodle should automatically update internal user
+     * records with data from external sources using the information
+     * from auth_plugin_base::get_userinfo().
+     *
+     * @return bool true means automatically copy data from ext to user table
+     */
+    function is_synchronised_with_external() {
+        return true;
     }
 
     /**
@@ -587,22 +591,22 @@ class auth_plugin_db extends auth_plugin_base {
      * @return bool
      */
     function can_change_password() {
-        return ($this->config->passtype == 'internal' or !empty($this->config->changepasswordurl));
+        return ($this->is_internal() or !empty($this->config->changepasswordurl));
     }
 
     /**
      * Returns the URL for changing the user's pw, or empty if the default can
      * be used.
      *
-     * @return string
+     * @return moodle_url
      */
     function change_password_url() {
-        if ($this->config->passtype == 'internal') {
+        if ($this->is_internal()) {
             // standard form
-            return '';
+            return null;
         } else {
-            // use custom url
-            return $this->config->changepasswordurl;
+            // use admin defined custom url
+            return new moodle_url($this->config->changepasswordurl);
         }
     }
 
@@ -612,7 +616,7 @@ class auth_plugin_db extends auth_plugin_base {
      * @return bool
      */
     function can_reset_password() {
-        return ($this->config->passtype == 'internal');
+        return $this->is_internal();
     }
 
     /**
@@ -672,13 +676,12 @@ class auth_plugin_db extends auth_plugin_base {
             $config->debugauthdb = 0;
         }
         if (!isset($config->removeuser)) {
-            $config->removeuser = 0;
+            $config->removeuser = AUTH_REMOVEUSER_KEEP;
         }
         if (!isset($config->changepasswordurl)) {
             $config->changepasswordurl = '';
         }
 
-        $config = stripslashes_recursive($config);
         // save settings
         set_config('host',          $config->host,          'auth/db');
         set_config('type',          $config->type,          'auth/db');
@@ -711,4 +714,4 @@ class auth_plugin_db extends auth_plugin_base {
     }
 }
 
-?>
+
