diff --git a/auth/manual/auth.php b/auth/manual/auth.php
index 4ac157e..e3df78a 100644
--- a/auth/manual/auth.php
+++ b/auth/manual/auth.php
@@ -1,24 +1,40 @@
 <?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
- * @author Martin Dougiamas
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package moodle multiauth
- *
  * Authentication Plugin: Manual Authentication
- *
  * Just does a simple check against the moodle database.
  *
- * 2006-08-28  File created.
+ * @package    auth
+ * @subpackage manual
+ * @copyright  1999 onwards Martin Dougiamas (http://dougiamas.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 
-if (!defined('MOODLE_INTERNAL')) {
-    die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
-}
+defined('MOODLE_INTERNAL') || die();
 
 require_once($CFG->libdir.'/authlib.php');
 
 /**
  * Manual authentication plugin.
+ *
+ * @package    auth
+ * @subpackage manual
+ * @copyright  1999 onwards Martin Dougiamas (http://dougiamas.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 class auth_plugin_manual extends auth_plugin_base {
 
@@ -32,30 +48,37 @@ class auth_plugin_manual extends auth_plugin_base {
 
     /**
      * Returns true if the username and password work and false if they are
-     * wrong or don't exist.
-     *
-     * @param string $username The username (with system magic quotes)
-     * @param string $password The password (with system magic quotes)
+     * wrong or don't exist. (Non-mnet accounts only!)
      *
+     * @param string $username The username
+     * @param string $password The password
      * @return bool Authentication success or failure.
      */
-    function user_login ($username, $password) {
-        global $CFG;
-        if ($user = get_record('user', 'username', $username, 'mnethostid', $CFG->mnet_localhost_id)) {
-            return validate_internal_user_password($user, $password);
+    function user_login($username, $password) {
+        global $CFG, $DB, $USER;
+        if (!$user = $DB->get_record('user', array('username'=>$username, 'mnethostid'=>$CFG->mnet_localhost_id))) {
+            return false;
         }
+        if (!validate_internal_user_password($user, $password)) {
         return false;
     }
+        if ($password === 'changeme') {
+            // force the change - this is deprecated and it makes sense only for manual auth,
+            // because most other plugins can not change password easily or
+            // passwords are always specified by users
+            set_user_preference('auth_forcepasswordchange', true, $user->id);
+        }
+        return true;
+    }
 
     /**
      * Updates the user's password.
      *
-     * called when the user password is updated.
+     * Called when the user password is updated.
      *
-     * @param  object  $user        User table object  (with system magic quotes)
-     * @param  string  $newpassword Plaintext password (with system magic quotes)
+     * @param  object  $user        User table object
+     * @param  string  $newpassword Plaintext password
      * @return boolean result
-     *
      */
     function user_update_password($user, $newpassword) {
         $user = get_complete_user_data('id', $user->id);
@@ -89,10 +112,10 @@ class auth_plugin_manual extends auth_plugin_base {
      * Returns the URL for changing the user's pw, or empty if the default can
      * be used.
      *
-     * @return string
+     * @return moodle_url
      */
     function change_password_url() {
-        return '';
+        return null;
     }
 
     /**
@@ -110,7 +133,10 @@ class auth_plugin_manual extends auth_plugin_base {
      * This function is called from admin/auth.php, and outputs a full page with
      * a form for configuring this plugin.
      *
-     * @param array $page An object containing all the data for this page.
+     * @param array $config An object containing all the data for this page.
+     * @param string $error
+     * @param array $user_fields
+     * @return void
      */
     function config_form($config, $err, $user_fields) {
         include 'config.html';
@@ -118,6 +144,9 @@ class auth_plugin_manual extends auth_plugin_base {
 
     /**
      * Processes and stores configuration data for this authentication plugin.
+     *
+     * @param array $config
+     * @return void
      */
     function process_config($config) {
         return true;
@@ -127,20 +156,21 @@ class auth_plugin_manual extends auth_plugin_base {
      * Confirm the new user as registered. This should normally not be used,
      * but it may be necessary if the user auth_method is changed to manual 
      * before the user is confirmed.
+    *
+    * @param string $username
+    * @param string $confirmsecret
      */
     function user_confirm($username, $confirmsecret = null) {        
+        global $DB;
+
         $user = get_complete_user_data('username', $username);
 
         if (!empty($user)) {
             if ($user->confirmed) {
                 return AUTH_CONFIRM_ALREADY;
             } else { 
-                if (!set_field("user", "confirmed", 1, "id", $user->id)) {
-                    return AUTH_CONFIRM_FAIL;
-                }
-                if (!set_field("user", "firstaccess", time(), "id", $user->id)) {
-                    return AUTH_CONFIRM_FAIL;
-                }
+                $DB->set_field("user", "confirmed", 1, array("id"=>$user->id));
+                $DB->set_field("user", "firstaccess", time(), array("id"=>$user->id));
                 return AUTH_CONFIRM_OK;
             }
         } else  {
@@ -150,4 +180,4 @@ class auth_plugin_manual extends auth_plugin_base {
 
 }
 
-?>
+
