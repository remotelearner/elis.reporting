diff --git a/lib/adodb/adodb-datadict.inc.php b/lib/adodb/adodb-datadict.inc.php
index 86961a2..69060c5 100644
--- a/lib/adodb/adodb-datadict.inc.php
+++ b/lib/adodb/adodb-datadict.inc.php
@@ -1,7 +1,7 @@
 <?php
 
 /**
-  V4.98 13 Feb 2008  (c) 2000-2008 John Lim (jlim#natsoft.com.my). All rights reserved.
+  V5.11 5 May 2010   (c) 2000-2010 John Lim (jlim#natsoft.com). All rights reserved.
   Released under both BSD license and Lesser GPL library license. 
   Whenever there is any discrepancy between the two licenses, 
   the BSD license will take precedence.
@@ -215,7 +215,6 @@ class ADODB_DataDict {
 		return $this->connection->MetaIndexes($this->TableName($table), $primary, $owner);
 	}
 	
-
 	function MetaType($t,$len=-1,$fieldobj=false)
 	{		
 		static $typeMap = array(
@@ -231,6 +230,7 @@ class ADODB_DataDict {
 		'CHARACTER' => 'C',
 		'INTERVAL' => 'C',  # Postgres
 		'MACADDR' => 'C', # postgres
+		'VAR_STRING' => 'C', # mysql
 		##
 		'LONGCHAR' => 'X',
 		'TEXT' => 'X',
@@ -258,6 +258,7 @@ class ADODB_DataDict {
 		'TIMESTAMP' => 'T',
 		'DATETIME' => 'T',
 		'TIMESTAMPTZ' => 'T',
+		'SMALLDATETIME' => 'T',
 		'T' => 'T',
 		'TIMESTAMP WITHOUT TIME ZONE' => 'T', // postgresql
 		##
@@ -369,7 +370,7 @@ class ADODB_DataDict {
 	function ExecuteSQLArray($sql, $continueOnError = true)
 	{
 		$rez = 2;
-		$conn = &$this->connection;
+		$conn = $this->connection;
 		$saved = $conn->debug;
 		foreach($sql as $line) {
 			
@@ -518,7 +519,7 @@ class ADODB_DataDict {
 			// genfields can return FALSE at times
 			if ($lines == null) $lines = array();
 			list(,$first) = each($lines);
-			list(,$column_def) = split("[\t ]+",$first,2);
+			list(,$column_def) = preg_split("/[\t ]+/",$first,2);
 		}
 		return array(sprintf($this->renameColumn,$tabname,$this->NameQuote($oldcolumn),$this->NameQuote($newcolumn),$column_def));
 	}
@@ -589,6 +590,8 @@ class ADODB_DataDict {
 		return $sql;
 	}
 	
+	
+	
 	function _GenFields($flds,$widespacing=false)
 	{
 		if (is_string($flds)) {
@@ -813,7 +816,7 @@ class ADODB_DataDict {
 	
 	
 	// return string must begin with space
-	function _CreateSuffix($fname,$ftype,$fnotnull,$fdefault,$fautoinc,$fconstraint)
+	function _CreateSuffix($fname,&$ftype,$fnotnull,$fdefault,$fautoinc,$fconstraint,$funsigned)
 	{	
 		$suffix = '';
 		if (strlen($fdefault)) $suffix .= " DEFAULT $fdefault";
@@ -912,13 +915,28 @@ class ADODB_DataDict {
 		return $newopts;
 	}
 	
+	
+	function _getSizePrec($size)
+	{
+		$fsize = false;
+		$fprec = false;
+		$dotat = strpos($size,'.');
+		if ($dotat === false) $dotat = strpos($size,',');
+		if ($dotat === false) $fsize = $size;
+		else {
+			$fsize = substr($size,0,$dotat);
+			$fprec = substr($size,$dotat+1);
+		}
+		return array($fsize, $fprec);
+	}
+	
 	/**
 	"Florian Buzin [ easywe ]" <florian.buzin#easywe.de>
 	
 	This function changes/adds new fields to your table. You don't
 	have to know if the col is new or not. It will check on its own.
 	*/
-	function ChangeTableSQL($tablename, $flds, $tableoptions = false)
+	function ChangeTableSQL($tablename, $flds, $tableoptions = false, $dropOldFlds=false)
 	{
 	global $ADODB_FETCH_MODE;
 	
@@ -951,13 +969,22 @@ class ADODB_DataDict {
 					$obj = $cols[$k];
 					if (isset($obj->not_null) && $obj->not_null)
 						$v = str_replace('NOT NULL','',$v);
+					if (isset($obj->auto_increment) && $obj->auto_increment && empty($v['AUTOINCREMENT'])) 
+					    $v = str_replace('AUTOINCREMENT','',$v);
 
 					$c = $cols[$k];
 					$ml = $c->max_length;
 					$mt = $this->MetaType($c->type,$ml);
+					
+					if (isset($c->scale)) $sc = $c->scale;
+					else $sc = 99; // always force change if scale not known.
+					
+					if ($sc == -1) $sc = false;
+					list($fsize, $fprec) = $this->_getSizePrec($v['SIZE']);
+
 					if ($ml == -1) $ml = '';
 					if ($mt == 'X') $ml = $v['SIZE'];
-					if (($mt != $v['TYPE']) ||  $ml != $v['SIZE']) {
+					if (($mt != $v['TYPE']) || ($ml != $fsize || $sc != $fprec) || (isset($v['AUTOINCREMENT']) && $v['AUTOINCREMENT'] != $obj->auto_increment)) {
 						$holdflds[$k] = $v;
 					}
 				} else {
@@ -994,6 +1021,11 @@ class ADODB_DataDict {
 			}
 		}
 		
+		if ($dropOldFlds) {
+			foreach ( $cols as $id => $v )
+			    if ( !isset($lines[$id]) ) 
+					$sql[] = $alter . $this->dropCol . ' ' . $v->name;
+		}
 		return $sql;
 	}
 } // class
