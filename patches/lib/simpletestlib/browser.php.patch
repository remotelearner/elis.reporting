diff --git a/lib/simpletestlib/browser.php b/lib/simpletestlib/browser.php
index 6b41d0b..423e8fb 100644
--- a/lib/simpletestlib/browser.php
+++ b/lib/simpletestlib/browser.php
@@ -1,33 +1,33 @@
 <?php
-    /**
+/**
      *	Base include file for SimpleTest
      *	@package	SimpleTest
      *	@subpackage	WebTester
      *	@version	$Id$
      */
 
-    /**#@+
+/**#@+
      *	include other SimpleTest class files
      */
-    require_once(dirname(__FILE__) . '/simpletest.php');
-    require_once(dirname(__FILE__) . '/http.php');
-    require_once(dirname(__FILE__) . '/encoding.php');
-    require_once(dirname(__FILE__) . '/page.php');
-    require_once(dirname(__FILE__) . '/selector.php');
-    require_once(dirname(__FILE__) . '/frames.php');
-    require_once(dirname(__FILE__) . '/user_agent.php');
-    /**#@-*/
+require_once(dirname(__FILE__) . '/simpletest.php');
+require_once(dirname(__FILE__) . '/http.php');
+require_once(dirname(__FILE__) . '/encoding.php');
+require_once(dirname(__FILE__) . '/page.php');
+require_once(dirname(__FILE__) . '/selector.php');
+require_once(dirname(__FILE__) . '/frames.php');
+require_once(dirname(__FILE__) . '/user_agent.php');
+/**#@-*/
 
-    if (!defined('DEFAULT_MAX_NESTED_FRAMES')) {
+if (!defined('DEFAULT_MAX_NESTED_FRAMES')) {
         define('DEFAULT_MAX_NESTED_FRAMES', 3);
-    }
+}
 
-    /**
+/**
      *    Browser history list.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class SimpleBrowserHistory {
+class SimpleBrowserHistory {
         var $_sequence;
         var $_position;
 
@@ -148,16 +148,16 @@
                 array_pop($this->_sequence);
             }
         }
-    }
+}
 
-    /**
+/**
      *    Simulated web browser. This is an aggregate of
      *    the user agent, the HTML parsing, request history
      *    and the last header set.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class SimpleBrowser {
+class SimpleBrowser {
         var $_user_agent;
         var $_page;
         var $_history;
@@ -177,7 +177,7 @@
                     SimpleTest::getDefaultProxy(),
                     SimpleTest::getDefaultProxyUsername(),
                     SimpleTest::getDefaultProxyPassword());
-            $this->_page = &new SimplePage();
+        $this->_page = new SimplePage();
             $this->_history = &$this->_createHistory();
             $this->_ignore_frames = false;
             $this->_maximum_nested_frames = DEFAULT_MAX_NESTED_FRAMES;
@@ -189,7 +189,7 @@
          *    @access protected
          */
         function &_createUserAgent() {
-            $user_agent = &new SimpleUserAgent();
+        $user_agent = new SimpleUserAgent();
             return $user_agent;
         }
 
@@ -199,7 +199,7 @@
          *    @access protected
          */
         function &_createHistory() {
-            $history = &new SimpleBrowserHistory();
+        $history = new SimpleBrowserHistory();
             return $history;
         }
 
@@ -250,7 +250,7 @@
             if ($this->_ignore_frames || ! $page->hasFrames() || ($depth > $this->_maximum_nested_frames)) {
                 return $page;
             }
-            $frameset = &new SimpleFrameset($page);
+        $frameset = new SimpleFrameset($page);
             foreach ($page->getFrameset() as $key => $url) {
                 $frame = &$this->_fetch($url, new SimpleGetEncoding(), $depth + 1);
                 $frameset->addFrame($frame, $key);
@@ -267,7 +267,7 @@
          *    @access protected
          */
         function &_buildPage($response) {
-            $builder = &new SimplePageBuilder();
+        $builder = new SimplePageBuilder();
             $page = &$builder->parse($response);
             $builder->free();
             unset($builder);
@@ -286,7 +286,7 @@
         function &_fetch($url, $encoding, $depth = 0) {
             $response = &$this->_user_agent->fetchResponse($url, $encoding);
             if ($response->isError()) {
-                $page = &new SimplePage($response);
+            $page = new SimplePage($response);
             } else {
                 $page = &$this->_parse($response, $depth);
             }
@@ -336,6 +336,7 @@
         function _loadFrame($frames, $url, $parameters) {
             $page = &$this->_fetch($url, $parameters);
             $this->_page->setFrame($frames, $page);
+        return $page->getRaw();
         }
 
         /**
@@ -705,6 +706,15 @@
         }
 
         /**
+     *    Accessor for base URL of page if set via BASE tag
+     *    @return string    base URL
+     */
+    function getBaseUrl() {
+        $url = $this->_page->getBaseUrl();
+        return $url ? $url->asString() : false;
+    }
+
+    /**
          *    Accessor for raw bytes sent down the wire.
          *    @return string      Original text sent.
          *    @access public
@@ -750,22 +760,13 @@
         }
 
         /**
-         *    Accessor for a list of all fixed links in current page.
+     *    Accessor for a list of all links in current page.
          *    @return array   List of urls with scheme of
          *                    http or https and hostname.
          *    @access public
          */
-        function getAbsoluteUrls() {
-            return $this->_page->getAbsoluteUrls();
-        }
-
-        /**
-         *    Accessor for a list of all relative links.
-         *    @return array      List of urls without hostname.
-         *    @access public
-         */
-        function getRelativeUrls() {
-            return $this->_page->getRelativeUrls();
+    function getUrls() {
+        return $this->_page->getUrls();
         }
 
         /**
@@ -775,8 +776,8 @@
          *    @return boolean        True if field exists, otherwise false.
          *    @access public
          */
-        function setField($label, $value) {
-            return $this->_page->setField(new SimpleByLabelOrName($label), $value);
+    function setField($label, $value, $position=false) {
+        return $this->_page->setField(new SimpleByLabelOrName($label), $value, $position);
         }
 
         /**
@@ -787,8 +788,8 @@
          *    @return boolean        True if field exists, otherwise false.
          *    @access public
          */
-        function setFieldByName($name, $value) {
-            return $this->_page->setField(new SimpleByName($name), $value);
+    function setFieldByName($name, $value, $position=false) {
+        return $this->_page->setField(new SimpleByName($name), $value, $position);
         }
 
         /**
@@ -1093,5 +1094,5 @@
         function isClickable($label) {
             return $this->isSubmit($label) || ($this->getLink($label) !== false) || $this->isImage($label);
         }
-    }
+}
 ?>
\ No newline at end of file
