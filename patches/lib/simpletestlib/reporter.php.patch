diff --git a/lib/simpletestlib/reporter.php b/lib/simpletestlib/reporter.php
index 492faab..20a6c9e 100644
--- a/lib/simpletestlib/reporter.php
+++ b/lib/simpletestlib/reporter.php
@@ -1,24 +1,24 @@
 <?php
-    /**
+/**
      *	base include file for SimpleTest
      *	@package	SimpleTest
      *	@subpackage	UnitTester
      *	@version	$Id$
      */
 
-    /**#@+
+/**#@+
      *	include other SimpleTest class files
      */
-    require_once(dirname(__FILE__) . '/scorer.php');
-    /**#@-*/
+require_once(dirname(__FILE__) . '/scorer.php');
+/**#@-*/
 
-    /**
+/**
      *    Sample minimal test displayer. Generates only
      *    failure messages and a pass count.
 	 *	  @package SimpleTest
 	 *	  @subpackage UnitTester
      */
-    class HtmlReporter extends SimpleReporter {
+class HtmlReporter extends SimpleReporter {
         var $_character_set;
 
         /**
@@ -181,9 +181,9 @@
         function _htmlEntities($message) {
             return htmlentities($message, ENT_COMPAT, $this->_character_set);
         }
-    }
+}
 
-    /**
+/**
      *    Sample minimal test displayer. Generates only
      *    failure messages and a pass count. For command
      *    line use. I've tried to make it look like JUnit,
@@ -192,7 +192,7 @@
 	 *	  @package SimpleTest
 	 *	  @subpackage UnitTester
      */
-    class TextReporter extends SimpleReporter {
+class TextReporter extends SimpleReporter {
 
         /**
          *    Does nothing yet. The first output will
@@ -259,6 +259,10 @@
         function paintError($message) {
             parent::paintError($message);
             print "Exception " . $this->getExceptionCount() . "!\n$message\n";
+        $breadcrumb = $this->getTestList();
+        array_shift($breadcrumb);
+        print "\tin " . implode("\n\tin ", array_reverse($breadcrumb));
+        print "\n";
         }
 
         /**
@@ -274,6 +278,10 @@
                     '] in ['. $exception->getFile() .
                     ' line ' . $exception->getLine() . ']';
             print "Exception " . $this->getExceptionCount() . "!\n$message\n";
+        $breadcrumb = $this->getTestList();
+        array_shift($breadcrumb);
+        print "\tin " . implode("\n\tin ", array_reverse($breadcrumb));
+        print "\n";
         }
 		
 		/**
@@ -295,18 +303,18 @@
             print "$message\n";
             flush();
         }
-    }
+}
 
-    /**
+/**
      *    Runs just a single test group, a single case or
      *    even a single test within that case.
 	 *	  @package SimpleTest
 	 *	  @subpackage UnitTester
      */
-    class SelectiveReporter extends SimpleReporterDecorator {
-        var $_just_this_case =false;
+class SelectiveReporter extends SimpleReporterDecorator {
+    var $_just_this_case = false;
         var $_just_this_test = false;
-        var $_within_test_case = true;
+    var $_on;
 
         /**
          *    Selects the test case or group to be run,
@@ -318,7 +326,9 @@
         function SelectiveReporter(&$reporter, $just_this_case = false, $just_this_test = false) {
             if (isset($just_this_case) && $just_this_case) {
                 $this->_just_this_case = strtolower($just_this_case);
-                $this->_within_test_case = false;
+            $this->_off();
+        } else {
+            $this->_on();
             }
             if (isset($just_this_test) && $just_this_test) {
                 $this->_just_this_test = strtolower($just_this_test);
@@ -332,25 +342,53 @@
          *    @return boolean             True if matched.
          *    @access protected
          */
-        function _isCaseMatch($test_case) {
-            if ($this->_just_this_case) {
+    function _matchesTestCase($test_case) {
                 return $this->_just_this_case == strtolower($test_case);
             }
-            return false;
-        }
 
         /**
-         *    Compares criteria to actual the test name.
+     *    Compares criteria to actual the test name. If no
+     *    name was specified at the beginning, then all tests
+     *    can run.
          *    @param string $method       The incoming test method.
          *    @return boolean             True if matched.
          *    @access protected
          */
-        function _isTestMatch($method) {
+    function _shouldRunTest($test_case, $method) {
+        if ($this->_isOn() || $this->_matchesTestCase($test_case)) {
             if ($this->_just_this_test) {
                 return $this->_just_this_test == strtolower($method);
-            }
+            } else {
             return true;
         }
+        }
+        return false;
+    }
+    
+    /**
+     *    Switch on testing for the group or subgroup.
+     *    @access private
+     */
+    function _on() {
+        $this->_on = true;
+    }
+    
+    /**
+     *    Switch off testing for the group or subgroup.
+     *    @access private
+     */
+    function _off() {
+        $this->_on = false;
+    }
+    
+    /**
+     *    Is this group actually being tested?
+     *    @return boolean     True if the current test group is active.
+     *    @access private
+     */
+    function _isOn() {
+        return $this->_on;
+    }
 
         /**
          *    Veto everything that doesn't match the method wanted.
@@ -360,7 +398,7 @@
          *    @access public
          */
         function shouldInvoke($test_case, $method) {
-            if ($this->_within_test_case && $this->_isTestMatch($method)) {
+        if ($this->_shouldRunTest($test_case, $method)) {
                 return $this->_reporter->shouldInvoke($test_case, $method);
             }
             return false;
@@ -373,13 +411,11 @@
          *    @access public
          */
         function paintGroupStart($test_case, $size) {
-            if ($this->_isCaseMatch($test_case)) {
-                $this->_within_test_case = true;
+        if ($this->_just_this_case && $this->_matchesTestCase($test_case)) {
+            $this->_on();
             }
-            if ($this->_within_test_case) {
                 $this->_reporter->paintGroupStart($test_case, $size);
             }
-        }
 
         /**
          *    Paints the end of a group test.
@@ -387,40 +423,25 @@
          *    @access public
          */
         function paintGroupEnd($test_case) {
-            if ($this->_within_test_case) {
                 $this->_reporter->paintGroupEnd($test_case);
-            }
-            if ($this->_isCaseMatch($test_case)) {
-                $this->_within_test_case = false;
+        if ($this->_just_this_case && $this->_matchesTestCase($test_case)) {
+            $this->_off();
             }
         }
+}
 
-        /**
-         *    Paints the start of a test case.
-         *    @param string $test_case     Name of test or other label.
-         *    @access public
+/**
+ *    Suppresses skip messages.
+ *    @package SimpleTest
+ *    @subpackage UnitTester
          */
-        function paintCaseStart($test_case) {
-            if ($this->_isCaseMatch($test_case)) {
-                $this->_within_test_case = true;
-            }
-            if ($this->_within_test_case) {
-                $this->_reporter->paintCaseStart($test_case);
-            }
-        }
+class NoSkipsReporter extends SimpleReporterDecorator {
 
         /**
-         *    Paints the end of a test case.
-         *    @param string $test_case     Name of test or other label.
+     *    Does nothing.
+     *    @param string $message    Text of skip condition.
          *    @access public
          */
-        function paintCaseEnd($test_case) {
-            if ($this->_within_test_case) {
-                $this->_reporter->paintCaseEnd($test_case);
-            }
-            if ($this->_isCaseMatch($test_case)) {
-                $this->_within_test_case = false;
-            }
-        }
-    }
+    function paintSkip($message) { }
+}
 ?>
\ No newline at end of file
