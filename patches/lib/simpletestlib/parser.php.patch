diff --git a/lib/simpletestlib/parser.php b/lib/simpletestlib/parser.php
index 06977f8..ba67914 100644
--- a/lib/simpletestlib/parser.php
+++ b/lib/simpletestlib/parser.php
@@ -1,39 +1,31 @@
 <?php
-    /**
+/**
      *	base include file for SimpleTest
      *	@package	SimpleTest
      *	@subpackage	MockObjects
      *	@version	$Id$
      */
 
-    /**#@+
+/**#@+
      * Lexer mode stack constants
      */
-    if (! defined('LEXER_ENTER')) {
-        define('LEXER_ENTER', 1);
-    }
-    if (! defined('LEXER_MATCHED')) {
-        define('LEXER_MATCHED', 2);
-    }
-    if (! defined('LEXER_UNMATCHED')) {
-        define('LEXER_UNMATCHED', 3);
-    }
-    if (! defined('LEXER_EXIT')) {
-        define('LEXER_EXIT', 4);
-    }
-    if (! defined('LEXER_SPECIAL')) {
-        define('LEXER_SPECIAL', 5);
+foreach (array('LEXER_ENTER', 'LEXER_MATCHED',
+                'LEXER_UNMATCHED', 'LEXER_EXIT',
+                'LEXER_SPECIAL') as $i => $constant) {
+    if (! defined($constant)) {
+        define($constant, $i + 1);
     }
-    /**#@-*/
+}
+/**#@-*/
     
-    /**
+/**
      *    Compounded regular expression. Any of
      *    the contained patterns could match and
      *    when one does, it's label is returned.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class ParallelRegex {
+class ParallelRegex {
         var $_patterns;
         var $_labels;
         var $_regex;
@@ -122,14 +114,14 @@
         function _getPerlMatchingFlags() {
             return ($this->_case ? "msS" : "msSi");
         }
-    }
+}
     
-    /**
+/**
      *    States for a stack machine.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class SimpleStateStack {
+class SimpleStateStack {
         var $_stack;
         
         /**
@@ -174,9 +166,9 @@
             array_pop($this->_stack);
             return true;
         }
-    }
+}
     
-    /**
+/**
      *    Accepts text and breaks it into tokens.
      *    Some optimisation to make the sure the
      *    content is only scanned by the PHP regex
@@ -185,7 +177,7 @@
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class SimpleLexer {
+class SimpleLexer {
         var $_regexes;
         var $_parser;
         var $_mode;
@@ -205,7 +197,7 @@
             $this->_case = $case;
             $this->_regexes = array();
             $this->_parser = &$parser;
-            $this->_mode = &new SimpleStateStack($start);
+        $this->_mode = new SimpleStateStack($start);
             $this->_mode_handlers = array($start => $start);
         }
         
@@ -448,14 +440,14 @@
             }
             return true;
         }
-    }
+}
     
-    /**
-     *    Breas HTML into SAX events.
+/**
+ *    Breaks HTML into SAX events.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class SimpleHtmlLexer extends SimpleLexer {
+class SimpleHtmlLexer extends SimpleLexer {
         
         /**
          *    Sets up the lexer with case insensitive matching
@@ -480,7 +472,7 @@
          *    @access private
          */
         function _getParsedTags() {
-            return array('a', 'title', 'form', 'input', 'button', 'textarea', 'select',
+        return array('a', 'base', 'title', 'form', 'input', 'button', 'textarea', 'select',
                     'option', 'frameset', 'frame', 'label');
         }
         
@@ -541,14 +533,14 @@
             $this->mapHandler('uq_attribute', 'acceptAttributeToken');
             $this->addSpecialPattern('=\s*[^>\s]*', 'tag', 'uq_attribute');
         }
-    }
+}
     
-    /**
+/**
      *    Converts HTML tokens into selected SAX events.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class SimpleHtmlSaxParser {
+class SimpleHtmlSaxParser {
         var $_lexer;
         var $_listener;
         var $_tag;
@@ -587,7 +579,7 @@
          *    @static
          */
         function &createLexer(&$parser) {
-            $lexer = &new SimpleHtmlLexer($parser);
+        $lexer = new SimpleHtmlLexer($parser);
             return $lexer;
         }
         
@@ -699,11 +691,7 @@
          *    @static
          */
         function decodeHtml($html) {
-            static $translations;
-            if (! isset($translations)) {
-                $translations = array_flip(get_html_translation_table(HTML_ENTITIES));
-            }
-            return strtr($html, $translations);
+        return html_entity_decode($html, ENT_QUOTES);
         }
         
         /**
@@ -717,23 +705,24 @@
          */
         function normalise($html) {
             $text = preg_replace('|<!--.*?-->|', '', $html);
-            $text = preg_replace('|<img.*?alt\s*=\s*"(.*?)".*?>|', ' \1 ', $text);
-            $text = preg_replace('|<img.*?alt\s*=\s*\'(.*?)\'.*?>|', ' \1 ', $text);
-            $text = preg_replace('|<img.*?alt\s*=\s*([a-zA-Z_]+).*?>|', ' \1 ', $text);
-            $text = preg_replace('|<.*?>|', '', $text);
+        $text = preg_replace('|<script[^>]*>.*?</script>|', '', $text);
+        $text = preg_replace('|<img[^>]*alt\s*=\s*"([^"]*)"[^>]*>|', ' \1 ', $text);
+        $text = preg_replace('|<img[^>]*alt\s*=\s*\'([^\']*)\'[^>]*>|', ' \1 ', $text);
+        $text = preg_replace('|<img[^>]*alt\s*=\s*([a-zA-Z_]+)[^>]*>|', ' \1 ', $text);
+        $text = preg_replace('|<[^>]*>|', '', $text);
             $text = SimpleHtmlSaxParser::decodeHtml($text);
             $text = preg_replace('|\s+|', ' ', $text);
-            return trim($text);
-        }
+        return trim(trim($text), "\xA0");        // TODO: The \xAO is a &nbsp;. Add a test for this.
     }
+}
     
-    /**
+/**
      *    SAX event handler.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      *    @abstract
      */
-    class SimpleSaxListener {
+class SimpleSaxListener {
         
         /**
          *    Sets the document to write to.
@@ -771,5 +760,5 @@
          */
         function addContent($text) {
         }
-    }
+}
 ?>
\ No newline at end of file
