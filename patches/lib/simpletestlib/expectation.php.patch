diff --git a/lib/simpletestlib/expectation.php b/lib/simpletestlib/expectation.php
index a4e9de2..2b19197 100644
--- a/lib/simpletestlib/expectation.php
+++ b/lib/simpletestlib/expectation.php
@@ -1,27 +1,27 @@
 <?php
-    /**
+/**
      *    base include file for SimpleTest
      *    @package    SimpleTest
      *    @subpackage    UnitTester
      *    @version    $Id$
      */
      
-    /**#@+
+/**#@+
      *    include other SimpleTest class files
      */
-    require_once(dirname(__FILE__) . '/dumper.php');
-    require_once(dirname(__FILE__) . '/compatibility.php');
-    /**#@-*/
+require_once(dirname(__FILE__) . '/dumper.php');
+require_once(dirname(__FILE__) . '/compatibility.php');
+/**#@-*/
     
-    /**
+/**
      *    Assertion that can display failure information.
      *    Also includes various helper methods.
      *    @package SimpleTest
      *    @subpackage UnitTester
      *    @abstract
      */
-    class SimpleExpectation {
-        var $_dumper;
+class SimpleExpectation {
+    var $_dumper = false;
         var $_message;
         
         /**
@@ -74,6 +74,10 @@
          *    @access protected
          */
         function &_getDumper() {
+        if (! $this->_dumper) {
+            $dumper = new SimpleDumper();
+            return $dumper;
+        }
             return $this->_dumper;
         }
         
@@ -91,14 +95,14 @@
             return is_object($expectation) &&
                     SimpleTestCompatibility::isA($expectation, 'SimpleExpectation');
         }
-    }
+}
 
-    /**
+/**
      *    A wildcard expectation always matches.
      *    @package SimpleTest
      *    @subpackage MockObjects
      */
-    class AnythingExpectation extends SimpleExpectation {
+class AnythingExpectation extends SimpleExpectation {
 
         /**
          *    Tests the expectation. Always true.
@@ -121,14 +125,43 @@
             $dumper = &$this->_getDumper();
             return 'Anything always matches [' . $dumper->describeValue($compare) . ']';
         }
+}
+
+/**
+ *    An expectation that never matches.
+ *    @package SimpleTest
+ *    @subpackage MockObjects
+ */
+class FailedExpectation extends SimpleExpectation {
+
+    /**
+     *    Tests the expectation. Always false.
+     *    @param mixed $compare  Ignored.
+     *    @return boolean        True.
+     *    @access public
+     */
+    function test($compare) {
+        return false;
     }
 
     /**
+     *    Returns a human readable test message.
+     *    @param mixed $compare      Comparison value.
+     *    @return string             Description of failure.
+     *    @access public
+     */
+    function testMessage($compare) {
+        $dumper = &$this->_getDumper();
+        return 'Failed expectation never matches [' . $dumper->describeValue($compare) . ']';
+    }
+}
+
+/**
      *    An expectation that passes on boolean true.
      *    @package SimpleTest
      *    @subpackage MockObjects
      */
-    class TrueExpectation extends SimpleExpectation {
+class TrueExpectation extends SimpleExpectation {
 
         /**
          *    Tests the expectation.
@@ -151,14 +184,14 @@
             $dumper = &$this->_getDumper();
             return 'Expected true, got [' . $dumper->describeValue($compare) . ']';
         }
-    }
+}
     
-    /**
+/**
      *    An expectation that passes on boolean false.
      *    @package SimpleTest
      *    @subpackage MockObjects
      */
-    class FalseExpectation extends SimpleExpectation {
+class FalseExpectation extends SimpleExpectation {
 
         /**
          *    Tests the expectation.
@@ -181,14 +214,14 @@
             $dumper = &$this->_getDumper();
             return 'Expected false, got [' . $dumper->describeValue($compare) . ']';
         }
-    }
+}
     
-    /**
+/**
      *    Test for equality.
      *      @package SimpleTest
      *      @subpackage UnitTester
      */
-    class EqualExpectation extends SimpleExpectation {
+class EqualExpectation extends SimpleExpectation {
         var $_value;
         
         /**
@@ -237,14 +270,14 @@
         function _getValue() {
             return $this->_value;
         }
-    }
+}
     
-    /**
+/**
      *    Test for inequality.
      *      @package SimpleTest
      *      @subpackage UnitTester
      */
-    class NotEqualExpectation extends EqualExpectation {
+class NotEqualExpectation extends EqualExpectation {
         
         /**
          *    Sets the value to compare against.
@@ -285,14 +318,14 @@
                         "] matches";
             }
         }
-    }
+}
     
-    /**
+/**
      *    Test for being within a range.
      *      @package SimpleTest
      *      @subpackage UnitTester
      */
-    class WithinMarginExpectation extends SimpleExpectation {
+class WithinMarginExpectation extends SimpleExpectation {
         var $_upper;
         var $_lower;
         
@@ -360,14 +393,14 @@
                         $this->_dumper->describeDifference($compare, $this->_lower);
             }
         }
-    }
+}
     
-    /**
+/**
      *    Test for being outside of a range.
      *      @package SimpleTest
      *      @subpackage UnitTester
      */
-    class OutsideMarginExpectation extends WithinMarginExpectation {
+class OutsideMarginExpectation extends WithinMarginExpectation {
         
         /**
          *    Sets the value to compare against and the fuzziness of
@@ -406,14 +439,65 @@
                 return $this->_outsideMessage($compare);
             }
         }
+}
+
+/**
+ *    Test for reference.
+ *    @package SimpleTest
+ *    @subpackage UnitTester
+ */
+class ReferenceExpectation extends SimpleExpectation {
+    var $_value;
+
+    /**
+     *    Sets the reference value to compare against.
+     *    @param mixed $value       Test reference to match.
+     *    @param string $message    Customised message on failure.
+     *    @access public
+     */
+    function ReferenceExpectation(&$value, $message = '%s') {
+        $this->SimpleExpectation($message);
+        $this->_value =& $value;
+    }
+
+    /**
+     *    Tests the expectation. True if it exactly
+     *    references the held value.
+     *    @param mixed $compare        Comparison reference.
+     *    @return boolean              True if correct.
+     *    @access public
+     */
+    function test(&$compare) {
+        return SimpleTestCompatibility::isReference($this->_value, $compare);
     }
     
     /**
+     *    Returns a human readable test message.
+     *    @param mixed $compare      Comparison value.
+     *    @return string             Description of success
+     *                               or failure.
+     *    @access public
+     */
+    function testMessage($compare) {
+        if ($this->test($compare)) {
+            return "Reference expectation [" . $this->_dumper->describeValue($this->_value) . "]";
+        } else {
+            return "Reference expectation fails " .
+                    $this->_dumper->describeDifference($this->_value, $compare);
+        }
+    }
+
+    function _getValue() {
+        return $this->_value;
+    }
+}
+
+/**
      *    Test for identity.
      *    @package SimpleTest
      *    @subpackage UnitTester
      */
-    class IdenticalExpectation extends EqualExpectation {
+class IdenticalExpectation extends EqualExpectation {
         
         /**
          *    Sets the value to compare against.
@@ -454,14 +538,14 @@
                         $dumper->describeDifference($this->_getValue(), $compare, TYPE_MATTERS);
             }
         }
-    }
+}
     
-    /**
+/**
      *    Test for non-identity.
      *    @package SimpleTest
      *    @subpackage UnitTester
      */
-    class NotIdenticalExpectation extends IdenticalExpectation {
+class NotIdenticalExpectation extends IdenticalExpectation {
         
         /**
          *    Sets the value to compare against.
@@ -500,14 +584,14 @@
                 return "Not identical expectation [" . $dumper->describeValue($this->_getValue()) . "] matches";
             }
         }
-    }
+}
     
-    /**
+/**
      *    Test for a pattern using Perl regex rules.
      *    @package SimpleTest
      *    @subpackage UnitTester
      */
-    class PatternExpectation extends SimpleExpectation {
+class PatternExpectation extends SimpleExpectation {
         var $_pattern;
         
         /**
@@ -562,8 +646,6 @@
         /**
          *    Describes a pattern match including the string
          *    found and it's position.
-         *    @package SimpleTest
-         *    @subpackage UnitTester
          *    @param string $pattern        Regex to match against.
          *    @param string $subject        Subject to search.
          *    @access protected
@@ -577,21 +659,23 @@
                     $matches[0] . "] in region [" .
                     $dumper->clipString($subject, 100, $position) . "]";
         }
-    }
+}
     
-    /**
+/**
+ *    @package SimpleTest
+ *    @subpackage UnitTester
      *      @deprecated
      */
-    class WantedPatternExpectation extends PatternExpectation {
-    }
+class WantedPatternExpectation extends PatternExpectation {
+}
     
-    /**
+/**
      *    Fail if a pattern is detected within the
      *    comparison.
      *      @package SimpleTest
      *      @subpackage UnitTester
      */
-    class NoPatternExpectation extends PatternExpectation {
+class NoPatternExpectation extends PatternExpectation {
         
         /**
          *    Sets the reject pattern
@@ -631,22 +715,22 @@
                 return $this->_describePatternMatch($this->_getPattern(), $compare);
             }
         }
-    }
+}
     
-    /**
+/**
      *    @package SimpleTest
      *    @subpackage UnitTester
      *      @deprecated
      */
-    class UnwantedPatternExpectation extends NoPatternExpectation {
-    }
+class UnwantedPatternExpectation extends NoPatternExpectation {
+}
     
-    /**
+/**
      *    Tests either type or class name if it's an object.
      *      @package SimpleTest
      *      @subpackage UnitTester
      */
-    class IsAExpectation extends SimpleExpectation {
+class IsAExpectation extends SimpleExpectation {
         var $_type;
         
         /**
@@ -715,15 +799,15 @@
             return "Value [" . $dumper->describeValue($compare) .
                     "] should be type [" . $this->_type . "]";
         }
-    }
+}
     
-    /**
+/**
      *    Tests either type or class name if it's an object.
      *    Will succeed if the type does not match.
      *      @package SimpleTest
      *      @subpackage UnitTester
      */
-    class NotAExpectation extends IsAExpectation {
+class NotAExpectation extends IsAExpectation {
         var $_type;
         
         /**
@@ -759,14 +843,14 @@
             return "Value [" . $dumper->describeValue($compare) .
                     "] should not be type [" . $this->_getType() . "]";
         }
-    }
+}
 
-    /**
+/**
      *    Tests for existance of a method in an object
      *      @package SimpleTest
      *      @subpackage UnitTester
      */
-    class MethodExistsExpectation extends SimpleExpectation {
+class MethodExistsExpectation extends SimpleExpectation {
         var $_method;
         
         /**
@@ -807,5 +891,5 @@
             return "Object [" . $dumper->describeValue($compare) .
                     "] should contain method [$method]";
         }
-    }
+}
 ?>
\ No newline at end of file
