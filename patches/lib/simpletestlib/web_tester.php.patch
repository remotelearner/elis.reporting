diff --git a/lib/simpletestlib/web_tester.php b/lib/simpletestlib/web_tester.php
index be424bb..d97785e 100644
--- a/lib/simpletestlib/web_tester.php
+++ b/lib/simpletestlib/web_tester.php
@@ -1,26 +1,26 @@
 <?php
-    /**
+/**
      *	Base include file for SimpleTest.
      *	@package	SimpleTest
      *	@subpackage	WebTester
      *	@version	$Id$
      */
 
-    /**#@+
+/**#@+
      *	include other SimpleTest class files
      */
-    require_once(dirname(__FILE__) . '/test_case.php');
-    require_once(dirname(__FILE__) . '/browser.php');
-    require_once(dirname(__FILE__) . '/page.php');
-    require_once(dirname(__FILE__) . '/expectation.php');
-    /**#@-*/
+require_once(dirname(__FILE__) . '/test_case.php');
+require_once(dirname(__FILE__) . '/browser.php');
+require_once(dirname(__FILE__) . '/page.php');
+require_once(dirname(__FILE__) . '/expectation.php');
+/**#@-*/
     
-    /**
+/**
      *    Test for an HTML widget value match.
 	 *	  @package SimpleTest
 	 *	  @subpackage WebTester
      */
-    class FieldExpectation extends SimpleExpectation {
+class FieldExpectation extends SimpleExpectation {
         var $_value;
         
         /**
@@ -124,14 +124,14 @@
                         $dumper->describeDifference($this->_value, $compare);
             }
         }
-    }
+}
     
-    /**
+/**
      *    Test for a specific HTTP header within a header block.
 	 *	  @package SimpleTest
 	 *	  @subpackage WebTester
      */
-    class HttpHeaderExpectation extends SimpleExpectation {
+class HttpHeaderExpectation extends SimpleExpectation {
         var $_expected_header;
         var $_expected_value;
         
@@ -190,7 +190,7 @@
          *    @access protected
          */
         function _findHeader($compare) {
-            $lines = split("\r\n", $compare);
+        $lines = explode("\r\n", $compare);
             foreach ($lines as $line) {
                 if ($this->_testHeaderLine($line)) {
                     return $line;
@@ -206,7 +206,7 @@
          *    @access private
          */
         function _testHeaderLine($line) {
-            if (count($parsed = split(':', $line, 2)) < 2) {
+        if (count($parsed = explode(':', $line, 2)) < 2) {
                 return false;
             }
             list($header, $value) = $parsed;
@@ -253,15 +253,15 @@
                 return "Failed to find header [$message]";
             }
         }
-    }
+}
       
-    /**
+/**
      *    Test for a specific HTTP header within a header block that
      *    should not be found.
 	 *	  @package SimpleTest
 	 *	  @subpackage WebTester
      */
-    class NoHttpHeaderExpectation extends HttpHeaderExpectation {
+class NoHttpHeaderExpectation extends HttpHeaderExpectation {
         var $_expected_header;
         var $_expected_value;
         
@@ -300,14 +300,14 @@
                 return "Did not find unwanted header [$expectation]";
             }
         }
-    }
+}
     
-    /**
+/**
      *    Test for a text substring.
 	 *	  @package SimpleTest
 	 *	  @subpackage UnitTester
      */
-    class TextExpectation extends SimpleExpectation {
+class TextExpectation extends SimpleExpectation {
         var $_substring;
         
         /**
@@ -373,15 +373,15 @@
                     $dumper->describeValue($subject) . "] in region [" .
                     $dumper->clipString($subject, 100, $position) . "]";
         }
-    }
+}
     
-    /**
+/**
      *    Fail if a substring is detected within the
      *    comparison text.
 	 *	  @package SimpleTest
 	 *	  @subpackage UnitTester
      */
-    class NoTextExpectation extends TextExpectation {
+class NoTextExpectation extends TextExpectation {
         
         /**
          *    Sets the reject pattern
@@ -421,16 +421,16 @@
                 return $this->_describeTextMatch($this->_getSubstring(), $compare);
             }
         }
-    }
+}
     
-    /**
+/**
      *    Test case for testing of web pages. Allows
      *    fetching of pages, parsing of HTML and
      *    submitting forms.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class WebTestCase extends SimpleTestCase {
+class WebTestCase extends SimpleTestCase {
         var $_browser;
         var $_ignore_errors = false;
         
@@ -503,7 +503,7 @@
          *    @access public
          */
         function &createBrowser() {
-            $browser = &new SimpleBrowser();
+        $browser = new SimpleBrowser();
             return $browser;
         }
         
@@ -1016,7 +1016,7 @@
          */
         function assertLink($label, $expected = true, $message = '%s') {
             $url = $this->_browser->getLink($label);
-            if ($expected === true) {
+        if ($expected === true || ($expected !== true && $url === false)) {
                 return $this->assertTrue($url !== false, sprintf($message, "Link [$label] should exist"));
             }
             if (! SimpleExpectation::isExpectation($expected)) {
@@ -1084,8 +1084,8 @@
          *    @return boolean        True if field exists, otherwise false.
          *    @access public
          */
-        function setField($label, $value) {
-            return $this->_browser->setField($label, $value);
+    function setField($label, $value, $position=false) {
+        return $this->_browser->setField($label, $value, $position);
         }
         
         /**
@@ -1095,12 +1095,12 @@
          *    @return boolean        True if field exists, otherwise false.
          *    @access public
          */
-        function setFieldByName($name, $value) {
-            return $this->_browser->setFieldByName($name, $value);
+    function setFieldByName($name, $value, $position=false) {
+        return $this->_browser->setFieldByName($name, $value, $position);
         }
           
         /**
-         *    Sets all form fields with that name.
+     *    Sets all form fields with that id.
          *    @param string/integer $id   Id of field in forms.
          *    @param string $value        New value of field.
          *    @return boolean             True if field exists, otherwise false.
@@ -1537,5 +1537,5 @@
             $trace = new SimpleStackTrace(array('assert', 'click', 'pass', 'fail'));
             return $trace->traceMethod();
         }
-    }
+}
 ?>
\ No newline at end of file
