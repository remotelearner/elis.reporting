diff --git a/lib/simpletestlib/http.php b/lib/simpletestlib/http.php
index 120d74c..ee376c1 100644
--- a/lib/simpletestlib/http.php
+++ b/lib/simpletestlib/http.php
@@ -1,26 +1,26 @@
 <?php
-    /**
+/**
      *	base include file for SimpleTest
      *	@package	SimpleTest
      *	@subpackage	WebTester
      *	@version	$Id$
      */
 
-    /**#@+
+/**#@+
      *	include other SimpleTest class files
      */
-    require_once(dirname(__FILE__) . '/socket.php');
-    require_once(dirname(__FILE__) . '/cookies.php');
-    require_once(dirname(__FILE__) . '/url.php');
-    /**#@-*/
+require_once(dirname(__FILE__) . '/socket.php');
+require_once(dirname(__FILE__) . '/cookies.php');
+require_once(dirname(__FILE__) . '/url.php');
+/**#@-*/
     
-    /**
+/**
      *    Creates HTTP headers for the end point of
      *    a HTTP request.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class SimpleRoute {
+class SimpleRoute {
         var $_url;
         
         /**
@@ -98,21 +98,21 @@
          */
         function &_createSocket($scheme, $host, $port, $timeout) {
             if (in_array($scheme, array('https'))) {
-                $socket = &new SimpleSecureSocket($host, $port, $timeout);
+            $socket = new SimpleSecureSocket($host, $port, $timeout);
             } else {
-                $socket = &new SimpleSocket($host, $port, $timeout);
+            $socket = new SimpleSocket($host, $port, $timeout);
             }
             return $socket;
         }
-    }
+}
     
-    /**
+/**
      *    Creates HTTP headers for the end point of
      *    a HTTP request via a proxy server.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class SimpleProxyRoute extends SimpleRoute {
+class SimpleProxyRoute extends SimpleRoute {
         var $_proxy;
         var $_username;
         var $_password;
@@ -185,15 +185,15 @@
             $socket->write("Connection: close\r\n");
             return $socket;
         }
-    }
+}
 
-    /**
+/**
      *    HTTP request for a web page. Factory for
      *    HttpResponse object.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class SimpleHttpRequest {
+class SimpleHttpRequest {
         var $_route;
         var $_encoding;
         var $_headers;
@@ -279,20 +279,20 @@
          *    @access protected
          */
         function &_createResponse(&$socket) {
-            $response = &new SimpleHttpResponse(
+        $response = new SimpleHttpResponse(
                     $socket,
                     $this->_route->getUrl(),
                     $this->_encoding);
             return $response;
         }
-    }
+}
     
-    /**
+/**
      *    Collection of header lines in the response.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class SimpleHttpHeaders {
+class SimpleHttpHeaders {
         var $_raw_headers;
         var $_response_code;
         var $_http_version;
@@ -316,7 +316,7 @@
             $this->_cookies = array();
             $this->_authentication = false;
             $this->_realm = false;
-            foreach (split("\r\n", $headers) as $header_line) {
+        foreach (explode("\r\n", $headers) as $header_line) {
                 $this->_parseHeaderLine($header_line);
             }
         }
@@ -457,7 +457,7 @@
          *    @access private
          */
         function _parseCookie($cookie_line) {
-            $parts = split(";", $cookie_line);
+        $parts = explode(";", $cookie_line);
             $cookie = array();
             preg_match('/\s*(.*?)\s*=(.*)/', array_shift($parts), $cookie);
             foreach ($parts as $part) {
@@ -471,14 +471,14 @@
                     isset($cookie["path"]) ? $cookie["path"] : "",
                     isset($cookie["expires"]) ? $cookie["expires"] : false);
         }
-    }
+}
     
-    /**
+/**
      *    Basic HTTP response.
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class SimpleHttpResponse extends SimpleStickyError {
+class SimpleHttpResponse extends SimpleStickyError {
         var $_url;
         var $_encoding;
         var $_sent;
@@ -516,13 +516,13 @@
         function _parse($raw) {
             if (! $raw) {
                 $this->_setError('Nothing fetched');
-                $this->_headers = &new SimpleHttpHeaders('');
+            $this->_headers = new SimpleHttpHeaders('');
             } elseif (! strstr($raw, "\r\n\r\n")) {
                 $this->_setError('Could not split headers from content');
-                $this->_headers = &new SimpleHttpHeaders($raw);
+            $this->_headers = new SimpleHttpHeaders($raw);
             } else {
-                list($headers, $this->_content) = split("\r\n\r\n", $raw, 2);
-                $this->_headers = &new SimpleHttpHeaders($headers);
+            list($headers, $this->_content) = explode("\r\n\r\n", $raw, 2);
+            $this->_headers = new SimpleHttpHeaders($headers);
             }
         }
         
@@ -620,5 +620,5 @@
             }
             return ! $packet;
         }
-    }
+}
 ?>
\ No newline at end of file
