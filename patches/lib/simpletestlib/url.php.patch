diff --git a/lib/simpletestlib/url.php b/lib/simpletestlib/url.php
index b66b31f..c9f69c6 100644
--- a/lib/simpletestlib/url.php
+++ b/lib/simpletestlib/url.php
@@ -1,18 +1,18 @@
 <?php
-    /**
+/**
      *	base include file for SimpleTest
      *	@package	SimpleTest
      *	@subpackage	WebTester
      *	@version	$Id$
      */
 
-    /**#@+
+/**#@+
      *	include other SimpleTest class files
      */
-    require_once(dirname(__FILE__) . '/encoding.php');
-    /**#@-*/
+require_once(dirname(__FILE__) . '/encoding.php');
+/**#@-*/
 
-    /**
+/**
      *    URL parser to replace parse_url() PHP function which
      *    got broken in PHP 4.3.0. Adds some browser specific
      *    functionality such as expandomatics.
@@ -22,7 +22,7 @@
 	 *    @package SimpleTest
 	 *    @subpackage WebTester
      */
-    class SimpleUrl {
+class SimpleUrl {
         var $_scheme;
         var $_username;
         var $_password;
@@ -41,7 +41,7 @@
          *    @param string $url        Incoming URL.
          *    @access public
          */
-        function SimpleUrl($url) {
+    function SimpleUrl($url = '') {
             list($x, $y) = $this->_chompCoordinates($url);
             $this->setCoordinates($x, $y);
             $this->_scheme = $this->_chompScheme($url);
@@ -81,7 +81,7 @@
          *    @access private
          */
         function _chompScheme(&$url) {
-            if (preg_match('/(.*?):(\/\/)(.*)/', $url, $matches)) {
+        if (preg_match('/^([^\/:]*):(\/\/)(.*)/', $url, $matches)) {
                 $url = $matches[2] . $matches[3];
                 return $matches[1];
             }
@@ -104,9 +104,9 @@
                 $prefix = $matches[1];
                 $url = $matches[2];
             }
-            if (preg_match('/(.*?)@(.*)/', $url, $matches)) {
+        if (preg_match('/^([^\/]*)@(.*)/', $url, $matches)) {
                 $url = $prefix . $matches[2];
-                $parts = split(":", $matches[1]);
+            $parts = explode(":", $matches[1]);
                 return array(
                         urldecode($parts[0]),
                         isset($parts[1]) ? urldecode($parts[1]) : false);
@@ -184,7 +184,7 @@
         function _parseRequest($raw) {
             $this->_raw = $raw;
             $request = new SimpleGetEncoding();
-            foreach (split("&", $raw) as $pair) {
+        foreach (explode("&", $raw) as $pair) {
                 if (preg_match('/(.*?)=(.*)/', $pair, $matches)) {
                     $request->add($matches[1], urldecode($matches[2]));
                 } elseif ($pair) {
@@ -379,7 +379,7 @@
          */
         function clearRequest() {
             $this->_raw = false;
-            $this->_request = &new SimpleGetEncoding();
+        $this->_request = new SimpleGetEncoding();
         }
         
         /**
@@ -409,12 +409,14 @@
          *    @access public
          */
         function asString() {
-            $scheme = $identity = $host = $path = $encoded = $fragment = '';
+        $path = $this->_path;
+        $scheme = $identity = $host = $encoded = $fragment = '';
             if ($this->_username && $this->_password) {
                 $identity = $this->_username . ':' . $this->_password . '@';
             }
             if ($this->getHost()) {
                 $scheme = $this->getScheme() ? $this->getScheme() : 'http';
+            $scheme .= "://";
                 $host = $this->getHost();
             }
             if (substr($this->_path, 0, 1) == '/') {
@@ -423,7 +425,7 @@
             $encoded = $this->getEncodedRequest();
             $fragment = $this->getFragment() ? '#'. $this->getFragment() : '';
             $coords = $this->getX() === false ? '' : '?' . $this->getX() . ',' . $this->getY();
-            return "$scheme://$identity$host$path$encoded$fragment$coords";
+        return "$scheme$identity$host$path$encoded$fragment$coords";
         }
         
         /**
@@ -437,8 +439,8 @@
             if (! is_object($base)) {
                 $base = new SimpleUrl($base);
             }
-            $scheme = $this->getScheme() ? $this->getScheme() : $base->getScheme();
             if ($this->getHost()) {
+            $scheme = $this->getScheme();
                 $host = $this->getHost();
                 $port = $this->getPort() ? ':' . $this->getPort() : '';
                 $identity = $this->getIdentity() ? $this->getIdentity() . '@' : '';
@@ -446,6 +448,7 @@
                     $identity = $base->getIdentity() ? $base->getIdentity() . '@' : '';
                 }
             } else {
+            $scheme = $base->getScheme();
                 $host = $base->getHost();
                 $port = $base->getPort() ? ':' . $base->getPort() : '';
                 $identity = $base->getIdentity() ? $base->getIdentity() . '@' : '';
@@ -521,5 +524,5 @@
         function getAllTopLevelDomains() {
             return 'com|edu|net|org|gov|mil|int|biz|info|name|pro|aero|coop|museum';
         }
-    }
+}
 ?>
\ No newline at end of file
