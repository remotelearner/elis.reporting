diff --git a/lib/phpmailer/class.smtp.php b/lib/phpmailer/class.smtp.php
index df3cfb5..6d3f24e 100644
--- a/lib/phpmailer/class.smtp.php
+++ b/lib/phpmailer/class.smtp.php
@@ -1,60 +1,90 @@
 <?php
-////////////////////////////////////////////////////
-// SMTP - PHP SMTP class
-//
-// Version 1.02
-//
-// Define an SMTP class that can be used to connect
-// and communicate with any SMTP server. It implements
-// all the SMTP functions defined in RFC821 except TURN.
-//
-// Author: Chris Ryan
-//
-// License: LGPL, see LICENSE
-////////////////////////////////////////////////////
+/*~ class.smtp.php
+.---------------------------------------------------------------------------.
+|  Software: PHPMailer - PHP email class                                    |
+|   Version: 5.1                                                            |
+|   Contact: via sourceforge.net support pages (also www.codeworxtech.com)  |
+|      Info: http://phpmailer.sourceforge.net                               |
+|   Support: http://sourceforge.net/projects/phpmailer/                     |
+| ------------------------------------------------------------------------- |
+|     Admin: Andy Prevost (project admininistrator)                         |
+|   Authors: Andy Prevost (codeworxtech) codeworxtech@users.sourceforge.net |
+|          : Marcus Bointon (coolbru) coolbru@users.sourceforge.net         |
+|   Founder: Brent R. Matzelle (original founder)                           |
+| Copyright (c) 2004-2009, Andy Prevost. All Rights Reserved.               |
+| Copyright (c) 2001-2003, Brent R. Matzelle                                |
+| ------------------------------------------------------------------------- |
+|   License: Distributed under the Lesser General Public License (LGPL)     |
+|            http://www.gnu.org/copyleft/lesser.html                        |
+| This program is distributed in the hope that it will be useful - WITHOUT  |
+| ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     |
+| FITNESS FOR A PARTICULAR PURPOSE.                                         |
+| ------------------------------------------------------------------------- |
+| We offer a number of paid services (www.codeworxtech.com):                |
+| - Web Hosting on highly optimized fast and secure servers                 |
+| - Technology Consulting                                                   |
+| - Oursourcing (highly qualified programmers and graphic designers)        |
+'---------------------------------------------------------------------------'
+*/
+
+/**
+ * PHPMailer - PHP SMTP email transport class
+ * NOTE: Designed for use with PHP version 5 and up
+ * @package PHPMailer
+ * @author Andy Prevost
+ * @author Marcus Bointon
+ * @copyright 2004 - 2008 Andy Prevost
+ * @license http://www.gnu.org/copyleft/lesser.html Distributed under the Lesser General Public License (LGPL)
+ * @version $Id$
+ */
 
 /**
  * SMTP is rfc 821 compliant and implements all the rfc 821 SMTP
  * commands except TURN which will always return a not implemented
  * error. SMTP also provides some utility methods for sending mail
  * to an SMTP server.
- * @package PHPMailer
- * @author Chris Ryan
+ * original author: Chris Ryan
  */
-class SMTP
-{
+
+class SMTP {
     /**
      *  SMTP server port
      *  @var int
      */
-    var $SMTP_PORT = 25;
+  public $SMTP_PORT = 25;
     
     /**
      *  SMTP reply line ending
      *  @var string
      */
-    var $CRLF = "\r\n";
+  public $CRLF = "\r\n";
     
     /**
      *  Sets whether debugging is turned on
      *  @var bool
      */
-    var $do_debug;       # the level of debug to perform
+  public $do_debug;       // the level of debug to perform
 
-    /**#@+
-     * @access private
+  /**
+   *  Sets VERP use on/off (default is off)
+   *  @var bool
      */
-    var $smtp_conn;      # the socket to the server
-    var $error;          # error if any on the last call
-    var $helo_rply;      # the reply the server sent to us for HELO
-    /**#@-*/
+  public $do_verp = false;
+
+  /////////////////////////////////////////////////
+  // PROPERTIES, PRIVATE AND PROTECTED
+  /////////////////////////////////////////////////
+
+  private $smtp_conn; // the socket to the server
+  private $error;     // error if any on the last call
+  private $helo_rply; // the reply the server sent to us for HELO
 
     /**
      * Initialize the class so that the data is in a known state.
      * @access public
      * @return void
      */
-    function SMTP() {
+  public function __construct() {
         $this->smtp_conn = 0;
         $this->error = null;
         $this->helo_rply = null;
@@ -62,9 +92,9 @@ class SMTP
         $this->do_debug = 0;
     }
 
-    /*************************************************************
-     *                    CONNECTION FUNCTIONS                  *
-     ***********************************************************/
+  /////////////////////////////////////////////////
+  // CONNECTION FUNCTIONS
+  /////////////////////////////////////////////////
 
     /**
      * Connect to the server specified on the port specified.
@@ -79,17 +109,14 @@ class SMTP
      * @access public
      * @return bool
      */
-    function Connect($host,$port=0,$tval=30) {
-        # set the error val to null so there is no confusion
+  public function Connect($host, $port = 0, $tval = 30) {
+    // set the error val to null so there is no confusion
         $this->error = null;
 
-        # make sure we are __not__ connected
+    // make sure we are __not__ connected
         if($this->connected()) {
-            # ok we are connected! what should we do?
-            # for now we will just give an error saying we
-            # are already connected
-            $this->error =
-                array("error" => "Already connected to a server");
+      // already connected, generate error
+      $this->error = array("error" => "Already connected to a server");
             return false;
         }
 
@@ -97,39 +124,78 @@ class SMTP
             $port = $this->SMTP_PORT;
         }
 
-        #connect to the smtp server
-        $this->smtp_conn = fsockopen($host,    # the host of the server
-                                     $port,    # the port to use
-                                     $errno,   # error number if any
-                                     $errstr,  # error message if any
-                                     $tval);   # give up after ? secs
-        # verify we connected properly
+    // connect to the smtp server
+    $this->smtp_conn = @fsockopen($host,    // the host of the server
+                                 $port,    // the port to use
+                                 $errno,   // error number if any
+                                 $errstr,  // error message if any
+                                 $tval);   // give up after ? secs
+    // verify we connected properly
         if(empty($this->smtp_conn)) {
             $this->error = array("error" => "Failed to connect to server",
                                  "errno" => $errno,
                                  "errstr" => $errstr);
             if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": $errstr ($errno)" . $this->CRLF;
+        echo "SMTP -> ERROR: " . $this->error["error"] . ": $errstr ($errno)" . $this->CRLF . '<br />';
             }
             return false;
         }
 
-        # sometimes the SMTP server takes a little longer to respond
-        # so we will give it a longer timeout for the first read
-        // Windows still does not have support for this timeout function
+    // SMTP server can take longer to respond, give longer timeout for first read
+    // Windows does not have support for this timeout function
         if(substr(PHP_OS, 0, 3) != "WIN")
            socket_set_timeout($this->smtp_conn, $tval, 0);
 
-        # get any announcement stuff
+    // get any announcement
         $announce = $this->get_lines();
 
-        # set the timeout  of any socket functions at 1/10 of a second
-        //if(function_exists("socket_set_timeout"))
-        //   socket_set_timeout($this->smtp_conn, 0, 100000);
+    if($this->do_debug >= 2) {
+      echo "SMTP -> FROM SERVER:" . $announce . $this->CRLF . '<br />';
+    }
+
+    return true;
+  }
+
+  /**
+   * Initiate a TLS communication with the server.
+   *
+   * SMTP CODE 220 Ready to start TLS
+   * SMTP CODE 501 Syntax error (no parameters allowed)
+   * SMTP CODE 454 TLS not available due to temporary reason
+   * @access public
+   * @return bool success
+   */
+  public function StartTLS() {
+    $this->error = null; # to avoid confusion
+
+    if(!$this->connected()) {
+      $this->error = array("error" => "Called StartTLS() without being connected");
+      return false;
+    }
+
+    fputs($this->smtp_conn,"STARTTLS" . $this->CRLF);
+
+    $rply = $this->get_lines();
+    $code = substr($rply,0,3);
 
         if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $announce;
+      echo "SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />';
+    }
+
+    if($code != 220) {
+      $this->error =
+         array("error"     => "STARTTLS not accepted from server",
+               "smtp_code" => $code,
+               "smtp_msg"  => substr($rply,4));
+      if($this->do_debug >= 1) {
+        echo "SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />';
+      }
+      return false;
+    }
+
+    // Begin encrypted connection
+    if(!stream_socket_enable_crypto($this->smtp_conn, true, STREAM_CRYPTO_METHOD_TLS_CLIENT)) {
+      return false;
         }
 
         return true;
@@ -141,7 +207,7 @@ class SMTP
      * @access public
      * @return bool
      */
-    function Authenticate($username, $password) {
+  public function Authenticate($username, $password) {
         // Start authentication
         fputs($this->smtp_conn,"AUTH LOGIN" . $this->CRLF);
 
@@ -154,8 +220,7 @@ class SMTP
                       "smtp_code" => $code,
                       "smtp_msg" => substr($rply,4));
             if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
+        echo "SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />';
             }
             return false;
         }
@@ -172,8 +237,7 @@ class SMTP
                       "smtp_code" => $code,
                       "smtp_msg" => substr($rply,4));
             if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
+        echo "SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />';
             }
             return false;
         }
@@ -190,8 +254,7 @@ class SMTP
                       "smtp_code" => $code,
                       "smtp_msg" => substr($rply,4));
             if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
+        echo "SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />';
             }
             return false;
         }
@@ -201,23 +264,21 @@ class SMTP
 
     /**
      * Returns true if connected to a server otherwise false
-     * @access private
+   * @access public
      * @return bool
      */
-    function Connected() {
+  public function Connected() {
         if(!empty($this->smtp_conn)) {
             $sock_status = socket_get_status($this->smtp_conn);
             if($sock_status["eof"]) {
-                # hmm this is an odd situation... the socket is
-                # valid but we aren't connected anymore
+        // the socket is valid but we are not connected
                 if($this->do_debug >= 1) {
-                    echo "SMTP -> NOTICE:" . $this->CRLF .
-                         "EOF caught while checking if connected";
+            echo "SMTP -> NOTICE:" . $this->CRLF . "EOF caught while checking if connected";
                 }
                 $this->Close();
                 return false;
             }
-            return true; # everything looks good
+      return true; // everything looks good
         }
         return false;
     }
@@ -229,20 +290,19 @@ class SMTP
      * @access public
      * @return void
      */
-    function Close() {
-        $this->error = null; # so there is no confusion
+  public function Close() {
+    $this->error = null; // so there is no confusion
         $this->helo_rply = null;
         if(!empty($this->smtp_conn)) {
-            # close the connection and cleanup
+      // close the connection and cleanup
             fclose($this->smtp_conn);
             $this->smtp_conn = 0;
         }
     }
 
-
-    /***************************************************************
-     *                        SMTP COMMANDS                       *
-     *************************************************************/
+  /////////////////////////////////////////////////
+  // SMTP COMMANDS
+  /////////////////////////////////////////////////
 
     /**
      * Issues a data command and sends the msg_data to the server
@@ -263,8 +323,8 @@ class SMTP
      * @access public
      * @return bool
      */
-    function Data($msg_data) {
-        $this->error = null; # so no confusion is caused
+  public function Data($msg_data) {
+    $this->error = null; // so no confusion is caused
 
         if(!$this->connected()) {
             $this->error = array(
@@ -278,7 +338,7 @@ class SMTP
         $code = substr($rply,0,3);
 
         if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
+      echo "SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />';
         }
 
         if($code != 354) {
@@ -287,69 +347,73 @@ class SMTP
                       "smtp_code" => $code,
                       "smtp_msg" => substr($rply,4));
             if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
+        echo "SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />';
             }
             return false;
         }
 
-        # the server is ready to accept data!
-        # according to rfc 821 we should not send more than 1000
-        # including the CRLF
-        # characters on a single line so we will break the data up
-        # into lines by \r and/or \n then if needed we will break
-        # each of those into smaller lines to fit within the limit.
-        # in addition we will be looking for lines that start with
-        # a period '.' and append and additional period '.' to that
-        # line. NOTE: this does not count towards are limit.
+    /* the server is ready to accept data!
+     * according to rfc 821 we should not send more than 1000
+     * including the CRLF
+     * characters on a single line so we will break the data up
+     * into lines by \r and/or \n then if needed we will break
+     * each of those into smaller lines to fit within the limit.
+     * in addition we will be looking for lines that start with
+     * a period '.' and append and additional period '.' to that
+     * line. NOTE: this does not count towards limit.
+     */
 
-        # normalize the line breaks so we know the explode works
+    // normalize the line breaks so we know the explode works
         $msg_data = str_replace("\r\n","\n",$msg_data);
         $msg_data = str_replace("\r","\n",$msg_data);
         $lines = explode("\n",$msg_data);
 
-        # we need to find a good way to determine is headers are
-        # in the msg_data or if it is a straight msg body
-        # currently I'm assuming rfc 822 definitions of msg headers
-        # and if the first field of the first line (':' sperated)
-        # does not contain a space then it _should_ be a header
-        # and we can process all lines before a blank "" line as
-        # headers.
+    /* we need to find a good way to determine is headers are
+     * in the msg_data or if it is a straight msg body
+     * currently I am assuming rfc 822 definitions of msg headers
+     * and if the first field of the first line (':' sperated)
+     * does not contain a space then it _should_ be a header
+     * and we can process all lines before a blank "" line as
+     * headers.
+     */
+
         $field = substr($lines[0],0,strpos($lines[0],":"));
         $in_headers = false;
         if(!empty($field) && !strstr($field," ")) {
             $in_headers = true;
         }
 
-        $max_line_length = 998; # used below; set here for ease in change
+    $max_line_length = 998; // used below; set here for ease in change
 
         while(list(,$line) = @each($lines)) {
             $lines_out = null;
             if($line == "" && $in_headers) {
                 $in_headers = false;
             }
-            # ok we need to break this line up into several
-            # smaller lines
+      // ok we need to break this line up into several smaller lines
             while(strlen($line) > $max_line_length) {
                 $pos = strrpos(substr($line,0,$max_line_length)," ");
 
-                # Patch to fix DOS attack
+        // Patch to fix DOS attack
                 if(!$pos) {
                     $pos = $max_line_length - 1;
-                }
-
+          $lines_out[] = substr($line,0,$pos);
+          $line = substr($line,$pos);
+        } else {
                 $lines_out[] = substr($line,0,$pos);
                 $line = substr($line,$pos + 1);
-                # if we are processing headers we need to
-                # add a LWSP-char to the front of the new line
-                # rfc 822 on long msg headers
+        }
+
+        /* if processing headers add a LWSP-char to the front of new line
+         * rfc 822 on long msg headers
+         */
                 if($in_headers) {
                     $line = "\t" . $line;
                 }
             }
             $lines_out[] = $line;
 
-            # now send the lines to the server
+      // send the lines to the server
             while(list(,$line_out) = @each($lines_out)) {
                 if(strlen($line_out) > 0)
                 {
@@ -361,15 +425,14 @@ class SMTP
             }
         }
 
-        # ok all the message data has been sent so lets get this
-        # over with aleady
+    // message data has been sent
         fputs($this->smtp_conn, $this->CRLF . "." . $this->CRLF);
 
         $rply = $this->get_lines();
         $code = substr($rply,0,3);
 
         if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
+      echo "SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />';
         }
 
         if($code != 250) {
@@ -378,8 +441,7 @@ class SMTP
                       "smtp_code" => $code,
                       "smtp_msg" => substr($rply,4));
             if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
+        echo "SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />';
             }
             return false;
         }
@@ -387,61 +449,6 @@ class SMTP
     }
 
     /**
-     * Expand takes the name and asks the server to list all the
-     * people who are members of the _list_. Expand will return
-     * back and array of the result or false if an error occurs.
-     * Each value in the array returned has the format of:
-     *     [ <full-name> <sp> ] <path>
-     * The definition of <path> is defined in rfc 821
-     *
-     * Implements rfc 821: EXPN <SP> <string> <CRLF>
-     *
-     * SMTP CODE SUCCESS: 250
-     * SMTP CODE FAILURE: 550
-     * SMTP CODE ERROR  : 500,501,502,504,421
-     * @access public
-     * @return string array
-     */
-    function Expand($name) {
-        $this->error = null; # so no confusion is caused
-
-        if(!$this->connected()) {
-            $this->error = array(
-                    "error" => "Called Expand() without being connected");
-            return false;
-        }
-
-        fputs($this->smtp_conn,"EXPN " . $name . $this->CRLF);
-
-        $rply = $this->get_lines();
-        $code = substr($rply,0,3);
-
-        if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
-        }
-
-        if($code != 250) {
-            $this->error =
-                array("error" => "EXPN not accepted from server",
-                      "smtp_code" => $code,
-                      "smtp_msg" => substr($rply,4));
-            if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
-            }
-            return false;
-        }
-
-        # parse the reply and place in our array to return to user
-        $entries = explode($this->CRLF,$rply);
-        while(list(,$l) = @each($entries)) {
-            $list[] = substr($l,4);
-        }
-
-        return $list;
-    }
-
-    /**
      * Sends the HELO command to the smtp server.
      * This makes sure that we and the server are in
      * the same known state.
@@ -453,8 +460,8 @@ class SMTP
      * @access public
      * @return bool
      */
-    function Hello($host="") {
-        $this->error = null; # so no confusion is caused
+  public function Hello($host = '') {
+    $this->error = null; // so no confusion is caused
 
         if(!$this->connected()) {
             $this->error = array(
@@ -462,20 +469,18 @@ class SMTP
             return false;
         }
 
-        # if a hostname for the HELO wasn't specified determine
-        # a suitable one to send
+    // if hostname for HELO was not specified send default
         if(empty($host)) {
-            # we need to determine some sort of appopiate default
-            # to send to the server
+      // determine appropriate default to send to server
             $host = "localhost";
         }
 
         // Send extended hello first (RFC 2821)
-        if(!$this->SendHello("EHLO", $host))
-        {
-            if(!$this->SendHello("HELO", $host))
+    if(!$this->SendHello("EHLO", $host)) {
+      if(!$this->SendHello("HELO", $host)) {
                 return false;
         }
+    }
 
         return true;
     }
@@ -485,14 +490,14 @@ class SMTP
      * @access private
      * @return bool
      */
-    function SendHello($hello, $host) {
+  private function SendHello($hello, $host) {
         fputs($this->smtp_conn, $hello . " " . $host . $this->CRLF);
 
         $rply = $this->get_lines();
         $code = substr($rply,0,3);
 
         if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER: " . $this->CRLF . $rply;
+      echo "SMTP -> FROM SERVER: " . $rply . $this->CRLF . '<br />';
         }
 
         if($code != 250) {
@@ -501,8 +506,7 @@ class SMTP
                       "smtp_code" => $code,
                       "smtp_msg" => substr($rply,4));
             if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
+        echo "SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />';
             }
             return false;
         }
@@ -513,59 +517,6 @@ class SMTP
     }
 
     /**
-     * Gets help information on the keyword specified. If the keyword
-     * is not specified then returns generic help, ussually contianing
-     * A list of keywords that help is available on. This function
-     * returns the results back to the user. It is up to the user to
-     * handle the returned data. If an error occurs then false is
-     * returned with $this->error set appropiately.
-     *
-     * Implements rfc 821: HELP [ <SP> <string> ] <CRLF>
-     *
-     * SMTP CODE SUCCESS: 211,214
-     * SMTP CODE ERROR  : 500,501,502,504,421
-     * @access public
-     * @return string
-     */
-    function Help($keyword="") {
-        $this->error = null; # to avoid confusion
-
-        if(!$this->connected()) {
-            $this->error = array(
-                    "error" => "Called Help() without being connected");
-            return false;
-        }
-
-        $extra = "";
-        if(!empty($keyword)) {
-            $extra = " " . $keyword;
-        }
-
-        fputs($this->smtp_conn,"HELP" . $extra . $this->CRLF);
-
-        $rply = $this->get_lines();
-        $code = substr($rply,0,3);
-
-        if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
-        }
-
-        if($code != 211 && $code != 214) {
-            $this->error =
-                array("error" => "HELP not accepted from server",
-                      "smtp_code" => $code,
-                      "smtp_msg" => substr($rply,4));
-            if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
-            }
-            return false;
-        }
-
-        return $rply;
-    }
-
-    /**
      * Starts a mail transaction from the email address specified in
      * $from. Returns true if successful or false otherwise. If True
      * the mail transaction is started and then one or more Recipient
@@ -579,8 +530,8 @@ class SMTP
      * @access public
      * @return bool
      */
-    function Mail($from) {
-        $this->error = null; # so no confusion is caused
+  public function Mail($from) {
+    $this->error = null; // so no confusion is caused
 
         if(!$this->connected()) {
             $this->error = array(
@@ -588,13 +539,14 @@ class SMTP
             return false;
         }
 
-        fputs($this->smtp_conn,"MAIL FROM:<" . $from . ">" . $this->CRLF);
+    $useVerp = ($this->do_verp ? "XVERP" : "");
+    fputs($this->smtp_conn,"MAIL FROM:<" . $from . ">" . $useVerp . $this->CRLF);
 
         $rply = $this->get_lines();
         $code = substr($rply,0,3);
 
         if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
+      echo "SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />';
         }
 
         if($code != 250) {
@@ -603,50 +555,7 @@ class SMTP
                       "smtp_code" => $code,
                       "smtp_msg" => substr($rply,4));
             if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
-            }
-            return false;
-        }
-        return true;
-    }
-
-    /**
-     * Sends the command NOOP to the SMTP server.
-     *
-     * Implements from rfc 821: NOOP <CRLF>
-     *
-     * SMTP CODE SUCCESS: 250
-     * SMTP CODE ERROR  : 500, 421
-     * @access public
-     * @return bool
-     */
-    function Noop() {
-        $this->error = null; # so no confusion is caused
-
-        if(!$this->connected()) {
-            $this->error = array(
-                    "error" => "Called Noop() without being connected");
-            return false;
-        }
-
-        fputs($this->smtp_conn,"NOOP" . $this->CRLF);
-
-        $rply = $this->get_lines();
-        $code = substr($rply,0,3);
-
-        if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
-        }
-
-        if($code != 250) {
-            $this->error =
-                array("error" => "NOOP not accepted from server",
-                      "smtp_code" => $code,
-                      "smtp_msg" => substr($rply,4));
-            if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
+        echo "SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />';
             }
             return false;
         }
@@ -664,8 +573,8 @@ class SMTP
      * @access public
      * @return bool
      */
-    function Quit($close_on_error=true) {
-        $this->error = null; # so there is no confusion
+  public function Quit($close_on_error = true) {
+    $this->error = null; // so there is no confusion
 
         if(!$this->connected()) {
             $this->error = array(
@@ -673,14 +582,14 @@ class SMTP
             return false;
         }
 
-        # send the quit command to the server
+    // send the quit command to the server
         fputs($this->smtp_conn,"quit" . $this->CRLF);
 
-        # get any good-bye messages
+    // get any good-bye messages
         $byemsg = $this->get_lines();
 
         if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $byemsg;
+      echo "SMTP -> FROM SERVER:" . $byemsg . $this->CRLF . '<br />';
         }
 
         $rval = true;
@@ -688,14 +597,13 @@ class SMTP
 
         $code = substr($byemsg,0,3);
         if($code != 221) {
-            # use e as a tmp var cause Close will overwrite $this->error
+      // use e as a tmp var cause Close will overwrite $this->error
             $e = array("error" => "SMTP server rejected quit command",
                        "smtp_code" => $code,
                        "smtp_rply" => substr($byemsg,4));
             $rval = false;
             if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $e["error"] . ": " .
-                         $byemsg . $this->CRLF;
+        echo "SMTP -> ERROR: " . $e["error"] . ": " . $byemsg . $this->CRLF . '<br />';
             }
         }
 
@@ -718,8 +626,8 @@ class SMTP
      * @access public
      * @return bool
      */
-    function Recipient($to) {
-        $this->error = null; # so no confusion is caused
+  public function Recipient($to) {
+    $this->error = null; // so no confusion is caused
 
         if(!$this->connected()) {
             $this->error = array(
@@ -733,7 +641,7 @@ class SMTP
         $code = substr($rply,0,3);
 
         if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
+      echo "SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />';
         }
 
         if($code != 250 && $code != 251) {
@@ -742,8 +650,7 @@ class SMTP
                       "smtp_code" => $code,
                       "smtp_msg" => substr($rply,4));
             if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
+        echo "SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />';
             }
             return false;
         }
@@ -762,8 +669,8 @@ class SMTP
      * @access public
      * @return bool
      */
-    function Reset() {
-        $this->error = null; # so no confusion is caused
+  public function Reset() {
+    $this->error = null; // so no confusion is caused
 
         if(!$this->connected()) {
             $this->error = array(
@@ -777,7 +684,7 @@ class SMTP
         $code = substr($rply,0,3);
 
         if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
+      echo "SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />';
         }
 
         if($code != 250) {
@@ -786,8 +693,7 @@ class SMTP
                       "smtp_code" => $code,
                       "smtp_msg" => substr($rply,4));
             if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
+        echo "SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />';
             }
             return false;
         }
@@ -801,54 +707,6 @@ class SMTP
      * the mail transaction is started and then one or more Recipient
      * commands may be called followed by a Data command. This command
      * will send the message to the users terminal if they are logged
-     * in.
-     *
-     * Implements rfc 821: SEND <SP> FROM:<reverse-path> <CRLF>
-     *
-     * SMTP CODE SUCCESS: 250
-     * SMTP CODE SUCCESS: 552,451,452
-     * SMTP CODE SUCCESS: 500,501,502,421
-     * @access public
-     * @return bool
-     */
-    function Send($from) {
-        $this->error = null; # so no confusion is caused
-
-        if(!$this->connected()) {
-            $this->error = array(
-                    "error" => "Called Send() without being connected");
-            return false;
-        }
-
-        fputs($this->smtp_conn,"SEND FROM:" . $from . $this->CRLF);
-
-        $rply = $this->get_lines();
-        $code = substr($rply,0,3);
-
-        if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
-        }
-
-        if($code != 250) {
-            $this->error =
-                array("error" => "SEND not accepted from server",
-                      "smtp_code" => $code,
-                      "smtp_msg" => substr($rply,4));
-            if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
-            }
-            return false;
-        }
-        return true;
-    }
-
-    /**
-     * Starts a mail transaction from the email address specified in
-     * $from. Returns true if successful or false otherwise. If True
-     * the mail transaction is started and then one or more Recipient
-     * commands may be called followed by a Data command. This command
-     * will send the message to the users terminal if they are logged
      * in and send them an email.
      *
      * Implements rfc 821: SAML <SP> FROM:<reverse-path> <CRLF>
@@ -859,8 +717,8 @@ class SMTP
      * @access public
      * @return bool
      */
-    function SendAndMail($from) {
-        $this->error = null; # so no confusion is caused
+  public function SendAndMail($from) {
+    $this->error = null; // so no confusion is caused
 
         if(!$this->connected()) {
             $this->error = array(
@@ -874,7 +732,7 @@ class SMTP
         $code = substr($rply,0,3);
 
         if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
+      echo "SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />';
         }
 
         if($code != 250) {
@@ -883,56 +741,7 @@ class SMTP
                       "smtp_code" => $code,
                       "smtp_msg" => substr($rply,4));
             if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
-            }
-            return false;
-        }
-        return true;
-    }
-
-    /**
-     * Starts a mail transaction from the email address specified in
-     * $from. Returns true if successful or false otherwise. If True
-     * the mail transaction is started and then one or more Recipient
-     * commands may be called followed by a Data command. This command
-     * will send the message to the users terminal if they are logged
-     * in or mail it to them if they are not.
-     *
-     * Implements rfc 821: SOML <SP> FROM:<reverse-path> <CRLF>
-     *
-     * SMTP CODE SUCCESS: 250
-     * SMTP CODE SUCCESS: 552,451,452
-     * SMTP CODE SUCCESS: 500,501,502,421
-     * @access public
-     * @return bool
-     */
-    function SendOrMail($from) {
-        $this->error = null; # so no confusion is caused
-
-        if(!$this->connected()) {
-            $this->error = array(
-                "error" => "Called SendOrMail() without being connected");
-            return false;
-        }
-
-        fputs($this->smtp_conn,"SOML FROM:" . $from . $this->CRLF);
-
-        $rply = $this->get_lines();
-        $code = substr($rply,0,3);
-
-        if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
-        }
-
-        if($code != 250) {
-            $this->error =
-                array("error" => "SOML not accepted from server",
-                      "smtp_code" => $code,
-                      "smtp_msg" => substr($rply,4));
-            if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
+        echo "SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />';
             }
             return false;
         }
@@ -952,63 +761,27 @@ class SMTP
      * @access public
      * @return bool
      */
-    function Turn() {
+  public function Turn() {
         $this->error = array("error" => "This method, TURN, of the SMTP ".
                                         "is not implemented");
         if($this->do_debug >= 1) {
-            echo "SMTP -> NOTICE: " . $this->error["error"] . $this->CRLF;
+      echo "SMTP -> NOTICE: " . $this->error["error"] . $this->CRLF . '<br />';
         }
         return false;
     }
 
     /**
-     * Verifies that the name is recognized by the server.
-     * Returns false if the name could not be verified otherwise
-     * the response from the server is returned.
-     *
-     * Implements rfc 821: VRFY <SP> <string> <CRLF>
-     *
-     * SMTP CODE SUCCESS: 250,251
-     * SMTP CODE FAILURE: 550,551,553
-     * SMTP CODE ERROR  : 500,501,502,421
+  * Get the current error
      * @access public
-     * @return int
+  * @return array
      */
-    function Verify($name) {
-        $this->error = null; # so no confusion is caused
-
-        if(!$this->connected()) {
-            $this->error = array(
-                    "error" => "Called Verify() without being connected");
-            return false;
+  public function getError() {
+    return $this->error;
         }
 
-        fputs($this->smtp_conn,"VRFY " . $name . $this->CRLF);
-
-        $rply = $this->get_lines();
-        $code = substr($rply,0,3);
-
-        if($this->do_debug >= 2) {
-            echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
-        }
-
-        if($code != 250 && $code != 251) {
-            $this->error =
-                array("error" => "VRFY failed on name '$name'",
-                      "smtp_code" => $code,
-                      "smtp_msg" => substr($rply,4));
-            if($this->do_debug >= 1) {
-                echo "SMTP -> ERROR: " . $this->error["error"] .
-                         ": " . $rply . $this->CRLF;
-            }
-            return false;
-        }
-        return $rply;
-    }
-
-    /*******************************************************************
-     *                       INTERNAL FUNCTIONS                       *
-     ******************************************************************/
+  /////////////////////////////////////////////////
+  // INTERNAL FUNCTIONS
+  /////////////////////////////////////////////////
 
     /**
      * Read in as many lines as possible
@@ -1019,21 +792,18 @@ class SMTP
      * @access private
      * @return string
      */
-    function get_lines() {
+  private function get_lines() {
         $data = "";
-        while($str = fgets($this->smtp_conn,515)) {
+    while($str = @fgets($this->smtp_conn,515)) {
             if($this->do_debug >= 4) {
-                echo "SMTP -> get_lines(): \$data was \"$data\"" .
-                         $this->CRLF;
-                echo "SMTP -> get_lines(): \$str is \"$str\"" .
-                         $this->CRLF;
+        echo "SMTP -> get_lines(): \$data was \"$data\"" . $this->CRLF . '<br />';
+        echo "SMTP -> get_lines(): \$str is \"$str\"" . $this->CRLF . '<br />';
             }
             $data .= $str;
             if($this->do_debug >= 4) {
-                echo "SMTP -> get_lines(): \$data is \"$data\"" . $this->CRLF;
+        echo "SMTP -> get_lines(): \$data is \"$data\"" . $this->CRLF . '<br />';
             }
-            # if the 4th character is a space then we are done reading
-            # so just break the loop
+      // if 4th character is a space, we are done reading, break the loop
             if(substr($str,3,1) == " ") { break; }
         }
         return $data;
@@ -1041,5 +811,4 @@ class SMTP
 
 }
 
-
- ?>
+?>
\ No newline at end of file
