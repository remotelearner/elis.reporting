diff --git a/lib/csvlib.class.php b/lib/csvlib.class.php
index 0cca4b8..9cf39db 100644
--- a/lib/csvlib.class.php
+++ b/lib/csvlib.class.php
@@ -1,24 +1,64 @@
 <?php
-/*
- * General csv import library.
- * @author Petr Skoda
- * @version $Id$
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package moodlecore
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This is a one-line short description of the file
+ *
+ * You can have a rather longer description of the file as well,
+ * if you like, and it can span multiple lines.
+ *
+ * @package    core
+ * @subpackage lib
+ * @copyright  Petr Skoda
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 
+defined('MOODLE_INTERNAL') || die();
+
 /**
  * Utitily class for importing of CSV files.
+ * @copyright Petr Skoda
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ * @package   moodlecore
  */
 class csv_import_reader {
+    /**
+     * @var int import identifier
+     */
     var $_iid;
+    /**
+     * @var string which script imports?
+     */
     var $_type;
+    /**
+     * @var string|null Null if ok, error msg otherwise
+     */
     var $_error;
-    var $_columns; //cached columns
+    /**
+     * @var array cached columns
+     */
+    var $_columns;
+    /**
+     * @var object file handle used during import
+     */
     var $_fp;
 
     /**
      * Contructor
+     *
      * @param int $iid import identifier
      * @param string $type which script imports?
      */
@@ -29,11 +69,14 @@ class csv_import_reader {
 
     /**
      * Parse this content
-     * @param string &$content passed by ref for memory reasons, unset after return
+     *
+     * @global object
+     * @global object
+     * @param string $content passed by ref for memory reasons, unset after return
      * @param string $encoding content encoding
      * @param string $delimiter_name separator (comma, semicolon, colon, cfg)
      * @param string $column_validation name of function for columns validation, must have one param $columns
-     * @return false if error, count of data lines if ok; use get_error() to get error string
+     * @return bool false if error, count of data lines if ok; use get_error() to get error string
      */
     function load_csv_content(&$content, $encoding, $delimiter_name, $column_validation=null) {
         global $USER, $CFG;
@@ -108,6 +151,7 @@ class csv_import_reader {
 
     /**
      * Returns list of columns
+     *
      * @return array
      */
     function get_columns() {
@@ -133,6 +177,10 @@ class csv_import_reader {
 
     /**
      * Init iterator.
+     *
+     * @global object
+     * @global object
+     * @return bool Success
      */
     function init() {
         global $CFG, $USER;
@@ -153,7 +201,8 @@ class csv_import_reader {
 
     /**
      * Get next line
-     * @return array of values
+     *
+     * @return mixed false, or an array of values
      */
     function next() {
         if (empty($this->_fp) or feof($this->_fp)) {
@@ -168,6 +217,8 @@ class csv_import_reader {
 
     /**
      * Release iteration related resources
+     *
+     * @return void
      */
     function close() {
         if (!empty($this->_fp)) {
@@ -178,6 +229,7 @@ class csv_import_reader {
 
     /**
      * Get last error
+     *
      * @return string error text of null if none
      */
     function get_error() {
@@ -186,8 +238,10 @@ class csv_import_reader {
 
     /**
      * Cleanup temporary data
-     * @static if $full=true
-     * @param boolean true menasdo a full cleanup - all sessions for current user, false only the active iid
+     *
+     * @global object
+     * @global object
+     * @param boolean $full true means do a full cleanup - all sessions for current user, false only the active iid
      */
     function cleanup($full=false) {
         global $USER, $CFG;
@@ -201,10 +255,11 @@ class csv_import_reader {
 
     /**
      * Get list of cvs delimiters
-     * @static
+     *
      * @return array suitable for selection box
      */
-    function get_delimiter_list() {
+    static function get_delimiter_list() {
+        global $CFG;
         $delimiters = array('comma'=>',', 'semicolon'=>';', 'colon'=>':', 'tab'=>'\\t');
         if (isset($CFG->CSV_DELIMITER) and strlen($CFG->CSV_DELIMITER) === 1 and !in_array($CFG->CSV_DELIMITER, $delimiters)) {
             $delimiters['cfg'] = $CFG->CSV_DELIMITER;
@@ -214,11 +269,12 @@ class csv_import_reader {
 
     /**
      * Get delimiter character
-     * @static
+     *
      * @param string separator name
-     * @return char delimiter char
+     * @return string delimiter char
      */
-    function get_delimiter($delimiter_name) {
+    static function get_delimiter($delimiter_name) {
+        global $CFG;
         switch ($delimiter_name) {
             case 'colon':     return ':';
             case 'semicolon': return ';';
@@ -230,9 +286,10 @@ class csv_import_reader {
 
     /**
      * Get encoded delimiter character
-     * @static
+     *
+     * @global object
      * @param string separator name
-     * @return char encoded delimiter char
+     * @return string encoded delimiter char
      */
     function get_encoded_delimiter($delimiter_name) {
         global $CFG;
@@ -245,16 +302,15 @@ class csv_import_reader {
 
     /**
      * Create new import id
-     * @static
+     *
+     * @global object
      * @param string who imports?
      * @return int iid
      */
     function get_new_iid($type) {
         global $USER;
 
-        if (!$filename = make_upload_directory('temp/csvimport/'.$type.'/'.$USER->id, false)) {
-            error('Can not create temporary upload directory - verify moodledata permissions!');
-        }
+        $filename = make_upload_directory('temp/csvimport/'.$type.'/'.$USER->id);
 
         // use current (non-conflicting) time stamp
         $iiid = time();
@@ -265,4 +321,3 @@ class csv_import_reader {
         return $iiid;
     }
 }
-?>
