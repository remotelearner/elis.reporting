diff --git a/lib/simpletest/fixtures/gradetest.php b/lib/simpletest/fixtures/gradetest.php
index c34429c..ea5f4a3 100644
--- a/lib/simpletest/fixtures/gradetest.php
+++ b/lib/simpletest/fixtures/gradetest.php
@@ -1,96 +1,72 @@
-<?php // $Id$
-
-///////////////////////////////////////////////////////////////////////////
-//                                                                       //
-// NOTICE OF COPYRIGHT                                                   //
-//                                                                       //
-// Moodle - Modular Object-Oriented Dynamic Learning Environment         //
-//          http://moodle.org                                            //
-//                                                                       //
-// Copyright (C) 1999 onwards Martin Dougiamas  http://dougiamas.com     //
-//                                                                       //
-// This program is free software; you can redistribute it and/or modify  //
-// it under the terms of the GNU General Public License as published by  //
-// the Free Software Foundation; either version 2 of the License, or     //
-// (at your option) any later version.                                   //
-//                                                                       //
-// This program is distributed in the hope that it will be useful,       //
-// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
-// GNU General Public License for more details:                          //
-//                                                                       //
-//          http://www.gnu.org/copyleft/gpl.html                         //
-//                                                                       //
-///////////////////////////////////////////////////////////////////////////
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package    moodlecore
+ * @copyright  nicolas@moodle.com
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 
 if (!defined('MOODLE_INTERNAL')) {
     die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
 }
 
-/**
- * Shared code for all grade related tests.
- *
- * @author nicolas@moodle.com
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package moodlecore
- */
+require_once($CFG->libdir . '/adminlib.php');
 require_once($CFG->libdir . '/gradelib.php');
-require_once($CFG->libdir . '/dmllib.php');
-require_once($CFG->libdir . '/ddllib.php');
-
-Mock::generate('grade_item', 'mock_grade_item');
-Mock::generate('grade_scale', 'mock_grade_scale');
-Mock::generate('grade_category', 'mock_grade_category');
-Mock::generate('grade_grade', 'mock_grade_grade');
-Mock::generate('grade_outcome', 'mock_grade_outcome');
-Mock::generate('grade_lib_wrapper', 'mock_lib_wrapper');
-Mock::generate('ADODB_' . $CFG->dbtype, 'mock_db');
-Mock::generate('ADORecordSet_' . $CFG->dbtype, 'mock_rs');
-
-// Prepare partial mocks for the static grade object instances
-Mock::generatePartial('grade_category', 'mock_grade_category_partial', array('fetch', 'fetch_all'));
-Mock::generatePartial('grade_item', 'mock_grade_item_partial', array('fetch', 'fetch_all'));
-Mock::generatePartial('grade_grade', 'mock_grade_grade_partial', array('fetch', 'fetch_all'));
-Mock::generatePartial('grade_outcome', 'mock_grade_outcome_partial', array('fetch', 'fetch_all'));
-Mock::generatePartial('grade_scale', 'mock_grade_scale_partial', array('fetch', 'fetch_all'));
 
 /**
+ * Shared code for all grade related tests.
+ *
  * Here is a brief explanation of the test data set up in these unit tests.
  * category1 => array(category2 => array(grade_item1, grade_item2), category3 => array(grade_item3))
  * 3 users for 3 grade_items
  */
-class grade_test extends UnitTestCase {
-
-    /**
-     * Each database table receives a number of test entries. These are saved as
-     * arrays of stcClass objects available to this class. This means that
-     * every test has access to these test data. The order of the following array is
-     * crucial, because of the interrelationships between objects.
-     */
-    var $tables = array('grade_categories',
-                        'scale',
-                        'grade_items',
-                        'grade_grades',
-                        'grade_outcomes');
-
-    var $grade_items = array();
-    var $grade_categories = array();
-    var $grade_grades = array();
-    var $grade_outcomes = array();
-    var $scale = array();
-
-    var $activities = array();
-    var $courseid = 1;
-    var $userid = 1;
+class grade_test extends UnitTestCaseUsingDatabase {
+
+    public $grade_tables = array('lib' => array(
+                                     'grade_categories', 'grade_categories_history',
+                                     'scale', 'scale_history',
+                                     'grade_items', 'grade_items_history',
+                                     'grade_grades', 'grade_grades_history',
+                                     'grade_outcomes', 'grade_outcomes_history','grade_outcomes_courses',
+                                     'files',
+                                     'modules',
+                                     'course_modules'),
+                                 'mod/quiz' => array('quiz')
+                            );
+
+    public $grade_items = array();
+    public $grade_categories = array();
+    public $grade_grades = array();
+    public $grade_outcomes = array();
+    public $scale = array();
+
+    public $activities = array();
+    public $courseid = 1;
+    public $userid = 1;
 
     /**
      * Create temporary test tables and entries in the database for these tests.
      * These tests have to work on a brand new site.
-     * Override $CFG->prefix while these tests run.
      */
     function setUp() {
-        // Set global category settings to -1 (not force)
         global $CFG;
+
+        parent::setup();
         $CFG->grade_droplow = -1;
         $CFG->grade_keephigh = -1;
         $CFG->grade_aggregation = -1;
@@ -98,549 +74,29 @@ class grade_test extends UnitTestCase {
         $CFG->grade_aggregateoutcomes = -1;
         $CFG->grade_aggregatesubcats = -1;
 
-        $CFG->old_prefix = $CFG->prefix;
-        $CFG->prefix .= 'unittest_';
-        if (!$this->prepare_test_tables()) {
-            die("Could not create all the test tables!");
-        }
-
-        if (!$this->prepare_test_history_tables()) {
-            die("Could not create all the test tables!");
-        }
+        $this->switch_to_test_db(); // All operations until end of test method will happen in test DB
 
-        foreach ($this->tables as $table) {
+        foreach ($this->grade_tables as $dir => $tables) {
+            $this->create_test_tables($tables, $dir); // Create tables
+            foreach ($tables as $table) { // Fill them if load_xxx method is available
             $function = "load_$table";
+                if (method_exists($this, $function)) {
             $this->$function();
         }
     }
-
-    function prepare_test_tables() {
-        $result = true;
-
-        /// Define table course_modules to be created
-        $table = new XMLDBTable('course_modules');
-
-        if (!table_exists($table)) {
-            /// Adding fields to table course_modules
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('course', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('module', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('instance', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('section', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('idnumber', XMLDB_TYPE_CHAR, '100', null, null, null, null, null, null);
-            $table->addFieldInfo('added', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('score', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('indent', XMLDB_TYPE_INTEGER, '5', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('visible', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, null, null, '1');
-            $table->addFieldInfo('visibleold', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, null, null, '1');
-            $table->addFieldInfo('groupmode', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('groupingid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('groupmembersonly', XMLDB_TYPE_INTEGER, '4', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-
-            /// Adding keys to table course_modules
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-            $table->addKeyInfo('groupingid', XMLDB_KEY_FOREIGN, array('groupingid'), 'groupings', array('id'));
-
-            /// Adding indexes to table course_modules
-            $table->addIndexInfo('visible', XMLDB_INDEX_NOTUNIQUE, array('visible'));
-            $table->addIndexInfo('course', XMLDB_INDEX_NOTUNIQUE, array('course'));
-            $table->addIndexInfo('module', XMLDB_INDEX_NOTUNIQUE, array('module'));
-            $table->addIndexInfo('instance', XMLDB_INDEX_NOTUNIQUE, array('instance'));
-            $table->addIndexInfo('idnumber-course', XMLDB_INDEX_NOTUNIQUE, array('idnumber', 'course'));
-
-            /// Launch create table for course_modules
-            $result = $result && create_table($table, true, false);
-        } else {
-            delete_records($table->name);
-        }
-
-        /// Define table modules to be created
-        $table = new XMLDBTable('modules');
-
-        if (!table_exists($table)) {
-
-            /// Adding fields to table modules
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('name', XMLDB_TYPE_CHAR, '20', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('version', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('cron', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('lastcron', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('search', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('visible', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, null, null, '1');
-
-            /// Adding keys to table modules
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-
-            /// Adding indexes to table modules
-            $table->addIndexInfo('name', XMLDB_INDEX_NOTUNIQUE, array('name'));
-
-            /// Launch create table for modules
-            $result = $result && create_table($table, true, false);
-        } else {
-            delete_records($table->name);
-        }
-
-        /// Define table grade_items to be created
-        $table = new XMLDBTable('grade_items');
-
-        if (!table_exists($table)) {
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('courseid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('categoryid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('itemname', XMLDB_TYPE_CHAR, '255', null, null, null, null, null, null);
-            $table->addFieldInfo('itemtype', XMLDB_TYPE_CHAR, '30', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('itemmodule', XMLDB_TYPE_CHAR, '30', null, null, null, null, null, null);
-            $table->addFieldInfo('iteminstance', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('itemnumber', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('iteminfo', XMLDB_TYPE_TEXT, 'medium', null, null, null, null, null, null);
-            $table->addFieldInfo('idnumber', XMLDB_TYPE_CHAR, '255', null, null, null, null, null, null);
-            $table->addFieldInfo('calculation', XMLDB_TYPE_TEXT, 'medium', null, null, null, null, null, null);
-            $table->addFieldInfo('gradetype', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null, null, '1');
-            $table->addFieldInfo('grademax', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '100');
-            $table->addFieldInfo('grademin', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('scaleid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('outcomeid', XMLDB_TYPE_INTEGER, '10', null, null, null, null, null, null);
-            $table->addFieldInfo('gradepass', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('multfactor', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '1.0');
-            $table->addFieldInfo('plusfactor', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('sortorder', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('display', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('decimals', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('hidden', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('locked', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('locktime', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('deleted', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('needsupdate', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('timecreated', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-            $table->addKeyInfo('courseid', XMLDB_KEY_FOREIGN, array('courseid'), 'course', array('id'));
-            $table->addKeyInfo('categoryid', XMLDB_KEY_FOREIGN, array('categoryid'), 'grade_categories', array('id'));
-            $table->addKeyInfo('scaleid', XMLDB_KEY_FOREIGN, array('scaleid'), 'scale', array('id'));
-            $table->addKeyInfo('outcomeid', XMLDB_KEY_FOREIGN, array('outcomeid'), 'grade_outcomes', array('id'));
-
-            /// Launch create table for grade_items
-            $result = $result && create_table($table, true, false);
-
-        } else {
-            delete_records($table->name);
-        }
-
-
-        /// Define table grade_categories to be created
-        $table = new XMLDBTable('grade_categories');
-
-        if ($result && !table_exists($table)) {
-
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('courseid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('parent', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('depth', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('path', XMLDB_TYPE_CHAR, '255', null, null, null, null, null, null);
-            $table->addFieldInfo('fullname', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('aggregation', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('keephigh', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('droplow', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('aggregateonlygraded', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('aggregateoutcomes', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('aggregatesubcats', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('timecreated', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, null);
-
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-            $table->addKeyInfo('courseid', XMLDB_KEY_FOREIGN, array('courseid'), 'course', array('id'));
-            $table->addKeyInfo('parent', XMLDB_KEY_FOREIGN, array('parent'), 'grade_categories', array('id'));
-
-            /// Launch create table for grade_categories
-            $result = $result && create_table($table, true, false);
-
-        } else {
-            delete_records($table->name);
-        }
-
-
-        /// Define table grade_grades to be created
-        $table = new XMLDBTable('grade_grades');
-
-        if ($result && !table_exists($table)) {
-
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('itemid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('userid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('rawgrade', XMLDB_TYPE_NUMBER, '10, 5', null, null, null, null, null, null);
-            $table->addFieldInfo('rawgrademax', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '100');
-            $table->addFieldInfo('rawgrademin', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('rawscaleid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('usermodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('finalgrade', XMLDB_TYPE_NUMBER, '10, 5', null, null, null, null, null, null);
-            $table->addFieldInfo('hidden', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('locked', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('locktime', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('exported', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('overridden', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('excluded', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('feedback', XMLDB_TYPE_TEXT, 'medium', null, null, null, null, null, null);
-            $table->addFieldInfo('feedbackformat', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('information', XMLDB_TYPE_TEXT, 'medium', null, null, null, null, null, null);
-            $table->addFieldInfo('informationformat', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('timecreated', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-            $table->addKeyInfo('itemid', XMLDB_KEY_FOREIGN, array('itemid'), 'grade_items', array('id'));
-            $table->addKeyInfo('userid', XMLDB_KEY_FOREIGN, array('userid'), 'user', array('id'));
-            $table->addKeyInfo('rawscaleid', XMLDB_KEY_FOREIGN, array('rawscaleid'), 'scale', array('id'));
-            $table->addKeyInfo('usermodified', XMLDB_KEY_FOREIGN, array('usermodified'), 'user', array('id'));
-
-            /// Launch create table for grade_grades
-            $result = $result && create_table($table, true, false);
-
-        } else {
-            delete_records($table->name);
-        }
-
-
-        /// Define table grade_outcomes to be created
-        $table = new XMLDBTable('grade_outcomes');
-
-        if ($result && !table_exists($table)) {
-
-            /// Adding fields to table grade_outcomes
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('courseid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('shortname', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('fullname', XMLDB_TYPE_TEXT, 'small', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('scaleid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('timecreated', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('usermodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-
-            /// Adding keys to table grade_outcomes
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-            $table->addKeyInfo('courseid', XMLDB_KEY_FOREIGN, array('courseid'), 'course', array('id'));
-            $table->addKeyInfo('scaleid', XMLDB_KEY_FOREIGN, array('scaleid'), 'scale', array('id'));
-            $table->addKeyInfo('usermodified', XMLDB_KEY_FOREIGN, array('usermodified'), 'user', array('id'));
-
-            /// Launch create table for grade_outcomes
-            $result = $result && create_table($table, true, false);
-
-        } else {
-            delete_records($table->name);
-        }
-
-
-        /// Define table scale to be created
-        $table = new XMLDBTable('scale');
-
-        if ($result && !table_exists($table)) {
-
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('courseid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('userid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('name', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('scale', XMLDB_TYPE_TEXT, 'small', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('description', XMLDB_TYPE_TEXT, 'small', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-            $table->addIndexInfo('courseid', XMLDB_INDEX_NOTUNIQUE, array('courseid'));
-
-            /// Launch create table for scale
-            $result = $result && create_table($table, true, false);
-
-        } else {
-            delete_records($table->name);
-        }
-
-        /// Define table quiz to be created
-        $table = new XMLDBTable('quiz');
-
-        if ($result && !table_exists($table)) {
-            /// Adding fields to table quiz
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('course', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('name', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('intro', XMLDB_TYPE_TEXT, 'small', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('timeopen', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('timeclose', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('optionflags', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('penaltyscheme', XMLDB_TYPE_INTEGER, '4', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('attempts', XMLDB_TYPE_INTEGER, '6', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('attemptonlast', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('grademethod', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null, null, '1');
-            $table->addFieldInfo('decimalpoints', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null, null, '2');
-            $table->addFieldInfo('review', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('questionsperpage', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('shufflequestions', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('shuffleanswers', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('questions', XMLDB_TYPE_TEXT, 'small', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('sumgrades', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('grade', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('timecreated', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('timelimit', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('password', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('subnet', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('popup', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('delay1', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('delay2', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-
-            /// Adding keys to table quiz
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-
-            /// Adding indexes to table quiz
-            $table->addIndexInfo('course', XMLDB_INDEX_NOTUNIQUE, array('course'));
-
-            /// Launch create table for quiz
-            $result = $result && create_table($table, true, false);
-        } else {
-            delete_records($table->name);
-        }
-
-        return $result;
-    }
-
-
-    function prepare_test_history_tables() {
-        $result = true;
-
-        /// Define table grade_items to be created
-        $table = new XMLDBTable('grade_items_history');
-
-        if (!table_exists($table)) {
-
-        /// Adding fields to table grade_items_history
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('action', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('oldid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('source', XMLDB_TYPE_CHAR, '255', null, null, null, null, null, null);
-            $table->addFieldInfo('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('loggeduser', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('courseid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('categoryid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('itemname', XMLDB_TYPE_CHAR, '255', null, null, null, null, null, null);
-            $table->addFieldInfo('itemtype', XMLDB_TYPE_CHAR, '30', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('itemmodule', XMLDB_TYPE_CHAR, '30', null, null, null, null, null, null);
-            $table->addFieldInfo('iteminstance', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('itemnumber', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('iteminfo', XMLDB_TYPE_TEXT, 'medium', null, null, null, null, null, null);
-            $table->addFieldInfo('idnumber', XMLDB_TYPE_CHAR, '255', null, null, null, null, null, null);
-            $table->addFieldInfo('calculation', XMLDB_TYPE_TEXT, 'medium', null, null, null, null, null, null);
-            $table->addFieldInfo('gradetype', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null, null, '1');
-            $table->addFieldInfo('grademax', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '100');
-            $table->addFieldInfo('grademin', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('scaleid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('outcomeid', XMLDB_TYPE_INTEGER, '10', null, null, null, null, null, null);
-            $table->addFieldInfo('gradepass', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('multfactor', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '1.0');
-            $table->addFieldInfo('plusfactor', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('sortorder', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('display', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('decimals', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('hidden', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('locked', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('locktime', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('needsupdate', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-
-        /// Adding keys to table grade_items_history
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-            $table->addKeyInfo('oldid', XMLDB_KEY_FOREIGN, array('oldid'), 'grade_items', array('id'));
-            $table->addKeyInfo('courseid', XMLDB_KEY_FOREIGN, array('courseid'), 'course', array('id'));
-            $table->addKeyInfo('categoryid', XMLDB_KEY_FOREIGN, array('categoryid'), 'grade_categories', array('id'));
-            $table->addKeyInfo('scaleid', XMLDB_KEY_FOREIGN, array('scaleid'), 'scale', array('id'));
-            $table->addKeyInfo('outcomeid', XMLDB_KEY_FOREIGN, array('outcomeid'), 'grade_outcomes', array('id'));
-
-        /// Adding indexes to table grade_items_history
-            $table->addIndexInfo('action', XMLDB_INDEX_NOTUNIQUE, array('action'));
-
-        /// Launch create table for grade_items_history
-            $result = $result && create_table($table, true, false);
-
-        } else {
-            delete_records($table->name);
-        }
-
-        /// Define table grade_categories to be created
-        $table = new XMLDBTable('grade_categories_history');
-
-
-        if ($result && !table_exists($table)) {
-
-        /// Adding fields to table grade_categories_history
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('action', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('oldid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('source', XMLDB_TYPE_CHAR, '255', null, null, null, null, null, null);
-            $table->addFieldInfo('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('loggeduser', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('courseid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('parent', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('depth', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('path', XMLDB_TYPE_CHAR, '255', null, null, null, null, null, null);
-            $table->addFieldInfo('fullname', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('aggregation', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('keephigh', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('droplow', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('aggregateonlygraded', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('aggregateoutcomes', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('aggregatesubcats', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-
-        /// Adding keys to table grade_categories_history
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-            $table->addKeyInfo('oldid', XMLDB_KEY_FOREIGN, array('oldid'), 'grade_categories', array('id'));
-            $table->addKeyInfo('courseid', XMLDB_KEY_FOREIGN, array('courseid'), 'course', array('id'));
-            $table->addKeyInfo('parent', XMLDB_KEY_FOREIGN, array('parent'), 'grade_categories', array('id'));
-
-        /// Adding indexes to table grade_categories_history
-            $table->addIndexInfo('action', XMLDB_INDEX_NOTUNIQUE, array('action'));
-
-        /// Launch create table for grade_categories_history
-            $result = $result && create_table($table, true, false);
-
-        } else {
-            delete_records($table->name);
-        }
-
-
-        /// Define table grade_grades to be created
-        $table = new XMLDBTable('grade_grades_history');
-
-        if ($result && !table_exists($table)) {
-
-        /// Adding fields to table grade_grades_history
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('action', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('oldid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('source', XMLDB_TYPE_CHAR, '255', null, null, null, null, null, null);
-            $table->addFieldInfo('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('loggeduser', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('itemid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('userid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('rawgrade', XMLDB_TYPE_NUMBER, '10, 5', null, null, null, null, null, null);
-            $table->addFieldInfo('rawgrademax', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '100');
-            $table->addFieldInfo('rawgrademin', XMLDB_TYPE_NUMBER, '10, 5', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('rawscaleid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('usermodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('finalgrade', XMLDB_TYPE_NUMBER, '10, 5', null, null, null, null, null, null);
-            $table->addFieldInfo('hidden', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('locked', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('locktime', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('exported', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('overridden', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('excluded', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('feedback', XMLDB_TYPE_TEXT, 'medium', null, null, null, null, null, null);
-            $table->addFieldInfo('feedbackformat', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('information', XMLDB_TYPE_TEXT, 'medium', null, null, null, null, null, null);
-            $table->addFieldInfo('informationformat', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-
-        /// Adding keys to table grade_grades_history
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-            $table->addKeyInfo('oldid', XMLDB_KEY_FOREIGN, array('oldid'), 'grade_grades', array('id'));
-            $table->addKeyInfo('itemid', XMLDB_KEY_FOREIGN, array('itemid'), 'grade_items', array('id'));
-            $table->addKeyInfo('userid', XMLDB_KEY_FOREIGN, array('userid'), 'user', array('id'));
-            $table->addKeyInfo('rawscaleid', XMLDB_KEY_FOREIGN, array('rawscaleid'), 'scale', array('id'));
-            $table->addKeyInfo('usermodified', XMLDB_KEY_FOREIGN, array('usermodified'), 'user', array('id'));
-            $table->addKeyInfo('loggeduser', XMLDB_KEY_FOREIGN, array('loggeduser'), 'user', array('id'));
-
-        /// Adding indexes to table grade_grades_history
-            $table->addIndexInfo('action', XMLDB_INDEX_NOTUNIQUE, array('action'));
-
-        /// Launch create table for grade_grades_history
-            $result = $result && create_table($table, true, false);
-
-        } else {
-            delete_records($table->name);
-        }
-
-
-        /// Define table grade_outcomes to be created
-        $table = new XMLDBTable('grade_outcomes_history');
-
-        if ($result && !table_exists($table)) {
-
-        /// Adding fields to table grade_outcomes_history
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('action', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('oldid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('source', XMLDB_TYPE_CHAR, '255', null, null, null, null, null, null);
-            $table->addFieldInfo('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('loggeduser', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('courseid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('shortname', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('fullname', XMLDB_TYPE_TEXT, 'small', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('scaleid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-
-        /// Adding keys to table grade_outcomes_history
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-            $table->addKeyInfo('oldid', XMLDB_KEY_FOREIGN, array('oldid'), 'grade_outcomes', array('id'));
-            $table->addKeyInfo('courseid', XMLDB_KEY_FOREIGN, array('courseid'), 'course', array('id'));
-            $table->addKeyInfo('scaleid', XMLDB_KEY_FOREIGN, array('scaleid'), 'scale', array('id'));
-            $table->addKeyInfo('loggeduser', XMLDB_KEY_FOREIGN, array('loggeduser'), 'user', array('id'));
-
-        /// Adding indexes to table grade_outcomes_history
-            $table->addIndexInfo('action', XMLDB_INDEX_NOTUNIQUE, array('action'));
-
-        /// Launch create table for grade_outcomes_history
-            $result = $result && create_table($table, true, false);
-
-        } else {
-            delete_records($table->name);
-        }
-
-        /// Define table scale to be created
-        $table = new XMLDBTable('scale_history');
-
-
-        if ($result && !table_exists($table)) {
-
-        /// Adding fields to table scale_history
-            $table->addFieldInfo('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null, null);
-            $table->addFieldInfo('action', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('oldid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('source', XMLDB_TYPE_CHAR, '255', null, null, null, null, null, null);
-            $table->addFieldInfo('timemodified', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('loggeduser', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, null);
-            $table->addFieldInfo('courseid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('userid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0');
-            $table->addFieldInfo('name', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('scale', XMLDB_TYPE_TEXT, 'small', null, XMLDB_NOTNULL, null, null, null, null);
-            $table->addFieldInfo('description', XMLDB_TYPE_TEXT, 'small', null, XMLDB_NOTNULL, null, null, null, null);
-
-        /// Adding keys to table scale_history
-            $table->addKeyInfo('primary', XMLDB_KEY_PRIMARY, array('id'));
-            $table->addKeyInfo('oldid', XMLDB_KEY_FOREIGN, array('oldid'), 'scales', array('id'));
-            $table->addKeyInfo('courseid', XMLDB_KEY_FOREIGN, array('courseid'), 'course', array('id'));
-
-        /// Adding indexes to table scale_history
-            $table->addIndexInfo('action', XMLDB_INDEX_NOTUNIQUE, array('action'));
-
-        /// Launch create table for scale_history
-            $result = $result && create_table($table, true, false);
-
-        } else {
-            delete_records($table->name);
         }
 
-        return $result;
     }
 
-    /**
-     * Drop test tables from DB.
-     * Restore original $CFG->prefix.
-     */
     function tearDown() {
-        global $CFG;
-        // delete the contents of tables before the test run - the unit test might fail on fatal error and the data would not be deleted!
-        foreach ($this->tables as $table) {
-            unset($this->$table);
-        }
-        $CFG->prefix = $CFG->old_prefix;
+        parent::tearDown(); // All the test tables created in setUp will be dropped by this
     }
 
     /**
      * Load scale data into the database, and adds the corresponding objects to this class' variable.
      */
     function load_scale() {
+        global $DB;
         $scale = new stdClass();
 
         $scale->name        = 'unittestscale1';
@@ -650,11 +106,10 @@ class grade_test extends UnitTestCase {
         $scale->description = 'This scale defines some of qualities that make posts helpful within the Moodle help forums.\n Your feedback will help others see how their posts are being received.';
         $scale->timemodified = mktime();
 
-        if ($scale->id = insert_record('scale', $scale)) {
+        $scale->id = $DB->insert_record('scale', $scale);
             $this->scale[0] = $scale;
             $temp = explode(',', $scale->scale);
             $this->scalemax[0] = count($temp) -1;
-        }
 
         $scale = new stdClass();
 
@@ -665,11 +120,10 @@ class grade_test extends UnitTestCase {
         $scale->description = 'This scale is used to mark standard assignments.';
         $scale->timemodified = mktime();
 
-        if ($scale->id = insert_record('scale', $scale)) {
+        $scale->id = $DB->insert_record('scale', $scale);
             $this->scale[1] = $scale;
             $temp = explode(',', $scale->scale);
             $this->scalemax[1] = count($temp) -1;
-        }
 
         $scale = new stdClass();
 
@@ -682,11 +136,10 @@ class grade_test extends UnitTestCase {
         $temp  = explode(',', $scale->scale);
         $scale->max         = count($temp) -1;
 
-        if ($scale->id = insert_record('scale', $scale)) {
+        $scale->id = $DB->insert_record('scale', $scale);
             $this->scale[2] = $scale;
             $temp = explode(',', $scale->scale);
             $this->scalemax[2] = count($temp) -1;
-        }
 
         $scale->name        = 'unittestscale4';
         $scale->courseid    = $this->courseid;
@@ -697,11 +150,10 @@ class grade_test extends UnitTestCase {
         $temp  = explode(',', $scale->scale);
         $scale->max         = count($temp) -1;
 
-        if ($scale->id = insert_record('scale', $scale)) {
+        $scale->id = $DB->insert_record('scale', $scale);
             $this->scale[3] = $scale;
             $temp = explode(',', $scale->scale);
             $this->scalemax[3] = count($temp) -1;
-        }
 
         $scale->name        = 'unittestscale5';
         $scale->courseid    = $this->courseid;
@@ -712,17 +164,27 @@ class grade_test extends UnitTestCase {
         $temp  = explode(',', $scale->scale);
         $scale->max         = count($temp) -1;
 
-        if ($scale->id = insert_record('scale', $scale)) {
+        $scale->id = $DB->insert_record('scale', $scale);
             $this->scale[4] = $scale;
             $temp = explode(',', $scale->scale);
             $this->scalemax[4] = count($temp) -1;
         }
-    }
 
     /**
      * Load grade_category data into the database, and adds the corresponding objects to this class' variable.
+     * category structure:
+                              course category
+                                    |
+                           +--------+-------------+
+                           |                      |
+             unittestcategory1               level1category
+                  |
+         +--------+-------------+
+         |                      |
+        unittestcategory2  unittestcategory3
      */
     function load_grade_categories() {
+        global $DB;
 
         $course_category = grade_category::fetch_course_category($this->courseid);
 
@@ -739,11 +201,10 @@ class grade_test extends UnitTestCase {
         $grade_category->timemodified = mktime();
         $grade_category->depth = 2;
 
-        if ($grade_category->id = insert_record('grade_categories', $grade_category)) {
+        $grade_category->id = $DB->insert_record('grade_categories', $grade_category);
             $grade_category->path = '/'.$course_category->id.'/'.$grade_category->id.'/';
-            update_record('grade_categories', $grade_category);
+        $DB->update_record('grade_categories', $grade_category);
             $this->grade_categories[0] = $grade_category;
-        }
 
         $grade_category = new stdClass();
 
@@ -758,11 +219,10 @@ class grade_test extends UnitTestCase {
         $grade_category->timemodified = mktime();
         $grade_category->depth = 3;
 
-        if ($grade_category->id = insert_record('grade_categories', $grade_category)) {
+        $grade_category->id = $DB->insert_record('grade_categories', $grade_category);
             $grade_category->path = $this->grade_categories[0]->path.$grade_category->id.'/';
-            update_record('grade_categories', $grade_category);
+        $DB->update_record('grade_categories', $grade_category);
             $this->grade_categories[1] = $grade_category;
-        }
 
         $grade_category = new stdClass();
 
@@ -777,11 +237,10 @@ class grade_test extends UnitTestCase {
         $grade_category->timemodified = mktime();
         $grade_category->depth = 3;
 
-        if ($grade_category->id = insert_record('grade_categories', $grade_category)) {
+        $grade_category->id = $DB->insert_record('grade_categories', $grade_category);
             $grade_category->path = $this->grade_categories[0]->path.$grade_category->id.'/';
-            update_record('grade_categories', $grade_category);
+        $DB->update_record('grade_categories', $grade_category);
             $this->grade_categories[2] = $grade_category;
-        }
 
         // A category with no parent, but grade_items as children
 
@@ -798,117 +257,108 @@ class grade_test extends UnitTestCase {
         $grade_category->timemodified = mktime();
         $grade_category->depth = 2;
 
-        if ($grade_category->id = insert_record('grade_categories', $grade_category)) {
+        $grade_category->id = $DB->insert_record('grade_categories', $grade_category);
             $grade_category->path = '/'.$course_category->id.'/'.$grade_category->id.'/';
-            update_record('grade_categories', $grade_category);
+        $DB->update_record('grade_categories', $grade_category);
             $this->grade_categories[3] = $grade_category;
         }
-    }
 
     /**
-     * Load module entries in modules table\
+     * Load module entries in modules table
      */
     function load_modules() {
+        global $DB;
         $module = new stdClass();
         $module->name = 'assignment';
-        if ($module->id = insert_record('modules', $module)) {
+        $module->id = $DB->insert_record('modules', $module);
             $this->modules[0] = $module;
-        }
 
         $module = new stdClass();
         $module->name = 'quiz';
-        if ($module->id = insert_record('modules', $module)) {
+        $module->id = $DB->insert_record('modules', $module);
             $this->modules[1] = $module;
-        }
 
         $module = new stdClass();
         $module->name = 'forum';
-        if ($module->id = insert_record('modules', $module)) {
+        $module->id = $DB->insert_record('modules', $module);
             $this->modules[2] = $module;
         }
-    }
 
     /**
      * Load module instance entries in course_modules table
      */
     function load_course_modules() {
+        global $DB;
         $course_module = new stdClass();
         $course_module->course = $this->courseid;
         $quiz->module = 1;
         $quiz->instance = 2;
-        if ($course_module->id = insert_record('course_modules', $course_module)) {
+        $course_module->id = $DB->insert_record('course_modules', $course_module);
             $this->course_module[0] = $course_module;
-        }
 
         $course_module = new stdClass();
         $course_module->course = $this->courseid;
         $quiz->module = 2;
         $quiz->instance = 1;
-        if ($course_module->id = insert_record('course_modules', $course_module)) {
+        $course_module->id = $DB->insert_record('course_modules', $course_module);
             $this->course_module[0] = $course_module;
-        }
 
         $course_module = new stdClass();
         $course_module->course = $this->courseid;
         $quiz->module = 2;
         $quiz->instance = 5;
-        if ($course_module->id = insert_record('course_modules', $course_module)) {
+        $course_module->id = $DB->insert_record('course_modules', $course_module);
             $this->course_module[0] = $course_module;
-        }
 
         $course_module = new stdClass();
         $course_module->course = $this->courseid;
         $quiz->module = 3;
         $quiz->instance = 3;
-        if ($course_module->id = insert_record('course_modules', $course_module)) {
+        $course_module->id = $DB->insert_record('course_modules', $course_module);
             $this->course_module[0] = $course_module;
-        }
 
         $course_module = new stdClass();
         $course_module->course = $this->courseid;
         $quiz->module = 3;
         $quiz->instance = 7;
-        if ($course_module->id = insert_record('course_modules', $course_module)) {
+        $course_module->id = $DB->insert_record('course_modules', $course_module);
             $this->course_module[0] = $course_module;
-        }
 
         $course_module = new stdClass();
         $course_module->course = $this->courseid;
         $quiz->module = 3;
         $quiz->instance = 9;
-        if ($course_module->id = insert_record('course_modules', $course_module)) {
+        $course_module->id = $DB->insert_record('course_modules', $course_module);
             $this->course_module[0] = $course_module;
         }
-    }
 
     /**
      * Load test quiz data into the database
      */
     function load_quiz_activities() {
+        global $DB;
         $quiz = new stdClass();
         $quiz->course = $this->courseid;
         $quiz->name = 'test quiz';
         $quiz->intro = 'let us quiz you!';
         $quiz->questions = '1,2';
-        if ($quiz->id = insert_record('quiz', $quiz)) {
+        $quiz->id = $DB->insert_record('quiz', $quiz);
             $this->activities[0] = $quiz;
-        }
 
         $quiz = new stdClass();
         $quiz->course = $this->courseid;
         $quiz->name = 'test quiz 2';
         $quiz->intro = 'let us quiz you again!';
         $quiz->questions = '1,3';
-        if ($quiz->id = insert_record('quiz', $quiz)) {
+        $quiz->id = $DB->insert_record('quiz', $quiz);
             $this->activities[1] = $quiz;
         }
 
-    }
-
     /**
      * Load grade_item data into the database, and adds the corresponding objects to this class' variable.
      */
     function load_grade_items() {
+        global $DB;
 
         $course_category = grade_category::fetch_course_category($this->courseid);
 
@@ -931,9 +381,8 @@ class grade_test extends UnitTestCase {
         $grade_item->timemodified = mktime();
         $grade_item->sortorder = 3;
 
-        if ($grade_item->id = insert_record('grade_items', $grade_item)) {
+        $grade_item->id = $DB->insert_record('grade_items', $grade_item);
             $this->grade_items[0] = $grade_item;
-        }
 
         // id = 1
         $grade_item = new stdClass();
@@ -954,9 +403,8 @@ class grade_test extends UnitTestCase {
         $grade_item->timemodified = mktime();
         $grade_item->sortorder = 4;
 
-        if ($grade_item->id = insert_record('grade_items', $grade_item)) {
+        $grade_item->id = $DB->insert_record('grade_items', $grade_item);
             $this->grade_items[1] = $grade_item;
-        }
 
         // id = 2
         $grade_item = new stdClass();
@@ -976,9 +424,8 @@ class grade_test extends UnitTestCase {
         $grade_item->timemodified = mktime();
         $grade_item->sortorder = 6;
 
-        if ($grade_item->id = insert_record('grade_items', $grade_item)) {
+        $grade_item->id = $DB->insert_record('grade_items', $grade_item);
             $this->grade_items[2] = $grade_item;
-        }
 
         // Load grade_items associated with the 3 categories
         // id = 3
@@ -997,9 +444,8 @@ class grade_test extends UnitTestCase {
         $grade_item->timemodified = mktime();
         $grade_item->sortorder = 1;
 
-        if ($grade_item->id = insert_record('grade_items', $grade_item)) {
+        $grade_item->id = $DB->insert_record('grade_items', $grade_item);
             $this->grade_items[3] = $grade_item;
-        }
 
         // id = 4
         $grade_item = new stdClass();
@@ -1017,9 +463,8 @@ class grade_test extends UnitTestCase {
         $grade_item->timemodified = mktime();
         $grade_item->sortorder = 2;
 
-        if ($grade_item->id = insert_record('grade_items', $grade_item)) {
+        $grade_item->id = $DB->insert_record('grade_items', $grade_item);
             $this->grade_items[4] = $grade_item;
-        }
 
         // id = 5
         $grade_item = new stdClass();
@@ -1037,9 +482,8 @@ class grade_test extends UnitTestCase {
         $grade_item->timemodified = mktime();
         $grade_item->sortorder = 5;
 
-        if ($grade_item->id = insert_record('grade_items', $grade_item)) {
+        $grade_item->id = $DB->insert_record('grade_items', $grade_item);
             $this->grade_items[5] = $grade_item;
-        }
 
         // Orphan grade_item
         // id = 6
@@ -1061,9 +505,8 @@ class grade_test extends UnitTestCase {
         $grade_item->timemodified = mktime();
         $grade_item->sortorder = 7;
 
-        if ($grade_item->id = insert_record('grade_items', $grade_item)) {
+        $grade_item->id = $DB->insert_record('grade_items', $grade_item);
             $this->grade_items[6] = $grade_item;
-        }
 
         // 2 grade items under level1category
         // id = 7
@@ -1084,9 +527,8 @@ class grade_test extends UnitTestCase {
         $grade_item->timemodified = mktime();
         $grade_item->sortorder = 9;
 
-        if ($grade_item->id = insert_record('grade_items', $grade_item)) {
+        $grade_item->id = $DB->insert_record('grade_items', $grade_item);
             $this->grade_items[7] = $grade_item;
-        }
 
         // id = 8
         $grade_item = new stdClass();
@@ -1105,9 +547,8 @@ class grade_test extends UnitTestCase {
         $grade_item->timemodified = mktime();
         $grade_item->sortorder = 10;
 
-        if ($grade_item->id = insert_record('grade_items', $grade_item)) {
+        $grade_item->id = $DB->insert_record('grade_items', $grade_item);
             $this->grade_items[8] = $grade_item;
-        }
 
         // Grade_item for level1category
         // id = 9
@@ -1127,9 +568,8 @@ class grade_test extends UnitTestCase {
         $grade_item->timemodified = mktime();
         $grade_item->sortorder = 8;
 
-        if ($grade_item->id = insert_record('grade_items', $grade_item)) {
+        $grade_item->id = $DB->insert_record('grade_items', $grade_item);
             $this->grade_items[9] = $grade_item;
-        }
 
         // Manual grade_item
         // id = 10
@@ -1148,16 +588,19 @@ class grade_test extends UnitTestCase {
         $grade_item->timecreated = mktime();
         $grade_item->timemodified = mktime();
 
-        if ($grade_item->id = insert_record('grade_items', $grade_item)) {
+        $grade_item->id = $DB->insert_record('grade_items', $grade_item);
             $this->grade_items[10] = $grade_item;
         }
 
-    }
-
     /**
      * Load grade_grades data into the database, and adds the corresponding objects to this class' variable.
      */
     function load_grade_grades() {
+        global $DB;
+
+        //this method is called once for each test method. Avoid adding things to $this->grade_grades multiple times
+        $this->grade_grades = array();
+
         // Grades for grade_item 1
         $grade = new stdClass();
         $grade->itemid = $this->grade_items[0]->id;
@@ -1166,14 +609,13 @@ class grade_test extends UnitTestCase {
         $grade->finalgrade = 30;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
-        $grade->information = 'Thumbs down';
+        $grade->information = '1 of 17 grade_grades';
         $grade->informationformat = FORMAT_PLAIN;
         $grade->feedback = 'Good, but not good enough..';
         $grade->feedbackformat = FORMAT_PLAIN;
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[0] = $grade;
-        }
 
         $grade = new stdClass();
         $grade->itemid = $this->grade_items[0]->id;
@@ -1182,10 +624,10 @@ class grade_test extends UnitTestCase {
         $grade->finalgrade = 40;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '2 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[1] = $grade;
-        }
 
         $grade = new stdClass();
         $grade->itemid = $this->grade_items[0]->id;
@@ -1194,10 +636,10 @@ class grade_test extends UnitTestCase {
         $grade->finalgrade = 110;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '3 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[2] = $grade;
-        }
 
 
         // No raw grades for grade_item 2 - it is calculated
@@ -1205,24 +647,24 @@ class grade_test extends UnitTestCase {
         $grade = new stdClass();
         $grade->itemid = $this->grade_items[1]->id;
         $grade->userid = 1;
-        $grade->finalgrade = 60;
+        $grade->finalgrade = 72;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '4 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[3] = $grade;
-        }
 
         $grade = new stdClass();
         $grade->itemid = $this->grade_items[1]->id;
         $grade->userid = 2;
-        $grade->finalgrade = 70;
+        $grade->finalgrade = 92;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '5 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[4] = $grade;
-        }
 
         $grade = new stdClass();
         $grade->itemid = $this->grade_items[1]->id;
@@ -1230,10 +672,10 @@ class grade_test extends UnitTestCase {
         $grade->finalgrade = 100;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '6 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[5] = $grade;
-        }
 
 
         // Grades for grade_item 3
@@ -1246,10 +688,10 @@ class grade_test extends UnitTestCase {
         $grade->scaleid = $this->scale[3]->id;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '7 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[6] = $grade;
-        }
 
         $grade = new stdClass();
         $grade->itemid = $this->grade_items[2]->id;
@@ -1259,10 +701,10 @@ class grade_test extends UnitTestCase {
         $grade->scaleid = $this->scale[3]->id;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '8 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[] = $grade;
-        }
 
         $grade = new stdClass();
         $grade->itemid = $this->grade_items[2]->id;
@@ -1272,10 +714,10 @@ class grade_test extends UnitTestCase {
         $grade->scaleid = $this->scale[3]->id;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '9 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[] = $grade;
-        }
 
         // Grades for grade_item 7
 
@@ -1286,10 +728,10 @@ class grade_test extends UnitTestCase {
         $grade->finalgrade = 69;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '10 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[] = $grade;
-        }
 
         $grade = new stdClass();
         $grade->itemid = $this->grade_items[6]->id;
@@ -1298,10 +740,10 @@ class grade_test extends UnitTestCase {
         $grade->finalgrade = 87;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '11 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[] = $grade;
-        }
 
         $grade = new stdClass();
         $grade->itemid = $this->grade_items[6]->id;
@@ -1310,10 +752,10 @@ class grade_test extends UnitTestCase {
         $grade->finalgrade = 94;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '12 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[] = $grade;
-        }
 
         // Grades for grade_item 8
 
@@ -1324,10 +766,10 @@ class grade_test extends UnitTestCase {
         $grade->finalgrade = 3;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '13 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[] = $grade;
-        }
 
         $grade = new stdClass();
         $grade->itemid = $this->grade_items[7]->id;
@@ -1336,10 +778,10 @@ class grade_test extends UnitTestCase {
         $grade->finalgrade = 6;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '14 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[] = $grade;
-        }
 
         // Grades for grade_item 9
 
@@ -1350,10 +792,10 @@ class grade_test extends UnitTestCase {
         $grade->finalgrade = 20;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '15 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[] = $grade;
-        }
 
         $grade = new stdClass();
         $grade->itemid = $this->grade_items[8]->id;
@@ -1362,64 +804,69 @@ class grade_test extends UnitTestCase {
         $grade->finalgrade = 50;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '16 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[] = $grade;
-        }
 
         $grade = new stdClass();
-        $grade->itemid = $this->grade_items[7]->id;
+        $grade->itemid = $this->grade_items[8]->id;
         $grade->userid = 3;
         $grade->rawgrade = 100;
         $grade->finalgrade = 100;
         $grade->timecreated = mktime();
         $grade->timemodified = mktime();
+        $grade->information = '17 of 17 grade_grades';
 
-        if ($grade->id = insert_record('grade_grades', $grade)) {
+        $grade->id = $DB->insert_record('grade_grades', $grade);
             $this->grade_grades[] = $grade;
         }
-    }
 
     /**
      * Load grade_outcome data into the database, and adds the corresponding objects to this class' variable.
      */
     function load_grade_outcomes() {
+        global $DB;
+
+        //this method is called once for each test method. Avoid adding things to $this->grade_outcomes multiple times
+        $this->grade_outcomes = array();
+
         // Calculation for grade_item 1
         $grade_outcome = new stdClass();
         $grade_outcome->fullname = 'Team work';
         $grade_outcome->shortname = 'Team work';
+        $grade_outcome->fullname = 'Team work outcome';
         $grade_outcome->timecreated = mktime();
         $grade_outcome->timemodified = mktime();
         $grade_outcome->scaleid = $this->scale[2]->id;
 
-        if ($grade_outcome->id = insert_record('grade_outcomes', $grade_outcome)) {
+        $grade_outcome->id = $DB->insert_record('grade_outcomes', $grade_outcome);
             $this->grade_outcomes[] = $grade_outcome;
-        }
 
         // Calculation for grade_item 2
         $grade_outcome = new stdClass();
         $grade_outcome->fullname = 'Complete circuit board';
         $grade_outcome->shortname = 'Complete circuit board';
+        $grade_outcome->fullname = 'Complete circuit board';
         $grade_outcome->timecreated = mktime();
         $grade_outcome->timemodified = mktime();
         $grade_outcome->scaleid = $this->scale[3]->id;
 
-        if ($grade_outcome->id = insert_record('grade_outcomes', $grade_outcome)) {
+        $grade_outcome->id = $DB->insert_record('grade_outcomes', $grade_outcome);
             $this->grade_outcomes[] = $grade_outcome;
-        }
 
         // Calculation for grade_item 3
         $grade_outcome = new stdClass();
         $grade_outcome->fullname = 'Debug Java program';
         $grade_outcome->shortname = 'Debug Java program';
+        $grade_outcome->fullname = 'Debug Java program';
         $grade_outcome->timecreated = mktime();
         $grade_outcome->timemodified = mktime();
         $grade_outcome->scaleid = $this->scale[4]->id;
 
-        if ($grade_outcome->id = insert_record('grade_outcomes', $grade_outcome)) {
+        $grade_outcome->id = $DB->insert_record('grade_outcomes', $grade_outcome);
             $this->grade_outcomes[] = $grade_outcome;
         }
-    }
 
 /**
  * No unit tests here
@@ -1427,4 +874,4 @@ class grade_test extends UnitTestCase {
 
 }
 
-?>
+
