diff --git a/lib/gradelib.php b/lib/gradelib.php
index c8baebd..c9793f1 100644
--- a/lib/gradelib.php
+++ b/lib/gradelib.php
@@ -1,36 +1,32 @@
-<?php // $Id$
-
-///////////////////////////////////////////////////////////////////////////
-// NOTICE OF COPYRIGHT                                                   //
-//                                                                       //
-// Moodle - Modular Object-Oriented Dynamic Learning Environment         //
-//          http://moodle.org                                            //
-//                                                                       //
-// Copyright (C) 1999 onwards  Martin Dougiamas  http://moodle.com       //
-//                                                                       //
-// This program is free software; you can redistribute it and/or modify  //
-// it under the terms of the GNU General Public License as published by  //
-// the Free Software Foundation; either version 2 of the License, or     //
-// (at your option) any later version.                                   //
-//                                                                       //
-// This program is distributed in the hope that it will be useful,       //
-// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
-// GNU General Public License for more details:                          //
-//                                                                       //
-//          http://www.gnu.org/copyleft/gpl.html                         //
-//                                                                       //
-///////////////////////////////////////////////////////////////////////////
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
 /**
  * Library of functions for gradebook - both public and internal
  *
- * @author Moodle HQ developers
- * @version  $Id$
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package moodlecore
+ * @package    core
+ * @subpackage grade
+ * @copyright  1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 
+defined('MOODLE_INTERNAL') || die();
+
+/** Include essential files */
 require_once($CFG->libdir . '/grade/constants.php');
 
 require_once($CFG->libdir . '/grade/grade_category.php');
@@ -52,7 +48,10 @@ require_once($CFG->libdir . '/grade/grade_outcome.php');
  * 'grademin', 'scaleid', 'multfactor', 'plusfactor', 'deleted' and 'hidden'. 'reset' means delete all current grades including locked ones.
  *
  * Manual, course or category items can not be updated by this function.
- * @public
+ * @access public
+ * @global object
+ * @global object
+ * @global object
  * @param string $source source of the grade such as 'mod/assignment'
  * @param int $courseid id of course
  * @param string $itemtype type of grade item - mod, block
@@ -63,7 +62,7 @@ require_once($CFG->libdir . '/grade/grade_outcome.php');
  * @param mixed $itemdetails object or array describing the grading item, NULL if no change
  */
 function grade_update($source, $courseid, $itemtype, $itemmodule, $iteminstance, $itemnumber, $grades=NULL, $itemdetails=NULL) {
-    global $USER, $CFG;
+    global $USER, $CFG, $DB;
 
     // only following grade_item properties can be changed in this function
     $allowed = array('itemname', 'idnumber', 'gradetype', 'grademax', 'grademin', 'scaleid', 'multfactor', 'plusfactor', 'deleted', 'hidden');
@@ -208,20 +207,17 @@ function grade_update($source, $courseid, $itemtype, $itemmodule, $iteminstance,
     }
 
     $count = count($grades);
-    if ($count == 1) {
-        reset($grades);
-        $uid = key($grades);
-        $sql = "SELECT * FROM {$CFG->prefix}grade_grades WHERE itemid = $grade_item->id AND userid = $uid";
-
-    } else if ($count < 200) {
-        $uids = implode(',', array_keys($grades));
-        $sql = "SELECT * FROM {$CFG->prefix}grade_grades WHERE itemid = $grade_item->id AND userid IN ($uids)";
+    if ($count > 0 and $count < 200) {
+        list($uids, $params) = $DB->get_in_or_equal(array_keys($grades), SQL_PARAMS_NAMED, $start='uid');
+        $params['gid'] = $grade_item->id;
+        $sql = "SELECT * FROM {grade_grades} WHERE itemid = :gid AND userid $uids";
 
     } else {
-        $sql = "SELECT * FROM {$CFG->prefix}grade_grades WHERE itemid = $grade_item->id";
+        $sql = "SELECT * FROM {grade_grades} WHERE itemid = :gid";
+        $params = array('gid'=>$grade_item->id);
     }
 
-    $rs = get_recordset_sql($sql);
+    $rs = $DB->get_recordset_sql($sql, $params);
 
     $failed = false;
 
@@ -229,10 +225,8 @@ function grade_update($source, $courseid, $itemtype, $itemmodule, $iteminstance,
         $grade_grade = null;
         $grade       = null;
 
-        while ($rs and !rs_EOF($rs)) {
-            if (!$gd = rs_fetch_next_record($rs)) {
-                break;
-            }
+        foreach ($rs as $gd) {
+
             $userid = $gd->userid;
             if (!isset($grades[$userid])) {
                 // this grade not requested, continue
@@ -296,7 +290,7 @@ function grade_update($source, $courseid, $itemtype, $itemmodule, $iteminstance,
     }
 
     if ($rs) {
-        rs_close($rs);
+        $rs->close();
     }
 
     if (!$failed) {
@@ -309,7 +303,8 @@ function grade_update($source, $courseid, $itemtype, $itemmodule, $iteminstance,
 /**
  * Updates outcomes of user
  * Manual outcomes can not be updated.
- * @public
+ *
+ * @access public
  * @param string $source source of the grade such as 'mod/assignment'
  * @param int $courseid id of course
  * @param string $itemtype 'mod', 'block'
@@ -337,18 +332,20 @@ function grade_update_outcomes($source, $courseid, $itemtype, $itemmodule, $item
 /**
  * Returns grading information for given activity - optionally with users grades
  * Manual, course or category items can not be queried.
- * @public
+ *
+ * @access public
+ * @global object
  * @param int $courseid id of course
  * @param string $itemtype 'mod', 'block'
  * @param string $itemmodule 'forum, 'quiz', etc.
  * @param int $iteminstance id of the item module
- * @param int $userid_or_ids optional id of the graded user or array of ids; if userid not used, returns only information about grade_item
- * @return array of grade information objects (scaleid, name, grade and locked status, etc.) indexed with itemnumbers
+ * @param array|int $userid_or_ids optional id of the graded user or array of ids; if userid not used, returns only information about grade_item
+ * @return array Array of grade information objects (scaleid, name, grade and locked status, etc.) indexed with itemnumbers
  */
 function grade_get_grades($courseid, $itemtype, $itemmodule, $iteminstance, $userid_or_ids=null) {
     global $CFG;
 
-    $return = new object();
+    $return = new stdClass();
     $return->items    = array();
     $return->outcomes = array();
 
@@ -367,7 +364,7 @@ function grade_get_grades($courseid, $itemtype, $itemmodule, $iteminstance, $use
 
             if (empty($grade_item->outcomeid)) {
                 // prepare information about grade item
-                $item = new object();
+                $item = new stdClass();
                 $item->itemnumber = $grade_item->itemnumber;
                 $item->scaleid    = $grade_item->scaleid;
                 $item->name       = $grade_item->get_name();
@@ -409,7 +406,7 @@ function grade_get_grades($courseid, $itemtype, $itemmodule, $iteminstance, $use
                     foreach ($userids as $userid) {
                         $grade_grades[$userid]->grade_item =& $grade_item;
 
-                        $grade = new object();
+                        $grade = new stdClass();
                         $grade->grade          = $grade_grades[$userid]->finalgrade;
                         $grade->locked         = $grade_grades[$userid]->is_locked();
                         $grade->hidden         = $grade_grades[$userid]->is_hidden();
@@ -440,7 +437,7 @@ function grade_get_grades($courseid, $itemtype, $itemmodule, $iteminstance, $use
                             if ($grade_item->gradetype == GRADE_TYPE_SCALE or $grade_item->get_displaytype() != GRADE_DISPLAY_TYPE_REAL) {
                                 $grade->str_long_grade = $grade->str_grade;
                             } else {
-                                $a = new object();
+                                $a = new stdClass();
                                 $a->grade = $grade->str_grade;
                                 $a->max   = grade_format_gradevalue($grade_item->grademax, $grade_item);
                                 $grade->str_long_grade = get_string('gradelong', 'grades', $a);
@@ -466,7 +463,7 @@ function grade_get_grades($courseid, $itemtype, $itemmodule, $iteminstance, $use
                 }
 
                 // outcome info
-                $outcome = new object();
+                $outcome = new stdClass();
                 $outcome->itemnumber = $grade_item->itemnumber;
                 $outcome->scaleid    = $grade_outcome->scaleid;
                 $outcome->name       = $grade_outcome->get_name();
@@ -486,7 +483,7 @@ function grade_get_grades($courseid, $itemtype, $itemmodule, $iteminstance, $use
                     foreach ($userids as $userid) {
                         $grade_grades[$userid]->grade_item =& $grade_item;
 
-                        $grade = new object();
+                        $grade = new stdClass();
                         $grade->grade          = $grade_grades[$userid]->finalgrade;
                         $grade->locked         = $grade_grades[$userid]->is_locked();
                         $grade->hidden         = $grade_grades[$userid]->is_hidden();
@@ -556,12 +553,17 @@ function grade_get_grades($courseid, $itemtype, $itemmodule, $iteminstance, $use
 
 /**
  * Returns course gradebook setting
+ *
+ * @global object
  * @param int $courseid
  * @param string $name of setting, maybe null if reset only
+ * @param string $default
  * @param bool $resetcache force reset of internal static cache
  * @return string value, NULL if no setting
  */
 function grade_get_setting($courseid, $name, $default=null, $resetcache=false) {
+    global $DB;
+
     static $cache = array();
 
     if ($resetcache or !array_key_exists($courseid, $cache)) {
@@ -574,7 +576,7 @@ function grade_get_setting($courseid, $name, $default=null, $resetcache=false) {
         return $cache[$courseid][$name];
     }
 
-    if (!$data = get_record('grade_settings', 'courseid', $courseid, 'name', addslashes($name))) {
+    if (!$data = $DB->get_record('grade_settings', array('courseid'=>$courseid, 'name'=>$name))) {
         $result = null;
     } else {
         $result = $data->value;
@@ -590,14 +592,18 @@ function grade_get_setting($courseid, $name, $default=null, $resetcache=false) {
 
 /**
  * Returns all course gradebook settings as object properties
+ *
+ * @global object
  * @param int $courseid
  * @return object
  */
 function grade_get_settings($courseid) {
-     $settings = new object();
+    global $DB;
+
+     $settings = new stdClass();
      $settings->id = $courseid;
 
-    if ($records = get_records('grade_settings', 'courseid', $courseid)) {
+    if ($records = $DB->get_records('grade_settings', array('courseid'=>$courseid))) {
         foreach ($records as $record) {
             $settings->{$record->name} = $record->value;
         }
@@ -608,27 +614,31 @@ function grade_get_settings($courseid) {
 
 /**
  * Add/update course gradebook setting
+ *
+ * @global object
  * @param int $courseid
  * @param string $name of setting
  * @param string value, NULL means no setting==remove
  * @return void
  */
 function grade_set_setting($courseid, $name, $value) {
+    global $DB;
+
     if (is_null($value)) {
-        delete_records('grade_settings', 'courseid', $courseid, 'name', addslashes($name));
+        $DB->delete_records('grade_settings', array('courseid'=>$courseid, 'name'=>$name));
 
-    } else if (!$existing = get_record('grade_settings', 'courseid', $courseid, 'name', addslashes($name))) {
-        $data = new object();
+    } else if (!$existing = $DB->get_record('grade_settings', array('courseid'=>$courseid, 'name'=>$name))) {
+        $data = new stdClass();
         $data->courseid = $courseid;
-        $data->name     = addslashes($name);
-        $data->value    = addslashes($value);
-        insert_record('grade_settings', $data);
+        $data->name     = $name;
+        $data->value    = $value;
+        $DB->insert_record('grade_settings', $data);
 
     } else {
-        $data = new object();
+        $data = new stdClass();
         $data->id       = $existing->id;
-        $data->value    = addslashes($value);
-        update_record('grade_settings', $data);
+        $data->value    = $value;
+        $DB->update_record('grade_settings', $data);
     }
 
     grade_get_setting($courseid, null, null, true); // reset the cache
@@ -636,11 +646,12 @@ function grade_set_setting($courseid, $name, $value) {
 
 /**
  * Returns string representation of grade value
+ *
  * @param float $value grade value
  * @param object $grade_item - by reference to prevent scale reloading
  * @param bool $localized use localised decimal separator
  * @param int $displaytype type of display - GRADE_DISPLAY_TYPE_REAL, GRADE_DISPLAY_TYPE_PERCENTAGE, GRADE_DISPLAY_TYPE_LETTER
- * @param int $decimalplaces number of decimal places when displaying float values
+ * @param int $decimals number of decimal places when displaying float values
  * @return string
  */
 function grade_format_gradevalue($value, &$grade_item, $localized=true, $displaytype=null, $decimals=null) {
@@ -704,6 +715,9 @@ function grade_format_gradevalue($value, &$grade_item, $localized=true, $display
     }
 }
 
+/**
+ * @todo Document this function
+ */
 function grade_format_gradevalue_real($value, $grade_item, $decimals, $localized) {
     if ($grade_item->gradetype == GRADE_TYPE_SCALE) {
         if (!$scale = $grade_item->load_scale()) {
@@ -717,7 +731,9 @@ function grade_format_gradevalue_real($value, $grade_item, $decimals, $localized
         return format_float($value, $decimals, $localized);
     }
 }
-
+/**
+ * @todo Document this function
+ */
 function grade_format_gradevalue_percentage($value, $grade_item, $decimals, $localized) {
     $min = $grade_item->grademin;
     $max = $grade_item->grademax;
@@ -728,7 +744,9 @@ function grade_format_gradevalue_percentage($value, $grade_item, $decimals, $loc
     $percentage = (($value-$min)*100)/($max-$min);
     return format_float($percentage, $decimals, $localized).' %';
 }
-
+/**
+ * @todo Document this function
+ */
 function grade_format_gradevalue_letter($value, $grade_item) {
     $context = get_context_instance(CONTEXT_COURSE, $grade_item->courseid);
     if (!$letters = grade_get_letters($context)) {
@@ -752,6 +770,7 @@ function grade_format_gradevalue_letter($value, $grade_item) {
 
 /**
  * Returns grade options for gradebook category menu
+ *
  * @param int $courseid
  * @param bool $includenew include option for new category (-1)
  * @return array of grade categories in course
@@ -779,17 +798,20 @@ function grade_get_categories_menu($courseid, $includenew=false) {
     foreach ($categories as $category) {
         $cats[$category->id] = $category->get_name();
     }
-    asort($cats, SORT_LOCALE_STRING);
+    textlib_get_instance()->asort($cats);
 
     return ($result+$cats);
 }
 
 /**
  * Returns grade letters array used in context
+ *
  * @param object $context object or null for defaults
  * @return array of grade_boundary=>letter_string
  */
 function grade_get_letters($context=null) {
+    global $DB;
+
     if (empty($context)) {
         //default grading letters
         return array('93'=>'A', '90'=>'A-', '87'=>'B+', '83'=>'B', '80'=>'B-', '77'=>'C+', '73'=>'C', '70'=>'C-', '67'=>'D+', '60'=>'D', '0'=>'F');
@@ -811,7 +833,7 @@ function grade_get_letters($context=null) {
     array_unshift($contexts, $context->id);
 
     foreach ($contexts as $ctxid) {
-        if ($records = get_records('grade_letters', 'contextid', $ctxid, 'lowerboundary DESC')) {
+        if ($records = $DB->get_records('grade_letters', array('contextid'=>$ctxid), 'lowerboundary DESC')) {
             foreach ($records as $record) {
                 $letters[$record->lowerboundary] = $record->letter;
             }
@@ -831,13 +853,17 @@ function grade_get_letters($context=null) {
 
 /**
  * Verify new value of idnumber - checks for uniqueness of new idnumbers, old are kept intact
+ *
+ * @global object
  * @param string idnumber string (with magic quotes)
- * @param int $courseid - id numbers are course unique only
+ * @param int $courseid id numbers are course unique only
+ * @param object $grade_item is item idnumber
  * @param object $cm used for course module idnumbers and items attached to modules
- * @param object $gradeitem is item idnumber
  * @return boolean true means idnumber ok
  */
 function grade_verify_idnumber($idnumber, $courseid, $grade_item=null, $cm=null) {
+    global $DB;
+
     if ($idnumber == '') {
         //we allow empty idnumbers
         return true;
@@ -845,16 +871,21 @@ function grade_verify_idnumber($idnumber, $courseid, $grade_item=null, $cm=null)
 
     // keep existing even when not unique
     if ($cm and $cm->idnumber == $idnumber) {
+        if ($grade_item and $grade_item->itemnumber != 0) {
+            // grade item with itemnumber > 0 can't have the same idnumber as the main
+            // itemnumber 0 which is synced with course_modules
+            return false;
+        }
         return true;
     } else if ($grade_item and $grade_item->idnumber == $idnumber) {
         return true;
     }
 
-    if (get_records_select('course_modules', "course = $courseid AND idnumber='$idnumber'")) {
+    if ($DB->record_exists('course_modules', array('course'=>$courseid, 'idnumber'=>$idnumber))) {
         return false;
     }
 
-    if (get_records_select('grade_items', "courseid = $courseid AND idnumber='$idnumber'")) {
+    if ($DB->record_exists('grade_items', array('courseid'=>$courseid, 'idnumber'=>$idnumber))) {
         return false;
     }
 
@@ -863,19 +894,101 @@ function grade_verify_idnumber($idnumber, $courseid, $grade_item=null, $cm=null)
 
 /**
  * Force final grade recalculation in all course items
+ *
+ * @global object
  * @param int $courseid
  */
 function grade_force_full_regrading($courseid) {
-    set_field('grade_items', 'needsupdate', 1, 'courseid', $courseid);
+    global $DB;
+    $DB->set_field('grade_items', 'needsupdate', 1, array('courseid'=>$courseid));
 }
 
 /**
  * Forces regrading of all site grades - usualy when chanign site setings
+ * @global object
+ * @global object
  */
 function grade_force_site_regrading() {
-    global $CFG;
-    $sql = "UPDATE {$CFG->prefix}grade_items SET needsupdate=1";
-    execute_sql($sql, false);
+    global $CFG, $DB;
+    $DB->set_field('grade_items', 'needsupdate', 1);
+}
+
+/**
+ * Recover a user's grades from grade_grades_history
+ * @param int $userid the user ID whose grades we want to recover
+ * @param int $courseid the relevant course
+ * @return bool true if successful or false if there was an error or no grades could be recovered
+ */
+function grade_recover_history_grades($userid, $courseid) {
+    global $CFG, $DB;
+
+    if ($CFG->disablegradehistory) {
+        debugging('Attempting to recover grades when grade history is disabled.');
+        return false;
+    }
+
+    //Were grades recovered? Flag to return.
+    $recoveredgrades = false;
+
+    //Check the user is enrolled in this course
+    //Dont bother checking if they have a gradeable role. They may get one later so recover
+    //whatever grades they have now just in case.
+    $course_context = get_context_instance(CONTEXT_COURSE, $courseid);
+    if (!is_enrolled($course_context, $userid)) {
+        debugging('Attempting to recover the grades of a user who is deleted or not enrolled. Skipping recover.');
+        return false;
+    }
+
+    //Check for existing grades for this user in this course
+    //Recovering grades when the user already has grades can lead to duplicate indexes and bad data
+    //In the future we could move the existing grades to the history table then recover the grades from before then
+    $sql = "SELECT gg.id
+              FROM {grade_grades} gg
+              JOIN {grade_items} gi ON gi.id = gg.itemid
+             WHERE gi.courseid = :courseid AND gg.userid = :userid";
+    $params = array('userid' => $userid, 'courseid' => $courseid);
+    if ($DB->record_exists_sql($sql, $params)) {
+        debugging('Attempting to recover the grades of a user who already has grades. Skipping recover.');
+        return false;
+    } else {
+        //Retrieve the user's old grades
+        //have history ID as first column to guarantee we a unique first column
+        $sql = "SELECT h.id, gi.itemtype, gi.itemmodule, gi.iteminstance as iteminstance, gi.itemnumber, h.source, h.itemid, h.userid, h.rawgrade, h.rawgrademax,
+                       h.rawgrademin, h.rawscaleid, h.usermodified, h.finalgrade, h.hidden, h.locked, h.locktime, h.exported, h.overridden, h.excluded, h.feedback,
+                       h.feedbackformat, h.information, h.informationformat, h.timemodified, itemcreated.tm AS timecreated
+                  FROM {grade_grades_history} h
+                  JOIN (SELECT itemid, MAX(id) AS id
+                          FROM {grade_grades_history}
+                         WHERE userid = :userid1
+                      GROUP BY itemid) maxquery ON h.id = maxquery.id AND h.itemid = maxquery.itemid
+                  JOIN {grade_items} gi ON gi.id = h.itemid
+                  JOIN (SELECT itemid, MAX(timemodified) AS tm
+                          FROM {grade_grades_history}
+                         WHERE userid = :userid2 AND action = :insertaction
+                      GROUP BY itemid) itemcreated ON itemcreated.itemid = h.itemid
+                 WHERE gi.courseid = :courseid";
+        $params = array('userid1' => $userid, 'userid2' => $userid , 'insertaction' => GRADE_HISTORY_INSERT, 'courseid' => $courseid);
+        $oldgrades = $DB->get_records_sql($sql, $params);
+
+        //now move the old grades to the grade_grades table
+        foreach ($oldgrades as $oldgrade) {
+            unset($oldgrade->id);
+
+            $grade = new grade_grade($oldgrade, false);//2nd arg false as dont want to try and retrieve a record from the DB
+            $grade->insert($oldgrade->source);
+
+            //dont include default empty grades created when activities are created
+            if (!is_null($oldgrade->finalgrade) || !is_null($oldgrade->feedback)) {
+                $recoveredgrades = true;
+            }
+        }
+    }
+
+    //Some activities require manual grade synching (moving grades from the activity into the gradebook)
+    //If the student was deleted when synching was done they may have grades in the activity that haven't been moved across
+    grade_grab_course_grades($courseid, null, $userid);
+
+    return $recoveredgrades;
 }
 
 /**
@@ -893,7 +1006,7 @@ function grade_regrade_final_grades($courseid, $userid=null, $updated_item=null)
     if ($userid) {
         // one raw grade updated for one user
         if (empty($updated_item)) {
-            error("updated_item_id can not be null!");
+            print_error("cannotbenull", 'debug', '', "updated_item");
         }
         if ($course_item->needsupdate) {
             $updated_item->force_regrading();
@@ -996,80 +1109,49 @@ function grade_regrade_final_grades($courseid, $userid=null, $updated_item=null)
 }
 
 /**
- * For backwards compatibility with old third-party modules, this function can
- * be used to import all grades from activities with legacy grading.
- * @param int $courseid
- */
-function grade_grab_legacy_grades($courseid) {
-    global $CFG;
-
-    if (!$mods = get_list_of_plugins('mod') ) {
-        error('No modules installed!');
-    }
-
-    foreach ($mods as $mod) {
-        if ($mod == 'NEWMODULE') {   // Someone has unzipped the template, ignore it
-            continue;
-        }
-
-        $fullmod = $CFG->dirroot.'/mod/'.$mod;
-
-        // include the module lib once
-        if (file_exists($fullmod.'/lib.php')) {
-            include_once($fullmod.'/lib.php');
-            // look for modname_grades() function - old gradebook pulling function
-            // if present sync the grades with new grading system
-            $gradefunc = $mod.'_grades';
-            if (function_exists($gradefunc)) {
-                grade_grab_course_grades($courseid, $mod);
-            }
-        }
-    }
-}
-
-/**
  * Refetches data from all course activities
- * @param int $courseid
- * @param string $modname
- * @return success
+ * @param int $courseid the course ID
+ * @param string $modname limit the grade fetch to a single module type
+ * @param int $userid limit the grade fetch to a single user
+ * @return void
  */
-function grade_grab_course_grades($courseid, $modname=null) {
-    global $CFG;
+function grade_grab_course_grades($courseid, $modname=null, $userid=0) {
+    global $CFG, $DB;
 
     if ($modname) {
         $sql = "SELECT a.*, cm.idnumber as cmidnumber, m.name as modname
-                  FROM {$CFG->prefix}$modname a, {$CFG->prefix}course_modules cm, {$CFG->prefix}modules m
-                 WHERE m.name='$modname' AND m.visible=1 AND m.id=cm.module AND cm.instance=a.id AND cm.course=$courseid";
+                  FROM {".$modname."} a, {course_modules} cm, {modules} m
+                 WHERE m.name=:modname AND m.visible=1 AND m.id=cm.module AND cm.instance=a.id AND cm.course=:courseid";
+        $params = array('modname'=>$modname, 'courseid'=>$courseid);
 
-        if ($modinstances = get_records_sql($sql)) {
+        if ($modinstances = $DB->get_records_sql($sql, $params)) {
             foreach ($modinstances as $modinstance) {
-                grade_update_mod_grades($modinstance);
+                grade_update_mod_grades($modinstance, $userid);
             }
         }
         return;
     }
 
-    if (!$mods = get_list_of_plugins('mod') ) {
-        error('No modules installed!');
+    if (!$mods = get_plugin_list('mod') ) {
+        print_error('nomodules', 'debug');
     }
 
-    foreach ($mods as $mod) {
+    foreach ($mods as $mod => $fullmod) {
         if ($mod == 'NEWMODULE') {   // Someone has unzipped the template, ignore it
             continue;
         }
 
-        $fullmod = $CFG->dirroot.'/mod/'.$mod;
-
         // include the module lib once
         if (file_exists($fullmod.'/lib.php')) {
             // get all instance of the activity
             $sql = "SELECT a.*, cm.idnumber as cmidnumber, m.name as modname
-                      FROM {$CFG->prefix}$mod a, {$CFG->prefix}course_modules cm, {$CFG->prefix}modules m
-                     WHERE m.name='$mod' AND m.visible=1 AND m.id=cm.module AND cm.instance=a.id AND cm.course=$courseid";
+                      FROM {".$mod."} a, {course_modules} cm, {modules} m
+                     WHERE m.name=:mod AND m.visible=1 AND m.id=cm.module AND cm.instance=a.id AND cm.course=:courseid";
+            $params = array('mod'=>$mod, 'courseid'=>$courseid);
 
-            if ($modinstances = get_records_sql($sql)) {
+            if ($modinstances = $DB->get_records_sql($sql, $params)) {
                 foreach ($modinstances as $modinstance) {
-                    grade_update_mod_grades($modinstance);
+                    grade_update_mod_grades($modinstance, $userid);
                 }
             }
         }
@@ -1077,12 +1159,16 @@ function grade_grab_course_grades($courseid, $modname=null) {
 }
 
 /**
- * Force full update of module grades in central gradebook - works for both legacy and converted activities.
+ * Force full update of module grades in central gradebook
+ *
+ * @global object
+ * @global object
  * @param object $modinstance object with extra cmidnumber and modname property
+ * @param int $userid
  * @return boolean success
  */
 function grade_update_mod_grades($modinstance, $userid=0) {
-    global $CFG;
+    global $CFG, $DB;
 
     $fullmod = $CFG->dirroot.'/mod/'.$modinstance->modname;
     if (!file_exists($fullmod.'/lib.php')) {
@@ -1091,64 +1177,10 @@ function grade_update_mod_grades($modinstance, $userid=0) {
     }
     include_once($fullmod.'/lib.php');
 
-    // does it use legacy grading?
-    $gradefunc        = $modinstance->modname.'_grades';
     $updategradesfunc = $modinstance->modname.'_update_grades';
     $updateitemfunc   = $modinstance->modname.'_grade_item_update';
 
-    if (function_exists($gradefunc)) {
-
-        // legacy module - not yet converted
-        if ($oldgrades = $gradefunc($modinstance->id)) {
-
-            $grademax = $oldgrades->maxgrade;
-            $scaleid = NULL;
-            if (!is_numeric($grademax)) {
-                // scale name is provided as a string, try to find it
-                if (!$scale = get_record('scale', 'name', $grademax)) {
-                    debugging('Incorrect scale name! name:'.$grademax);
-                    return false;
-                }
-                $scaleid = $scale->id;
-            }
-
-            if (!$grade_item = grade_get_legacy_grade_item($modinstance, $grademax, $scaleid)) {
-                debugging('Can not get/create legacy grade item!');
-                return false;
-            }
-
-            if (!empty($oldgrades->grades)) {
-                $grades = array();
-
-                foreach ($oldgrades->grades as $uid=>$usergrade) {
-                    if ($userid and $uid != $userid) {
-                        continue;
-                    }
-                    $grade = new object();
-                    $grade->userid = $uid;
-
-                    if ($usergrade == '-') {
-                        // no grade
-                        $grade->rawgrade = null;
-
-                    } else if ($scaleid) {
-                        // scale in use, words used
-                        $gradescale = explode(",", $scale->scale);
-                        $grade->rawgrade = array_search($usergrade, $gradescale) + 1;
-
-                    } else {
-                        // good old numeric value
-                        $grade->rawgrade = $usergrade;
-                    }
-                    $grades[$uid] = $grade;
-                }
-
-                grade_update('legacygrab', $grade_item->courseid, $grade_item->itemtype, $grade_item->itemmodule,
-                             $grade_item->iteminstance, $grade_item->itemnumber, $grades);
-            }
-        }
-
-    } else if (function_exists($updategradesfunc) and function_exists($updateitemfunc)) {
+    if (function_exists($updategradesfunc) and function_exists($updateitemfunc)) {
         //new grading supported, force updating of grades
         $updateitemfunc($modinstance);
         $updategradesfunc($modinstance, $userid);
@@ -1161,124 +1193,38 @@ function grade_update_mod_grades($modinstance, $userid=0) {
 }
 
 /**
- * Returns list of currently used mods with legacy grading in course
- * @param $courseid int
- * @return array of modname=>modulenamestring mods with legacy grading
- */
-function grade_get_legacy_modules($courseid) {
-    global $CFG;
-
-    if (!$mods = get_course_mods($courseid)) {
-        return array();
-    }
-    $legacy = array();
-
-    foreach ($mods as $mod) {
-        $modname = $mod->modname;
-
-        $modlib = "$CFG->dirroot/mod/$modname/lib.php";
-        if (!$modlib) {
-            continue;
-        }
-        include_once($modlib);
-        $gradefunc = $modname.'_grades';
-        if (!function_exists($gradefunc)) {
-            continue;
-        }
-        $legacy[$modname] = get_string('modulename', $modname);
-    }
-
-    return $legacy;
-}
-
-/**
- * Get and update/create grade item for legacy modules.
- */
-function grade_get_legacy_grade_item($modinstance, $grademax, $scaleid) {
-
-    // does it already exist?
-    if ($grade_items = grade_item::fetch_all(array('courseid'=>$modinstance->course, 'itemtype'=>'mod', 'itemmodule'=>$modinstance->modname, 'iteminstance'=>$modinstance->id, 'itemnumber'=>0))) {
-        if (count($grade_items) > 1) {
-            debugging('Multiple legacy grade_items found.');
-            return false;
-        }
-
-        $grade_item = reset($grade_items);
-
-        if (is_null($grademax) and is_null($scaleid)) {
-           $grade_item->gradetype  = GRADE_TYPE_NONE;
-
-        } else if ($scaleid) {
-            $grade_item->gradetype = GRADE_TYPE_SCALE;
-            $grade_item->scaleid   = $scaleid;
-            $grade_item->grademin  = 1;
-
-        } else {
-            $grade_item->gradetype  = GRADE_TYPE_VALUE;
-            $grade_item->grademax   = $grademax;
-            $grade_item->grademin   = 0;
-        }
-
-        $grade_item->itemname = $modinstance->name;
-        $grade_item->idnumber = $modinstance->cmidnumber;
-
-        $grade_item->update();
-
-        return $grade_item;
-    }
-
-    // create new one
-    $params = array('courseid'    =>$modinstance->course,
-                    'itemtype'    =>'mod',
-                    'itemmodule'  =>$modinstance->modname,
-                    'iteminstance'=>$modinstance->id,
-                    'itemnumber'  =>0,
-                    'itemname'    =>$modinstance->name,
-                    'idnumber'    =>$modinstance->cmidnumber);
-
-    if (is_null($grademax) and is_null($scaleid)) {
-        $params['gradetype'] = GRADE_TYPE_NONE;
-
-    } else if ($scaleid) {
-        $params['gradetype'] = GRADE_TYPE_SCALE;
-        $params['scaleid']   = $scaleid;
-        $grade_item->grademin  = 1;
-    } else {
-        $params['gradetype'] = GRADE_TYPE_VALUE;
-        $params['grademax']  = $grademax;
-        $params['grademin']  = 0;
-    }
-
-    $grade_item = new grade_item($params);
-    $grade_item->insert();
-
-    return $grade_item;
-}
-
-/**
  * Remove grade letters for given context
+ *
+ * @global object
  * @param object $context
+ * @param bool $showfeedback
  */
 function remove_grade_letters($context, $showfeedback) {
+    global $DB, $OUTPUT;
+
     $strdeleted = get_string('deleted');
 
-    delete_records('grade_letters', 'contextid', $context->id);
+    $DB->delete_records('grade_letters', array('contextid'=>$context->id));
     if ($showfeedback) {
-        notify($strdeleted.' - '.get_string('letters', 'grades'));
+        echo $OUTPUT->notification($strdeleted.' - '.get_string('letters', 'grades'));
     }
 }
 /**
  * Remove all grade related course data - history is kept
+ *
+ * @global object
  * @param int $courseid
  * @param bool $showfeedback print feedback
  */
 function remove_course_grades($courseid, $showfeedback) {
+    global $DB, $OUTPUT;
+
     $strdeleted = get_string('deleted');
 
     $course_category = grade_category::fetch_course_category($courseid);
     $course_category->delete('coursedelete');
     if ($showfeedback) {
-        notify($strdeleted.' - '.get_string('grades', 'grades').', '.get_string('items', 'grades').', '.get_string('categories', 'grades'));
+        echo $OUTPUT->notification($strdeleted.' - '.get_string('grades', 'grades').', '.get_string('items', 'grades').', '.get_string('categories', 'grades'));
     }
 
     if ($outcomes = grade_outcome::fetch_all(array('courseid'=>$courseid))) {
@@ -1286,9 +1232,9 @@ function remove_course_grades($courseid, $showfeedback) {
             $outcome->delete('coursedelete');
         }
     }
-    delete_records('grade_outcomes_courses', 'courseid', $courseid);
+    $DB->delete_records('grade_outcomes_courses', array('courseid'=>$courseid));
     if ($showfeedback) {
-        notify($strdeleted.' - '.get_string('outcomes', 'grades'));
+        echo $OUTPUT->notification($strdeleted.' - '.get_string('outcomes', 'grades'));
     }
 
     if ($scales = grade_scale::fetch_all(array('courseid'=>$courseid))) {
@@ -1297,86 +1243,122 @@ function remove_course_grades($courseid, $showfeedback) {
         }
     }
     if ($showfeedback) {
-        notify($strdeleted.' - '.get_string('scales'));
+        echo $OUTPUT->notification($strdeleted.' - '.get_string('scales'));
     }
 
-    delete_records('grade_settings', 'courseid', $courseid);
+    $DB->delete_records('grade_settings', array('courseid'=>$courseid));
     if ($showfeedback) {
-        notify($strdeleted.' - '.get_string('settings', 'grades'));
+        echo $OUTPUT->notification($strdeleted.' - '.get_string('settings', 'grades'));
     }
 }
 
 /**
  * Called when course category deleted - cleanup gradebook
+ *
+ * @global object
  * @param int $categoryid course category id
  * @param int $newparentid empty means everything deleted, otherwise id of category where content moved
  * @param bool $showfeedback print feedback
  */
 function grade_course_category_delete($categoryid, $newparentid, $showfeedback) {
+    global $DB;
+
     $context = get_context_instance(CONTEXT_COURSECAT, $categoryid);
-    delete_records('grade_letters', 'contextid', $context->id);
+    $DB->delete_records('grade_letters', array('contextid'=>$context->id));
 }
 
 /**
  * Does gradebook cleanup when module uninstalled.
+ *
+ * @global object
+ * @global object
+ * @param string $modname
  */
 function grade_uninstalled_module($modname) {
-    global $CFG;
+    global $CFG, $DB;
 
     $sql = "SELECT *
-              FROM {$CFG->prefix}grade_items
-             WHERE itemtype='mod' AND itemmodule='$modname'";
+              FROM {grade_items}
+             WHERE itemtype='mod' AND itemmodule=?";
 
     // go all items for this module and delete them including the grades
-    if ($rs = get_recordset_sql($sql)) {
-        while ($item = rs_fetch_next_record($rs)) {
+    $rs = $DB->get_recordset_sql($sql, array($modname));
+    foreach ($rs as $item) {
             $grade_item = new grade_item($item, false);
             $grade_item->delete('moduninstall');
         }
-        rs_close($rs);
+    $rs->close();
+}
+
+/**
+ * Deletes all user data from gradebook.
+ * @param $userid
+ */
+function grade_user_delete($userid) {
+    if ($grades = grade_grade::fetch_all(array('userid'=>$userid))) {
+        foreach ($grades as $grade) {
+            $grade->delete('userdelete');
+        }
+    }
+}
+
+/**
+ * Purge course data when user unenrolled.
+ * @param $userid
+ */
+function grade_user_unenrol($courseid, $userid) {
+    if ($items = grade_item::fetch_all(array('courseid'=>$courseid))) {
+        foreach ($items as $item) {
+            if ($grades = grade_grade::fetch_all(array('userid'=>$userid, 'itemid'=>$item->id))) {
+                foreach ($grades as $grade) {
+                    $grade->delete('userdelete');
+                }
+            }
+        }
     }
 }
 
 /**
  * Grading cron job
+ *
+ * @global object
+ * @global object
  */
 function grade_cron() {
-    global $CFG;
+    global $CFG, $DB;
 
     $now = time();
 
     $sql = "SELECT i.*
-              FROM {$CFG->prefix}grade_items i
-             WHERE i.locked = 0 AND i.locktime > 0 AND i.locktime < $now AND EXISTS (
-                SELECT 'x' FROM {$CFG->prefix}grade_items c WHERE c.itemtype='course' AND c.needsupdate=0 AND c.courseid=i.courseid)";
+              FROM {grade_items} i
+             WHERE i.locked = 0 AND i.locktime > 0 AND i.locktime < ? AND EXISTS (
+                SELECT 'x' FROM {grade_items} c WHERE c.itemtype='course' AND c.needsupdate=0 AND c.courseid=i.courseid)";
 
     // go through all courses that have proper final grades and lock them if needed
-    if ($rs = get_recordset_sql($sql)) {
-        while ($item = rs_fetch_next_record($rs)) {
+    $rs = $DB->get_recordset_sql($sql, array($now));
+    foreach ($rs as $item) {
             $grade_item = new grade_item($item, false);
             $grade_item->locked = $now;
             $grade_item->update('locktime');
         }
-        rs_close($rs);
-    }
+    $rs->close();
 
     $grade_inst = new grade_grade();
     $fields = 'g.'.implode(',g.', $grade_inst->required_fields);
 
     $sql = "SELECT $fields
-              FROM {$CFG->prefix}grade_grades g, {$CFG->prefix}grade_items i
-             WHERE g.locked = 0 AND g.locktime > 0 AND g.locktime < $now AND g.itemid=i.id AND EXISTS (
-                SELECT 'x' FROM {$CFG->prefix}grade_items c WHERE c.itemtype='course' AND c.needsupdate=0 AND c.courseid=i.courseid)";
+              FROM {grade_grades} g, {grade_items} i
+             WHERE g.locked = 0 AND g.locktime > 0 AND g.locktime < ? AND g.itemid=i.id AND EXISTS (
+                SELECT 'x' FROM {grade_items} c WHERE c.itemtype='course' AND c.needsupdate=0 AND c.courseid=i.courseid)";
 
     // go through all courses that have proper final grades and lock them if needed
-    if ($rs = get_recordset_sql($sql)) {
-        while ($grade = rs_fetch_next_record($rs)) {
+    $rs = $DB->get_recordset_sql($sql, array($now));
+    foreach ($rs as $grade) {
             $grade_grade = new grade_grade($grade, false);
             $grade_grade->locked = $now;
             $grade_grade->update('locktime');
         }
-        rs_close($rs);
-    }
+    $rs->close();
 
     //TODO: do not run this cleanup every cron invocation
     // cleanup history tables
@@ -1384,7 +1366,7 @@ function grade_cron() {
         $histlifetime = $now - ($CFG->gradehistorylifetime * 3600 * 24);
         $tables = array('grade_outcomes_history', 'grade_categories_history', 'grade_items_history', 'grade_grades_history', 'scale_history');
         foreach ($tables as $table) {
-            if (delete_records_select($table, "timemodified < $histlifetime")) {
+            if ($DB->delete_records_select($table, "timemodified < ?", array($histlifetime))) {
                 mtrace("    Deleted old grade history records from '$table'");
             }
         }
@@ -1393,8 +1375,9 @@ function grade_cron() {
 
 /**
  * Resel all course grades
+ *
  * @param int $courseid
- * @return success
+ * @return bool success
  */
 function grade_course_reset($courseid) {
 
@@ -1415,9 +1398,10 @@ function grade_course_reset($courseid) {
 }
 
 /**
- * Convert number to 5 decimalfloat, empty tring or null db compatible format
+ * Convert number to 5 decimalfloat, empty string or null db compatible format
  * (we need this to decide if db value changed)
- * @param mixed number
+ *
+ * @param mixed $number
  * @return mixed float or null
  */
 function grade_floatval($number) {
@@ -1432,13 +1416,27 @@ function grade_floatval($number) {
 /**
  * Compare two float numbers safely. Uses 5 decimals php precision. Nulls accepted too.
  * Used for skipping of db updates
+ *
  * @param float $f1
  * @param float $f2
- * @return true if different
+ * @return bool true if different
  */
 function grade_floats_different($f1, $f2) {
     // note: db rounding for 10,5 is different from php round() function
     return (grade_floatval($f1) !== grade_floatval($f2));
 }
 
-?>
+/**
+ * Compare two float numbers safely. Uses 5 decimals php precision.
+ *
+ * Do not use rounding for 10,5 at the database level as the results may be
+ * different from php round() function.
+ *
+ * @since 2.0
+ * @param float $f1
+ * @param float $f2
+ * @return bool true if the values should be considered as the same grades
+ */
+function grade_floats_equal($f1, $f2) {
+    return (grade_floatval($f1) === grade_floatval($f2));
+}
