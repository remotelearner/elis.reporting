diff --git a/lib/grade/simpletest/testgradeitem.php b/lib/grade/simpletest/testgradeitem.php
old mode 100755
new mode 100644
index 4742d76..6ea2167
--- a/lib/grade/simpletest/testgradeitem.php
+++ b/lib/grade/simpletest/testgradeitem.php
@@ -1,4 +1,4 @@
-<?php // $Id$
+<?php
 
 ///////////////////////////////////////////////////////////////////////////
 //                                                                       //
@@ -42,8 +42,45 @@ Mock::generatePartial('grade_item', 'mock_grade_item_for_test_is_calculated', ar
 @set_time_limit(0);
 
 class grade_item_test extends grade_test {
-
-    function test_grade_item_construct() {
+    function test_grade_item() {
+        $this->sub_test_grade_item_construct();
+        $this->sub_test_grade_item_insert();
+        $this->sub_test_grade_item_delete();
+        $this->sub_test_grade_item_update();
+        $this->sub_test_grade_item_load_scale();
+        $this->sub_test_grade_item_load_outcome();
+        $this->sub_test_grade_item_qualifies_for_regrading();
+        $this->sub_test_grade_item_force_regrading();
+        $this->sub_test_grade_item_fetch();
+        $this->sub_test_grade_item_fetch_all();
+        $this->sub_test_grade_item_get_all_finals();
+        $this->sub_test_grade_item_get_final();
+        $this->sub_test_grade_item_get_sortorder();
+        $this->sub_test_grade_item_set_sortorder();
+        $this->sub_test_grade_item_move_after_sortorder();
+        $this->sub_test_grade_item_get_name();
+        $this->sub_test_grade_item_set_parent();
+        $this->sub_test_grade_item_get_parent_category();
+        $this->sub_test_grade_item_load_parent_category();
+        $this->sub_test_grade_item_get_item_category();
+        $this->sub_test_grade_item_load_item_category();
+        $this->sub_test_grade_item_regrade_final_grades();
+        $this->sub_test_grade_item_adjust_raw_grade();
+        $this->sub_test_grade_item_set_locked();
+        $this->sub_test_grade_item_is_locked();
+        $this->sub_test_grade_item_set_hidden();
+        $this->sub_test_grade_item_is_hidden();
+        $this->sub_test_grade_item_is_category_item();
+        $this->sub_test_grade_item_is_course_item();
+        $this->sub_test_grade_item_fetch_course_item();
+        $this->sub_test_grade_item_depends_on();
+        $this->sub_test_grade_item_is_calculated();
+        $this->sub_test_grade_item_set_calculation();
+        $this->sub_test_grade_item_get_calculation();
+        $this->sub_test_grade_item_compute();
+    }
+
+    function sub_test_grade_item_construct() {
         $params = new stdClass();
 
         $params->courseid = $this->courseid;
@@ -60,7 +97,7 @@ class grade_item_test extends grade_test {
         $this->assertEqual($params->itemmodule, $grade_item->itemmodule);
     }
 
-    function test_grade_item_insert() {
+    function sub_test_grade_item_insert() {
         $grade_item = new grade_item();
         $this->assertTrue(method_exists($grade_item, 'insert'));
 
@@ -77,18 +114,26 @@ class grade_item_test extends grade_test {
 
         $this->assertEqual($grade_item->id, $last_grade_item->id + 1);
         $this->assertEqual(11, $grade_item->sortorder);
+
+        //keep our reference collection the same as what is in the database
+        $this->grade_items[] = $grade_item;
     }
 
-    function test_grade_item_delete() {
-        $grade_item = new grade_item($this->grade_items[0]);
+    function sub_test_grade_item_delete() {
+        global $DB;
+        $grade_item = new grade_item($this->grade_items[7]);//use a grade item not touched by previous (or future) tests
         $this->assertTrue(method_exists($grade_item, 'delete'));
 
         $this->assertTrue($grade_item->delete());
 
-        $this->assertFalse(get_record('grade_items', 'id', $grade_item->id));
+        $this->assertFalse($DB->get_record('grade_items', array('id' => $grade_item->id)));
+
+        //keep our reference collection the same as the database
+        unset($this->grade_items[7]);
     }
 
-    function test_grade_item_update() {
+    function sub_test_grade_item_update() {
+        global $DB;
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'update'));
 
@@ -100,11 +145,11 @@ class grade_item_test extends grade_test {
         $this->assertTrue($grade_item->qualifies_for_regrading());
         $this->assertTrue($grade_item->update());
 
-        $iteminfo = get_field('grade_items', 'iteminfo', 'id', $this->grade_items[0]->id);
+        $iteminfo = $DB->get_field('grade_items', 'iteminfo', array('id' => $this->grade_items[0]->id));
         $this->assertEqual($grade_item->iteminfo, $iteminfo);
     }
 
-    function test_grade_item_load_scale() {
+    function sub_test_grade_item_load_scale() {
         $grade_item = new grade_item($this->grade_items[2]);
         $this->assertTrue(method_exists($grade_item, 'load_scale'));
         $scale = $grade_item->load_scale();
@@ -112,14 +157,14 @@ class grade_item_test extends grade_test {
         $this->assertEqual($scale->id, $this->grade_items[2]->scaleid);
     }
 
-    function test_grade_item_load_outcome() {
+    function sub_test_grade_item_load_outcome() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'load_outcome'));
         //TODO: add tests
     }
 
-    function test_grade_item_qualifies_for_regrading() {
-        $grade_item = new grade_item($this->grade_items[0]);
+    function sub_test_grade_item_qualifies_for_regrading() {
+        $grade_item = new grade_item($this->grade_items[1]);//use a grade item not touched by previous tests
         $this->assertTrue(method_exists($grade_item, 'qualifies_for_regrading'));
 
         $this->assertFalse($grade_item->qualifies_for_regrading());
@@ -133,8 +178,8 @@ class grade_item_test extends grade_test {
         $this->assertTrue($grade_item->qualifies_for_regrading());
     }
 
-    function test_grade_item_force_regrading() {
-        $grade_item = new grade_item($this->grade_items[0]);
+    function sub_test_grade_item_force_regrading() {
+        $grade_item = new grade_item($this->grade_items[2]);//use a grade item not touched by previous tests
         $this->assertTrue(method_exists($grade_item, 'force_regrading'));
 
         $this->assertEqual(0, $grade_item->needsupdate);
@@ -145,29 +190,30 @@ class grade_item_test extends grade_test {
         $this->assertEqual(1, $grade_item->needsupdate);
     }
 
-    function test_grade_item_fetch() {
+    function sub_test_grade_item_fetch() {
         $grade_item = new grade_item();
         $this->assertTrue(method_exists($grade_item, 'fetch'));
 
-        $grade_item = grade_item::fetch(array('id'=>$this->grade_items[0]->id));
-        $this->assertEqual($this->grade_items[0]->id, $grade_item->id);
-        $this->assertEqual($this->grade_items[0]->iteminfo, $grade_item->iteminfo);
+        //not using $this->grade_items[0] as it's iteminfo was modified by sub_test_grade_item_qualifies_for_regrading()
+        $grade_item = grade_item::fetch(array('id'=>$this->grade_items[1]->id));
+        $this->assertEqual($this->grade_items[1]->id, $grade_item->id);
+        $this->assertEqual($this->grade_items[1]->iteminfo, $grade_item->iteminfo);
 
         $grade_item = grade_item::fetch(array('itemtype'=>$this->grade_items[1]->itemtype, 'itemmodule'=>$this->grade_items[1]->itemmodule));
         $this->assertEqual($this->grade_items[1]->id, $grade_item->id);
         $this->assertEqual($this->grade_items[1]->iteminfo, $grade_item->iteminfo);
     }
 
-    function test_grade_item_fetch_all() {
+    function sub_test_grade_item_fetch_all() {
         $grade_item = new grade_item();
         $this->assertTrue(method_exists($grade_item, 'fetch_all'));
 
         $grade_items = grade_item::fetch_all(array('courseid'=>$this->courseid));
-        $this->assertEqual(count($this->grade_items), count($grade_items)-1);
+        $this->assertEqual(count($this->grade_items), count($grade_items)-1);//-1 to account for the course grade item
     }
 
     // Retrieve all final scores for a given grade_item.
-    function test_grade_item_get_all_finals() {
+    function sub_test_grade_item_get_all_finals() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'get_final'));
 
@@ -177,28 +223,28 @@ class grade_item_test extends grade_test {
 
 
     // Retrieve all final scores for a specific userid.
-    function test_grade_item_get_final() {
+    function sub_test_grade_item_get_final() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'get_final'));
         $final_grade = $grade_item->get_final($this->userid);
         $this->assertEqual($this->grade_grades[0]->finalgrade, $final_grade->finalgrade);
     }
 
-    function test_grade_item_get_sortorder() {
+    function sub_test_grade_item_get_sortorder() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'get_sortorder'));
         $sortorder = $grade_item->get_sortorder();
         $this->assertEqual($this->grade_items[0]->sortorder, $sortorder);
     }
 
-    function test_grade_item_set_sortorder() {
+    function sub_test_grade_item_set_sortorder() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'set_sortorder'));
         $grade_item->set_sortorder(999);
         $this->assertEqual($grade_item->sortorder, 999);
     }
 
-    function test_grade_item_move_after_sortorder() {
+    function sub_test_grade_item_move_after_sortorder() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'move_after_sortorder'));
         $grade_item->move_after_sortorder(5);
@@ -211,7 +257,7 @@ class grade_item_test extends grade_test {
         $this->assertEqual($after->sortorder, 8);
     }
 
-    function test_grade_item_get_name() {
+    function sub_test_grade_item_get_name() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'get_name'));
 
@@ -219,7 +265,7 @@ class grade_item_test extends grade_test {
         $this->assertEqual($this->grade_items[0]->itemname, $name);
     }
 
-    function test_grade_item_set_parent() {
+    function sub_test_grade_item_set_parent() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'set_parent'));
 
@@ -235,7 +281,7 @@ class grade_item_test extends grade_test {
         $this->assertEqual($grade_item->categoryid, $new->id);
     }
 
-    function test_grade_item_get_parent_category() {
+    function sub_test_grade_item_get_parent_category() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'get_parent_category'));
 
@@ -243,7 +289,7 @@ class grade_item_test extends grade_test {
         $this->assertEqual($this->grade_categories[1]->fullname, $category->fullname);
     }
 
-    function test_grade_item_load_parent_category() {
+    function sub_test_grade_item_load_parent_category() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'load_parent_category'));
 
@@ -252,7 +298,7 @@ class grade_item_test extends grade_test {
         $this->assertEqual($this->grade_categories[1]->fullname, $grade_item->parent_category->fullname);
     }
 
-    function test_grade_item_get_item_category() {
+    function sub_test_grade_item_get_item_category() {
         $grade_item = new grade_item($this->grade_items[3]);
         $this->assertTrue(method_exists($grade_item, 'get_item_category'));
 
@@ -260,7 +306,7 @@ class grade_item_test extends grade_test {
         $this->assertEqual($this->grade_categories[0]->fullname, $category->fullname);
     }
 
-    function test_grade_item_load_item_category() {
+    function sub_test_grade_item_load_item_category() {
         $grade_item = new grade_item($this->grade_items[3]);
         $this->assertTrue(method_exists($grade_item, 'load_item_category'));
 
@@ -270,7 +316,7 @@ class grade_item_test extends grade_test {
     }
 
     // Test update of all final grades
-    function test_grade_item_regrade_final_grades() {
+    function sub_test_grade_item_regrade_final_grades() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'regrade_final_grades'));
         $this->assertEqual(true, $grade_item->regrade_final_grades());
@@ -278,7 +324,7 @@ class grade_item_test extends grade_test {
     }
 
     // Test the adjust_raw_grade method
-    function test_grade_item_adjust_raw_grade() {
+    function sub_test_grade_item_adjust_raw_grade() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'adjust_raw_grade'));
         $grade_raw = new stdClass();
@@ -339,19 +385,24 @@ class grade_item_test extends grade_test {
     }
 
     // Test locking of grade items
-    function test_grade_item_set_locked() {
-        $grade_item = new grade_item($this->grade_items[0]);
+    function sub_test_grade_item_set_locked() {
+        
+        //getting a grade_item from the DB as set_locked() will fail if the grade items needs to be updated
+        //also needs to have at least one grade_grade or $grade_item->get_final(1) returns null
+        //$grade_item = new grade_item($this->grade_items[8]);
+        $grade_item = grade_item::fetch(array('id'=>$this->grade_items[8]->id));
+
         $this->assertTrue(method_exists($grade_item, 'set_locked'));
 
-        $grade = new grade_grade($grade_item->get_final(1));
-        $this->assertTrue(empty($grade_item->locked));
-        $this->assertTrue(empty($grade->locked));
+        $grade_grade = new grade_grade($grade_item->get_final(1));
+        $this->assertTrue(empty($grade_item->locked));//not locked
+        $this->assertTrue(empty($grade_grade->locked));//not locked
 
         $this->assertTrue($grade_item->set_locked(true, true, false));
-        $grade = new grade_grade($grade_item->get_final(1));
+        $grade_grade = new grade_grade($grade_item->get_final(1));
 
-        $this->assertFalse(empty($grade_item->locked));
-        $this->assertFalse(empty($grade->locked)); // individual grades should be locked too
+        $this->assertFalse(empty($grade_item->locked));//locked
+        $this->assertFalse(empty($grade_grade->locked)); // individual grades should be locked too
 
         $this->assertTrue($grade_item->set_locked(false, true, false));
         $grade = new grade_grade($grade_item->get_final(1));
@@ -360,8 +411,8 @@ class grade_item_test extends grade_test {
         $this->assertTrue(empty($grade->locked)); // individual grades should be unlocked too
     }
 
-    function test_grade_item_is_locked() {
-        $grade_item = new grade_item($this->grade_items[0]);
+    function sub_test_grade_item_is_locked() {
+        $grade_item = new grade_item($this->grade_items[10]);
         $this->assertTrue(method_exists($grade_item, 'is_locked'));
 
         $this->assertFalse($grade_item->is_locked());
@@ -372,7 +423,7 @@ class grade_item_test extends grade_test {
     }
 
     // Test hiding of grade items
-    function test_grade_item_set_hidden() {
+    function sub_test_grade_item_set_hidden() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'set_hidden'));
 
@@ -387,7 +438,7 @@ class grade_item_test extends grade_test {
         $this->assertEqual(666, $grade->hidden);
     }
 
-    function test_grade_item_is_hidden() {
+    function sub_test_grade_item_is_hidden() {
         $grade_item = new grade_item($this->grade_items[0]);
         $this->assertTrue(method_exists($grade_item, 'is_hidden'));
 
@@ -407,25 +458,25 @@ class grade_item_test extends grade_test {
         $this->assertTrue($grade_item->is_hidden(1));
     }
 
-    function test_grade_item_is_category_item() {
+    function sub_test_grade_item_is_category_item() {
         $grade_item = new grade_item($this->grade_items[3]);
         $this->assertTrue(method_exists($grade_item, 'is_category_item'));
         $this->assertTrue($grade_item->is_category_item());
     }
 
-    function test_grade_item_is_course_item() {
+    function sub_test_grade_item_is_course_item() {
         $grade_item = grade_item::fetch_course_item($this->courseid);
         $this->assertTrue(method_exists($grade_item, 'is_course_item'));
         $this->assertTrue($grade_item->is_course_item());
     }
 
-    function test_grade_item_fetch_course_item() {
+    function sub_test_grade_item_fetch_course_item() {
         $grade_item = grade_item::fetch_course_item($this->courseid);
         $this->assertTrue(method_exists($grade_item, 'fetch_course_item'));
         $this->assertTrue($grade_item->itemtype, 'course');
     }
 
-    function test_grade_item_depends_on() {
+    function sub_test_grade_item_depends_on() {
         $grade_item = new grade_item($this->grade_items[1]);
 
         // calculated grade dependency
@@ -448,7 +499,7 @@ class grade_item_test extends grade_test {
         $this->assertEqual($res, $deps);
     }
 
-    function test_grade_item_is_calculated() {
+    function sub_test_grade_item_is_calculated() {
         $grade_item = new mock_grade_item_for_test_is_calculated($this);
         $grade_item->set_properties($grade_item, $this->grade_items[1]);
         $this->assertTrue(method_exists($grade_item, 'is_calculated'));
@@ -460,7 +511,7 @@ class grade_item_test extends grade_test {
         $this->assertTrue($grade_item->is_calculated());
     }
 
-    function test_grade_item_set_calculation() {
+    function sub_test_grade_item_set_calculation() {
         $grade_item = new grade_item($this->grade_items[1]);
         $this->assertTrue(method_exists($grade_item, 'set_calculation'));
         $grade_itemsource = new grade_item($this->grade_items[0]);
@@ -471,7 +522,7 @@ class grade_item_test extends grade_test {
         $this->assertEqual('=##gi'.$grade_itemsource->id.'##', $grade_item->calculation);
     }
 
-    function test_grade_item_get_calculation() {
+    function sub_test_grade_item_get_calculation() {
         $grade_item = new grade_item($this->grade_items[1]);
         $this->assertTrue(method_exists($grade_item, 'get_calculation'));
         $grade_itemsource = new grade_item($this->grade_items[0]);
@@ -483,26 +534,35 @@ class grade_item_test extends grade_test {
         $this->assertEqual($denormalizedformula, $formula);
     }
 
-    function test_grade_item_compute() {
-        $grade_item = new grade_item($this->grade_items[1]);
+    function sub_test_grade_item_compute() {
+        $grade_item = grade_item::fetch(array('id'=>$this->grade_items[1]->id));
         $this->assertTrue(method_exists($grade_item, 'compute'));
 
+        //check the grade_grades in the array match those in the DB then delete $this->grade_items[1]'s grade_grades
+        $this->grade_grades[3] = grade_grade::fetch(array('id'=>$this->grade_grades[3]->id));
         $grade_grade = grade_grade::fetch(array('id'=>$this->grade_grades[3]->id));
         $grade_grade->delete();
+        
+        $this->grade_grades[4] = grade_grade::fetch(array('id'=>$this->grade_grades[4]->id));
         $grade_grade = grade_grade::fetch(array('id'=>$this->grade_grades[4]->id));
         $grade_grade->delete();
+        
+        $this->grade_grades[5] = grade_grade::fetch(array('id'=>$this->grade_grades[5]->id));
         $grade_grade = grade_grade::fetch(array('id'=>$this->grade_grades[5]->id));
         $grade_grade->delete();
 
+        //recalculate the grades (its a calculation so pulls values from other grade_items) and reinsert them
         $grade_item->compute();
 
         $grade_grade = grade_grade::fetch(array('userid'=>$this->grade_grades[3]->userid, 'itemid'=>$this->grade_grades[3]->itemid));
         $this->assertEqual($this->grade_grades[3]->finalgrade, $grade_grade->finalgrade);
+        
         $grade_grade = grade_grade::fetch(array('userid'=>$this->grade_grades[4]->userid, 'itemid'=>$this->grade_grades[4]->itemid));
         $this->assertEqual($this->grade_grades[4]->finalgrade, $grade_grade->finalgrade);
+        
         $grade_grade = grade_grade::fetch(array('userid'=>$this->grade_grades[5]->userid, 'itemid'=>$this->grade_grades[5]->itemid));
         $this->assertEqual($this->grade_grades[5]->finalgrade, $grade_grade->finalgrade);
+
     }
 
 }
-?>
