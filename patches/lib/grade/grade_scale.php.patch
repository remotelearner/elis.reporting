diff --git a/lib/grade/grade_scale.php b/lib/grade/grade_scale.php
index 3c042a5..d9b5fb8 100644
--- a/lib/grade/grade_scale.php
+++ b/lib/grade/grade_scale.php
@@ -1,27 +1,29 @@
-<?php // $Id$
-
-///////////////////////////////////////////////////////////////////////////
-//                                                                       //
-// NOTICE OF COPYRIGHT                                                   //
-//                                                                       //
-// Moodle - Modular Object-Oriented Dynamic Learning Environment         //
-//          http://moodle.com                                            //
-//                                                                       //
-// Copyright (C) 1999 onwards Martin Dougiamas  http://dougiamas.com       //
-//                                                                       //
-// This program is free software; you can redistribute it and/or modify  //
-// it under the terms of the GNU General Public License as published by  //
-// the Free Software Foundation; either version 2 of the License, or     //
-// (at your option) any later version.                                   //
-//                                                                       //
-// This program is distributed in the hope that it will be useful,       //
-// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
-// GNU General Public License for more details:                          //
-//                                                                       //
-//          http://www.gnu.org/copyleft/gpl.html                         //
-//                                                                       //
-///////////////////////////////////////////////////////////////////////////
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Definitions of grade scale class
+ *
+ * @package    core
+ * @subpackage grade
+ * @copyright  2006 Nicolas Connault
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
 
 require_once('grade_object.php');
 
@@ -34,45 +36,45 @@ class grade_scale extends grade_object {
      * DB Table (used by grade_object).
      * @var string $table
      */
-    var $table = 'scale';
+    public $table = 'scale';
 
     /**
      * Array of required table fields, must start with 'id'.
      * @var array $required_fields
      */
-    var $required_fields = array('id', 'courseid', 'userid', 'name', 'scale', 'description', 'timemodified');
+    public $required_fields = array('id', 'courseid', 'userid', 'name', 'scale', 'description', 'descriptionformat', 'timemodified');
 
     /**
      * The course this scale belongs to.
      * @var int $courseid
      */
-    var $courseid;
+    public $courseid;
 
-    var $userid;
+    public $userid;
 
     /**
      * The name of the scale.
      * @var string $name
      */
-    var $name;
+    public $name;
 
     /**
      * The items in this scale.
      * @var array $scale_items
      */
-    var $scale_items = array();
+    public $scale_items = array();
 
     /**
-     * A string representatin of the scale items (a comma-separated list).
+     * A string representation of the scale items (a comma-separated list).
      * @var string $scale
      */
-    var $scale;
+    public $scale;
 
     /**
      * A description for this scale.
      * @var string $description
      */
-    var $description;
+    public $description;
 
     /**
      * Finds and returns a grade_scale instance based on params.
@@ -81,7 +83,7 @@ class grade_scale extends grade_object {
      * @param array $params associative arrays varname=>value
      * @return object grade_scale instance or false if none found.
      */
-    function fetch($params) {
+    public static function fetch($params) {
         return grade_object::fetch_helper('scale', 'grade_scale', $params);
     }
 
@@ -90,9 +92,9 @@ class grade_scale extends grade_object {
      * @static
      *
      * @param array $params associative arrays varname=>value
-     * @return array array of grade_scale insatnces or false if none found.
+     * @return array array of grade_scale instances or false if none found.
      */
-    function fetch_all($params) {
+    public static function fetch_all($params) {
         return grade_object::fetch_all_helper('scale', 'grade_scale', $params);
     }
 
@@ -103,7 +105,7 @@ class grade_scale extends grade_object {
      * @param string $source from where was the object inserted (mod/forum, manual, etc.)
      * @return int PK ID if successful, false otherwise
      */
-    function insert($source=null) {
+    public function insert($source=null) {
         $this->timecreated = time();
         $this->timemodified = time();
         return parent::insert($source);
@@ -114,17 +116,36 @@ class grade_scale extends grade_object {
      * @param string $source from where was the object inserted
      * @return boolean success
      */
-    function update($source=null) {
+    public function update($source=null) {
         $this->timemodified = time();
         return parent::update($source);
     }
 
     /**
+     * Deletes this outcome from the database.
+     * @param string $source from where was the object deleted (mod/forum, manual, etc.)
+     * @return boolean success
+     */
+    public function delete($source=null) {
+        global $DB;
+        if (parent::delete($source)) {
+            $context = get_context_instance(CONTEXT_SYSTEM);
+            $fs = get_file_storage();
+            $files = $fs->get_area_files($context->id, 'grade', 'scale', $this->id);
+            foreach ($files as $file) {
+                $file->delete();
+            }
+            return true;
+        }
+        return false;
+    }
+
+    /**
      * Returns the most descriptive field for this object. This is a standard method used
      * when we do not know the exact type of an object.
      * @return string name
      */
-    function get_name() {
+    public function get_name() {
         return format_string($this->name);
     }
 
@@ -138,7 +159,7 @@ class grade_scale extends grade_object {
      * @param mixed $items Could be null, a string or an array. The method behaves differently for each case.
      * @return array The resulting array of scale items or null if the method failed to produce one.
      */
-    function load_items($items=NULL) {
+    public function load_items($items=NULL) {
         if (empty($items)) {
             $this->scale_items = explode(',', $this->scale);
         } elseif (is_array($items)) {
@@ -168,7 +189,7 @@ class grade_scale extends grade_object {
      * @param mixed $items Could be null, a string or an array. The method behaves differently for each case.
      * @return array The resulting string of scale items or null if the method failed to produce one.
      */
-    function compact_items($items=NULL) {
+    public function compact_items($items=NULL) {
         if (empty($items)) {
             $this->scale = implode(',', $this->scale_items);
         } elseif (is_array($items)) {
@@ -188,9 +209,10 @@ class grade_scale extends grade_object {
      * @param float $grade
      * @return string
      */
-    function get_nearest_item($grade) {
+    public function get_nearest_item($grade) {
+        global $DB;
         // Obtain nearest scale item from average
-        $scales_array = get_records_list('scale', 'id', $this->id);
+        $scales_array = $DB->get_records('scale', array('id' => $this->id));
         $scale = $scales_array[$this->id];
         $scales = explode(",", $scale->scale);
 
@@ -206,7 +228,7 @@ class grade_scale extends grade_object {
      * Static function returning all global scales
      * @return object
      */
-    function fetch_all_global() {
+    public function fetch_all_global() {
         return grade_scale::fetch_all(array('courseid'=>0));
     }
 
@@ -214,7 +236,7 @@ class grade_scale extends grade_object {
      * Static function returning all local course scales
      * @return object
      */
-    function fetch_all_local($courseid) {
+    public static function fetch_all_local($courseid) {
         return grade_scale::fetch_all(array('courseid'=>$courseid));
     }
 
@@ -222,7 +244,7 @@ class grade_scale extends grade_object {
      * Checks if scale can be deleted.
      * @return boolean
      */
-    function can_delete() {
+    public function can_delete() {
         return !$this->is_used();
     }
 
@@ -230,23 +252,25 @@ class grade_scale extends grade_object {
      * Returns if scale used anywhere - activities, grade items, outcomes, etc.
      * @return bool
      */
-    function is_used() {
+    public function is_used() {
+        global $DB;
         global $CFG;
 
         // count grade items excluding the
-        $sql = "SELECT COUNT(id) FROM {$CFG->prefix}grade_items WHERE scaleid = {$this->id} AND outcomeid IS NULL";
-        if (count_records_sql($sql)) {
+        $params = array($this->id);
+        $sql = "SELECT COUNT(id) FROM {grade_items} WHERE scaleid = ? AND outcomeid IS NULL";
+        if ($DB->count_records_sql($sql, $params)) {
             return true;
         }
 
         // count outcomes
-        $sql = "SELECT COUNT(id) FROM {$CFG->prefix}grade_outcomes WHERE scaleid = {$this->id}";
-        if (count_records_sql($sql)) {
+        $sql = "SELECT COUNT(id) FROM {grade_outcomes} WHERE scaleid = ?";
+        if ($DB->count_records_sql($sql, $params)) {
             return true;
         }
 
         $legacy_mods = false;
-        if ($mods = get_records('modules', 'visible', 1)) {
+        if ($mods = $DB->get_records('modules', array('visible' => 1))) {
             foreach ($mods as $mod) {
                 //Check cm->name/lib.php exists
                 if (file_exists($CFG->dirroot.'/mod/'.$mod->name.'/lib.php')) {
@@ -283,5 +307,19 @@ class grade_scale extends grade_object {
 
         return false;
     }
+
+    /**
+     * Returns the formatted grade description with URLs converted
+     * @return string
+     */
+    public function get_description() {
+        global $CFG;
+        require_once($CFG->libdir . '/filelib.php');
+
+        $systemcontext = get_context_instance(CONTEXT_SYSTEM);
+        $options = new stdClass;
+        $options->noclean = true;
+        $description = file_rewrite_pluginfile_urls($this->description, 'pluginfile.php', $systemcontext->id, 'grade', 'scale', $this->id);
+        return format_text($description, $this->descriptionformat, $options);
+    }
 }
-?>
