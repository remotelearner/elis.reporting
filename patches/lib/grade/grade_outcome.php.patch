diff --git a/lib/grade/grade_outcome.php b/lib/grade/grade_outcome.php
index d08d3c7..47e538e 100644
--- a/lib/grade/grade_outcome.php
+++ b/lib/grade/grade_outcome.php
@@ -1,27 +1,29 @@
-<?php // $Id$
-
-///////////////////////////////////////////////////////////////////////////
-//                                                                       //
-// NOTICE OF COPYRIGHT                                                   //
-//                                                                       //
-// Moodle - Modular Object-Oriented Dynamic Learning Environment         //
-//          http://moodle.com                                            //
-//                                                                       //
-// Copyright (C) 1999 onwards Martin Dougiamas  http://dougiamas.com     //
-//                                                                       //
-// This program is free software; you can redistribute it and/or modify  //
-// it under the terms of the GNU General Public License as published by  //
-// the Free Software Foundation; either version 2 of the License, or     //
-// (at your option) any later version.                                   //
-//                                                                       //
-// This program is distributed in the hope that it will be useful,       //
-// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
-// GNU General Public License for more details:                          //
-//                                                                       //
-//          http://www.gnu.org/copyleft/gpl.html                         //
-//                                                                       //
-///////////////////////////////////////////////////////////////////////////
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Definitions of grade outcome class
+ *
+ * @package    core
+ * @subpackage grade
+ * @copyright  2006 Nicolas Connault
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
 
 require_once('grade_object.php');
 
@@ -34,67 +36,77 @@ class grade_outcome extends grade_object {
      * DB Table (used by grade_object).
      * @var string $table
      */
-    var $table = 'grade_outcomes';
+    public $table = 'grade_outcomes';
 
     /**
      * Array of required table fields, must start with 'id'.
      * @var array $required_fields
      */
-    var $required_fields = array('id', 'courseid', 'shortname', 'fullname', 'scaleid',
-                                 'description', 'timecreated', 'timemodified', 'usermodified');
+    public $required_fields = array('id', 'courseid', 'shortname', 'fullname', 'scaleid','description',
+                                 'descriptionformat', 'timecreated', 'timemodified', 'usermodified');
 
     /**
      * The course this outcome belongs to.
      * @var int $courseid
      */
-    var $courseid;
+    public $courseid;
 
     /**
      * The shortname of the outcome.
      * @var string $shortname
      */
-    var $shortname;
+    public $shortname;
 
     /**
      * The fullname of the outcome.
      * @var string $fullname
      */
-    var $fullname;
+    public $fullname;
 
     /**
      * A full grade_scale object referenced by $this->scaleid.
      * @var object $scale
      */
-    var $scale;
+    public $scale;
 
     /**
      * The id of the scale referenced by this outcome.
      * @var int $scaleid
      */
-    var $scaleid;
+    public $scaleid;
 
     /**
      * The description of this outcome - FORMAT_MOODLE.
      * @var string $description
      */
-    var $description;
+    public $description;
 
     /**
      * The userid of the person who last modified this outcome.
      * @var int $usermodified
      */
-    var $usermodified;
+    public $usermodified;
 
     /**
      * Deletes this outcome from the database.
      * @param string $source from where was the object deleted (mod/forum, manual, etc.)
      * @return boolean success
      */
-    function delete($source=null) {
+    public function delete($source=null) {
+        global $DB;
         if (!empty($this->courseid)) {
-            delete_records('grade_outcomes_courses', 'outcomeid', $this->id, 'courseid', $this->courseid);
+            $DB->delete_records('grade_outcomes_courses', array('outcomeid' => $this->id, 'courseid' => $this->courseid));
         }
-        return parent::delete($source);
+        if (parent::delete($source)) {
+            $context = get_context_instance(CONTEXT_SYSTEM);
+            $fs = get_file_storage();
+            $files = $fs->get_area_files($context->id, 'grade', 'outcome', $this->id);
+            foreach ($files as $file) {
+                $file->delete();
+            }
+            return true;
+        }
+        return false;
     }
 
     /**
@@ -104,16 +116,17 @@ class grade_outcome extends grade_object {
      * @param string $source from where was the object inserted (mod/forum, manual, etc.)
      * @return int PK ID if successful, false otherwise
      */
-    function insert($source=null) {
+    public function insert($source=null) {
+        global $DB;
 
         $this->timecreated = $this->timemodified = time();
 
         if ($result = parent::insert($source)) {
             if (!empty($this->courseid)) {
-                $goc = new object();
+                $goc = new stdClass();
                 $goc->courseid = $this->courseid;
                 $goc->outcomeid = $this->id;
-                insert_record('grade_outcomes_courses', $goc);
+                $DB->insert_record('grade_outcomes_courses', $goc);
             }
         }
         return $result;
@@ -124,7 +137,7 @@ class grade_outcome extends grade_object {
      * @param string $source from where was the object inserted
      * @return boolean success
      */
-    function update($source=null) {
+    public function update($source=null) {
         $this->timemodified = time();
 
         if ($result = parent::update($source)) {
@@ -140,16 +153,17 @@ class grade_outcome extends grade_object {
      * @param int $courseid
      * @return succes - false if incorrect courseid requested
      */
-    function use_in($courseid) {
+    public function use_in($courseid) {
+        global $DB;
         if (!empty($this->courseid) and $courseid != $this->courseid) {
             return false;
         }
 
-        if (!record_exists('grade_outcomes_courses', 'courseid', $courseid, 'outcomeid', $this->id)) {
-            $goc = new object();
+        if (!$DB->record_exists('grade_outcomes_courses', array('courseid' => $courseid, 'outcomeid' => $this->id))) {
+            $goc = new stdClass();
             $goc->courseid  = $courseid;
             $goc->outcomeid = $this->id;
-            return (bool)insert_record('grade_outcomes_courses', $goc);
+            $DB->insert_record('grade_outcomes_courses', $goc);
         }
         return true;
     }
@@ -161,7 +175,7 @@ class grade_outcome extends grade_object {
      * @param array $params associative arrays varname=>value
      * @return object grade_outcome instance or false if none found.
      */
-    function fetch($params) {
+    public static function fetch($params) {
         return grade_object::fetch_helper('grade_outcomes', 'grade_outcome', $params);
     }
 
@@ -172,7 +186,7 @@ class grade_outcome extends grade_object {
      * @param array $params associative arrays varname=>value
      * @return array array of grade_outcome insatnces or false if none found.
      */
-    function fetch_all($params) {
+    public static function fetch_all($params) {
         return grade_object::fetch_all_helper('grade_outcomes', 'grade_outcome', $params);
     }
 
@@ -180,7 +194,7 @@ class grade_outcome extends grade_object {
      * Instantiates a grade_scale object whose data is retrieved from the
      * @return object grade_scale
      */
-    function load_scale() {
+    public function load_scale() {
         if (empty($this->scale->id) or $this->scale->id != $this->scaleid) {
             $this->scale = grade_scale::fetch(array('id'=>$this->scaleid));
             $this->scale->load_items();
@@ -193,7 +207,7 @@ class grade_outcome extends grade_object {
      * @static
      * @return object
      */
-    function fetch_all_global() {
+    public static function fetch_all_global() {
         if (!$outcomes = grade_outcome::fetch_all(array('courseid'=>null))) {
             $outcomes = array();
         }
@@ -206,7 +220,7 @@ class grade_outcome extends grade_object {
      * @param int $courseid
      * @return object
      */
-    function fetch_all_local($courseid) {
+    public static function fetch_all_local($courseid) {
         if (!$outcomes =grade_outcome::fetch_all(array('courseid'=>$courseid))) {
             $outcomes = array();
         }
@@ -219,16 +233,17 @@ class grade_outcome extends grade_object {
      * @param int $courseid
      * @return array
      */
-    function fetch_all_available($courseid) {
-        global $CFG;
+    public static function fetch_all_available($courseid) {
+        global $CFG, $DB;
 
         $result = array();
+        $params = array($courseid);
         $sql = "SELECT go.*
-                  FROM {$CFG->prefix}grade_outcomes go, {$CFG->prefix}grade_outcomes_courses goc
-                 WHERE go.id = goc.outcomeid AND goc.courseid = {$courseid}
+                  FROM {grade_outcomes} go, {grade_outcomes_courses} goc
+                 WHERE go.id = goc.outcomeid AND goc.courseid = ?
               ORDER BY go.id ASC";
 
-        if ($datas = get_records_sql($sql)) {
+        if ($datas = $DB->get_records_sql($sql, $params)) {
             foreach($datas as $data) {
                 $instance = new grade_outcome();
                 grade_object::set_properties($instance, $data);
@@ -244,7 +259,7 @@ class grade_outcome extends grade_object {
      * when we do not know the exact type of an object.
      * @return string name
      */
-    function get_name() {
+    public function get_name() {
         return format_string($this->fullname);
     }
 
@@ -252,15 +267,30 @@ class grade_outcome extends grade_object {
      * Returns unique outcome short name.
      * @return string name
      */
-    function get_shortname() {
+    public function get_shortname() {
         return $this->shortname;
     }
 
     /**
+     * Returns the formatted grade description with URLs converted
+     * @return string
+     */
+    public function get_description() {
+        global $CFG;
+        require_once($CFG->libdir . '/filelib.php');
+
+        $options = new stdClass;
+        $options->noclean = true;
+        $systemcontext = get_context_instance(CONTEXT_SYSTEM);
+        $description = file_rewrite_pluginfile_urls($this->description, 'pluginfile.php', $systemcontext->id, 'grade', 'outcome', $this->id);
+        return format_text($description, $this->descriptionformat, $options);
+    }
+
+    /**
      * Checks if outcome can be deleted.
      * @return boolean
      */
-    function can_delete() {
+    public function can_delete() {
         if ($this->get_item_uses_count()) {
             return false;
         }
@@ -276,22 +306,23 @@ class grade_outcome extends grade_object {
      * Returns the number of places where outcome is used.
      * @return int
      */
-    function get_course_uses_count() {
-        global $CFG;
+    public function get_course_uses_count() {
+        global $DB;
 
         if (!empty($this->courseid)) {
             return 1;
         }
 
-        return count_records('grade_outcomes_courses', 'outcomeid', $this->id);
+        return $DB->count_records('grade_outcomes_courses', array('outcomeid' => $this->id));
     }
 
     /**
      * Returns the number of places where outcome is used.
      * @return int
      */
-    function get_item_uses_count() {
-        return count_records('grade_items', 'outcomeid', $this->id);
+    public function get_item_uses_count() {
+        global $DB;
+        return $DB->count_records('grade_items', array('outcomeid' => $this->id));
     }
 
     /**
@@ -306,8 +337,8 @@ class grade_outcome extends grade_object {
      * @param bool $items Whether or not to return the list of items using this outcome
      * @return float
      */
-    function get_grade_info($courseid=null, $average=true, $items=false) {
-        global $CFG;
+    public function get_grade_info($courseid=null, $average=true, $items=false) {
+        global $CFG, $DB;
 
         if (!isset($this->id)) {
             debugging("You must setup the outcome's id before calling its get_grade_info() method!");
@@ -319,24 +350,27 @@ class grade_outcome extends grade_object {
             return false;
         }
 
+        $params = array($this->id);
+
         $wheresql = '';
         if (!is_null($courseid)) {
-            $wheresql = " AND {$CFG->prefix}grade_items.courseid = $courseid ";
+            $wheresql = " AND {grade_items}.courseid = ? ";
+            $params[] = $courseid;
         }
 
         $selectadd = '';
         if ($items !== false) {
-            $selectadd = ", {$CFG->prefix}grade_items.* ";
+            $selectadd = ", {grade_items}.* ";
         }
 
         $sql = "SELECT finalgrade $selectadd
-                  FROM {$CFG->prefix}grade_grades, {$CFG->prefix}grade_items, {$CFG->prefix}grade_outcomes
-                 WHERE {$CFG->prefix}grade_outcomes.id = {$CFG->prefix}grade_items.outcomeid
-                   AND {$CFG->prefix}grade_items.id = {$CFG->prefix}grade_grades.itemid
-                   AND {$CFG->prefix}grade_outcomes.id = $this->id
+                  FROM {grade_grades}, {grade_items}, {grade_outcomes}
+                 WHERE {grade_outcomes}.id = {grade_items}.outcomeid
+                   AND {grade_items}.id = {grade_grades}.itemid
+                   AND {grade_outcomes}.id = ?
                    $wheresql";
 
-        $grades = get_records_sql($sql);
+        $grades = $DB->get_records_sql($sql, $params);
         $retval = array();
 
         if ($average !== false && count($grades) > 0) {
@@ -364,4 +398,3 @@ class grade_outcome extends grade_object {
         return $retval;
     }
 }
-?>
