diff --git a/lib/grade/grade_object.php b/lib/grade/grade_object.php
index 4073520..08859f5 100644
--- a/lib/grade/grade_object.php
+++ b/lib/grade/grade_object.php
@@ -1,63 +1,72 @@
-<?php // $Id$
-
-///////////////////////////////////////////////////////////////////////////
-//                                                                       //
-// NOTICE OF COPYRIGHT                                                   //
-//                                                                       //
-// Moodle - Modular Object-Oriented Dynamic Learning Environment         //
-//          http://moodle.com                                            //
-//                                                                       //
-// Copyright (C) 1999 onwards Martin Dougiamas  http://dougiamas.com     //
-//                                                                       //
-// This program is free software; you can redistribute it and/or modify  //
-// it under the terms of the GNU General Public License as published by  //
-// the Free Software Foundation; either version 2 of the License, or     //
-// (at your option) any later version.                                   //
-//                                                                       //
-// This program is distributed in the hope that it will be useful,       //
-// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
-// GNU General Public License for more details:                          //
-//                                                                       //
-//          http://www.gnu.org/copyleft/gpl.html                         //
-//                                                                       //
-///////////////////////////////////////////////////////////////////////////
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Definitions of grade object class
+ *
+ * @package    core
+ * @subpackage grade
+ * @copyright  2006 Nicolas Connault
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 
+defined('MOODLE_INTERNAL') || die();
 /**
  * An abstract object that holds methods and attributes common to all grade_* objects defined here.
  * @abstract
  */
-class grade_object {
+abstract class grade_object {
+    public $table;
+
     /**
      * Array of required table fields, must start with 'id'.
      * @var array $required_fields
      */
-    var $required_fields = array('id', 'timecreated', 'timemodified');
+    public $required_fields = array('id', 'timecreated', 'timemodified', 'hidden');
 
     /**
      * Array of optional fields with default values - usually long text information that is not always needed.
      * If you want to create an instance without optional fields use: new grade_object($only_required_fields, false);
      * @var array $optional_fields
      */
-    var $optional_fields = array();
+    public $optional_fields = array();
 
     /**
      * The PK.
      * @var int $id
      */
-    var $id;
+    public $id;
 
     /**
      * The first time this grade_object was created.
      * @var int $timecreated
      */
-    var $timecreated;
+    public $timecreated;
 
     /**
      * The last time this grade_object was modified.
      * @var int $timemodified
      */
-    var $timemodified;
+    public $timemodified;
+
+    /**
+     * 0 if visible, 1 always hidden or date not visible until
+     * @var int $hidden
+     */
+    var $hidden = 0;
 
     /**
      * Constructor. Optionally (and by default) attempts to fetch corresponding row from DB.
@@ -65,7 +74,7 @@ class grade_object {
      * @param boolean $fetch Whether to fetch corresponding row from DB or not,
      *        optional fields might not be defined if false used
      */
-    function grade_object($params=NULL, $fetch=true) {
+    public function __construct($params=NULL, $fetch=true) {
         if (!empty($params) and (is_array($params) or is_object($params))) {
             if ($fetch) {
                 if ($data = $this->fetch($params)) {
@@ -89,15 +98,16 @@ class grade_object {
      * If id present (==instance exists in db) fetches data from db.
      * Defaults are used for new instances.
      */
-    function load_optional_fields() {
+    public function load_optional_fields() {
+        global $DB;
         foreach ($this->optional_fields as $field=>$default) {
-            if (array_key_exists($field, $this)) {
+            if (property_exists($this, $field)) {
                 continue;
             }
             if (empty($this->id)) {
                 $this->$field = $default;
             } else {
-                $this->$field = get_field($this->table, $field, 'id', $this->id);
+                $this->$field = $DB->get_field($this->table, $field, array('id', $this->id));
             }
         }
     }
@@ -109,8 +119,8 @@ class grade_object {
      * @param array $params associative arrays varname=>value
      * @return object grade_object instance or false if none found.
      */
-    function fetch($params) {
-        error('Abstract method fetch() not overridden in '.get_class($this));
+    public static function fetch($params) {
+        throw new coding_exception('fetch() method needs to be overridden in each subclass of grade_object');
     }
 
     /**
@@ -118,10 +128,10 @@ class grade_object {
      * @static abstract
      *
      * @param array $params associative arrays varname=>value
-     * @return array array of grade_object insatnces or false if none found.
+     * @return array array of grade_object instances or false if none found.
      */
-    function fetch_all($params) {
-        error('Abstract method fetch_all() not overridden in '.get_class($this));
+    public static function fetch_all($params) {
+        throw new coding_exception('fetch_all() method needs to be overridden in each subclass of grade_object');
     }
 
     /**
@@ -129,11 +139,11 @@ class grade_object {
      * @static final protected
      * @return mixed object instance or false if not found
      */
-    function fetch_helper($table, $classname, $params) {
+    protected static function fetch_helper($table, $classname, $params) {
         if ($instances = grade_object::fetch_all_helper($table, $classname, $params)) {
             if (count($instances) > 1) {
                 // we should not tolerate any errors here - problems might appear later
-                error('Found more than one record in fetch() !');
+                print_error('morethanonerecordinfetch','debug');
             }
             return reset($instances);
         } else {
@@ -146,15 +156,15 @@ class grade_object {
      * @static final protected
      * @return mixed array of object instances or false if not found
      */
-    function fetch_all_helper($table, $classname, $params) {
+    public static function fetch_all_helper($table, $classname, $params) {
         $instance = new $classname();
 
         $classvars = (array)$instance;
         $params    = (array)$params;
 
         $wheresql = array();
+        $newparams = array();
 
-        // remove incorrect params
         foreach ($params as $var=>$value) {
             if (!in_array($var, $instance->required_fields) and !array_key_exists($var, $instance->optional_fields)) {
                 continue;
@@ -162,8 +172,8 @@ class grade_object {
             if (is_null($value)) {
                 $wheresql[] = " $var IS NULL ";
             } else {
-                $value = addslashes($value);
-                $wheresql[] = " $var = '$value' ";
+                $wheresql[] = " $var = ? ";
+                $newparams[] = $value;
             }
         }
 
@@ -173,19 +183,23 @@ class grade_object {
             $wheresql = implode("AND", $wheresql);
         }
 
-        if ($rs = get_recordset_select($table, $wheresql, 'id')) {
+        global $DB;
+        $rs = $DB->get_recordset_select($table, $wheresql, $newparams);
+        //returning false rather than empty array if nothing found
+        if (!$rs->valid()) {
+            $rs->close();
+            return false;
+        }
+
             $result = array();
-            while ($data = rs_fetch_next_record($rs)) {
+        foreach($rs as $data) {
                 $instance = new $classname();
                 grade_object::set_properties($instance, $data);
                 $result[$instance->id] = $instance;
             }
-            rs_close($rs);
-            return $result;
+        $rs->close();
 
-        } else {
-            return false;
-        }
+        return $result;
     }
 
     /**
@@ -193,8 +207,8 @@ class grade_object {
      * @param string $source from where was the object updated (mod/forum, manual, etc.)
      * @return boolean success
      */
-    function update($source=null) {
-        global $USER, $CFG;
+    public function update($source=null) {
+        global $USER, $CFG, $DB;
 
         if (empty($this->id)) {
             debugging('Can not update grade object, no id!');
@@ -203,9 +217,7 @@ class grade_object {
 
         $data = $this->get_record_data();
 
-        if (!update_record($this->table, addslashes_recursive($data))) {
-            return false;
-        }
+        $DB->update_record($this->table, $data);
 
         if (empty($CFG->disablegradehistory)) {
             unset($data->timecreated);
@@ -214,9 +226,10 @@ class grade_object {
             $data->source       = $source;
             $data->timemodified = time();
             $data->loggeduser   = $USER->id;
-            insert_record($this->table.'_history', addslashes_recursive($data));
+            $DB->insert_record($this->table.'_history', $data);
         }
 
+        $this->notify_changed(false);
         return true;
     }
 
@@ -225,8 +238,8 @@ class grade_object {
      * @param string $source from where was the object deleted (mod/forum, manual, etc.)
      * @return boolean success
      */
-    function delete($source=null) {
-        global $USER, $CFG;
+    public function delete($source=null) {
+        global $USER, $CFG, $DB;
 
         if (empty($this->id)) {
             debugging('Can not delete grade object, no id!');
@@ -235,7 +248,7 @@ class grade_object {
 
         $data = $this->get_record_data();
 
-        if (delete_records($this->table, 'id', $this->id)) {
+        if ($DB->delete_records($this->table, array('id'=>$this->id))) {
             if (empty($CFG->disablegradehistory)) {
                 unset($data->id);
                 unset($data->timecreated);
@@ -244,8 +257,9 @@ class grade_object {
                 $data->source       = $source;
                 $data->timemodified = time();
                 $data->loggeduser   = $USER->id;
-                insert_record($this->table.'_history', addslashes_recursive($data));
+                $DB->insert_record($this->table.'_history', $data);
             }
+            $this->notify_changed(true);
             return true;
 
         } else {
@@ -256,9 +270,9 @@ class grade_object {
     /**
      * Returns object with fields and values that are defined in database
      */
-    function get_record_data() {
-        $data = new object();
-        // we need to do this to prevent infinite loops in addslashes_recursive - grade_item -> category ->grade_item
+    public function get_record_data() {
+        $data = new stdClass();
+
         foreach ($this as $var=>$value) {
             if (in_array($var, $this->required_fields) or array_key_exists($var, $this->optional_fields)) {
                 if (is_object($value) or is_array($value)) {
@@ -278,8 +292,8 @@ class grade_object {
      * @param string $source from where was the object inserted (mod/forum, manual, etc.)
      * @return int PK ID if successful, false otherwise
      */
-    function insert($source=null) {
-        global $USER, $CFG;
+    public function insert($source=null) {
+        global $USER, $CFG, $DB;
 
         if (!empty($this->id)) {
             debugging("Grade object already exists!");
@@ -288,10 +302,7 @@ class grade_object {
 
         $data = $this->get_record_data();
 
-        if (!$this->id = insert_record($this->table, addslashes_recursive($data))) {
-            debugging("Could not insert object into db");
-            return false;
-        }
+        $this->id = $DB->insert_record($this->table, $data);
 
         // set all object properties from real db data
         $this->update_from_db();
@@ -305,9 +316,10 @@ class grade_object {
             $data->source       = $source;
             $data->timemodified = time();
             $data->loggeduser   = $USER->id;
-            insert_record($this->table.'_history', addslashes_recursive($data));
+            $DB->insert_record($this->table.'_history', $data);
         }
 
+        $this->notify_changed(false);
         return $this->id;
     }
 
@@ -317,13 +329,13 @@ class grade_object {
      * the object. This is different from the update() function, which acts on the DB record
      * based on the object.
      */
-    function update_from_db() {
+    public function update_from_db() {
         if (empty($this->id)) {
             debugging("The object could not be used in its state to retrieve a matching record from the DB, because its id field is not set.");
             return false;
         }
-
-        if (!$params = get_record($this->table, 'id', $this->id)) {
+        global $DB;
+        if (!$params = $DB->get_record($this->table, array('id' => $this->id))) {
             debugging("Object with this id:{$this->id} does not exist in table:{$this->table}, can not update from db!");
             return false;
         }
@@ -338,7 +350,7 @@ class grade_object {
      * and assigns the value to the corresponding variable in this object.
      * @static final
      */
-    function set_properties(&$instance, $params) {
+    public static function set_properties(&$instance, $params) {
         $params = (array) $params;
         foreach ($params as $var => $value) {
             if (in_array($var, $instance->required_fields) or array_key_exists($var, $instance->optional_fields)) {
@@ -346,5 +358,43 @@ class grade_object {
             }
         }
     }
+
+    /**
+     * Called immediately after the object data has been inserted, updated, or
+     * deleted in the database. Default does nothing, can be overridden to
+     * hook in special behaviour.
+     *
+     * @param bool $deleted
+     */
+    function notify_changed($deleted) {
+    }
+
+    /**
+     * Returns the hidden state of this grade_item
+     * @return boolean hidden state
+     */
+    function is_hidden() {
+        return ($this->hidden == 1 or ($this->hidden != 0 and $this->hidden > time()));
+    }
+
+    /**
+     * Check grade hidden status. Uses data from both grade item and grade.
+     * @return boolean true if hiddenuntil, false if not
+     */
+    function is_hiddenuntil() {
+        return $this->hidden > 1;
+    }
+
+    /**
+     * Check grade item hidden status.
+     * @return int 0 means visible, 1 hidden always, timestamp hidden until
+     */
+    function get_hidden() {
+        return $this->hidden;
+    }
+
+    function set_hidden($hidden, $cascade=false) {
+        $this->hidden = $hidden;
+        $this->update();
+    }
 }
-?>
