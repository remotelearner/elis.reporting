diff --git a/lib/pagelib.php b/lib/pagelib.php
index 5ce1c58..bde9ab4 100644
--- a/lib/pagelib.php
+++ b/lib/pagelib.php
@@ -1,641 +1,1955 @@
-<?php //$Id$
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
 /**
- * This file contains the parent class for moodle pages, page_base, 
- * as well as the page_course subclass.
- * A page is defined by its page type (ie. course, blog, activity) and its page id
- * (courseid, blogid, activity id, etc).
+ * This file contains the moodle_page class. There is normally a single instance
+ * of this class in the $PAGE global variable. This class is a central repository
+ * of information about the page we are building up to send back to the user.
  *
- * @author Jon Papaioannou
- * @version  $Id$
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package pages
+ * @package    core
+ * @subpackage lib
+ * @copyright  1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 
-function page_import_types($path) {
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * $PAGE is a central store of information about the current page we are
+ * generating in response to the user's request.
+ *
+ * It does not do very much itself
+ * except keep track of information, however, it serves as the access point to
+ * some more significant components like $PAGE->theme, $PAGE->requires,
+ * $PAGE->blocks, etc.
+ *
+ * @copyright 2009 Tim Hunt
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ * @since Moodle 2.0
+ *
+ * @property-read string $activityname The type of activity we are in, for example 'forum' or 'quiz'.
+ *      Will be null if this page is not within a module.
+ * @property-read object $activityrecord The row from the activities own database table (for example
+ *      the forum or quiz table) that this page belongs to. Will be null
+ *      if this page is not within a module.
+ * @property-read array $alternativeversions Mime type => object with ->url and ->title.
+ * @property-read blocks_manager $blocks The blocks manager object for this page.
+ * @property-read string $bodyclasses Returns a string to use within the class attribute on the body tag.
+ * @property-read string $button The HTML to go where the Turn editing on button normally goes.
+ * @property-read bool $cacheable Defaults to true. Set to false to stop the page being cached at all.
+ * @property-read array $categories An array of all the categories the page course belongs to,
+ *      starting with the immediately containing category, and working out to
+ *      the top-level category. This may be the empty array if we are in the
+ *      front page course.
+ * @property-read mixed $category The category that the page course belongs to. If there isn't one returns null.
+ * @property-read object $cm The course_module that this page belongs to. Will be null
+ *      if this page is not within a module. This is a full cm object, as loaded
+ *      by get_coursemodule_from_id or get_coursemodule_from_instance,
+ *      so the extra modname and name fields are present.
+ * @property-read object $context The main context to which this page belongs.
+ * @property-read object $course The current course that we are inside - a row from the
+ *      course table. (Also available as $COURSE global.) If we are not inside
+ *      an actual course, this will be the site course.
+ * @property-read string $devicetypeinuse The name of the device type in use
+ * @property-read string $docspath The path to the Moodle docs for this page.
+ * @property-read string $focuscontrol The id of the HTML element to be focused when the page has loaded.
+ * @property-read bool $headerprinted
+ * @property-read string $heading The main heading that should be displayed at the top of the <body>.
+ * @property-read string $headingmenu The menu (or actions) to display in the heading
+ * @property-read array $layout_options Returns arrays with options for layout file.
+ * @property-read navbar $navbar Returns the navbar object used to display the navbar
+ * @property-read global_navigation $navigation Returns the global navigation structure
+ * @property-read xml_container_stack $opencontainers Tracks XHTML tags on this page that have been opened but not closed.
+ *      mainly for internal use by the rendering code.
+ * @property-read string $pagelayout The general type of page this is. For example 'normal', 'popup', 'home'.
+ *      Allows the theme to display things differently, if it wishes to.
+ * @property-read string $pagetype Returns the page type string, should be used as the id for the body tag in the theme.
+ * @property-read int $periodicrefreshdelay The periodic refresh delay to use with meta refresh
+ * @property-read page_requirements_manager $requires Tracks the JavaScript, CSS files, etc. required by this page.
+ * @property-read settings_navigation $settingsnav
+ * @property-read int $state One of the STATE_... constants
+ * @property-read string $subpage The subpage identifier, if any.
+ * @property-read theme_config $theme Returns the initialised theme for this page.
+ * @property-read string $title The title that should go in the <head> section of the HTML of this page.
+ * @property-read moodle_url $url The moodle url object for this page.
+ */
+class moodle_page {
+    /**#@+ Tracks the where we are in the generation of the page. */
+    const STATE_BEFORE_HEADER = 0;
+    const STATE_PRINTING_HEADER = 1;
+    const STATE_IN_BODY = 2;
+    const STATE_DONE = 3;
+    /**#@-*/
+
+/// Field declarations =========================================================
+
+    protected $_state = self::STATE_BEFORE_HEADER;
+
+    protected $_course = null;
+
+    /**
+     * If this page belongs to a module, this is the cm_info module description object.
+     * @var cm_info
+     */
+    protected $_cm = null;
+
+    /**
+     * If $_cm is not null, then this will hold the corresponding row from the
+     * modname table. For example, if $_cm->modname is 'quiz', this will be a
+     * row from the quiz table.
+     */
+    protected $_module = null;
+
+    /**
+     * The context that this page belongs to.
+     */
+    protected $_context = null;
+
+    /**
+     * This holds any categories that $_course belongs to, starting with the
+     * particular category it belongs to, and working out through any parent
+     * categories to the top level. These are loaded progressively, if needed.
+     * There are three states. $_categories = null initially when nothing is
+     * loaded; $_categories = array($id => $cat, $parentid => null) when we have
+     * loaded $_course->category, but not any parents; and a complete array once
+     * everything is loaded.
+     */
+    protected $_categories = null;
+
+    protected $_bodyclasses = array();
+
+    protected $_title = '';
+
+    protected $_heading = '';
+
+    protected $_pagetype = null;
+
+    protected $_pagelayout = 'base';
+
+    /**
+     * List of theme layout options, these are ignored by core.
+     * To be used in individual theme layout files only.
+     * @var array
+     */
+    protected $_layout_options = array();
+
+    protected $_subpage = '';
+
+    protected $_docspath = null;
+
+    /** @var string|null A legacy class that will be added to the body tag */
+    protected $_legacyclass = null;
+
+    protected $_url = null;
+
+    protected $_alternateversions = array();
+
+    protected $_blocks = null;
+
+    protected $_requires = null;
+
+    protected $_blockseditingcap = 'moodle/site:manageblocks';
+
+    protected $_block_actions_done = false;
+
+    protected $_othereditingcaps = array();
+
+    protected $_cacheable = true;
+
+    protected $_focuscontrol = '';
+
+    protected $_button = '';
+
+    protected $_theme = null;
+    /** @var global_navigation Contains the global navigation structure*/
+    protected $_navigation = null;
+    /** @var null|settings_navigation Contains the settings navigation structure*/
+    protected $_settingsnav = null;
+    /** @var null|navbar Contains the navbar structure*/
+    protected $_navbar = null;
+    /** @var string */
+    protected $_headingmenu = null;
+
+    /**
+     * Then the theme is initialised, we save the stack trace, for use in error messages.
+     * @var array stack trace.
+     */
+    protected $_wherethemewasinitialised = null;
+
+    /** @var xhtml_container_stack tracks XHTML tags on this page that have been opened but not closed. */
+    protected $_opencontainers;
+
+    /**
+     * Sets the page to refresh after a given delay (in seconds) using meta refresh
+     * in {@link standard_head_html()} in outputlib.php
+     * If set to null(default) the page is not refreshed
+     * @var int|null
+     */
+    protected $_periodicrefreshdelay = null;
+
+    /**
+     * This is simply to improve backwards compatibility. If old code relies on
+     * a page class that implements print_header, or complex logic in
+     * user_allowed_editing then we stash an instance of that other class here,
+     * and delegate to it in certain situations.
+     */
+    protected $_legacypageobject = null;
+
+    /**
+     * Associative array of browser shortnames (as used by check_browser_version)
+     * and their minimum required versions
+     * @var array
+     */
+    protected $_legacybrowsers = array('MSIE' => 6.0);
+
+    /**
+     * Is set to the name of the device type in use.
+     * This will we worked out when it is first used.
+     *
+     * @var string
+     */
+    protected $_devicetypeinuse = null;
+
+    protected $_https_login_required = false;
+
+    protected $_popup_notification_allowed = true;
+
+/// Magic getter methods =============================================================
+/// Due to the __get magic below, you normally do not call these as $PAGE->magic_get_x
+/// methods, but instead use the $PAGE->x syntax.
+
+    /**
+     * Please do not call this method directly, use the ->state syntax. {@link __get()}.
+     * @return integer one of the STATE_... constants. You should not normally need
+     * to use this in your code. It is intended for internal use by this class
+     * and its friends like print_header, to check that everything is working as
+     * expected. Also accessible as $PAGE->state.
+     */
+    protected function magic_get_state() {
+        return $this->_state;
+    }
+
+    /**
+     * Please do not call this method directly, use the ->headerprinted syntax. {@link __get()}.
+     * @return boolean has the header already been printed?
+     */
+    protected function magic_get_headerprinted() {
+        return $this->_state >= self::STATE_IN_BODY;
+    }
+
+    /**
+     * Please do not call this method directly, use the ->course syntax. {@link __get()}.
+     *
+     * @global object
+     * @return object the current course that we are inside - a row from the
+     * course table. (Also available as $COURSE global.) If we are not inside
+     * an actual course, this will be the site course.
+     */
+    protected function magic_get_course() {
+        global $SITE;
+        if (is_null($this->_course)) {
+            return $SITE;
+        }
+        return $this->_course;
+    }
+
+    /**
+     * Please do not call this method directly, use the ->cm syntax. {@link __get()}.
+     * @return object the course_module that this page belongs to. Will be null
+     * if this page is not within a module. This is a full cm object, as loaded
+     * by get_coursemodule_from_id or get_coursemodule_from_instance,
+     * so the extra modname and name fields are present.
+     * @return cm_info
+     */
+    protected function magic_get_cm() {
+        return $this->_cm;
+    }
+
+    /**
+     * Please do not call this method directly, use the ->activityrecord syntax. {@link __get()}.
+     * @return object the row from the activities own database table (for example
+     * the forum or quiz table) that this page belongs to. Will be null
+     * if this page is not within a module.
+     */
+    protected function magic_get_activityrecord() {
+        if (is_null($this->_module) && !is_null($this->_cm)) {
+            $this->load_activity_record();
+        }
+        return $this->_module;
+    }
+
+    /**
+     * Please do not call this method directly, use the ->activityname syntax. {@link __get()}.
+     * @return string|null the The type of activity we are in, for example 'forum' or 'quiz'.
+     * Will be null if this page is not within a module.
+     */
+    protected function magic_get_activityname() {
+        if (is_null($this->_cm)) {
+            return null;
+        }
+        return $this->_cm->modname;
+    }
+
+    /**
+     * Please do not call this method directly, use the ->category syntax. {@link __get()}.
+     * @return mixed the category that the page course belongs to. If there isn't one
+     * (that is, if this is the front page course) returns null.
+     */
+    protected function magic_get_category() {
+        $this->ensure_category_loaded();
+        if (!empty($this->_categories)) {
+            return reset($this->_categories);
+        } else {
+            return null;
+        }
+    }
+
+    /**
+     * Please do not call this method directly, use the ->categories syntax. {@link __get()}.
+     * @return array an array of all the categories the page course belongs to,
+     * starting with the immediately containing category, and working out to
+     * the top-level category. This may be the empty array if we are in the
+     * front page course.
+     */
+    protected function magic_get_categories() {
+        $this->ensure_categories_loaded();
+        return $this->_categories;
+    }
+
+    /**
+     * Please do not call this method directly, use the ->context syntax. {@link __get()}.
+     * @return object the main context to which this page belongs.
+     */
+    protected function magic_get_context() {
+        if (is_null($this->_context)) {
+            if (CLI_SCRIPT or NO_MOODLE_COOKIES) {
+                // cli scripts work in system context, do not annoy devs with debug info
+                // very few scripts do not use cookies, we can safely use system as default context there
+            } else {
+                debugging('Coding problem: $PAGE->context was not set. You may have forgotten '
+                    .'to call require_login() or $PAGE->set_context(). The page may not display '
+                    .'correctly as a result');
+            }
+            $this->_context = get_context_instance(CONTEXT_SYSTEM);
+        }
+        return $this->_context;
+    }
+
+    /**
+     * Please do not call this method directly, use the ->pagetype syntax. {@link __get()}.
+     * @return string e.g. 'my-index' or 'mod-quiz-attempt'.
+     */
+    protected function magic_get_pagetype() {
     global $CFG;
+        if (is_null($this->_pagetype) || isset($CFG->pagepath)) {
+            $this->initialise_default_pagetype();
+        }
+        return $this->_pagetype;
+    }
 
-    static $types = array();
+    /**
+     * Please do not call this method directly, use the ->pagetype syntax. {@link __get()}.
+     * @return string The id to use on the body tag, uses {@link magic_get_pagetype()}.
+     */
+    protected function magic_get_bodyid() {
+        return 'page-'.$this->pagetype;
+    }
 
-    if(substr($path, -1) != '/') {
-        $path .= '/';
+    /**
+     * Please do not call this method directly, use the ->pagelayout syntax. {@link __get()}.
+     * @return string the general type of page this is. For example 'standard', 'popup', 'home'.
+     *      Allows the theme to display things differently, if it wishes to.
+     */
+    protected function magic_get_pagelayout() {
+        return $this->_pagelayout;
     }
 
-    $path = clean_param($path, PARAM_PATH);
+    /**
+     * Please do not call this method directly, use the ->layout_tions syntax. {@link __get()}.
+     * @return array returns arrys with options for layout file
+     */
+    protected function magic_get_layout_options() {
+        return $this->_layout_options;
+    }
 
-    if(isset($types[$path])) {
-        return $types[$path];
+    /**
+     * Please do not call this method directly, use the ->subpage syntax. {@link __get()}.
+     * @return string|null The subpage identifier, if any.
+     */
+    protected function magic_get_subpage() {
+        return $this->_subpage;
     }
 
-    $file = $CFG->dirroot.'/'.$path.'pagelib.php';
+    /**
+     * Please do not call this method directly, use the ->bodyclasses syntax. {@link __get()}.
+     * @return string the class names to put on the body element in the HTML.
+     */
+    protected function magic_get_bodyclasses() {
+        return implode(' ', array_keys($this->_bodyclasses));
+    }
 
-    if(is_file($file)) {
-        require($file);
-        if(!isset($DEFINEDPAGES)) {
-            error('Imported '.$file.' but found no page classes');
+    /**
+     * Please do not call this method directly, use the ->title syntax. {@link __get()}.
+     * @return string the title that should go in the <head> section of the HTML of this page.
+     */
+    protected function magic_get_title() {
+        return $this->_title;
         }
-        return $types[$path] = $DEFINEDPAGES;
+
+    /**
+     * Please do not call this method directly, use the ->heading syntax. {@link __get()}.
+     * @return string the main heading that should be displayed at the top of the <body>.
+     */
+    protected function magic_get_heading() {
+        return $this->_heading;
     }
 
-    return false;
-}
+    /**
+     * Please do not call this method directly, use the ->heading syntax. {@link __get()}.
+     * @return string The menu (or actions) to display in the heading
+     */
+    protected function magic_get_headingmenu() {
+        return $this->_headingmenu;
+    }
 
-/**
- * Factory function page_create_object(). Called with a numeric ID for a page, it autodetects
- * the page type, constructs the correct object and returns it.
+    /**
+     * Please do not call this method directly, use the ->docspath syntax. {@link __get()}.
+     * @return string the path to the Moodle docs for this page.
  */
+    protected function magic_get_docspath() {
+        if (is_string($this->_docspath)) {
+            return $this->_docspath;
+        } else {
+            return str_replace('-', '/', $this->pagetype);
+        }
+    }
 
-function page_create_instance($instance) {
-    page_id_and_class($id, $class);
-    return page_create_object($id, $instance);
-}
+    /**
+     * Please do not call this method directly, use the ->url syntax. {@link __get()}.
+     * @return moodle_url the clean URL required to load the current page. (You
+     * should normally use this in preference to $ME or $FULLME.)
+     */
+    protected function magic_get_url() {
+        global $FULLME;
+        if (is_null($this->_url)) {
+            debugging('This page did not call $PAGE->set_url(...). Using '.s($FULLME), DEBUG_DEVELOPER);
+            $this->_url = new moodle_url($FULLME);
+            // Make sure the guessed URL cannot lead to dangerous redirects.
+            $this->_url->remove_params('sesskey');
+        }
+        return new moodle_url($this->_url); // Return a clone for safety.
+    }
 
-/**
- * Factory function page_create_object(). Called with a pagetype identifier and possibly with
- * its numeric ID. Returns a fully constructed page_base subclass you can work with.
+    /**
+     * The list of alternate versions of this page.
+     * @return array mime type => object with ->url and ->title.
  */
+    protected function magic_get_alternateversions() {
+        return $this->_alternateversions;
+    }
 
-function page_create_object($type, $id = NULL) {
+    /**
+     * Please do not call this method directly, use the ->blocks syntax. {@link __get()}.
+     * @return blocks_manager the blocks manager object for this page.
+     */
+    protected function magic_get_blocks() {
     global $CFG;
+        if (is_null($this->_blocks)) {
+            if (!empty($CFG->blockmanagerclass)) {
+                $classname = $CFG->blockmanagerclass;
+            } else {
+                $classname = 'block_manager';
+            }
+            $this->_blocks = new $classname($this);
+        }
+        return $this->_blocks;
+    }
 
-    $data = new stdClass;
-    $data->pagetype = $type;
-    $data->pageid   = $id;
+    /**
+     * Please do not call this method directly, use the ->requires syntax. {@link __get()}.
+     * @return page_requirements_manager tracks the JavaScript, CSS files, etc. required by this page.
+     */
+    protected function magic_get_requires() {
+        global $CFG;
+        if (is_null($this->_requires)) {
+            $this->_requires = new page_requirements_manager();
+        }
+        return $this->_requires;
+    }
 
-    $classname = page_map_class($type);
+    /**
+     * Please do not call this method directly, use the ->cacheable syntax. {@link __get()}.
+     * @return boolean can this page be cached by the user's browser.
+     */
+    protected function magic_get_cacheable() {
+        return $this->_cacheable;
+    }
 
-    $object = new $classname;
-    // TODO: subclassing check here
+    /**
+     * Please do not call this method directly, use the ->focuscontrol syntax. {@link __get()}.
+     * @return string the id of the HTML element to be focused when the page has loaded.
+     */
+    protected function magic_get_focuscontrol() {
+        return $this->_focuscontrol;
+    }
 
-    if ($object->get_type() !== $type) {
-        // Somehow somewhere someone made a mistake
-        debugging('Page object\'s type ('. $object->get_type() .') does not match requested type ('. $type .')');
+    /**
+     * Please do not call this method directly, use the ->button syntax. {@link __get()}.
+     * @return string the HTML to go where the Turn editing on button normally goes.
+     */
+    protected function magic_get_button() {
+        return $this->_button;
     }
 
-    $object->init_quick($data);
-    return $object;
-}
+    /**
+     * Please do not call this method directly, use the ->theme syntax. {@link __get()}.
+     * @return theme_config the initialised theme for this page.
+     */
+    protected function magic_get_theme() {
+        if (is_null($this->_theme)) {
+            $this->initialise_theme_and_output();
+        }
+        return $this->_theme;
+    }
 
-/**
- * Function page_map_class() is the way for your code to define its own page subclasses and let Moodle recognize them.
- * Use it to associate the textual identifier of your Page with the actual class name that has to be instantiated.
+    /**
+     * Please do not call this method directly, use the ->devicetypeinuse syntax. {@link __get()}.
+     *
+     * @return string The device type being used.
+     */
+    protected function magic_get_devicetypeinuse() {
+        if (empty($this->_devicetypeinuse)) {
+            $this->_devicetypeinuse = get_user_device_type();
+        }
+        return $this->_devicetypeinuse;
+    }
+
+    /**
+     * Please do not call this method directly, use the ->legacythemeinuse syntax. {@link __get()}.
+     * @deprecated since 2.1
+     * @return bool
  */
+    protected function magic_get_legacythemeinuse() {
+        debugging('$PAGE->legacythemeinuse is a deprecated property - please use $PAGE->devicetypeinuse and check if it is equal to legacy.', DEBUG_DEVELOPER);
+        return ($this->devicetypeinuse == 'legacy');
+    }
 
-function page_map_class($type, $classname = NULL) {
+    /**
+     * Please do not call this method directly use the ->periodicrefreshdelay syntax
+     * {@link __get()}
+     * @return int The periodic refresh delay to use with meta refresh
+     */
+    protected function magic_get_periodicrefreshdelay() {
+        return $this->_periodicrefreshdelay;
+    }
+
+    /**
+     * Please do not call this method directly use the ->opencontainers syntax. {@link __get()}
+     * @return xhtml_container_stack tracks XHTML tags on this page that have been opened but not closed.
+     *      mainly for internal use by the rendering code.
+     */
+    protected function magic_get_opencontainers() {
+        if (is_null($this->_opencontainers)) {
+            $this->_opencontainers = new xhtml_container_stack();
+        }
+        return $this->_opencontainers;
+    }
+
+    /**
+     * Return the navigation object
+     * @return global_navigation
+     */
+    protected function magic_get_navigation() {
+        if ($this->_navigation === null) {
+            $this->_navigation = new global_navigation($this);
+        }
+        return $this->_navigation;
+    }
+
+    /**
+     * Return a navbar object
+     * @return navbar
+     */
+    protected function magic_get_navbar() {
+        if ($this->_navbar === null) {
+            $this->_navbar = new navbar($this);
+        }
+        return $this->_navbar;
+    }
+
+    /**
+     * Returns the settings navigation object
+     * @return settings_navigation
+     */
+    protected function magic_get_settingsnav() {
+        if ($this->_settingsnav === null) {
+            $this->_settingsnav = new settings_navigation($this);
+            $this->_settingsnav->initialise();
+        }
+        return $this->_settingsnav;
+    }
+
+    /**
+     * PHP overloading magic to make the $PAGE->course syntax work by redirecting
+     * it to the corresponding $PAGE->magic_get_course() method if there is one, and
+     * throwing an exception if not.
+     *
+     * @param $name string property name
+     * @return mixed
+     */
+    public function __get($name) {
+        $getmethod = 'magic_get_' . $name;
+        if (method_exists($this, $getmethod)) {
+            return $this->$getmethod();
+        } else {
+            throw new coding_exception('Unknown property ' . $name . ' of $PAGE.');
+        }
+    }
+
+    /**
+     * PHP overloading magic which prevents the $PAGE->context = $context; syntax
+     *
+     * @param $name string property name
+     * @param $name mixed value
+     * @return void, throws exception if field not defined in page class
+     */
+    public function __set($name, $value) {
+        if (method_exists($this, 'set_' . $name)) {
+            throw new coding_exception('Invalid attempt to modify page object', "Use \$PAGE->set_$name() instead.");
+        } else {
+            throw new coding_exception('Invalid attempt to modify page object', "Unknown property $name");
+        }
+    }
+
+/// Other information getting methods ==========================================
+
+    /**
+     * Returns instance of page renderer
+     * @param string $component name such as 'core', 'mod_forum' or 'qtype_multichoice'.
+     * @param string $subtype optional subtype such as 'news' resulting to 'mod_forum_news'
+     * @param string $target one of rendering target constants
+     * @return renderer_base
+     */
+    public function get_renderer($component, $subtype = null, $target = null) {
+        return $this->magic_get_theme()->get_renderer($this, $component, $subtype, $target);
+    }
+
+    /**
+     * Checks to see if there are any items on the navbar object
+     * @return bool true if there are, false if not
+     */
+    public function has_navbar() {
+        if ($this->_navbar === null) {
+            $this->_navbar = new navbar($this);
+        }
+        return $this->_navbar->has_items();
+    }
+
+    /**
+     * @return boolean should the current user see this page in editing mode.
+     * That is, are they allowed to edit this page, and are they currently in
+     * editing mode.
+     */
+    public function user_is_editing() {
+        global $USER;
+        return !empty($USER->editing) && $this->user_allowed_editing();
+    }
+
+    /**
+     * @return boolean does the user have permission to edit blocks on this page.
+     */
+    public function user_can_edit_blocks() {
+        return has_capability($this->_blockseditingcap, $this->_context);
+    }
+
+    /**
+     * @return boolean does the user have permission to see this page in editing mode.
+     */
+    public function user_allowed_editing() {
+        if ($this->_legacypageobject) {
+            return $this->_legacypageobject->user_allowed_editing();
+        }
+        return has_any_capability($this->all_editing_caps(), $this->_context);
+    }
+
+    /**
+     * @return string a description of this page. Normally displayed in the footer in
+     * developer debug mode.
+     */
+    public function debug_summary() {
+        $summary = '';
+        $summary .= 'General type: ' . $this->pagelayout . '. ';
+        if (!during_initial_install()) {
+            $summary .= 'Context ' . print_context_name($this->_context) . ' (context id ' . $this->_context->id . '). ';
+        }
+        $summary .= 'Page type ' . $this->pagetype .  '. ';
+        if ($this->subpage) {
+            'Sub-page ' . $this->subpage .  '. ';
+        }
+        return $summary;
+    }
+
+/// Setter methods =============================================================
+
+    /**
+     * Set the state. The state must be one of that STATE_... constants, and
+     * the state is only allowed to advance one step at a time.
+     * @param integer $state the new state.
+     */
+    public function set_state($state) {
+        if ($state != $this->_state + 1 || $state > self::STATE_DONE) {
+            throw new coding_exception('Invalid state passed to moodle_page::set_state. We are in state ' .
+                    $this->_state . ' and state ' . $state . ' was requested.');
+        }
+
+        if ($state == self::STATE_PRINTING_HEADER) {
+            $this->starting_output();
+        }
+
+        $this->_state = $state;
+    }
+
+    /**
+     * Set the current course. This sets both $PAGE->course and $COURSE. It also
+     * sets the right theme and locale.
+     *
+     * Normally you don't need to call this function yourself, require_login will
+     * call it for you if you pass a $course to it. You can use this function
+     * on pages that do need to call require_login().
+     *
+     * Sets $PAGE->context to the course context, if it is not already set.
+     *
+     * @param object the course to set as the global course.
+     */
+    public function set_course($course) {
+        global $COURSE, $PAGE;
+
+        if (empty($course->id)) {
+            throw new coding_exception('$course passed to moodle_page::set_course does not look like a proper course object.');
+        }
+
+        $this->ensure_theme_not_set();
+
+        if (!empty($this->_course->id) && $this->_course->id != $course->id) {
+            $this->_categories = null;
+        }
+
+        $this->_course = clone($course);
+
+        if ($this === $PAGE) {
+            $COURSE = $this->_course;
+            moodle_setlocale();
+        }
+
+        if (!$this->_context) {
+            $this->set_context(get_context_instance(CONTEXT_COURSE, $this->_course->id));
+        }
+    }
+
+    /**
+     * Set the main context to which this page belongs.
+     * @param object $context a context object, normally obtained with get_context_instance.
+     */
+    public function set_context($context) {
+        if ($context === null) {
+            // extremely ugly hack which sets context to some value in order to prevent warnings,
+            // use only for core error handling!!!!
+            if (!$this->_context) {
+                $this->_context = get_context_instance(CONTEXT_SYSTEM);
+            }
+            return;
+        }
+
+        // ideally we should set context only once
+        if (isset($this->_context)) {
+            if ($context->id == $this->_context->id) {
+                // fine - no change needed
+            } else if ($this->_context->contextlevel == CONTEXT_SYSTEM or $this->_context->contextlevel == CONTEXT_COURSE) {
+                // hmm - not ideal, but it might produce too many warnings due to the design of require_login
+            } else if ($this->_context->contextlevel == CONTEXT_MODULE and $this->_context->id == get_parent_contextid($context)) {
+                // hmm - most probably somebody did require_login() and after that set the block context
+            } else {
+                // we do not want devs to do weird switching of context levels on the fly,
+                // because we might have used the context already such as in text filter in page title
+                debugging('Coding problem: unsupported modification of PAGE->context from '.$this->_context->contextlevel.' to '.$context->contextlevel);
+            }
+        }
+
+        $this->_context = $context;
+    }
+
+    /**
+     * The course module that this page belongs to (if it does belong to one).
+     *
+     * @param stdClass|cm_info $cm a record from course_modules table or cm_info from get_fast_modinfo().
+     * @param stdClass $course
+     * @param stdClass $module
+     * @return void
+     */
+    public function set_cm($cm, $course = null, $module = null) {
+        global $DB;
+
+        if (!isset($cm->id) || !isset($cm->course)) {
+            throw new coding_exception('Invalid $cm parameter for $PAGE object, it has to be instance of cm_info or record from the course_modules table.');
+        }
+
+        if (!$this->_course || $this->_course->id != $cm->course) {
+            if (!$course) {
+                $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+            }
+            if ($course->id != $cm->course) {
+                throw new coding_exception('The course you passed to $PAGE->set_cm does not correspond to the $cm.');
+            }
+            $this->set_course($course);
+        }
+
+        // make sure we have a $cm from get_fast_modinfo as this contains activity access details
+        if (!($cm instanceof cm_info)) {
+            $modinfo = get_fast_modinfo($this->_course);
+            $cm = $modinfo->get_cm($cm->id);
+        }
+        $this->_cm = $cm;
+
+        // unfortunately the context setting is a mess, let's try to work around some common block problems and show some debug messages
+        if (empty($this->_context) or $this->_context->contextlevel != CONTEXT_BLOCK) {
+            $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+            $this->set_context($context);
+        }
+
+        if ($module) {
+            $this->set_activity_record($module);
+        }
+    }
+
+    /**
+     * @param $module a row from the main database table for the module that this
+     * page belongs to. For example, if ->cm is a forum, then you can pass the
+     * corresponding row from the forum table here if you have it (saves a database
+     * query sometimes).
+     */
+    public function set_activity_record($module) {
+        if (is_null($this->_cm)) {
+            throw new coding_exception('You cannot call $PAGE->set_activity_record until after $PAGE->cm has been set.');
+        }
+        if ($module->id != $this->_cm->instance || $module->course != $this->_course->id) {
+            throw new coding_exception('The activity record your are trying to set does not seem to correspond to the cm that has been set.');
+        }
+        $this->_module = $module;
+    }
+
+    /**
+     * @param string $pagetype e.g. 'my-index' or 'mod-quiz-attempt'. Normally
+     * you do not need to set this manually, it is automatically created from the
+     * script name. However, on some pages this is overridden. For example, the
+     * page type for course/view.php includes the course format, for example
+     * 'course-view-weeks'. This gets used as the id attribute on <body> and
+     * also for determining which blocks are displayed.
+     */
+    public function set_pagetype($pagetype) {
+        $this->_pagetype = $pagetype;
+    }
+
+    /**
+     * @param string $pagelayout the page layout this is. For example 'popup', 'home'.
+     * This properly defaults to 'base', so you only need to call this function if
+     * you want something different. The exact range of supported layouts is specified
+     * in the standard theme.
+     */
+    public function set_pagelayout($pagelayout) {
+        /**
+         * Uncomment this to debug theme pagelayout issues like missing blocks.
+         *
+         * if (!empty($this->_wherethemewasinitialised) && $pagelayout != $this->_pagelayout) {
+         *     debugging('Page layout has already been set and cannot be changed.', DEBUG_DEVELOPER);
+         * }
+         */
+        $this->_pagelayout = $pagelayout;
+    }
+
+    /**
+     * If context->id and pagetype are not enough to uniquely identify this page,
+     * then you can set a subpage id as well. For example, the tags page sets
+     * @param string $subpage an arbitrary identifier that, along with context->id
+     *      and pagetype, uniquely identifies this page.
+     */
+    public function set_subpage($subpage) {
+        if (empty($subpage)) {
+            $this->_subpage = '';
+        } else {
+            $this->_subpage = $subpage;
+        }
+    }
+
+    /**
+     * @param string $class add this class name ot the class attribute on the body tag.
+     */
+    public function add_body_class($class) {
+        if ($this->_state > self::STATE_BEFORE_HEADER) {
+            throw new coding_exception('Cannot call moodle_page::add_body_class after output has been started.');
+        }
+        $this->_bodyclasses[$class] = 1;
+    }
+
+    /**
+     * @param array $classes this utility method calls add_body_class for each array element.
+     */
+    public function add_body_classes($classes) {
+        foreach ($classes as $class) {
+            $this->add_body_class($class);
+        }
+    }
+
+    /**
+     * @param string $title the title that should go in the <head> section of the HTML of this page.
+     */
+    public function set_title($title) {
+        $title = format_string($title);
+        $title = str_replace('"', '&quot;', $title);
+        $this->_title = $title;
+    }
+
+    /**
+     * @param string $heading the main heading that should be displayed at the top of the <body>.
+     */
+    public function set_heading($heading) {
+        $this->_heading = format_string($heading);
+    }
+
+    /**
+     * @param string $menu The menu/content to show in the heading
+     */
+    public function set_headingmenu($menu) {
+        $this->_headingmenu = $menu;
+    }
+
+    /**
+     * Set the course category this page belongs to manually. This automatically
+     * sets $PAGE->course to be the site course. You cannot use this method if
+     * you have already set $PAGE->course - in that case, the category must be
+     * the one that the course belongs to. This also automatically sets the
+     * page context to the category context.
+     * @param integer $categoryid The id of the category to set.
+     */
+    public function set_category_by_id($categoryid) {
+        global $SITE, $DB;
+        if (!is_null($this->_course)) {
+            throw new coding_exception('Attempt to manually set the course category when the course has been set. This is not allowed.');
+        }
+        if (is_array($this->_categories)) {
+            throw new coding_exception('Course category has already been set. You are not allowed to change it.');
+        }
+        $this->ensure_theme_not_set();
+        $this->set_course($SITE);
+        $this->load_category($categoryid);
+        $this->set_context(get_context_instance(CONTEXT_COURSECAT, $categoryid));
+    }
+
+    /**
+     * Set a different path to use for the 'Moodle docs for this page' link.
+     * By default, it uses the pagetype, which is normally the same as the
+     * script name. So, for example, for mod/quiz/attempt.php, pagetype is
+     * mod-quiz-attempt, and so docspath is mod/quiz/attempt.
+     * @param string $path the path to use at the end of the moodle docs URL.
+     */
+    public function set_docs_path($path) {
+        $this->_docspath = $path;
+    }
+
+    /**
+     * You should call this method from every page to set the cleaned-up URL
+     * that should be used to return to this page. Used, for example, by the
+     * blocks editing UI to know where to return the user after an action.
+     * For example, course/view.php does:
+     *      $id = optional_param('id', 0, PARAM_INT);
+     *      $PAGE->set_url('/course/view.php', array('id' => $id));
+     * @param moodle_url|string $url URL relative to $CFG->wwwroot or {@link moodle_url} instance
+     * @param array $params parameters to add to the URL
+     */
+    public function set_url($url, array $params = null) {
     global $CFG;
 
-    static $mappings = NULL;
+        if (is_string($url)) {
+            if (strpos($url, 'http') === 0) {
+                // ok
+            } else if (strpos($url, '/') === 0) {
+                // we have to use httpswwwroot here, because of loginhttps pages
+                $url = $CFG->httpswwwroot . $url;
+            } else {
+                throw new coding_exception('Invalid parameter $url, has to be full url or in shortened form starting with /.');
+            }
+        }
     
-    if ($mappings === NULL) {
-        $mappings = array(
-            PAGE_COURSE_VIEW => 'page_course'
-        );
+        $this->_url = new moodle_url($url, $params);
+
+        $fullurl = $this->_url->out_omit_querystring();
+        if (strpos($fullurl, "$CFG->httpswwwroot/") !== 0) {
+            debugging('Most probably incorrect set_page() url argument, it does not match the httpswwwroot!');
     }
+        $shorturl = str_replace("$CFG->httpswwwroot/", '', $fullurl);
 
-    if (!empty($type) && !empty($classname)) {
-        $mappings[$type] = $classname;
+        if (is_null($this->_pagetype)) {
+            $this->initialise_default_pagetype($shorturl);
+        }
+        if (!is_null($this->_legacypageobject)) {
+            $this->_legacypageobject->set_url($url, $params);
+        }
     }
 
-    if (!isset($mappings[$type])) {
-        debugging('Page class mapping requested for unknown type: '.$type);
+    /**
+     * Make sure page URL does not contain the given URL parameter.
+     *
+     * This should not be necessary if the script has called set_url properly.
+     * However, in some situations like the block editing actions; when the URL
+     * has been guessed, it will contain dangerous block-related actions.
+     * Therefore, the blocks code calls this function to clean up such parameters
+     * before doing any redirect.
+     *
+     * @param string $param the name of the parameter to make sure is not in the
+     * page URL.
+     */
+    public function ensure_param_not_in_url($param) {
+        $discard = $this->url; // Make sure $this->url is lazy-loaded;
+        $this->_url->remove_params($param);
     }
 
-    if (empty($classname) && !class_exists($mappings[$type])) {
-        debugging('Page class mapping for id "'.$type.'" exists but class "'.$mappings[$type].'" is not defined');
+    /**
+     * There can be alternate versions of some pages (for example an RSS feed version).
+     * If such other version exist, call this method, and a link to the alternate
+     * version will be included in the <head> of the page.
+     *
+     * @param $title The title to give the alternate version.
+     * @param $url The URL of the alternate version.
+     * @param $mimetype The mime-type of the alternate version.
+     */
+    public function add_alternate_version($title, $url, $mimetype) {
+        if ($this->_state > self::STATE_BEFORE_HEADER) {
+            throw new coding_exception('Cannot call moodle_page::add_alternate_version after output has been started.');
+        }
+        $alt = new stdClass;
+        $alt->title = $title;
+        $alt->url = $url;
+        $this->_alternateversions[$mimetype] = $alt;
     }
 
-    return $mappings[$type];
-}
+    /**
+     * Specify a form control should be focused when the page has loaded.
+     *
+     * @param string $controlid the id of the HTML element to be focused.
+     */
+    public function set_focuscontrol($controlid) {
+        $this->_focuscontrol = $controlid;
+    }
 
-/**
- * Parent class from which all Moodle page classes derive
+    /**
+     * Specify a fragment of HTML that goes where the 'Turn editing on' button normally goes.
  *
- * @author Jon Papaioannou
- * @package pages
- * @todo This parent class is very messy still. Please for the moment ignore it and move on to the derived class page_course to see the comments there.
+     * @param string $html the HTML to display there.
  */
+    public function set_button($html) {
+        $this->_button = $html;
+    }
 
-class page_base {
     /**
-     * The string identifier for the type of page being described.
-     * @var string $type
+     * Set the capability that allows users to edit blocks on this page. Normally
+     * the default of 'moodle/site:manageblocks' is used, but a few pages like
+     * the My Moodle page need to use a different capability like 'moodle/my:manageblocks'.
+     * @param string $capability a capability.
      */
-    var $type           = NULL;
+    public function set_blocks_editing_capability($capability) {
+        $this->_blockseditingcap = $capability;
+    }
 
     /**
-     * The numeric identifier of the page being described.
-     * @var int $id
+     * Some pages let you turn editing on for reasons other than editing blocks.
+     * If that is the case, you can pass other capabilities that let the user
+     * edit this page here.
+     * @param string|array $capability either a capability, or an array of capabilities.
      */
-    var $id             = NULL;
+    public function set_other_editing_capability($capability) {
+        if (is_array($capability)) {
+            $this->_othereditingcaps = array_unique($this->_othereditingcaps + $capability);
+        } else {
+            $this->_othereditingcaps[] = $capability;
+        }
+    }
+
+    /**
+     * @return boolean $cacheable can this page be cached by the user's browser.
+     */
+    public function set_cacheable($cacheable) {
+        $this->_cacheable = $cacheable;
+    }
 
     /**
-     * Class bool to determine if the instance's full initialization has been completed.
-     * @var boolean $full_init_done
+     * Sets the page to periodically refresh
+     *
+     * This function must be called before $OUTPUT->header has been called or
+     * a coding exception will be thrown.
+     *
+     * @param int $delay Sets the delay before refreshing the page, if set to null
+     *                    refresh is cancelled
      */
-    var $full_init_done = false;
+    public function set_periodic_refresh_delay($delay=null) {
+        if ($this->_state > self::STATE_BEFORE_HEADER) {
+            throw new coding_exception('You cannot set a periodic refresh delay after the header has been printed');
+        }
+        if ($delay===null) {
+            $this->_periodicrefreshdelay = null;
+        } else if (is_int($delay)) {
+            $this->_periodicrefreshdelay = $delay;
+        }
+    }
 
     /**
-     * The class attribute that Moodle has to assign to the BODY tag for this page.
-     * @var string $body_class
+     * Force this page to use a particular theme.
+     *
+     * Please use this cautiously. It is only intended to be used by the themes selector admin page.
+     *
+     * @param $themename the name of the theme to use.
      */
-    var $body_class     = NULL;
+    public function force_theme($themename) {
+        $this->ensure_theme_not_set();
+        $this->_theme = theme_config::load($themename);
+    }
 
     /**
-     * The id attribute that Moodle has to assign to the BODY tag for this page.
-     * @var string $body_id
+     * This function indicates that current page requires the https
+     * when $CFG->loginhttps enabled.
+     *
+     * By using this function properly, we can ensure 100% https-ized pages
+     * at our entire discretion (login, forgot_password, change_password)
+     * @return void
      */
-    var $body_id        = NULL;
+    public function https_required() {
+        global $CFG;
 
-/// Class Functions
+        if (!is_null($this->_url)) {
+            throw new coding_exception('https_required() must be used before setting page url!');
+        }
+
+        $this->ensure_theme_not_set();
+
+        $this->_https_login_required = true;
 
-    // CONSTRUCTION
+        if (!empty($CFG->loginhttps)) {
+            $CFG->httpswwwroot = str_replace('http:', 'https:', $CFG->wwwroot);
+        } else {
+            $CFG->httpswwwroot = $CFG->wwwroot;
+        }
+    }
+
+    /**
+     * Makes sure that page previously marked with https_required()
+     * is really using https://, if not it redirects to https://
+     *
+     * @return void (may redirect to https://self)
+     */
+    public function verify_https_required() {
+        global $CFG, $FULLME;
+
+        if (is_null($this->_url)) {
+            throw new coding_exception('verify_https_required() must be called after setting page url!');
+        }
+
+        if (!$this->_https_login_required) {
+            throw new coding_exception('verify_https_required() must be called only after https_required()!');
+        }
+
+        if (empty($CFG->loginhttps)) {
+            // https not required, so stop checking
+            return;
+        }
 
-    // A whole battery of functions to allow standardized-name constructors in all versions of PHP.
-    // The constructor is actually called construct()
-    function page_base() {
-        $this->construct();
+        if (strpos($this->_url, 'https://')) {
+            // detect if incorrect PAGE->set_url() used, it is recommended to use root-relative paths there
+            throw new coding_exception('Invalid page url specified, it must start with https:// for pages that set https_required()!');
     }
 
-    function construct() {
-        page_id_and_class($this->body_id, $this->body_class);
+        if (!empty($CFG->sslproxy)) {
+            // it does not make much sense to use sslproxy and loginhttps at the same time
+            return;
+        }
+
+        // now the real test and redirect!
+        if (strpos($FULLME, 'https:') !== 0) {
+            // this may lead to infinite redirect on misconfigured sites, in that case use $CFG->loginhttps=0; in /config.php
+            redirect($this->_url);
+        }
+    }
+
+/// Initialisation methods =====================================================
+/// These set various things up in a default way.
+
+    /**
+     * This method is called when the page first moves out of the STATE_BEFORE_HEADER
+     * state. This is our last change to initialise things.
+     */
+    protected function starting_output() {
+        global $CFG;
+
+        if (!during_initial_install()) {
+            $this->blocks->load_blocks();
+            if (empty($this->_block_actions_done)) {
+                $this->_block_actions_done = true;
+                if ($this->blocks->process_url_actions($this)) {
+                    redirect($this->url->out(false));
+                }
+            }
+            $this->blocks->create_all_block_instances();
     }
 
-    // USER-RELATED THINGS
+        // If maintenance mode is on, change the page header.
+        if (!empty($CFG->maintenance_enabled)) {
+            $this->set_button('<a href="' . $CFG->wwwroot . '/' . $CFG->admin .
+                    '/settings.php?section=maintenancemode">' . get_string('maintenancemode', 'admin') .
+                    '</a> ' . $this->button);
 
-    // By default, no user is editing anything and none CAN edit anything. Developers
-    // will have to override these settings to let Moodle know when it should grant
-    // editing rights to the user viewing the page.
-    function user_allowed_editing() {
-        trigger_error('Page class does not implement method <strong>user_allowed_editing()</strong>', E_USER_WARNING);
-        return false;
+            $title = $this->title;
+            if ($title) {
+                $title .= ' - ';
     }
-    function user_is_editing() {
-        trigger_error('Page class does not implement method <strong>user_is_editing()</strong>', E_USER_WARNING);
-        return false;
+            $this->set_title($title . get_string('maintenancemode', 'admin'));
+        } else {
+            // Show the messaging popup if there are messages
+            message_popup_window();
     }
 
-    // HTML OUTPUT SECTION
-
-    // We have absolutely no idea what derived pages are all about
-    function print_header($title, $morenavlinks=NULL) {
-        trigger_error('Page class does not implement method <strong>print_header()</strong>', E_USER_WARNING);
-        return;
+        $this->initialise_standard_body_classes();
     }
 
-    // BLOCKS RELATED SECTION
+    /**
+     * Method for use by Moodle core to set up the theme. Do not
+     * use this in your own code.
+     *
+     * Make sure the right theme for this page is loaded. Tell our
+     * blocks_manager about the theme block regions, and then, if
+     * we are $PAGE, set up the global $OUTPUT.
+     */
+    public function initialise_theme_and_output() {
+        global $OUTPUT, $PAGE, $SITE;
 
-    // By default, pages don't have any blocks. Override this in your derived class if you need blocks.
-    function blocks_get_positions() {
-        return array();
+        if (!empty($this->_wherethemewasinitialised)) {
+            return;
     }
 
-    // Thus there is no default block position. If you override the above you should override this one too.
-    // Because this makes sense only if blocks_get_positions() is overridden and because these two should
-    // be overridden as a group or not at all, this one issues a warning. The sneaky part is that this warning
-    // will only be seen if you override blocks_get_positions() but NOT blocks_default_position().
-    function blocks_default_position() {
-        trigger_error('Page class does not implement method <strong>blocks_default_position()</strong>', E_USER_WARNING);
-        return NULL;
+        if (!during_initial_install()) {
+            // detect PAGE->context mess
+            $this->magic_get_context();
     }
 
-    // If you don't override this, newly constructed pages of this kind won't have any blocks.
-    function blocks_get_default() {
-        return '';
+        if (!$this->_course && !during_initial_install()) {
+            $this->set_course($SITE);
     }
 
-    // If you don't override this, your blocks will not be able to change positions
-    function blocks_move_position(&$instance, $move) {
-        return $instance->position;
+        if (is_null($this->_theme)) {
+            $themename = $this->resolve_theme();
+            $this->_theme = theme_config::load($themename);
+            $this->_layout_options = $this->_theme->pagelayout_options($this->pagelayout);
     }
 
-    // SELF-REPORTING SECTION
+        $this->_theme->setup_blocks($this->pagelayout, $this->blocks);
 
-    // Derived classes HAVE to define their "home url"
-    function url_get_path() {
-        trigger_error('Page class does not implement method <strong>url_get_path()</strong>', E_USER_WARNING);
-        return NULL;
+        if ($this === $PAGE) {
+            $OUTPUT = $this->get_renderer('core');
     }
 
-    // It's not always required to pass any arguments to the home url, so this doesn't trigger any errors (sensible default)
-    function url_get_parameters() {
-        return array();
+        $this->_wherethemewasinitialised = debug_backtrace();
     }
 
-    // This should actually NEVER be overridden unless you have GOOD reason. Works fine as it is.
-    function url_get_full($extraparams = array()) {
-        $path = $this->url_get_path();
-        if(empty($path)) {
-            return NULL;
-        }
+    /**
+     * Work out the theme this page should use.
+     *
+     * This depends on numerous $CFG settings, and the properties of this page.
+     *
+     * @return string the name of the theme that should be used on this page.
+     */
+    protected function resolve_theme() {
+        global $DB, $CFG, $USER, $SESSION;
 
-        $params = $this->url_get_parameters();
-        if (!empty($params)) {
-            $params = array_merge($params, $extraparams);
+        if (empty($CFG->themeorder)) {
+            $themeorder = array('course', 'category', 'session', 'user', 'userset', 'site');
         } else {
-            $params = $extraparams;
+            $themeorder = $CFG->themeorder;
+            // Just in case, make sure we always use the site theme if nothing else matched.
+            $themeorder[] = 'site';
         }
 
-        if(empty($params)) {
-            return $path;
-        }
-        
-        $first = true;
 
-        foreach($params as $var => $value) {
-            $path .= $first? '?' : '&amp;';
-            $path .= $var .'='. urlencode($value);
-            $first = false;
+        $mnetpeertheme = '';
+        if (isloggedin() and isset($CFG->mnet_localhost_id) and $USER->mnethostid != $CFG->mnet_localhost_id) {
+            require_once($CFG->dirroot.'/mnet/peer.php');
+            $mnetpeer = new mnet_peer();
+            $mnetpeer->set_id($USER->mnethostid);
+            if ($mnetpeer->force_theme == 1 && $mnetpeer->theme != '') {
+                $mnetpeertheme = $mnetpeer->theme;
         }
-
-        return $path;
     }
 
-    // This forces implementers to actually hardwire their page identification constant in the class.
-    // Good thing, if you ask me. That way we can later auto-detect "installed" page types by querying
-    // the classes themselves in the future.
-    function get_type() {
-        trigger_error('Page class does not implement method <strong>get_type()</strong>', E_USER_ERROR);
-        return NULL;
+        foreach ($themeorder as $themetype) {
+            switch ($themetype) {
+                case 'course':
+                    if (!empty($CFG->allowcoursethemes) && !empty($this->_course->theme) && $this->devicetypeinuse == 'default') {
+                        return $this->_course->theme;
     }
 
-    // Simple stuff, do not override this.
-    function get_id() {
-        return $this->id;
+                case 'category':
+                    if (!empty($CFG->allowcategorythemes) && $this->devicetypeinuse == 'default') {
+                        $categories = $this->categories;
+                        foreach ($categories as $category) {
+                            if (!empty($category->theme)) {
+                                return $category->theme;
+                            }
+                        }
     }
 
-    // "Sensible default" case here. Take it from the body id.
-    function get_format_name() {
-        return $this->body_id;
+                case 'session':
+                    if (!empty($SESSION->theme)) {
+                        return $SESSION->theme;
     }
 
-    // Returns $this->body_class
-    function get_body_class() {
-        return $this->body_class;
+                case 'user':
+                    if (!empty($CFG->allowuserthemes) && !empty($USER->theme) && $this->devicetypeinuse == 'default') {
+                        if ($mnetpeertheme) {
+                            return $mnetpeertheme;
+                        } else {
+                            return $USER->theme;
+                        }
     }
 
-    // Returns $this->body_id
-    function get_body_id() {
-        return $this->body_id;
+                case 'userset':
+                    if (!file_exists($CFG->dirroot . '/elis/program/lib/setup.php')) {
+                        continue;
     }
+                    require_once($CFG->dirroot . '/elis/program/lib/setup.php');
+                    require_once elispm::lib('data/userset.class.php');
 
-    // Initialize the data members of the parent class
-    function init_quick($data) {
-        $this->type = $data->pagetype;
-        $this->id   = $data->pageid;
+                    $dbman = $DB->get_manager();
+                    if (!$dbman->table_exists(new XMLDBTable('crlm_user'))) {
+                        continue;
     }
 
-    function init_full() {
-        $this->full_init_done = true;
+                    //get userid
+                    $userid = pm_get_crlmuserid($USER->id);
+                    if (empty($userid)) {
+                        continue;
     }
 
+                    //get all assigned clusters
+                    $select = 'SELECT DISTINCT clst.id ';
+                    $tables = "FROM {".clusterassignment::TABLE."} uclst ";
+                    $join   = "JOIN {".userset::TABLE."} clst
+                               ON uclst.clusterid = clst.id ";
+                    $where  = "WHERE uclst.userid = :userid";
+                    $params = array('userid'=> $userid);
 
-    // is this  page always editable, regardless of anything else?
-    function edit_always() {
-        return (has_capability('moodle/site:manageblocks', get_context_instance(CONTEXT_SYSTEM)) &&  defined('ADMIN_STICKYBLOCKS'));
-    }
-}
+                    $sql = $select . $tables . $join . $where;
 
+                    $highest_priority_theme = null;
+                    $highest_priority = 0;
 
-/**
- * Class that models the behavior of a moodle course
- *
- * @author Jon Papaioannou
- * @package pages
- */
+                    if ($usercluster_records = $DB->get_recordset_sql($sql, $params)) {
 
-class page_course extends page_base {
+                        //retrieve the cluster context level
+                        $cluster_context_level = context_level_base::get_custom_context_level('cluster', 'elis_program');
 
-    // Any data we might need to store specifically about ourself should be declared here.
-    // After init_full() is called for the first time, ALL of these variables should be
-    // initialized correctly and ready for use.
-    var $courserecord = NULL;
+                        if ($cluster_context_level) {
+                            foreach($usercluster_records as $usercluster_record) {
+                                $context_instance = get_context_instance($cluster_context_level, $usercluster_record->id);
 
-    // Do any validation of the officially recognized bits of the data and forward to parent.
-    // Do NOT load up "expensive" resouces (e.g. SQL data) here!
-    function init_quick($data) {
-        if(empty($data->pageid) && !defined('ADMIN_STICKYBLOCKS')) {
-            error('Cannot quickly initialize page: empty course id');
-        }
-        parent::init_quick($data);
+                                //get the userset object
+                                $userset = new userset($usercluster_record->id);
+                                //use field data magic to get their values
+                                // ELIS-3189
+                                if (!isset($userset->field__elis_userset_theme) ||
+                                    !isset($userset->field__elis_userset_themepriority)) {
+                                    continue;
     }
+                                $userset_theme = $userset->field__elis_userset_theme;
+                                $userset_themepriority = (int)$userset->field__elis_userset_themepriority;
 
-    // Here you should load up all heavy-duty data for your page. Basically everything that
-    // does not NEED to be loaded for the class to make basic decisions should NOT be loaded
-    // in init_quick() and instead deferred here. Of course this function had better recognize
-    // $this->full_init_done to prevent wasteful multiple-time data retrieval.
-    function init_full() {
-        global $COURSE;
-        if($this->full_init_done) {
-            return;
+                                if (!empty($userset_theme) && file_exists($CFG->dirroot . '/theme/' . $userset_theme)
+                                       && $userset_themepriority !== null) {
+                                    //update chosen theme as appropriate
+                                    if ($userset_themepriority > $highest_priority || empty($highest_priority_theme)) {
+                                        $highest_priority_theme = $userset_theme;
+                                        $highest_priority = $userset_themepriority;
         }
-        if (empty($this->id)) {
-            $this->id = 0; // avoid db errors
         }
-        if ($this->id == $COURSE->id) {
-            $this->courserecord = $COURSE;
-        } else {
-            $this->courserecord = get_record('course', 'id', $this->id);
         }
-
-        if(empty($this->courserecord) && !defined('ADMIN_STICKYBLOCKS')) {
-            error('Cannot fully initialize page: invalid course id '. $this->id);
         }
 
-        $this->context = get_context_instance(CONTEXT_COURSE, $this->id);
-
-        // Preload - ensures that the context cache is populated
-        // in one DB query...
-        $this->childcontexts = get_child_contexts($this->context);
+                    }
 
-        // Mark we're done
-        $this->full_init_done = true;
+                    if (!empty($highest_priority_theme)) {
+                        $theme = $highest_priority_theme;
+                        return $theme;
     }
 
-    // USER-RELATED THINGS
+                case 'site':
+                    if ($mnetpeertheme) {
+                        return $mnetpeertheme;
+                    }
+                    // First try for the device the user is using.
+                    $devicetheme = get_selected_theme_for_device_type($this->devicetypeinuse);
+                    if (!empty($devicetheme)) {
+                        return $devicetheme;
+                    }
+                    // Next try for the default device (as a fallback)
+                    $devicetheme = get_selected_theme_for_device_type('default');
+                    if (!empty($devicetheme)) {
+                        return $devicetheme;
+                    }
+                    // The default device theme isn't set up - use the overall default theme.
+                    return theme_config::DEFAULT_THEME;
+            }
+        }
+    }
 
-    // Can user edit the course page or "sticky page"?
-    // This is also about editting of blocks BUT mainly activities in course page layout, see
-    // update_course_icon() has very similar checks - it must use the same capabilities
-    //
-    // this is a _very_ expensive check - so cache it during execution
-    //
-    function user_allowed_editing() {
 
-        $this->init_full();
+    /**
+     * Sets ->pagetype from the script name. For example, if the script that was
+     * run is mod/quiz/view.php, ->pagetype will be set to 'mod-quiz-view'.
+     * @param string $script the path to the script that should be used to
+     * initialise ->pagetype. If not passed the $SCRIPT global will be used.
+     * If legacy code has set $CFG->pagepath that will be used instead, and a
+     * developer warning issued.
+     */
+    protected function initialise_default_pagetype($script = null) {
+        global $CFG, $SCRIPT;
 
-        if (isset($this->_user_allowed_editing)) {
-            return $this->_user_allowed_editing;
+        if (isset($CFG->pagepath)) {
+            debugging('Some code appears to have set $CFG->pagepath. That was a horrible deprecated thing. ' .
+                    'Don\'t do it! Try calling $PAGE->set_pagetype() instead.');
+            $script = $CFG->pagepath;
+            unset($CFG->pagepath);
         }
 
-        if (has_capability('moodle/site:manageblocks', get_context_instance(CONTEXT_SYSTEM))
-            && defined('ADMIN_STICKYBLOCKS')) {
-            $this->_user_allowed_editing = true;
-            return true;
+        if (is_null($script)) {
+            $script = ltrim($SCRIPT, '/');
+            $len = strlen($CFG->admin);
+            if (substr($script, 0, $len) == $CFG->admin) {
+                $script = 'admin' . substr($script, $len);
         }
-        if (has_capability('moodle/course:manageactivities', $this->context)) {
-            $this->_user_allowed_editing = true;
-            return true;
         }
 
-        // Exhaustive (and expensive!) checks to see if the user
-        // has editing abilities to a specific module/block/group...
-        // This code would benefit from the ability to check specifically
-        // for overrides.
-        foreach ($this->childcontexts as $cc) {
-            if (($cc->contextlevel == CONTEXT_MODULE &&
-                 has_capability('moodle/course:manageactivities', $cc)) ||
-                ($cc->contextlevel == CONTEXT_BLOCK &&
-                 has_capability('moodle/site:manageblocks', $cc))) {
-                $this->_user_allowed_editing = true;
-                return true;
+        $path = str_replace('.php', '', $script);
+        if (substr($path, -1) == '/') {
+            $path .= 'index';
             }
+
+        if (empty($path) || $path == 'index') {
+            $this->_pagetype = 'site-index';
+        } else {
+            $this->_pagetype = str_replace('/', '-', $path);
         }
     }
 
-    // Is the user actually editing this course page or "sticky page" right now?
-    function user_is_editing() {
-        if (has_capability('moodle/site:manageblocks', get_context_instance(CONTEXT_SYSTEM)) && defined('ADMIN_STICKYBLOCKS')) {
-            //always in edit mode on sticky page
-            return true;
+    protected function initialise_standard_body_classes() {
+        global $CFG, $USER;
+
+        $pagetype = $this->pagetype;
+        if ($pagetype == 'site-index') {
+            $this->_legacyclass = 'course';
+        } else if (substr($pagetype, 0, 6) == 'admin-') {
+            $this->_legacyclass = 'admin';
         }
-        return isediting($this->id);
+        $this->add_body_class($this->_legacyclass);
+
+        $pathbits = explode('-', trim($pagetype));
+        for ($i=1;$i<count($pathbits);$i++) {
+            $this->add_body_class('path-'.join('-',array_slice($pathbits, 0, $i)));
     }
 
-    // HTML OUTPUT SECTION
+        $this->add_body_classes(get_browser_version_classes());
+        $this->add_body_class('dir-' . get_string('thisdirection', 'langconfig'));
+        $this->add_body_class('lang-' . current_language());
+        $this->add_body_class('yui-skin-sam'); // Make YUI happy, if it is used.
+        $this->add_body_class('yui3-skin-sam'); // Make YUI3 happy, if it is used.
+        $this->add_body_class($this->url_to_class_name($CFG->wwwroot));
 
-    // This function prints out the common part of the page's header.
-    // You should NEVER print the header "by hand" in other code.
-    function print_header($title, $morenavlinks=NULL, $meta='', $bodytags='', $extrabuttons='') {
-        global $USER, $CFG;
+        $this->add_body_class('pagelayout-' . $this->_pagelayout); // extra class describing current page layout
 
-        $this->init_full();
-        $replacements = array(
-            '%fullname%' => $this->courserecord->fullname
-        );
-        foreach($replacements as $search => $replace) {
-            $title = str_replace($search, $replace, $title);
+        if (!during_initial_install()) {
+            $this->add_body_class('course-' . $this->_course->id);
+            $this->add_body_class('context-' . $this->_context->id);
         }
     
-        $navlinks = array();
+        if (!empty($this->_cm)) {
+            $this->add_body_class('cmid-' . $this->_cm->id);
+        }
         
-        if(!empty($morenavlinks)) {
-            $navlinks = array_merge($navlinks, $morenavlinks);
+        if (!empty($CFG->allowcategorythemes)) {
+            $this->ensure_category_loaded();
+            foreach ($this->_categories as $catid => $notused) {
+                $this->add_body_class('category-' . $catid);
+            }
+        } else {
+            $catid = 0;
+            if (is_array($this->_categories)) {
+                $catids = array_keys($this->_categories);
+                $catid = reset($catids);
+            } else if (!empty($this->_course->category)) {
+                $catid = $this->_course->category;
+            }
+            if ($catid) {
+                $this->add_body_class('category-' . $catid);
+            }
         }
 
-        $navigation = build_navigation($navlinks);
+        if (!isloggedin()) {
+            $this->add_body_class('notloggedin');
+        }
 
-        // The "Editing On" button will be appearing only in the "main" course screen
-        // (i.e., no breadcrumbs other than the default one added inside this function)
-        $buttons = switchroles_form($this->courserecord->id);
-        if ($this->user_allowed_editing()) {
-            $buttons .= update_course_icon($this->courserecord->id );
+        if (!empty($USER->editing)) {
+            $this->add_body_class('editing');
+            if (optional_param('bui_moveid', false, PARAM_INT)) {
+               $this->add_body_class('blocks-moving');
+        }
         }
-        $buttons = empty($morenavlinks) ? $buttons : '&nbsp;';
 
-        // Add any extra buttons requested (by the resource module, for example)
-        if ($extrabuttons != '') {
-            $buttons = ($buttons == '&nbsp;') ? $extrabuttons : $buttons.$extrabuttons;
+        if (!empty($CFG->blocksdrag)) {
+            $this->add_body_class('drag');
         }
 
-        print_header($title, $this->courserecord->fullname, $navigation,
-                     '', $meta, true, $buttons, user_login_string($this->courserecord, $USER), false, $bodytags);
+        if ($this->_devicetypeinuse != 'default') {
+            $this->add_body_class($this->_devicetypeinuse . 'theme');
+        }
     }
 
-    // SELF-REPORTING SECTION
+    protected function load_activity_record() {
+        global $DB;
+        if (is_null($this->_cm)) {
+            return;
+        }
+        $this->_module = $DB->get_record($this->_cm->modname, array('id' => $this->_cm->instance));
+    }
 
-    // This is hardwired here so the factory function page_create_object() can be sure there was no mistake.
-    // Also, it doubles as a way to let others inquire about our type.
-    function get_type() {
-        return PAGE_COURSE_VIEW;
+    protected function ensure_category_loaded() {
+        if (is_array($this->_categories)) {
+            return; // Already done.
+        }
+        if (is_null($this->_course)) {
+            throw new coding_exception('Attempt to get the course category for this page before the course was set.');
+        }
+        if ($this->_course->category == 0) {
+            $this->_categories = array();
+        } else {
+            $this->load_category($this->_course->category);
+        }
     }
 
-    // This is like the "category" of a page of this "type". For example, if the type is PAGE_COURSE_VIEW
-    // the format_name is the actual name of the course format. If the type were PAGE_ACTIVITY_VIEW, then
-    // the format_name might be that activity's name etc.
-    function get_format_name() {
-        $this->init_full();
-        if (defined('ADMIN_STICKYBLOCKS')) {
-            return PAGE_COURSE_VIEW;
+    protected function load_category($categoryid) {
+        global $DB;
+        $category = $DB->get_record('course_categories', array('id' => $categoryid));
+        if (!$category) {
+            throw new moodle_exception('unknowncategory');
         }
-        if($this->id == SITEID) {
-            return parent::get_format_name();
+        $this->_categories[$category->id] = $category;
+        $parentcategoryids = explode('/', trim($category->path, '/'));
+        array_pop($parentcategoryids);
+        foreach (array_reverse($parentcategoryids) as $catid) {
+            $this->_categories[$catid] = null;
         }
-        // This needs to reflect the path hierarchy under Moodle root.
-        return 'course-view-'.$this->courserecord->format;
     }
 
-    // This should return a fully qualified path to the URL which is responsible for displaying us.
-    function url_get_path() {
-        global $CFG;
-        if (defined('ADMIN_STICKYBLOCKS')) {
-            return $CFG->wwwroot.'/'.$CFG->admin.'/stickyblocks.php';
+    protected function ensure_categories_loaded() {
+        global $DB;
+        $this->ensure_category_loaded();
+        if (!is_null(end($this->_categories))) {
+            return; // Already done.
         }
-        if($this->id == SITEID) {
-            return $CFG->wwwroot .'/index.php';
+        $idstoload = array_keys($this->_categories);
+        array_shift($idstoload);
+        $categories = $DB->get_records_list('course_categories', 'id', $idstoload);
+        foreach ($idstoload as $catid) {
+            $this->_categories[$catid] = $categories[$catid];
         }
-        else {
-            return $CFG->wwwroot .'/course/view.php';
+    }
+
+    protected function ensure_theme_not_set() {
+        if (!is_null($this->_theme)) {
+            throw new coding_exception('The theme has already been set up for this page ready for output. ' .
+                    'Therefore, you can no longer change the theme, or anything that might affect what ' .
+                    'the current theme is, for example, the course.',
+                    'Stack trace when the theme was set up: ' . format_backtrace($this->_wherethemewasinitialised));
         }
     }
 
-    // This should return an associative array of any GET/POST parameters that are needed by the URL
-    // which displays us to make it work. If none are needed, return an empty array.
-    function url_get_parameters() {
-        if (defined('ADMIN_STICKYBLOCKS')) {
-            return array('pt' => ADMIN_STICKYBLOCKS);
+    protected function url_to_class_name($url) {
+        $bits = parse_url($url);
+        $class = str_replace('.', '-', $bits['host']);
+        if (!empty($bits['port'])) {
+            $class .= '--' . $bits['port'];
+        }
+        if (!empty($bits['path'])) {
+            $path = trim($bits['path'], '/');
+            if ($path) {
+                $class .= '--' . str_replace('/', '-', $path);
+            }
+        }
+        return $class;
+    }
+
+    protected function all_editing_caps() {
+        $caps = $this->_othereditingcaps;
+        $caps[] = $this->_blockseditingcap;
+        return $caps;
         }
-        if($this->id == SITEID) {
-            return array();
+
+/// Deprecated fields and methods for backwards compatibility ==================
+
+    /**
+     * @deprecated since Moodle 2.0 - use $PAGE->pagetype instead.
+     * @return string page type.
+     */
+    public function get_type() {
+        debugging('Call to deprecated method moodle_page::get_type. Please use $PAGE->pagetype instead.');
+        return $this->get_pagetype();
         }
-        else {
-            return array('id' => $this->id);
+
+    /**
+     * @deprecated since Moodle 2.0 - use $PAGE->pagetype instead.
+     * @return string this is what page_id_and_class used to return via the $getclass parameter.
+     */
+    function get_format_name() {
+        return $this->get_pagetype();
         }
+
+    /**
+     * @deprecated since Moodle 2.0 - use $PAGE->course instead.
+     * @return object course.
+     */
+    public function get_courserecord() {
+        debugging('Call to deprecated method moodle_page::get_courserecord. Please use $PAGE->course instead.');
+        return $this->get_course();
     }
 
-    // BLOCKS RELATED SECTION
+    /**
+     * @deprecated since Moodle 2.0
+     * @return string this is what page_id_and_class used to return via the $getclass parameter.
+     */
+    public function get_legacyclass() {
+        if (is_null($this->_legacyclass)) {
+            $this->initialise_standard_body_classes();
+        }
+        debugging('Call to deprecated method moodle_page::get_legacyclass.');
+        return $this->_legacyclass;
+    }
 
-    // Which are the positions in this page which support blocks? Return an array containing their identifiers.
-    // BE CAREFUL, ORDER DOES MATTER! In textual representations, lists of blocks in a page use the ':' character
-    // to delimit different positions in the page. The part before the first ':' in such a representation will map
-    // directly to the first item of the array you return here, the second to the next one and so on. This way,
-    // you can add more positions in the future without interfering with legacy textual representations.
+    /**
+     * @deprecated since Moodle 2.0 - use $PAGE->blocks->get_regions() instead
+     * @return string the places on this page where blocks can go.
+     */
     function blocks_get_positions() {
-        return array(BLOCK_POS_LEFT, BLOCK_POS_RIGHT);
+        debugging('Call to deprecated method moodle_page::blocks_get_positions. Use $PAGE->blocks->get_regions() instead.');
+        return $this->blocks->get_regions();
     }
 
-    // When a new block is created in this page, which position should it go to?
+    /**
+     * @deprecated since Moodle 2.0 - use $PAGE->blocks->get_default_region() instead
+     * @return string the default place for blocks on this page.
+     */
     function blocks_default_position() {
-        return BLOCK_POS_RIGHT;
+        debugging('Call to deprecated method moodle_page::blocks_default_position. Use $PAGE->blocks->get_default_region() instead.');
+        return $this->blocks->get_default_region();
     }
 
-    // When we are creating a new page, use the data at your disposal to provide a textual representation of the
-    // blocks that are going to get added to this new page. Delimit block names with commas (,) and use double
-    // colons (:) to delimit between block positions in the page. See blocks_get_positions() for additional info.
+    /**
+     * @deprecated since Moodle 2.0 - no longer used.
+     */
     function blocks_get_default() {
-        global $CFG;
+        debugging('Call to deprecated method moodle_page::blocks_get_default. This method has no function any more.');
+    }
         
-        $this->init_full();
+    /**
+     * @deprecated since Moodle 2.0 - no longer used.
+     */
+    function blocks_move_position(&$instance, $move) {
+        debugging('Call to deprecated method moodle_page::blocks_move_position. This method has no function any more.');
+    }
+
+    /**
+     * @deprecated since Moodle 2.0 - use $this->url->params() instead.
+     * @return array URL parameters for this page.
+     */
+    function url_get_parameters() {
+        debugging('Call to deprecated method moodle_page::url_get_parameters. Use $this->url->params() instead.');
+        return $this->url->params();
+    }
+
+    /**
+     * @deprecated since Moodle 2.0 - use $this->url->params() instead.
+     * @return string URL for this page without parameters.
+     */
+    function url_get_path() {
+        debugging('Call to deprecated method moodle_page::url_get_path. Use $this->url->out() instead.');
+        return $this->url->out();
+    }
 
-        if($this->id == SITEID) {
-        // Is it the site?
-            if (!empty($CFG->defaultblocks_site)) {
-                $blocknames = $CFG->defaultblocks_site;
+    /**
+     * @deprecated since Moodle 2.0 - use $this->url->out() instead.
+     * @return string full URL for this page.
+     */
+    function url_get_full($extraparams = array()) {
+        debugging('Call to deprecated method moodle_page::url_get_full. Use $this->url->out() instead.');
+        return $this->url->out(true, $extraparams);
             }
-            /// Failsafe - in case nothing was defined.
-            else {
-                $blocknames = 'site_main_menu,admin_tree:course_summary,calendar_month';
+
+    /**
+     * @deprecated since Moodle 2.0 - just a backwards compatibility hook.
+     */
+    function set_legacy_page_object($pageobject) {
+        return $this->_legacypageobject = $pageobject;
             }
+
+    /**
+     * @deprecated since Moodle 2.0 - page objects should no longer be doing print_header.
+     * @param $_,...
+     */
+    function print_header($_) {
+        if (is_null($this->_legacypageobject)) {
+            throw new coding_exception('You have called print_header on $PAGE when there is not a legacy page class present.');
         }
-        // It's a normal course, so do it according to the course format
-        else {
-            $pageformat = $this->courserecord->format;
-            if (!empty($CFG->{'defaultblocks_'. $pageformat})) {
-                $blocknames = $CFG->{'defaultblocks_'. $pageformat};
+        debugging('You should not longer be doing print_header via a page class.', DEBUG_DEVELOPER);
+        $args = func_get_args();
+        call_user_func_array(array($this->_legacypageobject, 'print_header'), $args);
             }
-            else {
-                $format_config = $CFG->dirroot.'/course/format/'.$pageformat.'/config.php';
-                if (@is_file($format_config) && is_readable($format_config)) {
-                    require($format_config);
+
+    /**
+     * @deprecated since Moodle 2.0
+     * @return the 'page id'. This concept no longer exists.
+     */
+    function get_id() {
+        debugging('Call to deprecated method moodle_page::get_id(). It should not be necessary any more.', DEBUG_DEVELOPER);
+        if (!is_null($this->_legacypageobject)) {
+            return $this->_legacypageobject->get_id();
                 }
-                if (!empty($format['defaultblocks'])) {
-                    $blocknames = $format['defaultblocks'];
+        return 0;
                 }
-                else if (!empty($CFG->defaultblocks)){
-                    $blocknames = $CFG->defaultblocks;
+
+    /**
+     * @deprecated since Moodle 2.0
+     * @return the 'page id'. This concept no longer exists.
+     */
+    function get_pageid() {
+        debugging('Call to deprecated method moodle_page::get_pageid(). It should not be necessary any more.', DEBUG_DEVELOPER);
+        if (!is_null($this->_legacypageobject)) {
+            return $this->_legacypageobject->get_id();
                 }
-                /// Failsafe - in case nothing was defined.
-                else {
-                    $blocknames = 'participants,activity_modules,search_forums,admin,course_list:news_items,calendar_upcoming,recent_activity';
+        return 0;
                 }
+
+    /**
+     * @deprecated since Moodle 2.0 - user $PAGE->cm instead.
+     * @return $this->cm;
+     */
+    function get_modulerecord() {
+        return $this->cm;
             }
+
+    public function has_set_url() {
+        return ($this->_url!==null);
         }
         
-        return $blocknames;
+    public function set_block_actions_done($setting = true) {
+        $this->_block_actions_done = $setting;
     }
 
-    // Given an instance of a block in this page and the direction in which we want to move it, where is
-    // it going to go? Return the identifier of the instance's new position. This allows us to tell blocklib
-    // how we want the blocks to move around in this page in an arbitrarily complex way. If the move as given
-    // does not make sense, make sure to return the instance's original position.
-    //
-    // Since this is going to get called a LOT, pass the instance by reference purely for speed. Do **NOT**
-    // modify its data in any way, this will actually confuse blocklib!!!
-    function blocks_move_position(&$instance, $move) {
-        if($instance->position == BLOCK_POS_LEFT && $move == BLOCK_MOVE_RIGHT) {
-            return BLOCK_POS_RIGHT;
-        } else if ($instance->position == BLOCK_POS_RIGHT && $move == BLOCK_MOVE_LEFT) {
-            return BLOCK_POS_LEFT;
+    /**
+     * Are popup notifications allowed on this page?
+     * Popup notifications may be disallowed in situations such as while upgrading or completing a quiz
+     * @return boolean true if popup notifications may be displayed
+     */
+    public function get_popup_notification_allowed() {
+        return $this->_popup_notification_allowed;
         }
-        return $instance->position;
+
+    /**
+     * Allow or disallow popup notifications on this page. Popups are allowed by default.
+     * @param boolean true if notifications are allowed. False if not allowed. They are allowed by default.
+     * @return null
+     */
+    public function set_popup_notification_allowed($allowed) {
+        $this->_popup_notification_allowed = $allowed;
     }
 }
 
 /**
- * Class that models the common parts of all activity modules
- *
- * @author Jon Papaioannou
- * @package pages
+ * @deprecated since Moodle 2.0
+ * Not needed any more.
+ * @param $path the folder path
+ * @return array an array of page types.
  */
+function page_import_types($path) {
+    global $CFG;
+    debugging('Call to deprecated function page_import_types.', DEBUG_DEVELOPER);
+}
 
-class page_generic_activity extends page_base {
-    var $activityname   = NULL;
-    var $courserecord   = NULL;
-    var $modulerecord   = NULL;
-    var $activityrecord = NULL;
+/**
+ * @deprecated since Moodle 2.0
+ * Do not use this any more. The global $PAGE is automatically created for you.
+ * If you need custom behaviour, you should just set properties of that object.
+ * @param integer $instance legacy page instance id.
+ * @return the global $PAGE object.
+ */
+function page_create_instance($instance) {
+    global $PAGE;
+    return page_create_object($PAGE->pagetype, $instance);
+}
 
-    function init_full() {
-        if($this->full_init_done) {
-            return;
-        }
-        if(empty($this->activityname)) {
-            error('Page object derived from page_generic_activity but did not define $this->activityname');
-        }
-        if (!$this->modulerecord = get_coursemodule_from_instance($this->activityname, $this->id)) {
-            error('Cannot fully initialize page: invalid '.$this->activityname.' instance id '. $this->id);
-        }
-        $this->courserecord = get_record('course', 'id', $this->modulerecord->course);
-        if(empty($this->courserecord)) {
-            error('Cannot fully initialize page: invalid course id '. $this->modulerecord->course);
+/**
+ * @deprecated since Moodle 2.0
+ * Do not use this any more. The global $PAGE is automatically created for you.
+ * If you need custom behaviour, you should just set properties of that object.
+ */
+function page_create_object($type, $id = NULL) {
+    global $CFG, $PAGE, $SITE, $ME;
+    debugging('Call to deprecated function page_create_object.', DEBUG_DEVELOPER);
+
+    $data = new stdClass;
+    $data->pagetype = $type;
+    $data->pageid = $id;
+
+    $classname = page_map_class($type);
+    if (!$classname) {
+        return $PAGE;
         }
-        $this->activityrecord = get_record($this->activityname, 'id', $this->id);
-        if(empty($this->activityrecord)) {
-            error('Cannot fully initialize page: invalid '.$this->activityname.' id '. $this->id);
+    $legacypage = new $classname;
+    $legacypage->init_quick($data);
+
+    $course = $PAGE->course;
+    if ($course->id != $SITE->id) {
+        $legacypage->set_course($course);
+    } else {
+        try {
+            $category = $PAGE->category;
+        } catch (coding_exception $e) {
+            // Was not set before, so no need to try to set it again.
+            $category = false;
+        }
+        if ($category) {
+            $legacypage->set_category_by_id($category->id);
+        } else {
+            $legacypage->set_course($SITE);
         }
-        $this->full_init_done = true;
     }
 
-    function user_allowed_editing() {
-        $this->init_full();
-        // Yu: I think this is wrong, should be checking manageactivities instead
-        //return has_capability('moodle/site:manageblocks', get_context_instance(CONTEXT_COURSE, $this->modulerecord->course));
-        return has_capability('moodle/course:manageactivities', get_context_instance(CONTEXT_MODULE, $this->modulerecord->id));         
-    }
+    $legacypage->set_pagetype($type);
 
-    function user_is_editing() {
-        $this->init_full();
-        return isediting($this->modulerecord->course);
-    }
+    $legacypage->set_url($ME);
+    $PAGE->set_url(str_replace($CFG->wwwroot . '/', '', $legacypage->url_get_full()));
 
-    function url_get_path() {
+    $PAGE->set_pagetype($type);
+    $PAGE->set_legacy_page_object($legacypage);
+    return $PAGE;
+}
+
+/**
+ * @deprecated since Moodle 2.0
+ * You should not be writing page subclasses any more. Just set properties on the
+ * global $PAGE object to control its behaviour.
+ */
+function page_map_class($type, $classname = NULL) {
         global $CFG;
-        return $CFG->wwwroot .'/mod/'.$this->activityname.'/view.php';
+
+    static $mappings = array(
+        PAGE_COURSE_VIEW => 'page_course',
+    );
+
+    if (!empty($type) && !empty($classname)) {
+        $mappings[$type] = $classname;
     }
 
-    function url_get_parameters() {
-        $this->init_full();
-        return array('id' => $this->modulerecord->id);
+    if (!isset($mappings[$type])) {
+        debugging('Page class mapping requested for unknown type: '.$type);
+        return null;
+    } else if (empty($classname) && !class_exists($mappings[$type])) {
+        debugging('Page class mapping for id "'.$type.'" exists but class "'.$mappings[$type].'" is not defined');
+        return null;
     }
 
-    function blocks_get_positions() {
-        return array(BLOCK_POS_LEFT);
+    return $mappings[$type];
+}
+
+/**
+ * @deprecated since Moodle 2.0
+ * Parent class from which all Moodle page classes derive
+ *
+ * @package    core
+ * @subpackage lib
+ * @copyright  1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class page_base extends moodle_page {
+    /**
+     * The numeric identifier of the page being described.
+     * @var int $id
+     */
+    var $id             = NULL;
+
+/// Class Functions
+
+    // HTML OUTPUT SECTION
+
+    // SELF-REPORTING SECTION
+
+    // Simple stuff, do not override this.
+    function get_id() {
+        return $this->id;
     }
 
-    function blocks_default_position() {
-        return BLOCK_POS_LEFT;
+    // Initialize the data members of the parent class
+    function init_quick($data) {
+        $this->id   = $data->pageid;
+    }
+
+    function init_full() {
     }
+}
+
+/**
+ * @deprecated since Moodle 2.0
+ * Class that models the behavior of a moodle course.
+ * Although this does nothing, this class declaration should be left for now
+ * since there may be legacy class doing class page_... extends page_course
+ *
+ * @package    core
+ * @subpackage lib
+ * @copyright  1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class page_course extends page_base {
+}
     
+/**
+ * @deprecated since Moodle 2.0
+ * Class that models the common parts of all activity modules
+ *
+ * @package    core
+ * @subpackage lib
+ * @copyright  1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class page_generic_activity extends page_base {
+    // Although this function is deprecated, it should be left here because
+    // people upgrading legacy code need to copy it. See
+    // http://docs.moodle.org/dev/Migrating_your_code_to_the_2.0_rendering_API
     function print_header($title, $morenavlinks = NULL, $bodytags = '', $meta = '') {
-        global $USER, $CFG;
+        global $USER, $CFG, $PAGE, $OUTPUT;
     
         $this->init_full();
         $replacements = array(
@@ -645,26 +1959,30 @@ class page_generic_activity extends page_base {
             $title = str_replace($search, $replace, $title);
         }
     
-        if (empty($morenavlinks) && $this->user_allowed_editing()) {
-            $buttons = '<table><tr><td>'.update_module_button($this->modulerecord->id, $this->courserecord->id, get_string('modulename', $this->activityname)).'</td>';
-            if (!empty($CFG->showblocksonmodpages)) {
-                $buttons .= '<td><form '.$CFG->frametarget.' method="get" action="view.php"><div>'.
+        $buttons = '<table><tr><td>'.$OUTPUT->update_module_button($this->modulerecord->id, $this->activityname).'</td>';
+        if ($this->user_allowed_editing()) {
+            $buttons .= '<td><form method="get" action="view.php"><div>'.
                     '<input type="hidden" name="id" value="'.$this->modulerecord->id.'" />'.
                     '<input type="hidden" name="edit" value="'.($this->user_is_editing()?'off':'on').'" />'.
                     '<input type="submit" value="'.get_string($this->user_is_editing()?'blockseditoff':'blocksediton').'" /></div></form></td>';
             }
             $buttons .= '</tr></table>';
-        } else {
-            $buttons = '&nbsp;';
-        }
         
-        if (empty($morenavlinks)) {
-            $morenavlinks = array();
+        if (!empty($morenavlinks) && is_array($morenavlinks)) {
+            foreach ($morenavlinks as $navitem) {
+                if (is_array($navitem) && array_key_exists('name', $navitem)) {
+                    $link = null;
+                    if (array_key_exists('link', $navitem)) {
+                        $link = $navitem['link'];
+                    }
+                    $PAGE->navbar->add($navitem['name'], $link);
+                }
         }
-        $navigation = build_navigation($morenavlinks, $this->modulerecord);
-        print_header($title, $this->courserecord->fullname, $navigation, '', $meta, true, $buttons, navmenu($this->courserecord, $this->modulerecord), false, $bodytags);
     }
     
+        $PAGE->set_title($title);
+        $PAGE->set_heading($this->course->fullname);
+        $PAGE->set_button($buttons);
+        echo $OUTPUT->header();
+    }
 }
-
-?>
