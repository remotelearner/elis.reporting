diff --git a/lib/wiki_to_markdown.php b/lib/wiki_to_markdown.php
index f1ad19a..2950d1f 100644
--- a/lib/wiki_to_markdown.php
+++ b/lib/wiki_to_markdown.php
@@ -1,20 +1,54 @@
 <?php
-// Utility function to convert wiki-like to Markdown format
-// Howard Miller, 2005
 
-// state defines
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Utility function to convert wiki-like to Markdown format
+ *
+ * @package    core
+ * @subpackage lib
+ * @copyright  Howard Miller, 2005
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**#@+
+ *  state defines
+ */
 define( "STATE_NONE",1 ); // blank line has been detected, so looking for first line on next para
 define( "STATE_PARAGRAPH",2 ); // currently processing vanilla paragraph
 define( "STATE_BLOCKQUOTE",3 ); // currently processing blockquote section
 define( "STATE_PREFORM",4 ); // currently processing preformatted text
 define( "STATE_NOTIKI",5 ); // currently processing preformatted / no formatting
-
-// list defines
+/**#@-*/
+/**#@+
+ * list defines
+ */
 define( "LIST_NONE", 1 ); // no lists active
 define( "LIST_UNORDERED", 2 ); // unordered list active
 define( "LIST_ORDERED", 3 ); // ordered list active
 define( "LIST_DEFINITION", 4 ); // definition list active
+/**#@-*/
 
+/**
+ * @package   moodlecore
+ * @copyright Howard Miller, 2005
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 class WikiToMarkdown {
 
   var $block_state;
@@ -59,14 +93,14 @@ class WikiToMarkdown {
     // BODGE: replace inline $mark characters in places where we want them ignored
     // they will be put back after main substitutue, stops problems with eg, and/or
     $bodge = chr(1);
-    $line = eregi_replace( '([[:alnum:]])'.$mark.'([[:alnum:]])', '\\1'.$bodge.'\\2',$line );
+    $line = preg_replace( '/([[:alnum:]])'.$mark.'([[:alnum:]])/i', '\\1'.$bodge.'\\2',$line );
 
-    $regex = '(^| |[(.,])'.$mark.'([^'.$mark.']*)'.$mark.'([^[:alnum:]]|$)';
+    $regex = '/(^| |[(.,])'.$mark.'([^'.$mark.']*)'.$mark.'([^[:alnum:]]|$)/i';
     $replace = '\\1<'.$tag.'>\\2</'.$tag.'>\\3';
-    $line = eregi_replace( $regex, $replace, $line );
+    $line = preg_replace( $regex, $replace, $line );
 
     // BODGE: back we go
-    $line = eregi_replace( $bodge, $mark, $line );
+    $line = preg_replace( '/'.$bodge.'/i', $mark, $line );
 
     return $line;
   }
@@ -80,14 +114,14 @@ class WikiToMarkdown {
     // BODGE: replace inline $mark characters in places where we want them ignored
     // they will be put back after main substitutue, stops problems with eg, and/or
     $bodge = chr(1);
-    $line = eregi_replace( '([[:alnum:]])'.$mark.'([[:alnum:]])', '\\1'.$bodge.'\\2',$line );
+    $line = preg_replace( '/([[:alnum:]])'.$mark.'([[:alnum:]])/i', '\\1'.$bodge.'\\2',$line );
 
-    $regex = '(^| |[(.,])'.$mark.'([^'.$mark.']*)'.$mark.'([^[:alnum:]]|$)';
+    $regex = '/(^| |[(.,])'.$mark.'([^'.$mark.']*)'.$mark.'([^[:alnum:]]|$)/i';
     $replace = '\\1'.$tag.'\\2'.$tag.'\\3';
-    $line = eregi_replace( $regex, $replace, $line );
+    $line = preg_replace( $regex, $replace, $line );
 
     // BODGE: back we go
-    $line = eregi_replace( $bodge, $mark, $line );
+    $line = preg_replace( '/'.$bodge.'/i', $mark, $line );
 
     return $line;
   }
@@ -97,10 +131,10 @@ class WikiToMarkdown {
     // do regex for subscript and superscript (slightly different)
     // $mark is the magic character and $tag the HTML tag to insert
 
-    $regex = $mark.'([^'.$mark.']*)'.$mark;
+    $regex = '/'.$mark.'([^'.$mark.']*)'.$mark.'/i';
     $replace = '<'.$tag.'>\\1</'.$tag.'>';
 
-    return eregi_replace( $regex, $replace, $line );
+    return preg_replace( $regex, $replace, $line );
   }
 
   function do_list( $line, $blank=false ) {
@@ -115,7 +149,7 @@ class WikiToMarkdown {
     else {
       $listchar = $line{0};
       $count = strspn( $line, $listchar );
-      $line = eregi_replace( "^[".$listchar."]+ ", "", $line );
+      $line = preg_replace( "/^[".$listchar."]+ /i", "", $line );
     }
     
     // find what sort of list this character represents
@@ -198,7 +232,7 @@ class WikiToMarkdown {
     // MARKDOWN: no change so leave
 
     // is this a list line (starts with * # ; :)    
-    if (eregi( "^([*]+|[#]+|[;]+|[:]+) ", $line )) {
+    if (preg_match( "/^([*]+|[#]+|[;]+|[:]+) /i", $line )) {
       $line = $this->do_list( $line );        
     } 
 
@@ -215,7 +249,7 @@ class WikiToMarkdown {
     $line = str_replace( "1/4", "&#188;", $line );
     $line = str_replace( "1/2", "&#189;", $line );
     $line = str_replace( "3/4", "&#190;", $line );
-    $line = eregi_replace( "([[:digit:]]+[[:space:]]*)x([[:space:]]*[[:digit:]]+)", "\\1&#215;\\2", $line ); // (digits) x (digits) - multiply    
+    $line = preg_replace( "/([[:digit:]]+[[:space:]]*)x([[:space:]]*[[:digit:]]+)/i", "\\1&#215;\\2", $line ); // (digits) x (digits) - multiply
     // do formatting tags
     // NOTE: The / replacement  *has* to be first, or it will screw the 
     //    HTML tags that are added by the other ones
@@ -231,48 +265,48 @@ class WikiToMarkdown {
     
     // convert urls into proper link with optional link text URL(text)
     // MARDOWN: HTML conversion should work fine
-    $line = eregi_replace("([[:space:]]|^)([[:alnum:]]+)://([^[:space:]]*)([[:alnum:]#?/&=])\(([^)]+)\)",
+    $line = preg_replace("/([[:space:]]|^)([[:alnum:]]+)://([^[:space:]]*)([[:alnum:]#?/&=])\(([^)]+)\)/i",
       "\\1[\\5](\\2://\\3\\4)", $line);
-    $line = eregi_replace("([[:space:]])www\.([^[:space:]]*)([[:alnum:]#?/&=])\(([^)]+)\)", 
+    $line = preg_replace("/([[:space:]])www\.([^[:space:]]*)([[:alnum:]#?/&=])\(([^)]+)\)/i",
       "\\1[\\5](http://www.\\2\\3)", $line);
 
     // make urls (with and without httpd) into proper links
-    $line = eregi_replace("([[:space:]]|^)([[:alnum:]]+)://([^[:space:]]*)([[:alnum:]#?/&=])",
+    $line = preg_replace("/([[:space:]]|^)([[:alnum:]]+)://([^[:space:]]*)([[:alnum:]#?/&=])/i",
       "\\1<\\2://\\3\\4>", $line);
-    $line = eregi_replace("([[:space:]])www\.([^[:space:]]*)([[:alnum:]#?/&=])", 
+    $line = preg_replace("/([[:space:]])www\.([^[:space:]]*)([[:alnum:]#?/&=])/i",
       "\\1<http://www.\\2\\3\>", $line);
 
     // make email addresses into mailtos....
     // MARKDOWN doesn't quite support this, so do as html
-    $line = eregi_replace("([[:space:]]|^)([[:alnum:]._-]+@[[:alnum:]._-]+)\(([^)]+)\)",
+    $line = preg_replace("/([[:space:]]|^)([[:alnum:]._-]+@[[:alnum:]._-]+)\(([^)]+)\)/i",
        "\\1<a href=\"mailto:\\2\">\\3</a>", $line);
 
     // !# at the beginning of any lines means a heading
     // MARKDOWN: value (1-6) becomes number of hashes
-    if (eregi( "^!([1-6]) (.*)$", $line, $regs )) {
+    if (preg_match( "/^!([1-6]) (.*)$/i", $line, $regs )) {
       $depth = substr( $line, 1, 1 );
       $out = substr( '##########', 0, $depth);
-      $line = eregi_replace( "^!([1-6]) (.*)$", "$out \\2", $line );
+      $line = preg_replace( "/^!([1-6]) (.*)$/i", "$out \\2", $line );
     }
 
     // acronym handing, example HTML(Hypertext Markyp Language)
     // MARKDOWN: no equiv. so just leave as HTML
-    $line = ereg_replace( "([A-Z]+)\(([^)]+)\)", "<acronym title=\"\\2\">\\1</acronym>", $line );
+    $line = preg_replace( "/([A-Z]+)\(([^)]+)\)/", "<acronym title=\"\\2\">\\1</acronym>", $line );
 
     // Replace resource link >>##(Description Text)
     // MARKDOWN: change to MD web link style
-    $line = eregi_replace( " ([a-zA-Z]+):([0-9]+)\(([^)]+)\)",
+    $line = preg_replace("/ ([a-zA-Z]+):([0-9]+)\(([^)]+)\)/i",
        " [\\3](".$CFG->wwwroot."/mod/\\1/view.php?id=\\2) ", $line );
 
     require_once($CFG->libdir.'/filelib.php');
     $coursefileurl = get_file_url($this->courseid);
 
     // Replace picture resource link 
-    $line = eregi_replace( "/([a-zA-Z0-9./_-]+)(png|gif|jpg)\(([^)]+)\)",
+    $line = preg_replace("#/([a-zA-Z0-9./_-]+)(png|gif|jpg)\(([^)]+)\)#i",
             "![\\3](".$coursefileurl."/\\1\\2)", $line );
 
     // Replace file resource link
-    $line = eregi_replace( "file:/([[:alnum:]/._-]+)\(([^)]+)\)",
+    $line = preg_replace("#file:/([[:alnum:]/._-]+)\(([^)]+)\)#i",
             "[\\2](".$coursefileurl."/\\1)", $line );
 
     return $line;
@@ -300,7 +334,7 @@ class WikiToMarkdown {
     // run through lines
     foreach( $lines as $line ) {
       // is this a blank line?
-      $blank_line = eregi( "^[[:blank:]\r]*$", $line );
+      $blank_line = preg_match( "/^[[:blank:]\r]*$/i", $line );
       if ($blank_line) {
         // first end current block according to state
         $buffer = $buffer . $this->close_block( $this->block_state );
@@ -311,13 +345,13 @@ class WikiToMarkdown {
       // act now depending on current block state
       if ($this->block_state == STATE_NONE) {
         // first character of line defines block type
-        if (eregi( "^> ",$line )) {
+        if (preg_match( "/^> /i",$line )) {
           // blockquote
           $buffer = $buffer . $this->line_replace( $line ). "\n";
           $this->block_state = STATE_BLOCKQUOTE;
         }
         else
-        if (eregi( "^  ",$line) ) {
+        if (preg_match( "/^  /i",$line) ) {
           // preformatted text
           // MARKDOWN: no real equiv. so just use <pre>
           $buffer = $buffer . "<pre>\n";
@@ -325,10 +359,10 @@ class WikiToMarkdown {
           $this->block_state = STATE_PREFORM;
         }
         else 
-        if (eregi("^\% ",$line) ) {
+        if (preg_match("/^\% /i",$line) ) {
                 // preformatted text - no processing
                 // MARKDOWN: this is MD code form of a paragraph
-                $buffer = $buffer . "    " . eregi_replace( "^\%","",$line) . "\n";
+                $buffer = $buffer . "    " . preg_replace( "/^\%/i","",$line) . "\n";
                 $this->block_state = STATE_NOTIKI;
         }
         else {
@@ -356,35 +390,4 @@ class WikiToMarkdown {
     //return $buffer;    
     return $buffer;
   }
-
-  function update( $thing, $textfield, $formatfield, $coursesql='' ) {
-    // converts the text in a particular activity (or sub-activity)
-    // $thing = the database name for that 'thing' (eg, resource, choice)
-    // $textfield = the name of the field that might hold the wiki-text
-    // $formatfield = the name of the field that contains the format type
-    // $coursesql = if supplied, the query to get the courseid, if not get from the 'course' field 
-    //   ($id of record is tacked on right at the end, so phrase accordingly)
-    // returns a count of records converted 
-    $count = 0;
-    if ($records = get_records( $thing,$formatfield,FORMAT_WIKI )) {
-        foreach( $records as $record ) {
-          $text = $record->$textfield;
-          $id = $record->id;
-          if (!$coursesql) {
-            $courseid = $record->course;
-          } else {
-            $r = get_record_sql( $coursesql . "$id" );
-            $courseid = $r->course;
-          }
-          $newtext = $this->convert( $text,$courseid );
-      
-          $record->$textfield = $newtext;
-          $record->$formatfield = FORMAT_MARKDOWN;
-          update_record( $thing, addslashes_object( $record ) );
-          $count++;
-        }
-    }
-    return $count; 
-  }
 }
-?>
