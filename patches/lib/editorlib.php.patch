diff --git a/lib/editorlib.php b/lib/editorlib.php
index 439792b..4c73e1d 100644
--- a/lib/editorlib.php
+++ b/lib/editorlib.php
@@ -1,128 +1,264 @@
-<?php // $Id$
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
 /**
- * Editor class for Moodle.
- *
- * This library is made to make easier to intergrate
- * WYSIWYG editors into Moodle.
+ * Utility classes and functions for text editor integration.
  *
- * @author Janne Mikkonen
- * @version $Id$
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package editorObject
+ * @package    core
+ * @subpackage editor
+ * @copyright  2009 Petr Skoda {@link http://skodak.org}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
-class editorObject {
 
-    /**
-    * Holds the internal $USER standard object.
-    * @var object $user
-    */
-    var $user;
+defined('MOODLE_INTERNAL') || die();
 
-    /**
-    * Holds the course id.
-    * @var int $courseid
+/**
+ * Returns users preferred editor for given format
+ *
+ * @param int $format text format or null of none
+ * @return texteditor object
     */
-    var $courseid;
+function editors_get_preferred_editor($format = NULL) {
+    global $USER;
 
-    /**
-    * Hold the internal $CFG standard class.
-    * @var object $cfg
+    $enabled = editors_get_enabled();
+
+    $preventhtml = (count($enabled) > 1 and empty($USER->htmleditor));
+
+    // now find some plugin that supports format and is available
+    $editor = false;
+    foreach ($enabled as $e) {
+        if (!$e->supported_by_browser()) {
+            // bad luck, this editor is not compatible
+            continue;
+        }
+        if ($preventhtml and $format == FORMAT_HTML and $e->get_preferred_format() == FORMAT_HTML) {
+            // this is really not what we want but we could use it if nothing better found
+            $editor = $e;
+            continue;
+        }
+        if (!$supports = $e->get_supported_formats()) {
+            // buggy editor!
+            continue;
+        }
+        if (is_null($format)) {
+            // format does not matter
+            if ($preventhtml and $e->get_preferred_format() == FORMAT_HTML) {
+                // this is really not what we want but we could use it if nothing better found
+                $editor = $e;
+                continue;
+            } else {
+                $editor = $e;
+                break;
+            }
+        }
+        if (in_array($format, $supports)) {
+            // editor supports this format, yay!
+            $editor = $e;
+            break;
+        }
+    }
+
+    if (!$editor) {
+        $editor = get_texteditor('textarea'); // must exist and can edit anything
+    }
+
+    return $editor;
+}
+
+/**
+ * Returns users preferred text format.
+ * @return int standard text format
     */
-    var $cfg;
+function editors_get_preferred_format() {
+    global $USER;
 
-    /**
-    * PHP4 style class constructor.
-    *
-    * @uses $CFG, $USER
+    $editors = editors_get_enabled();
+    if (count($editors) == 1) {
+        $editor = reset($editors);
+        return $editor->get_preferred_format();
+    }
+
+    foreach ($editors as $editor) {
+        if (empty($USER->htmleditor) and $editor->get_preferred_format() == FORMAT_HTML) {
+            // we do not prefer this one
+            continue;
+        }
+        return $editor->get_preferred_format();
+    }
+
+    // user did not want html editor, but there is no other choice, sorry
+    $editor = reset($editors);
+    return $editor->get_preferred_format();
+}
+
+/**
+ * Returns list of enabled text editors
+ * @return array of name=>texteditor
     */
-    function editorObject () {
-        global $CFG, $USER;
-        $this->cfg  = &$CFG;
-        $this->user = &$USER;
-        $this->courseid = NULL;
+function editors_get_enabled() {
+    global $CFG;
+
+    if (empty($CFG->texteditors)) {
+        $CFG->texteditors = 'tinymce,textarea';
+    }
+    $active = array();
+    foreach(explode(',', $CFG->texteditors) as $e) {
+        if ($editor = get_texteditor($e)) {
+            $active[$e] = $editor;
+        }
     }
 
-    /**
-    * PHP5 style class constructor.
+    if (empty($active)) {
+        return array('textarea'=>get_texteditor('textarea')); // must exist and can edit anything
+    }
+
+    return $active;
+}
+
+/**
+ * Returns instance of text editor
     *
+ * @param string $editorname name of editor (textarea, tinymce, ...)
+ * @return object|bool texeditor instance or false if does not exist
     */
-    function __construct() {
-        $this->editorObject();
+function get_texteditor($editorname) {
+    global $CFG;
+
+    $libfile = "$CFG->libdir/editor/$editorname/lib.php";
+    if (!file_exists($libfile)) {
+        return false;
+    }
+    require_once($libfile);
+    $classname = $editorname.'_texteditor';
+    if (!class_exists($classname)) {
+        return false;
     }
+    return new $classname();
+}
 
-    /**
-    * Method to load necessary editor codes to
-    * $CFG->editorsrc array.
+/**
+ * Get the list of available editors
     *
-    * @todo example code.
-    * @param mixed $args Course id or associative array holding course id and editor name.
+ * @return array Array ('editorname'=>'localised editor name')
     */
-    function loadeditor($args) {
+function editors_get_available() {
+    $editors = array();
+    foreach (get_plugin_list('editor') as $editorname => $dir) {
+        $editors[$editorname] = get_string('pluginname', 'editor_'.$editorname);
+    }
+    return $editors;
+}
 
-        global $CFG, $USER;
+/**
+ * Setup all JS and CSS needed for editors.
+ * @return void
+ */
+function editors_head_setup() {
+    global $CFG;
 
-        if ( is_array($args) ) {
-            // If args is an array search keys courseid and name.
-            // Name represents editor name to load.
-            if ( !array_key_exists('courseid', $args) ) {
-                error("Required variable courseid is missing!");
+    if (empty($CFG->texteditors)) {
+        $CFG->texteditors = 'tinymce,textarea';
             }
+    $active = explode(',', $CFG->texteditors);
 
-            if ( !array_key_exists('name', $args) ) {
-                error("Required variable name is missing!");
+    foreach ($active as $editorname) {
+        if (!$editor = get_texteditor($editorname)) {
+            continue;
             }
-
-            $courseid   = clean_param($args['courseid'], PARAM_INT);
-            $editorname = strtolower(clean_param($args['name'], PARAM_ALPHA));
-        } else {
-            // If only single argument is passed
-            // this must be course id.
-            $courseid = clean_param($args, PARAM_INT);
-        }
-
-        $htmleditor = !empty($editorname) ? $editorname : intval($USER->htmleditor);
-
-        if ( can_use_html_editor() ) {
-            $CFG->editorsrc = array();
-            $editorbaseurl = $CFG->httpswwwroot .'/lib/editor';
-            $editorbasedir = $CFG->dirroot .'/lib/editor';
-
-            switch ($htmleditor) {
-                case 1:
-                case 'htmlarea':
-                    array_push($CFG->editorsrc, "$editorbaseurl/htmlarea/htmlarea.php?id={$courseid}");
-                    array_push($CFG->editorsrc, "$editorbaseurl/htmlarea/lang/en.php");
-                    $classfile = "$editorbasedir/htmlarea/htmlarea.class.php";
-                    include_once($classfile);
-                    return (new htmlarea($courseid));
-                break;
-                case 2:
-                case 'tinymce':
-                    array_push($CFG->editorsrc, "$editorbaseurl/tinymce/jscripts/tiny_mce/tiny_mce_gzip.php");
-                    array_push($CFG->editorsrc, "$editorbaseurl/tinymce/moodledialog.js");
-                    $classfile = "$editorbasedir/tinymce/tinymce.class.php";
-                    include_once($classfile);
-                    return (new tinymce($courseid));
-                break;
+        if (!$editor->supported_by_browser()) {
+            // bad luck, this editor is not compatible
+            continue;
             }
-
+        $editor->head_setup();
         }
+}
 
-    }
+/**
+ * Base abstract text editor class.
+ *
+ * @copyright  2009 Petr Skoda {@link http://skodak.org}
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ * @package moodlecore
+ */
+abstract class texteditor {
+    /**
+     * Is editor supported in current browser?
+     * @return bool
+     */
+    public abstract function supported_by_browser();
 
     /**
-    * Print out error message and stop outputting.
-    *
-    * @param string $message
+     * Returns list of supported text formats
+     * @return array Array (FORMAT=>FORMAT)
     */
-    function error($message) {
-        echo '<div style="text-align: center; font-weight: bold; color: red;">';
-        echo '<span style="color: black;">editorObject error:</span> ';
-        echo s($message, true);
-        echo '</div>';
-        exit;
+    public abstract function get_supported_formats();
+
+    /**
+     * Returns main preferred text format.
+     * @return int text format
+     */
+    public abstract function get_preferred_format();
+
+    /**
+     * Supports file picker and repos?
+     * @return object book object
+     */
+    public abstract function supports_repositories();
+
+    /**
+     * Add required JS needed for editor
+     * @param string $elementid id of text area to be converted to editor
+     * @param array $options
+     * @param obejct $fpoptions file picker options
+     * @return void
+     */
+    public abstract function use_editor($elementid, array $options=null, $fpoptions = null);
+
+    /**
+     * Setup all JS and CSS needed for editor.
+     * @return void
+     */
+    public function head_setup() {
+    }
+}
+
+//=== TO BE DEPRECATED in 2.1 =====================
+
+/**
+ * Does the user want and can edit using rich text html editor?
+ * @todo Deprecate: eradicate completely, replace with something else in the future
+ * @return bool
+ */
+function can_use_html_editor() {
+    global $USER;
+
+    $editors = editors_get_enabled();
+    if (count($editors) > 1) {
+        if (empty($USER->htmleditor)) {
+            return false;
+        }
+    }
+
+    foreach ($editors as $editor) {
+        if ($editor->get_preferred_format() == FORMAT_HTML) {
+            return true;
+        }
     }
 
+    return false;
 }
-?>
\ No newline at end of file
