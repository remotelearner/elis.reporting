diff --git a/search/documents/user_document.php b/search/documents/user_document.php
index e309b59..418193e 100644
--- a/search/documents/user_document.php
+++ b/search/documents/user_document.php
@@ -6,9 +6,9 @@
 * @category core
 * @subpackage document_wrappers
 * @author Valery Fremaux [valery.fremaux@club-internet.fr] > 1.8
-* @contributor Tatsuva Shirai 20090530
 * @date 2008/03/31
 * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+* @version Moodle 2.0
 *
 * special (EXTRA) document handling for user related data
 *
@@ -17,8 +17,8 @@
 /**
 * includes and requires
 */
-require_once("$CFG->dirroot/search/documents/document.php");
-require_once("$CFG->dirroot/blog/lib.php");
+require_once($CFG->dirroot.'/search/documents/document.php');
+require_once($CFG->dirroot.'/blog/lib.php');
 
 /**
 * a class for representing searchable information in user metadata
@@ -28,8 +28,10 @@ class UserSearchDocument extends SearchDocument {
 
     /**
     * constructor
+    * @uses $DB
     */
     public function __construct(&$userhash, $user_id, $context_id) {
+        global $DB;
         
         // generic information; required
         $doc->docid         = $userhash['id'];
@@ -37,7 +39,7 @@ class UserSearchDocument extends SearchDocument {
         $doc->itemtype      = 'user';
         $doc->contextid     = $context_id;
 
-        $user = get_record('user', 'id', $user_id);
+        $user               = $DB->get_record('user', array('id' => $user_id));
         $doc->title         = get_string('user').': '.fullname($user);
         $doc->date          = ($userhash['lastaccess']) ? $userhash['lastaccess'] : time() ;
         
@@ -49,8 +51,7 @@ class UserSearchDocument extends SearchDocument {
         // module specific information; optional
         
         // construct the parent class
-        // Shirai : User pictures are not displayed in results of blogs (2009/05/29) MDL19341
-        parent::__construct($doc, $data, 0, 0, $user_id, PATH_FOR_SEARCH_TYPE_USER);;
+        parent::__construct($doc, $data, 0, 0, $user_id, PATH_FOR_SEARCH_TYPE_USER);
     } 
 }
 
@@ -62,18 +63,21 @@ class UserPostSearchDocument extends SearchDocument {
 
     /**
     * constructor
+    * @uses $DB
     */
     public function __construct(&$post, $user_id, $context_id) {
+        global $DB;
+        
         // generic information; required
         $doc->docid         = $post['id'];
         $doc->documenttype  = SEARCH_TYPE_USER;
         $doc->itemtype      = 'post';
         $doc->contextid     = $context_id;
 
-        $user = get_record('user', 'id', $user_id);
+        $user               = $DB->get_record('user', array('id' => $user_id));
 
         // we cannot call userdate with relevant locale at indexing time.
-        // $doc->title         = get_string('post').': '.fullname($user);
+        //$doc->title         = get_string('post').': '.fullname($user);
         $doc->title         = $post['subject'];
         $doc->date          = $post['created'];
         
@@ -98,15 +102,18 @@ class UserBlogAttachmentSearchDocument extends SearchDocument {
 
     /**
     * constructor
+    * @uses $DB
     */
     public function __construct(&$post, $context_id) {
+        global $DB;
+        
         // generic information; required
         $doc->docid         = $post['id'];
         $doc->documenttype  = SEARCH_TYPE_USER;
         $doc->itemtype      = 'attachment';
         $doc->contextid     = $context_id;
 
-        $user = get_record('user', 'id', $post['userid']);
+        $user               = $DB->get_record('user', 'id', $post['userid']);
 
         // we cannot call userdate with relevant locale at indexing time.
         $doc->title         = get_string('file').' : '.$post['subject'];
@@ -127,20 +134,20 @@ class UserBlogAttachmentSearchDocument extends SearchDocument {
 
 /**
 * constructs a valid link to a user record
-* @param userid the user
-* @param itemtype 
-* @uses CFG
+* @param int $userid the user
+* @param string $itemtype 
+* @uses $CFG, $DB
 * @return a well formed link to user information
 */
 function user_make_link($itemid, $itemtype) {
-    global $CFG;
+    global $CFG, $DB;
 
     if ($itemtype == 'user'){
         return $CFG->wwwroot.'/user/view.php?id='.$itemid;
     } elseif ($itemtype == 'post') {
         return $CFG->wwwroot.'/blog/index.php?postid='.$itemid;
     } elseif ($itemtype == 'attachment') {
-        $post = get_record('post', 'id', $itemid);
+        $post = $DB->get_record('post', array('id' => $itemid));
         if (!$CFG->slasharguments){
             return $CFG->wwwroot."/file.php?file=/blog/attachments/{$post->id}/{$post->attachment}";
         } else {
@@ -153,33 +160,37 @@ function user_make_link($itemid, $itemtype) {
 
 /**
 * part of search engine API
+* @uses $DB
 *
 */
 function user_iterator() {
-    $users = get_records('user');
+    global $DB;
+    
+    $users = $DB->get_records('user');
     return $users;
 }
 
 /**
 * part of search engine API
-* @uses CFG
+* @uses $CFG, $DB
+* @param reference $user a user record
 * @return an array of documents generated from data
 */
 function user_get_content_for_index(&$user) {
-    global $CFG;
+    global $CFG, $DB;
     
     $documents = array();
 
     $userhash = get_object_vars($user);
     $documents[] = new UserSearchDocument($userhash, $user->id, null);
     
-    if ($posts = get_records('post', 'userid', $user->id, 'created')){
+    if ($posts = $DB->get_records('post', array('userid' => $user->id), 'created')){
         foreach($posts as $post){
             $texts = array();
             $texts[] = $post->subject;
             $texts[] = $post->summary;
             $texts[] = $post->content;
-            $post->description = implode(" ", $texts);
+            $post->description = implode(' ', $texts);
             
             // record the attachment if any and physical files can be indexed
             if (@$CFG->block_search_enable_file_indexing){
@@ -197,6 +208,7 @@ function user_get_content_for_index(&$user) {
 
 /**
 * get text from a physical file 
+* @uses $CFG
 * @param object $post a post to whech the file is attached to 
 * @param boolean $context_id if in future we need recording a context along with the search document, pass it here
 * @param boolean $getsingle if true, returns a single search document, elsewhere return the array
@@ -259,27 +271,30 @@ function user_get_physical_file(&$post, $context_id, $getsingle, &$documents = n
 
 /**
 * returns a single user search document 
+* @uses $DB 
 * @param composite $id a unique document id made with 
 * @param itemtype the type of information (session is the only type)
 */
 function user_single_document($id, $itemtype) {
+    global $DB;
+    
     if ($itemtype == 'user'){
-        if ($user = get_record('user', 'id', $id)){
+        if ($user = $DB->get_record('user', array('id' => $id))){
             $userhash = get_object_vars($user);
             return new UserSearchDocument($userhash, $user->id, 'user', null);
         }
     } elseif ($itemtype == 'post') {
-        if ($post = get_records('post', 'id', $id)){
+        if ($post = $DB->get_record('post', array('id' => $id))){
             $texts = array();
             $texts[] = $post->subject;
             $texts[] = $post->summary;
             $texts[] = $post->content;
             $post->description = implode(" ", $texts);
             $posthash = get_object_vars($post);
-            return new UserPostSearchDocument($posthash, $user->id, 'post', null);
+            return new UserPostSearchDocument($posthash, $post->userid, 'post', null);
         }
     } elseif ($itemtype == 'attachment' && @$CFG->block_search_enable_file_indexing) {
-        if ($post = get_records('post', 'id', $id)){
+        if ($post = $DB->get_records('post', array('id' => $id))){
             if ($post->attachment){
                 return user_get_physical_file($post, null, true);
             }
@@ -319,38 +334,38 @@ function user_db_names() {
 * - user is legitimate in the surrounding context
 * - user may be guest and guest access is allowed to the module
 * - the function may perform local checks within the module information logic
-* @param path the access path to the module script code
-* @param itemtype the information subclassing (usefull for complex modules, defaults to 'standard')
-* @param this_id the item id within the information class denoted by entry_type. In chats, this id 
+* @param string $path the access path to the module script code
+* @param string $itemtype the information subclassing (usefull for complex modules, defaults to 'standard')
+* @param int $this_id the item id within the information class denoted by entry_type. In chats, this id 
 * points out a session history which is a close sequence of messages.
-* @param user the user record denoting the user who searches
-* @param group_id the current group used by the user when searching
-* @uses CFG
+* @param object $user the user record denoting the user who searches
+* @param int $group_id the current group used by the user when searching
+* @uses $CFG, $DB
 * @return true if access is allowed, false elsewhere
 */
 function user_check_text_access($path, $itemtype, $this_id, $user, $group_id, $context_id){
-    global $CFG;
+    global $CFG, $DB;
     
     include_once("{$CFG->dirroot}/{$path}/lib.php");
 
     if ($itemtype == 'user'){
         // get the user 
-        $userrecord = get_record('user', 'id', $this_id);
+        $userrecord = $DB->get_record('user', array('id' => $this_id));
 
         // we cannot see nothing from unconfirmed users
-        if (!$userrecord->confirmed and !has_capability('moodle/site:doanything', get_context_instance(CONTEXT_SYSTEM))){
+        if (!$userrecord->confirmed and !has_capability('moodle/site:config', get_context_instance(CONTEXT_SYSTEM))){
             if (!empty($CFG->search_access_debug)) echo "search reject : unconfirmed user ";
             return false;
         }
     } elseif ($itemtype == 'post' || $itemtype == 'attachment'){
         // get the post
-        $post = get_record('post', 'id', $this_id);
-        $userrecord = get_record('user', 'id', $post->userid);
+        $post = $DB->get_record('post', array('id' => $this_id));
+        $userrecord = $DB->get_record('user', array('id' => $post->userid));
 
         // we can try using blog visibility check
         return blog_user_can_view_user_post($user->id, $post);
     }
-    $context = get_record('context', 'id', $context_id);
+    $context = $DB->get_record('context', array('id' => $context_id));
         
     return true;
 }
