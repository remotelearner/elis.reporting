diff --git a/search/documents/wiki_document.php b/search/documents/wiki_document.php
index 961b78a..0643c0a 100644
--- a/search/documents/wiki_document.php
+++ b/search/documents/wiki_document.php
@@ -9,6 +9,7 @@
 * @contributor Tatsuva Shirai 20090530
 * @date 2008/03/31
 * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+* @version Moodle 2.0
 *
 * document handling for wiki activity module
 * This file contains the mapping between a wiki page and it's indexable counterpart,
@@ -21,8 +22,8 @@
 /**
 * includes and requires
 */
-require_once("$CFG->dirroot/search/documents/document.php");
-require_once("$CFG->dirroot/mod/wiki/lib.php");
+require_once($CFG->dirroot.'/search/documents/document.php');
+require_once($CFG->dirroot.'/mod/wiki/lib.php');
 
 /**
 * All the $doc->___ fields are required by the base document class!
@@ -39,15 +40,15 @@ class WikiSearchDocument extends SearchDocument {
         $doc->itemtype      = 'standard';
         $doc->contextid     = $context_id;
 
-        $doc->title     = $page['pagename'];
-        $doc->date      = $page['lastmodified'];
+        $doc->title     = $page['title'];
+        $doc->date      = $page['timemodified'];
         //remove '(ip.ip.ip.ip)' from wiki author field
-        $doc->author    = preg_replace('/\(.*?\)/', '', $page['author']);
-        $doc->contents  = $page['content'];
-        $doc->url       = wiki_make_link($wiki_id, $page['pagename'], $page['version']);
+        $doc->author    = $page['author'];
+        $doc->contents  = $page['cachedcontent'];
+        $doc->url       = wiki_make_link($page['id']);
         
         // module specific information; optional
-        $data->version  = $page['version'];
+        //$data->version  = $page['version'];
         $data->wiki     = $wiki_id;
         
         // construct the parent class
@@ -69,35 +70,40 @@ function wiki_name_convert($str) {
 * @param int $wikiId
 * @param string $title
 * @param int $version
-* @uses CFG
+* @uses $CFG
 */
-function wiki_make_link($wikiId, $title, $version) {
+function wiki_make_link($pageid) {
     global $CFG;
 
-    return $CFG->wwwroot.'/mod/wiki/view.php?wid='.$wikiId.'&amp;page='.wiki_name_convert($title).'&amp;version='.$version;
-} //wiki_make_link
+    return $CFG->wwwroot.'/mod/wiki/view.php?pageid='.$pageid;
+}
 
 /**
 * rescued and converted from ewikimoodlelib.php
 * retrieves latest version of a page
+* @uses $DB
 * @param object $entry the wiki object as a reference
 * @param string $pagename the name of the page known by the wiki engine
 * @param int $version
 */
 function wiki_get_latest_page(&$entry, $pagename, $version = 0) {
-    $pagename = "'".addslashes($pagename)."'";
+    global $DB;
+
+    $params = array('title' => $pagename, 'subwikiid' => $entry->id);
     
-    if ($version > 0 and is_int($version)) {
-        $version = "AND (version=$version)";
+    if ($version > 0 && is_int($version)) {
+        $versionclause = "AND ( version = :version )";
+        $sort   = 'version DESC';
+        $params['version'] = $version;
     } else {
-        $version = '';
+        $versionclause = '';
+        $sort   = '';
     } 
     
-    $select = "(pagename=$pagename) AND wiki=".$entry->id." $version ";
-    $sort   = 'version DESC';
+    $select = "( title = :title ) AND subwikiid = :subwikiid $versionclause ";
     
-    //change this to recordset_select, as per http://docs.moodle.org/19/en/Datalib_Notes
-    if ($result_arr = get_records_select('wiki_pages', $select, $sort, '*', 0, 1)) {
+    //change this to recordset_select, as per http://docs.moodle.org/en/Datalib_Notes
+    if ($result_arr = $DB->get_records_select('wiki_pages', $select, $params, $sort, '*', 0, 1)) {
         foreach ($result_arr as $obj) {
             $result_obj = $obj;
         } 
@@ -113,18 +119,24 @@ function wiki_get_latest_page(&$entry, $pagename, $version = 0) {
 
 /**
 * fetches all pages, including old versions
+* @uses $DB
 * @param object $entry the wiki object as a reference
 * @return an array of record objects that represents pages of this wiki object
 */
 function wiki_get_pages(&$entry) {
-    return get_records('wiki_pages', 'wiki', $entry->id);
+    global $DB;
+
+    return $DB->get_records('wiki_pages', array('wiki', $entry->id));
 }
 
 /**
 * fetches all the latest versions of all the pages
-* @param object $entry
+* @uses $DB
+* @param reference $entry
 */
 function wiki_get_latest_pages(&$entry) {
+  global $DB;
+
   //== (My)SQL for this
   /* select * from wiki_pages
      inner join
@@ -136,10 +148,10 @@ function wiki_get_latest_pages(&$entry) {
     $pages = array();
     
     //http://moodle.org/bugs/bug.php?op=show&bugid=5877&pos=0
-    if ($ids = get_records('wiki_pages', 'wiki', $entry->id, '', 'distinct pagename')) {
-        if ($pagesets = get_records('wiki_pages', 'wiki', $entry->id, '', 'distinct pagename')) {
+    if ($ids = $DB->get_records('wiki_pages', array('subwikiid' => $entry->id), '', 'distinct title')) {
+        if ($pagesets = $DB->get_records('wiki_pages', array('subwikiid' => $entry->id), '', 'distinct title')) {
             foreach ($pagesets as $aPageset) {
-                $pages[] = wiki_get_latest_page($entry, $aPageset->pagename);
+                $pages[] = wiki_get_latest_page($entry, $aPageset->title);
             } 
         } else {
             return false;
@@ -150,25 +162,31 @@ function wiki_get_latest_pages(&$entry) {
 
 /**
 * part of search engine API
+* @uses $DB;
 *
 */
 function wiki_iterator() {
-    $wikis = get_records('wiki');
+    global $DB;
+
+    $wikis = $DB->get_records('wiki');
     return $wikis;
 }
 
 /**
 * part of search engine API
-* @param wiki a wiki instance
+* @uses $DB
+* @param reference $wiki a wiki instance
 * @return an array of searchable deocuments
 */
 function wiki_get_content_for_index(&$wiki) {
+    global $CFG, $DB;
+    require_once($CFG->dirroot . '/mod/wiki/locallib.php');
 
     $documents = array();
-    $entries = wiki_get_entries($wiki);
+    $entries = wiki_get_subwikis($wiki->id);
     if ($entries){
-        $coursemodule = get_field('modules', 'id', 'name', 'wiki');
-        $cm = get_record('course_modules', 'course', $wiki->course, 'module', $coursemodule, 'instance', $wiki->id);
+        $coursemodule = $DB->get_field('modules', 'id', array('name' => 'wiki'));
+        $cm = $DB->get_record('course_modules', array('course' => $wiki->course, 'module' => $coursemodule, 'instance' => $wiki->id));
         $context = get_context_instance(CONTEXT_MODULE, $cm->id);
         foreach($entries as $entry) {
     
@@ -179,8 +197,10 @@ function wiki_get_content_for_index(&$wiki) {
             $pages = wiki_get_latest_pages($entry);
             if (is_array($pages)) {
                 foreach($pages as $page) {
-                    if (strlen($page->content) > 0) {
-                        $documents[] = new WikiSearchDocument(get_object_vars($page), $entry->wikiid, $entry->course, $entry->groupid, $page->userid, $context->id);
+                    if (strlen($page->title) > 0) {
+                        $owner = $DB->get_record('user', array('id' => $page->userid));
+                        $page->author = fullname($owner);
+                        $documents[] = new WikiSearchDocument(get_object_vars($page), $entry->wikiid, $wiki->course, $entry->groupid, $page->userid, $context->id);
                     } 
                 } 
             } 
@@ -191,17 +211,23 @@ function wiki_get_content_for_index(&$wiki) {
 
 /**
 * returns a single wiki search document based on a wiki_entry id
-* @param id the id of the wiki
-* @param itemtype the type of information (standard)
+* @uses $DB;
+* @param int $id the id of the wiki
+* @param string $itemtype the type of information (standard)
 * @return a searchable document
 */
 function wiki_single_document($id, $itemtype) {
-    $page = get_record('wiki_pages', 'id', $id);
-    $entry = get_record('wiki_entries', 'id', $page->wiki);
-    $coursemodule = get_field('modules', 'id', 'name', 'wiki');
-    $cm = get_record('course_modules', 'course', $entry->course, 'module', $coursemodule, 'instance', $entry->wikiid);
+    global $DB;
+
+    $page = $DB->get_record('wiki_pages', array('id' => $id));
+    $entry = $DB->get_record('wiki_subwikis', array('id' => $page->subwikiid));
+    $wiki = $DB->get_record('wiki', array('id' => $entry->wikiid));
+    $coursemodule = $DB->get_field('modules', 'id', array('name' => 'wiki'));
+    $cm = $DB->get_record('course_modules', array('course' => $wiki->course, 'module' => $coursemodule, 'instance' => $entry->wikiid));
     $context = get_context_instance(CONTEXT_MODULE, $cm->id);
-    return new WikiSearchDocument(get_object_vars($page), $entry->wikiid, $entry->course, $entry->groupid, $page->userid, $context->id);
+    $user = $DB->get_record('user', array('id' => $page->userid));
+    $page->author = fullname($user);
+    return new WikiSearchDocument(get_object_vars($page), $entry->wikiid, $wiki->course, $entry->groupid, $page->userid, $context->id);
 }
 
 /**
@@ -217,8 +243,8 @@ function wiki_delete($info, $itemtype) {
 
 //returns the var names needed to build a sql query for addition/deletions
 function wiki_db_names() {
-    //[primary id], [table name], [time created field name], [time modified field name]
-    return array(array('id', 'wiki_pages', 'created', 'lastmodified', 'standard'));
+    //[primary id], [table name], [time created field name], [time modified field name], [docsubtype], [additional where conditions for sql]
+    return array(array('id', 'wiki_pages', 'timecreated', 'timemodified', 'standard'));
 }
 
 /**
@@ -228,35 +254,53 @@ function wiki_db_names() {
 * - user is legitimate in the surrounding context
 * - user may be guest and guest access is allowed to the module
 * - the function may perform local checks within the module information logic
-* @param path the access path to the module script code
-* @param itemtype the information subclassing (usefull for complex modules, defaults to 'standard')
-* @param this_id the item id within the information class denoted by itemtype. In wikies, this id 
+* @param string $path the access path to the module script code
+* @param string $itemtype the information subclassing (usefull for complex modules, defaults to 'standard')
+* @param int $this_id the item id within the information class denoted by itemtype. In wikies, this id
 * points out the indexed wiki page.
-* @param user the user record denoting the user who searches
-* @param group_id the current group used by the user when searching
-* @uses CFG
+* @param object $user the user record denoting the user who searches
+* @param int $group_id the current group used by the user when searching
+* @param int $context_id a context that eventually comes with the object
+* @uses $CFG, $DB
 * @return true if access is allowed, false elsewhere
 */
 function wiki_check_text_access($path, $itemtype, $this_id, $user, $group_id, $context_id){
-    global $CFG;
+    global $CFG, $DB, $SESSION;
     
     // get the wiki object and all related stuff
-    $page = get_record('wiki_pages', 'id', $this_id);
-    $wiki = get_record('wiki', 'id', $page->wiki);
-    $course = get_record('course', 'id', $wiki->course);
-    $context = get_record('context', 'id', $context_id);
-    $cm = get_record('course_modules', 'id', $context->instanceid);
+    $page = $DB->get_record('wiki_pages', array('id' => $this_id));
+    $wiki = $DB->get_record('wiki', array('id' => $page->wiki));
+    $course = $DB->get_record('course', array('id' => $wiki->course));
+    $context = $DB->get_record('context', array('id' => $context_id));
+    $cm = $DB->get_record('course_modules', array('id' => $context->instanceid));
+
     if (empty($cm)) return false; // Shirai 20090530 - MDL19342 - course module might have been delete
 
-    if (!$cm->visible and !has_capability('moodle/course:viewhiddenactivities', $context)) {
+    if (!$cm->visible && !has_capability('moodle/course:viewhiddenactivities', $context)) {
         if (!empty($CFG->search_access_debug)) echo "search reject : hidden wiki ";
         return false;
     }
     
     //group consistency check : checks the following situations about groups
     // trap if user is not same group and groups are separated
-    $current_group = get_current_group($course->id);
-    if ((groupmode($course) == SEPARATEGROUPS) && $group_id != $current_group && !has_capability('moodle/site:accessallgroups', $context)) {
+    if (isset($SESSION->currentgroup[$course->id])) {
+        $current_group =  $SESSION->currentgroup[$course->id];
+    } else {
+        $current_group = groups_get_all_groups($course->id, $USER->id);
+        if (is_array($current_group)) {
+            $current_group = array_shift(array_keys($current_group));
+            $SESSION->currentgroup[$course->id] = $current_group;
+        } else {
+            $current_group = 0;
+        }
+    }
+
+    if (isset($cm->groupmode) && empty($course->groupmodeforce)) {
+        $groupmode =  $cm->groupmode;
+    } else {
+        $groupmode = $course->groupmode;
+    }
+    if (($groupmode == SEPARATEGROUPS) && $group_id != $current_group && !has_capability('moodle/site:accessallgroups', $context)) {
         if (!empty($CFG->search_access_debug)) echo "search reject : separated group owner wiki ";
         return false;
     }
