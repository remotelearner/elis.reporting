diff --git a/search/documents/glossary_document.php b/search/documents/glossary_document.php
index aa71376..ac04e9b 100644
--- a/search/documents/glossary_document.php
+++ b/search/documents/glossary_document.php
@@ -6,8 +6,10 @@
 * @category core
 * @subpackage document_wrappers
 * @author Michael Campanis (mchampan) [cynnical@gmail.com], Valery Fremaux [valery.fremaux@club-internet.fr] > 1.8
+* @contributor Tatsuva Shirai 20090530
 * @date 2008/03/31
 * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+* @version Moodle 2.0
 *
 * document handling for glossary activity module
 * This file contains a mapping between a glossary entry and it's indexable counterpart,
@@ -33,6 +35,8 @@ class GlossarySearchDocument extends SearchDocument {
     *
     */
     public function __construct(&$entry, $course_id, $context_id) {
+        global $DB; 
+        
         // generic information; required
         $doc->docid     = $entry['id'];
         $doc->documenttype  = SEARCH_TYPE_GLOSSARY;
@@ -43,7 +47,7 @@ class GlossarySearchDocument extends SearchDocument {
         $doc->date      = $entry['timecreated'];
 
         if ($entry['userid'])
-            $user = get_record('user', 'id', $entry['userid']);
+            $user = $DB->get_record('user', array('id' => $entry['userid']));
         $doc->author    = ($user ) ? $user->firstname.' '.$user->lastname : '' ;
         $doc->contents  = strip_tags($entry['definition']);
         $doc->url       = glossary_make_link($entry['id']);
@@ -64,22 +68,25 @@ class GlossaryCommentSearchDocument extends SearchDocument {
     
     /**
     * document constructor
+    * @uses $DB
     */
     public function __construct(&$entry, $glossary_id, $course_id, $context_id) {
+        global $DB;
+        
         // generic information; required
-        $doc->docid     = $entry['id'];
+        $doc->docid     = $entry['itemid'];
         $doc->documenttype  = SEARCH_TYPE_GLOSSARY;
         $doc->itemtype      = 'comment';
         $doc->contextid     = $context_id;
 
         $doc->title     = get_string('commenton', 'search') . ' ' . $entry['concept'];
-        $doc->date      = $entry['timemodified'];
+        $doc->date      = $entry['timecreated'];
 
         if ($entry['userid'])
-            $user = get_record('user', 'id', $entry['userid']);
+            $user = $DB->get_record('user', array('id' => $entry['userid']));
         $doc->author    = ($user ) ? $user->firstname.' '.$user->lastname : '' ;
-        $doc->contents  = strip_tags($entry['entrycomment']);
-        $doc->url       = glossary_make_link($entry['entryid']);
+        $doc->contents  = strip_tags($entry['content']);
+        $doc->url       = glossary_make_link($entry['itemid']);
         
         // module specific information; optional
         $data->glossary = $glossary_id;
@@ -91,11 +98,13 @@ class GlossaryCommentSearchDocument extends SearchDocument {
   
 /**
 * constructs valid access links to information
-* @param entry_id the id of the glossary entry
+* @uses $CFG
+* @param int $entry_id the id of the glossary entry
 * @return a full featured link element as a string
 */
 function glossary_make_link($entry_id) {
     global $CFG;
+    require_once($CFG->dirroot.'/search/querylib.php');
 
     //links directly to entry
     // return $CFG->wwwroot.'/mod/glossary/showentry.php?eid='.$entry_id;
@@ -104,7 +113,9 @@ function glossary_make_link($entry_id) {
     // Suggestion : bounce on popup within the glossarie's showentry page
     // preserve glossary pop-up, be careful where you place your ' and "s
     //this function is meant to return a url that is placed between href='[url here]'
-    return "$CFG->wwwroot/mod/glossary/showentry.php?eid=$entry_id' onclick='return openpopup(\"/mod/glossary/showentry.php?eid=$entry_id\", \"entry\", DEFAULT_POPUP_SETTINGS, 0);";
+    $jsondata = array('url'=>'/mod/glossary/showentry.php?eid='.$entry_id,'name'=>'entry','options'=>DEFAULT_POPUP_SETTINGS);
+    $jsondata = json_encode($jsondata);
+    return "$CFG->wwwroot/mod/glossary/showentry.php?eid=$entry_id' onclick='return openpopup(null, $jsondata);";
 } 
 
 /**
@@ -112,27 +123,30 @@ function glossary_make_link($entry_id) {
 *
 */
 function glossary_iterator() {
-     $glossaries = get_records('glossary');
+    global $DB;
+    
+    $glossaries = $DB->get_records('glossary');
      return $glossaries;
 }
 
 /**
 * part of search engine API
-* @glossary a glossary instance
+* @uses $DB
+* @param object $glossary a glossary instance
 * @return an array of searchable documents
 */
 function glossary_get_content_for_index(&$glossary) {
-    // global $DB;
+    global $DB;
 
     // get context
-    $coursemodule = get_field('modules', 'id', 'name', 'glossary');
-    $cm = get_record('course_modules', 'course', $glossary->course, 'module', $coursemodule, 'instance', $glossary->id);
+    $coursemodule = $DB->get_field('modules', 'id', array('name' => 'glossary'));
+    $cm = $DB->get_record('course_modules', array('course' => $glossary->course, 'module' => $coursemodule, 'instance' => $glossary->id));
     $context = get_context_instance(CONTEXT_MODULE, $cm->id);
 
     $documents = array();
     $entryIds = array();
     // index entries
-    $entries = get_records('glossary_entries', 'glossaryid', $glossary->id);
+    $entries = $DB->get_records('glossary_entries', array('glossaryid' => $glossary->id));
     if ($entries){
         foreach($entries as $entry) {
             $concepts[$entry->id] = $entry->concept;
@@ -145,7 +159,14 @@ function glossary_get_content_for_index(&$glossary) {
     
     // index comments
     if (count($entryIds)){
-        $comments = get_records_list('glossary_comments', 'entryid', implode(',',$entryIds));
+        list($entryidssql, $params) = $DB->get_in_or_equal($entryIds, SQL_PARAMS_NAMED);
+        $params['ctxid'] = $context->id;
+        $sql = "SELECT *
+                  FROM {comments}
+                 WHERE contextid = :ctxid 
+                    AND itemid $entryidssql";
+        $comments = $DB->get_recordset_sql($sql, $params);
+
         if ($comments){
             foreach($comments as $comment) {
                 if (strlen($comment->entrycomment) > 0) {
@@ -160,21 +181,24 @@ function glossary_get_content_for_index(&$glossary) {
 
 /**
 * part of search engine API
-* @param id the glossary entry identifier
-* @itemtype the type of information
+* @uses $DB
+* @param int $id the glossary entry identifier
+* @param string $itemtype the type of information
 * @return a single search document based on a glossary entry
 */
 function glossary_single_document($id, $itemtype) {
+    global $DB;
+    
     if ($itemtype == 'standard'){
-        $entry = get_record('glossary_entries', 'id', $id);
+        $entry = $DB->get_record('glossary_entries', array('id' => $id));
     }
     elseif ($itemtype == 'comment'){
-        $comment = get_record('glossary_comments', 'id', $id);
-        $entry = get_record('glossary_entries', 'id', $comment->entryid);
+        $comment = $DB->get_record('glossary_comments', array('id' => $id));
+        $entry = $DB->get_record('glossary_entries', array('id' => $comment->entryid));
     }
-    $glossary_course = get_field('glossary', 'course', 'id', $entry->glossaryid);
-    $coursemodule = get_field('modules', 'id', 'name', 'glossary');
-    $cm = get_record('course_modules', 'course', $glossary_course, 'module', $coursemodule, 'instance', $entry->glossaryid);
+    $glossary_course = $DB->get_field('glossary', 'course', array('id' => $entry->glossaryid));
+    $coursemodule = $DB->get_field('modules', 'id', array('name' => 'glossary'));
+    $cm = $DB->get_record('course_modules', array('course' => $glossary_course, 'module' => $coursemodule, 'instance' => $entry->glossaryid));
     $context = get_context_instance(CONTEXT_MODULE, $cm->id);
     if ($itemtype == 'standard'){
         return new GlossarySearchDocument(get_object_vars($entry), $glossary_course, $context->id);
@@ -203,7 +227,7 @@ function glossary_db_names() {
     //[primary id], [table name], [time created field name], [time modified field name]
     return array(
         array('id', 'glossary_entries', 'timecreated', 'timemodified', 'standard'),
-        array('id', 'glossary_comments', 'timemodified', 'timemodified', 'comment')
+        array('id', 'comments', 'timecreated', 'timecreated', 'comment')
     );
 }
 
@@ -214,6 +238,7 @@ function glossary_db_names() {
 * - user is legitimate in the surrounding context
 * - user may be guest and guest access is allowed to the module
 * - the function may perform local checks within the module information logic
+* @uses $CFG, $DB
 * @param string $path the access path to the module script code
 * @param string $itemtype the information subclassing (usefull for complex modules, defaults to 'standard')
 * @param int $this_id the item id within the information class denoted by itemtype. In glossaries, this id 
@@ -224,15 +249,15 @@ function glossary_db_names() {
 * @return true if access is allowed, false elsewhere
 */
 function glossary_check_text_access($path, $itemtype, $this_id, $user, $group_id, $context_id){
-    global $CFG;
+    global $CFG, $DB;
     
     // get the glossary object and all related stuff
-    $entry = get_record('glossary_entries', 'id', $this_id);
-    $glossary = get_record('glossary', 'id', $entry->glossaryid);
-    $context = get_record('context', 'id', $context_id);
-    $cm = get_record('course_modules', 'id', $context->instanceid);
-    // $cm = get_coursemodule_from_instance('glossary', $glossary->id, $glossary->course);
-    // $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+    $entry = $DB->get_record('glossary_entries', array('id' => $this_id));
+    $glossary = $DB->get_record('glossary', array('id' => $entry->glossaryid));
+    $context = $DB->get_record('context', array('id' => $context_id));
+    $cm = $DB->get_record('course_modules', array('id' => $context->instanceid));
+
+    if (empty($cm)) return false; // Shirai 20090530 - MDL19342 - course module might have been delete
 
     if (!$cm->visible && !has_capability('moodle/course:viewhiddenactivities', $context)) {
         return false;
