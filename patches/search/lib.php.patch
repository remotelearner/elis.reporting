diff --git a/search/lib.php b/search/lib.php
index ab6040a..d93a633 100644
--- a/search/lib.php
+++ b/search/lib.php
@@ -7,6 +7,7 @@
 * @subpackage search_engine
 * @author Michael Champanis (mchampan) [cynnical@gmail.com], Valery Fremaux [valery.fremaux@club-internet.fr] > 1.8
 * @date 2008/03/31
+* @version prepared for 2.0
 * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
 *
 * General function library
@@ -19,11 +20,11 @@
 /**
 * Constants
 */
-define('SEARCH_INDEX_PATH', "{$CFG->dataroot}/search");
+define('SEARCH_INDEX_PATH', $CFG->dataroot.'/search');
 define('SEARCH_DATABASE_TABLE', 'block_search_documents');
 
 // get document types
-include "{$CFG->dirroot}/search/searchtypes.php";
+include_once $CFG->dirroot.'/search/searchtypes.php';
 
 /**
 * collects all searchable items identities
@@ -32,26 +33,29 @@ include "{$CFG->dirroot}/search/searchtypes.php";
 * @return an array of names or an array of type descriptors
 */
 function search_collect_searchables($namelist=false, $verbose=true){
-    global $CFG;
+    global $CFG, $DB;
     
     $searchables = array();
     $searchables_names = array();
     
 /// get all installed modules
-    if ($mods = get_records('modules', '', '', 'name', 'id,name')){
+    if ($mods = $DB->get_records('modules', null, 'name', 'id,name')){
 
         $searchabletypes = array_values(search_get_document_types());
 
         foreach($mods as $mod){
+            $plugin = new StdClass();
+            $plugin->name = $mod->name;
+            $plugin->type = 'mod';
             if (in_array($mod->name, $searchabletypes)){
-                $mod->location = 'internal';
-                $searchables[$mod->name] = $mod;
+                $plugin->location = 'internal';
+                $searchables[$plugin->name] = $plugin;
                 $searchables_names[] = $mod->name;
             } else {
                 $documentfile = $CFG->dirroot."/mod/{$mod->name}/search_document.php";
-                $mod->location = 'mod';
+                $plugin->location = 'mod';
                 if (file_exists($documentfile)){
-                    $searchables[$mod->name] = $mod;
+                    $searchables[$plugin->name] = $plugin;
                     $searchables_names[] = $mod->name;
                 }
             }        
@@ -60,22 +64,25 @@ function search_collect_searchables($namelist=false, $verbose=true){
     }
       
 /// collects blocks as indexable information may be found in blocks either
-    if ($blocks = get_records('block', '', '', 'name', 'id,name')) {
+    if ($blocks = $DB->get_records('block', null, 'name', 'id,name')) {
         $blocks_searchables = array();
         // prepend the "block_" prefix to discriminate document type plugins
         foreach($blocks as $block){
-            $block->dirname = $block->name;
-            $block->name = 'block_'.$block->name;
+            $plugin = new StdClass();
+            $plugin->dirname = $block->name;
+            $plugin->name = 'block_'.$block->name;
             if (in_array('SEARCH_TYPE_'.strtoupper($block->name), $searchabletypes)){
-                $mod->location = 'internal';
-                $blocks_searchables[] = $block;
-                $searchables_names[] = $block->name;
+                $plugin->location = 'internal';
+                $plugin->type = 'block';
+                $blocks_searchables[$plugin->name] = $plugin;
+                $searchables_names[] = $plugin->name;
             } else {
-                $documentfile = $CFG->dirroot."/blocks/{$block->dirname}/search_document.php";
+                $documentfile = $CFG->dirroot."/blocks/{$plugin->dirname}/search_document.php";
                 if (file_exists($documentfile)){
-                    $mod->location = 'blocks';
-                    $blocks_searchables[$block->name] = $block;
-                    $searchables_names[] = $block->name;
+                    $plugin->location = 'blocks';
+                    $plugin->type = 'block';
+                    $blocks_searchables[$plugin->name] = $plugin;
+                    $searchables_names[] = $plugin->name;
                 }
             }        
         }    
@@ -85,7 +92,7 @@ function search_collect_searchables($namelist=false, $verbose=true){
       
 /// add virtual modules onto the back of the array
 
-    $additional = search_get_additional_modules();
+    $additional = search_get_additional_modules($searchables_names);
     if (!empty($additional)){
         if ($verbose) mtrace(count($additional).' additional to search in.');
         $searchables = array_merge($searchables, $additional);
@@ -120,7 +127,7 @@ function search_get_document_types($prefix = 'SEARCH_TYPE_') {
 * virtual modules to be added to the index, i.e. non-module specific
 * information.
 */
-function search_get_additional_modules() {
+function search_get_additional_modules(&$searchables_names) {
     $extras = array(/* additional keywords go here */);
     if (defined('SEARCH_EXTRAS')){
         $extras = explode(',', SEARCH_EXTRAS);
@@ -129,12 +136,16 @@ function search_get_additional_modules() {
     $ret = array();
     $temp = new StdClass;
     foreach($extras as $extra) {
-        $temp->name = $extra;
-        $temp->location = 'internal';
-        $ret[$temp->name] = clone($temp);
+        $plugin = new StdClass();
+        $plugin->name = $extra;
+        $plugin->location = 'internal';
+        eval('$plugin->type = TYPE_FOR_SEARCH_TYPE_'.strtoupper($extra).';');
+        $ret[$plugin->name] = $plugin;
+        $searchables_names[] = $extra;
     } 
+
     return $ret;
-} //search_get_additional_modules
+}
 
 /**
 * shortens a url so it can fit on the results page
@@ -143,33 +154,7 @@ function search_get_additional_modules() {
 */
 function search_shorten_url($url, $length=30) {
     return substr($url, 0, $length)."...";
-} //search_shorten_url
-
-/**
-* a local function for escaping
-* @param str the string to escape
-* @return the escaped string
-*/
-function search_escape_string($str) {
-    global $CFG, $db;
-
-    switch ($CFG->dbfamily) {
-        case 'mysql':
-            if ($CFG->dbtype == 'mysqli') {
-                //ugly hack for 1.9 stable ONLY to get it to work for mysqli.
-                $s = mysqli_real_escape_string($db->_connectionID, $str);
-            } else {
-                $s = mysql_real_escape_string($str);
-            }
-            break;
-        case 'postgres':
-            $s = pg_escape_string($str);
-            break;
-        default:
-            $s = addslashes($str);
-    }
-    return $s;
-} //search_escape_string
+}
 
 /**
 * simple timer function, on first call, records a current microtime stamp, outputs result on 2nd call
@@ -182,11 +167,10 @@ function search_stopwatch($cli = false) {
         print round(microtime(true) - $GLOBALS['search_script_start_time'], 6).' '.get_string('seconds', 'search');
         if (!$cli) print '</em>';
         unset($GLOBALS['search_script_start_time']);
-    } 
-    else {
+    } else {
         $GLOBALS['search_script_start_time'] = microtime(true);
     } 
-} //search_stopwatch
+}
 
 /**
 * print and exit (for debugging)
@@ -200,6 +184,14 @@ function search_pexit($str = "") {
         print $str."<br/>";
     }
     exit(0);
-} //search_pexit
+}
+
+function search_updatedcallback($name) {
+    global $CFG, $DB;
+    // set block to hidden when global search is disabled.
+    if ($CFG->enableglobalsearch != 1) {
+        $DB->set_field('block', 'visible', 0, array('name'=>'search'));     // Hide block
+    }
+}
 
 ?>
