diff --git a/course/report/participation/index.php b/course/report/participation/index.php
index 0644ac3..d66fd79 100644
--- a/course/report/participation/index.php
+++ b/course/report/participation/index.php
@@ -1,4 +1,4 @@
-<?php  // $Id$
+<?php
 
     require_once('../../../config.php');
     require_once($CFG->dirroot.'/lib/tablelib.php');
@@ -14,15 +14,25 @@
     $page       = optional_param('page', 0, PARAM_INT);                     // which page to show
     $perpage    = optional_param('perpage', DEFAULT_PAGE_SIZE, PARAM_INT);  // how many per page
 
+    $url = new moodle_url('/course/report/participation/index.php', array('id'=>$id));
+    if ($roleid !== 0) $url->param('roleid');
+    if ($instanceid !== 0) $url->param('instanceid');
+    if ($timefrom !== 0) $url->param('timefrom');
+    if ($action !== '') $url->param('action');
+    if ($page !== 0) $url->param('page');
+    if ($perpage !== DEFAULT_PAGE_SIZE) $url->param('perpage');
+    $PAGE->set_url($url);
+    $PAGE->set_pagelayout('admin');
+
     if ($action != 'view' and $action != 'post') {
         $action = ''; // default to all (don't restrict)
     }
 
-    if (!$course = get_record('course', 'id', $id)) {
+    if (!$course = $DB->get_record('course', array('id'=>$id))) {
         print_error('invalidcourse');
     }
 
-    if ($roleid != 0 and !$role = get_record('role', 'id', $roleid)) {
+    if ($roleid != 0 and !$role = $DB->get_record('role', array('id'=>$roleid))) {
         print_error('invalidrole');
     }
 
@@ -47,31 +57,37 @@
         $action = '';
     }
 
-    $navlinks = array();
-    $navlinks[] = array('name' => $strreports, 'link' => "../../report.php?id=$course->id", 'type' => 'misc');
-    $navlinks[] = array('name' => $strparticipation, 'link' => null, 'type' => 'misc');
-    $navigation = build_navigation($navlinks);
-    print_header("$course->shortname: $strparticipation", $course->fullname, $navigation);
+    $PAGE->set_title($course->shortname .': '. $strparticipation);
+    $PAGE->set_heading($course->fullname);
+    echo $OUTPUT->header();
 
     $modinfo = get_fast_modinfo($course);
 
-    $modules = get_records_select('modules', "visible = 1 AND name <> 'label'", 'name ASC');
+    $modules = $DB->get_records_select('modules', "visible = 1", null, 'name ASC');
 
     $instanceoptions = array();
     foreach ($modules as $module) {
         if (empty($modinfo->instances[$module->name])) {
             continue;
         }
-        $agroup = get_string('modulenameplural', $module->name);
-        $instanceoptions[$agroup] = array();
+        $instances = array();
         foreach ($modinfo->instances[$module->name] as $cm) {
-            $instanceoptions[$agroup][$cm->id] = format_string($cm->name);
+            // Skip modules such as label which do not actually have links;
+            // this means there's nothing to participate in
+            if (!$cm->has_view()) {
+                continue;
         }
+            $instances[$cm->id] = format_string($cm->name);
+        }
+        if (count($instances) == 0) {
+            continue;
+        }
+        $instanceoptions[] = array(get_string('modulenameplural', $module->name)=>$instances);
     }
 
     $timeoptions = array();
     // get minimum log time for this course
-    $minlog = get_field_sql('SELECT min(time) FROM '.$CFG->prefix.'log WHERE course = '.$course->id);
+    $minlog = $DB->get_field_sql('SELECT min(time) FROM {log} WHERE course = ?', array($course->id));
 
     $now = usergetmidnight(time());
 
@@ -99,6 +115,7 @@
     }
 
     $roleoptions = array();
+    // TODO: we need a new list of roles that are visible here
     if ($roles = get_roles_used_in_context($context)) {
         foreach ($roles as $r) {
             $roleoptions[$r->id] = $r->name;
@@ -115,14 +132,13 @@
     echo '<form class="participationselectform" action="index.php" method="get"><div>'."\n".
          '<input type="hidden" name="id" value="'.$course->id.'" />'."\n";
     echo '<label for="menuinstanceid">'.get_string('activitymodule').'</label>'."\n";
-    choose_from_menu_nested($instanceoptions,'instanceid',$instanceid);
+    echo html_writer::select($instanceoptions, 'instanceid', $instanceid);
     echo '<label for="menutimefrom">'.get_string('lookback').'</label>'."\n";
-    choose_from_menu($timeoptions,'timefrom',$timefrom);
+    echo html_writer::select($timeoptions,'timefrom',$timefrom);
     echo '<label for="menuroleid">'.get_string('showonly').'</label>'."\n";
-    choose_from_menu($roleoptions,'roleid',$roleid,'');
+    echo html_writer::select($roleoptions,'roleid',$roleid,false);
     echo '<label for="menuaction">'.get_string('showactions').'</label>'."\n";
-    choose_from_menu($actionoptions,'action',$action,'');
-    helpbutton('participationreport',get_string('participationreport'));
+    echo html_writer::select($actionoptions,'action',$action,false);
     echo '<input type="submit" value="'.get_string('go').'" />'."\n</div></form>\n";
 
     $baseurl =  $CFG->wwwroot.'/course/report/participation/index.php?id='.$course->id.'&amp;roleid='
@@ -170,28 +186,35 @@
 
         switch ($action) {
             case 'view':
-                $actionsql = 'action IN (\''.implode('\',\'', $viewnames).'\' )';
+                $actions = $viewnames;
                 break;
             case 'post':
-                $actionsql = 'action IN (\''.implode('\',\'', $postnames).'\' )';
+                $actions = $postnames;
                 break;
             default:
                 // some modules have stuff we want to hide, ie mail blocked etc so do actually need to limit here.
-                $actionsql = 'action IN (\''.implode('\',\'', array_merge($viewnames, $postnames)).'\' )';
+                $actions = array_merge($viewnames, $postnames);
         }
 
+        list($actionsql, $params) = $DB->get_in_or_equal($actions, SQL_PARAMS_NAMED, 'action');
+        $actionsql = "action $actionsql";
+
         $relatedcontexts = get_related_contexts_string($context);
 
         $sql = "SELECT ra.userid, u.firstname, u.lastname, u.idnumber, l.actioncount AS count
-                FROM (SELECT * FROM {$CFG->prefix}role_assignments WHERE contextid $relatedcontexts AND roleid = $roleid ) ra
-                JOIN {$CFG->prefix}user u ON u.id = ra.userid
+                FROM (SELECT * FROM {role_assignments} WHERE contextid $relatedcontexts AND roleid = :roleid ) ra
+                JOIN {user} u ON u.id = ra.userid
                 LEFT JOIN (
-                    SELECT userid, COUNT(action) AS actioncount FROM {$CFG->prefix}log WHERE cmid = $instanceid AND time > $timefrom AND $actionsql GROUP BY userid
+                    SELECT userid, COUNT(action) AS actioncount FROM {log} WHERE cmid = :instanceid AND time > :timefrom AND $actionsql GROUP BY userid
                 ) l ON (l.userid = ra.userid)";
+        $params['roleid'] = $roleid;
+        $params['instanceid'] = $instanceid;
+        $params['timefrom'] = $timefrom;
 
-
-        if ($table->get_sql_where()) {
-            $sql .= ' WHERE '.$table->get_sql_where(); //initial bar
+        list($twhere, $tparams) = $table->get_sql_where();
+        if ($twhere) {
+            $sql .= ' WHERE '.$twhere; //initial bar
+            $params = array_merge($params, $tparams);
         }
 
         if ($table->get_sql_sort()) {
@@ -199,13 +222,14 @@
         }
 
         $countsql = "SELECT COUNT(DISTINCT(ra.userid))
-                       FROM {$CFG->prefix}role_assignments ra
-                      WHERE ra.contextid $relatedcontexts AND ra.roleid = $roleid";
+                       FROM {role_assignments} ra
+                       JOIN {user} u ON u.id = ra.userid
+                      WHERE ra.contextid $relatedcontexts AND ra.roleid = :roleid";
 
-        $totalcount = count_records_sql($countsql);
+        $totalcount = $DB->count_records_sql($countsql, $params);
 
-        if ($table->get_sql_where()) {
-            $matchcount = count_records_sql($countsql.' AND '.$table->get_sql_where());
+        if ($twhere) {
+            $matchcount = $DB->count_records_sql($countsql.' AND '.$twhere, $params);
         } else {
             $matchcount = $totalcount;
         }
@@ -217,7 +241,7 @@
         $table->initialbars($totalcount > $perpage);
         $table->pagesize($perpage, $matchcount);
 
-        if (!$users = get_records_sql($sql, $table->get_page_start(), $table->get_page_size())) {
+        if (!$users = $DB->get_records_sql($sql, $params, $table->get_page_start(), $table->get_page_size())) {
             $users = array(); // tablelib will handle saying 'Nothing to display' for us.
         }
 
@@ -231,54 +255,17 @@
         }
 
         echo '<h2>'.get_string('counteditems', '', $a).'</h2>'."\n";
-        echo '
-<script type="text/javascript">
-//<![CDATA[
-function checksubmit(form) {
-    var destination = form.formaction.options[form.formaction.selectedIndex].value;
-    if (destination == "" || !checkchecked(form)) {
-        form.formaction.selectedIndex = 0;
-        return false;
-    } else {
-        return true;
-    }
-}
-
-function checkchecked(form) {
-    var inputs = document.getElementsByTagName(\'INPUT\');
-    var checked = false;
-    inputs = filterByParent(inputs, function() {return form;});
-    for(var i = 0; i < inputs.length; ++i) {
-        if(inputs[i].type == \'checkbox\' && inputs[i].checked) {
-            checked = true;
-        }
-    }
-    return checked;
-}
-
-function checknos() {
-    void(d=document);
-    void(el=d.getElementsByTagName(\'INPUT\'));
-    for(i=0;i<el.length;i++) {
-        if (el[i].value == 0) {
-            void(el[i].checked=1)
-        }
-    }
-}
 
-//]]>
-</script>
-';
-        echo '<form action="'.$CFG->wwwroot.'/user/action_redir.php" method="post" id="studentsform" onsubmit="return checksubmit(this);">'."\n";
+        echo '<form action="'.$CFG->wwwroot.'/user/action_redir.php" method="post" id="studentsform">'."\n";
         echo '<div>'."\n";
         echo '<input type="hidden" name="id" value="'.$id.'" />'."\n";
-        echo '<input type="hidden" name="returnto" value="'. format_string($_SERVER['REQUEST_URI']) .'" />'."\n";
-        echo '<input type="hidden" name="sesskey" value="'.$USER->sesskey.'" />'."\n";
+        echo '<input type="hidden" name="returnto" value="'. s($FULLME) .'" />'."\n";
+        echo '<input type="hidden" name="sesskey" value="'.sesskey().'" />'."\n";
 
         foreach ($users as $u) {
             $data = array('<a href="'.$CFG->wwwroot.'/user/view.php?id='.$u->userid.'&amp;course='.$course->id.'">'.fullname($u,true).'</a>'."\n",
                           ((!empty($u->count)) ? get_string('yes').' ('.$u->count.') ' : get_string('no')),
-                          '<input type="checkbox" name="user'.$u->userid.'" value="'.$u->count.'" />'."\n",
+                          '<input type="checkbox" class="usercheckbox" name="user'.$u->userid.'" value="'.$u->count.'" />'."\n",
                           );
             $table->add_data($data);
         }
@@ -292,21 +279,27 @@ function checknos() {
             echo '<div id="showall"><a href="'.$baseurl.'&amp;perpage='.SHOW_ALL_PAGE_SIZE.'">'.get_string('showall', '', $matchcount).'</a></div>'."\n";
         }
 
-        echo '<input type="button" onclick="checkall()" value="'.get_string('selectall').'" /> '."\n";
-        echo '<input type="button" onclick="checknone()" value="'.get_string('deselectall').'" /> '."\n";
+        echo '<div class="selectbuttons">';
+        echo '<input type="button" id="checkall" value="'.get_string('selectall').'" /> '."\n";
+        echo '<input type="button" id="checknone" value="'.get_string('deselectall').'" /> '."\n";
         if ($perpage >= $matchcount) {
-            echo '<input type="button" onclick="checknos()" value="'.get_string('selectnos').'" />'."\n";
+            echo '<input type="button" id="checknos" value="'.get_string('selectnos').'" />'."\n";
         }
+        echo '</div>';
+        echo '<div>';
+        echo '<label for="formaction">'.get_string('withselectedusers').'</label>';
         $displaylist['messageselect.php'] = get_string('messageselectadd');
-        choose_from_menu ($displaylist, "formaction", "", get_string("withselectedusers"), "if(checksubmit(this.form))this.form.submit();", "");
-        helpbutton("participantswithselectedusers", get_string("withselectedusers"));
+        echo html_writer::select($displaylist, 'formaction', '', array(''=>'choosedots'), array('id'=>'formactionselect'));
+        echo $OUTPUT->help_icon('withselectedusers');
         echo '<input type="submit" value="' . get_string('ok') . '" />'."\n";
+        echo '</div>';
         echo '</div>'."\n";
         echo '</form>'."\n";
         echo '</div>'."\n";
 
+        $PAGE->requires->js_init_call('M.coursereport_participation.init');
     }
 
-    print_footer();
+    echo $OUTPUT->footer();
+
 
-?>
