diff --git a/course/view.php b/course/view.php
index d38a8a5..28ed124 100644
--- a/course/view.php
+++ b/course/view.php
@@ -1,12 +1,11 @@
-<?php // $Id$
+<?php
 
 //  Display the course home page.
 
     require_once('../config.php');
     require_once('lib.php');
-    require_once($CFG->libdir.'/blocklib.php');
-    require_once($CFG->libdir.'/ajax/ajaxlib.php');
     require_once($CFG->dirroot.'/mod/forum/lib.php');
+    require_once($CFG->libdir.'/completionlib.php');
 
     $id          = optional_param('id', 0, PARAM_INT);
     $name        = optional_param('name', '', PARAM_RAW);
@@ -19,26 +18,26 @@
     $marker      = optional_param('marker',-1 , PARAM_INT);
     $switchrole  = optional_param('switchrole',-1, PARAM_INT);
 
-
-
     if (empty($id) && empty($name) && empty($idnumber)) {
-        error("Must specify course id, short name or idnumber");
+        print_error('unspecifycourseid', 'error');
     }
 
     if (!empty($name)) {
-        if (! ($course = get_record('course', 'shortname', $name)) ) {
-            error('Invalid short course name');
+        if (! ($course = $DB->get_record('course', array('shortname'=>$name)))) {
+            print_error('invalidcoursenameshort', 'error');
         }
     } else if (!empty($idnumber)) {
-        if (! ($course = get_record('course', 'idnumber', $idnumber)) ) {
-            error('Invalid course idnumber');
+        if (! ($course = $DB->get_record('course', array('idnumber'=>$idnumber)))) {
+            print_error('invalidcourseid', 'error');
         }
     } else {
-        if (! ($course = get_record('course', 'id', $id)) ) {
-            error('Invalid course id');
+        if (! ($course = $DB->get_record('course', array('id'=>$id)))) {
+            print_error('invalidcourseid', 'error');
         }
     }
 
+    $PAGE->set_url('/course/view.php', array('id' => $course->id)); // Defined here to avoid notices on errors etc
+
     preload_course_contexts($course->id);
     if (!$context = get_context_instance(CONTEXT_COURSE, $course->id)) {
         print_error('nocontext');
@@ -57,7 +56,7 @@
         has_capability('moodle/role:switchroles', $context)) {
         // is this role assignable in this context?
         // inquiring minds want to know...
-        $aroles = get_assignable_roles_for_switchrole($context);
+        $aroles = get_switchable_roles($context);
         if (is_array($aroles) && isset($aroles[$switchrole])) {
             role_switch($switchrole, $context);
             // Double check that this role is allowed here
@@ -93,8 +92,9 @@
         $course->format = 'weeks';  // Default format is weeks
     }
 
-    $PAGE = page_create_object(PAGE_COURSE_VIEW, $course->id);
-    $pageblocks = blocks_setup($PAGE, BLOCKS_PINNED_BOTH);
+    $PAGE->set_pagelayout('course');
+    $PAGE->set_pagetype('course-view-' . $course->format);
+    $PAGE->set_other_editing_capability('moodle/course:manageactivities');
 
     if ($reset_user_allowed_editing) {
         // ugly hack
@@ -107,12 +107,14 @@
     if ($PAGE->user_allowed_editing()) {
         if (($edit == 1) and confirm_sesskey()) {
             $USER->editing = 1;
+            redirect($PAGE->url);
         } else if (($edit == 0) and confirm_sesskey()) {
             $USER->editing = 0;
             if(!empty($USER->activitycopy) && $USER->activitycopycourse == $course->id) {
                 $USER->activitycopy       = false;
                 $USER->activitycopycourse = NULL;
             }
+            redirect($PAGE->url);
         }
 
         if ($hide && confirm_sesskey()) {
@@ -126,8 +128,11 @@
         if (!empty($section)) {
             if (!empty($move) and confirm_sesskey()) {
                 if (!move_section($course, $section, $move)) {
-                    notify('An error occurred while moving a section');
+                    echo $OUTPUT->notification('An error occurred while moving a section');
                 }
+                // Clear the navigation cache at this point so that the affects
+                // are seen immediately on the navigation.
+                $PAGE->navigation->clear_cache();
             }
         }
     } else {
@@ -142,47 +147,21 @@
         redirect($CFG->wwwroot .'/');
     }
 
-
     // AJAX-capable course format?
     $useajax = false; 
-    $ajaxformatfile = $CFG->dirroot.'/course/format/'.$course->format.'/ajax.php';
-    $bodytags = '';
-
-    if (empty($CFG->disablecourseajax) and file_exists($ajaxformatfile)) {      // Needs to exist otherwise no AJAX by default
-
-        // TODO: stop abusing CFG global here
-        $CFG->ajaxcapable = false;           // May be overridden later by ajaxformatfile
-        $CFG->ajaxtestedbrowsers = array();  // May be overridden later by ajaxformatfile
-
-        require_once($ajaxformatfile);
-
-        if (!empty($USER->editing) && $CFG->ajaxcapable && has_capability('moodle/course:manageactivities', $context)) {
-                                                             // Course-based switches
-
-            if (ajaxenabled($CFG->ajaxtestedbrowsers)) {     // Browser, user and site-based switches
-                
-                require_js(array('yui_yahoo',
-                                 'yui_dom',
-                                 'yui_event',
-                                 'yui_dragdrop',
-                                 'yui_connection',
-                                 'yui_selector',
-                                 'yui_element',
-                                 'ajaxcourse_blocks',
-                                 'ajaxcourse_sections'));
-                
-                if (debugging('', DEBUG_DEVELOPER)) {
-                    require_js(array('yui_logger'));
-
-                    $bodytags = 'onload = "javascript:
-                    show_logger = function() {
-                        var logreader = new YAHOO.widget.LogReader();
-                        logreader.newestOnTop = false;
-                        logreader.setTitle(\'Moodle Debug: YUI Log Console\');
-                    };
-                    show_logger();
-                    "';
-                }
+    $formatajax = course_format_ajax_support($course->format);
+
+    if (!empty($CFG->enablecourseajax)
+            and $formatajax->capable
+            and !empty($USER->editing)
+            and ajaxenabled($formatajax->testedbrowsers)
+            and $PAGE->theme->enablecourseajax
+            and has_capability('moodle/course:manageactivities', $context)) {
+        $PAGE->requires->yui2_lib('dragdrop');
+        $PAGE->requires->yui2_lib('connection');
+        $PAGE->requires->yui2_lib('selector');
+        $PAGE->requires->js('/lib/ajax/block_classes.js', true);
+        $PAGE->requires->js('/lib/ajax/section_classes.js', true);
 
                 // Okay, global variable alert. VERY UGLY. We need to create
                 // this object here before the <blockname>_print_block()
@@ -191,15 +170,46 @@
                 $COURSE->javascriptportal = new jsportal();
                 $useajax = true;
             }
+
+    $CFG->blocksdrag = $useajax;   // this will add a new class to the header so we can style differently
+
+    $completion = new completion_info($course);
+    if ($completion->is_enabled() && ajaxenabled()) {
+        $PAGE->requires->string_for_js('completion-title-manual-y', 'completion');
+        $PAGE->requires->string_for_js('completion-title-manual-n', 'completion');
+        $PAGE->requires->string_for_js('completion-alt-manual-y', 'completion');
+        $PAGE->requires->string_for_js('completion-alt-manual-n', 'completion');
+
+        $PAGE->requires->js_init_call('M.core_completion.init');
         }
+
+    // We are currently keeping the button here from 1.x to help new teachers figure out
+    // what to do, even though the link also appears in the course admin block.  It also
+    // means you can back out of a situation where you removed the admin block. :)
+    if ($PAGE->user_allowed_editing()) {
+        $buttons = $OUTPUT->edit_button(new moodle_url('/course/view.php', array('id' => $course->id)));
+        $PAGE->set_button($buttons);
     }
 
-    $CFG->blocksdrag = $useajax;   // this will add a new class to the header so we can style differently
+    $PAGE->set_title(get_string('course') . ': ' . $course->fullname);
+    $PAGE->set_heading($course->fullname);
+    echo $OUTPUT->header();
 
+    if ($completion->is_enabled() && ajaxenabled()) {
+        // This value tracks whether there has been a dynamic change to the page.
+        // It is used so that if a user does this - (a) set some tickmarks, (b)
+        // go to another page, (c) clicks Back button - the page will
+        // automatically reload. Otherwise it would start with the wrong tick
+        // values.
+        echo html_writer::start_tag('form', array('action'=>'.', 'method'=>'get'));
+        echo html_writer::start_tag('div');
+        echo html_writer::empty_tag('input', array('type'=>'hidden', 'id'=>'completion_dynamic_change', 'name'=>'completion_dynamic_change', 'value'=>'0'));
+        echo html_writer::end_tag('div');
+        echo html_writer::end_tag('form');
+    }
 
-    $PAGE->print_header(get_string('course').': %fullname%', NULL, '', $bodytags);
     // Course wrapper start.
-    echo '<div class="course-content">';
+    echo html_writer::start_tag('div', array('class'=>'course-content'));
 
     $modinfo =& get_fast_modinfo($COURSE);
     get_all_mods($course->id, $mods, $modnames, $modnamesplural, $modnamesused);
@@ -214,35 +224,34 @@
 
     if (! $sections = get_all_sections($course->id)) {   // No sections found
         // Double-check to be extra sure
-        if (! $section = get_record('course_sections', 'course', $course->id, 'section', 0)) {
+        if (! $section = $DB->get_record('course_sections', array('course'=>$course->id, 'section'=>0))) {
             $section->course = $course->id;   // Create a default section.
             $section->section = 0;
             $section->visible = 1;
-            $section->id = insert_record('course_sections', $section);
+            $section->summaryformat = FORMAT_HTML;
+            $section->id = $DB->insert_record('course_sections', $section);
         }
         if (! $sections = get_all_sections($course->id) ) {      // Try again
-            error('Error finding or creating section structures for this course');
+            print_error('cannotcreateorfindstructs', 'error');
         }
     }
 
     // Include the actual course format.
     require($CFG->dirroot .'/course/format/'. $course->format .'/format.php');
     // Content wrapper end.
-    echo "</div>\n\n";
 
+    echo html_writer::end_tag('div');
 
     // Use AJAX?
     if ($useajax && has_capability('moodle/course:manageactivities', $context)) {
         // At the bottom because we want to process sections and activities
         // after the relevant html has been generated. We're forced to do this
         // because of the way in which lib/ajax/ajaxcourse.js is written.
-        echo '<script type="text/javascript" ';
-        echo "src=\"{$CFG->wwwroot}/lib/ajax/ajaxcourse.js\"></script>\n";
-
+        echo html_writer::script(false, new moodle_url('/lib/ajax/ajaxcourse.js'));
         $COURSE->javascriptportal->print_javascript($course->id);
     }
 
 
-    print_footer(NULL, $course);
+    echo $OUTPUT->footer();
+
 
-?>
