diff --git a/course/modedit.php b/course/modedit.php
index 2170034..cd84c00 100644
--- a/course/modedit.php
+++ b/course/modedit.php
@@ -1,128 +1,158 @@
-<?php // $Id$
-
-//  adds or updates modules in a course using new formslib
-
-    require_once("../config.php");
-    require_once("lib.php");
-    require_once($CFG->libdir.'/gradelib.php');
-
-    require_login();
-
-    $add           = optional_param('add', 0, PARAM_ALPHA);
-    $update        = optional_param('update', 0, PARAM_INT);
-    $return        = optional_param('return', 0, PARAM_BOOL); //return to course/view.php if false or mod/modname/view.php if true
-    $type          = optional_param('type', '', PARAM_ALPHANUM);
-
-    if (!empty($add)) {
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+* Adds or updates modules in a course using new formslib
+*
+* @package    moodlecore
+* @copyright  1999 onwards Martin Dougiamas (http://dougiamas.com)
+* @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+*/
+
+require_once("../config.php");
+require_once("lib.php");
+require_once($CFG->libdir.'/filelib.php');
+require_once($CFG->libdir.'/gradelib.php');
+require_once($CFG->libdir.'/completionlib.php');
+require_once($CFG->libdir.'/conditionlib.php');
+require_once($CFG->libdir.'/plagiarismlib.php');
+
+$add    = optional_param('add', '', PARAM_ALPHA);     // module name
+$update = optional_param('update', 0, PARAM_INT);
+$return = optional_param('return', 0, PARAM_BOOL);    //return to course/view.php if false or mod/modname/view.php if true
+$type   = optional_param('type', '', PARAM_ALPHANUM); //TODO: hopefully will be removed in 2.0
+
+$url = new moodle_url('/course/modedit.php');
+if (!empty($return)) {
+    $url->param('return', $return);
+}
+
+if (!empty($add)) {
         $section = required_param('section', PARAM_INT);
         $course = required_param('course', PARAM_INT);
 
-        if (! $course = get_record("course", "id", $course)) {
-            error("This course doesn't exist");
-        }
+    $url->param('add', $add);
+    $url->param('section', $section);
+    $url->param('course', $course);
+    $PAGE->set_url($url);
+
+    $course = $DB->get_record('course', array('id'=>$course), '*', MUST_EXIST);
+    $module = $DB->get_record('modules', array('name'=>$add), '*', MUST_EXIST);
 
         require_login($course);
         $context = get_context_instance(CONTEXT_COURSE, $course->id);
         require_capability('moodle/course:manageactivities', $context);
 
-        if (! $module = get_record("modules", "name", $add)) {
-            error("This module type doesn't exist");
-        }
-
         $cw = get_course_section($section, $course->id);
 
         if (!course_allowed_module($course, $module->id)) {
-            error("This module has been disabled for this particular course");
+        print_error('moduledisable');
         }
 
         $cm = null;
 
-        $form->section          = $section;  // The section number itself - relative!!! (section column in course_sections)
-        $form->visible          = $cw->visible;
-        $form->course           = $course->id;
-        $form->module           = $module->id;
-        $form->modulename       = $module->name;
-        $form->groupmode        = $course->groupmode;
-        $form->groupingid       = $course->defaultgroupingid;
-        $form->groupmembersonly = 0;
-        $form->instance         = '';
-        $form->coursemodule     = '';
-        $form->add              = $add;
-        $form->return           = 0; //must be false if this is an add, go back to course view on cancel
+    $data = new stdClass();
+    $data->section          = $section;  // The section number itself - relative!!! (section column in course_sections)
+    $data->visible          = $cw->visible;
+    $data->course           = $course->id;
+    $data->module           = $module->id;
+    $data->modulename       = $module->name;
+    $data->groupmode        = $course->groupmode;
+    $data->groupingid       = $course->defaultgroupingid;
+    $data->groupmembersonly = 0;
+    $data->id               = '';
+    $data->instance         = '';
+    $data->coursemodule     = '';
+    $data->add              = $add;
+    $data->return           = 0; //must be false if this is an add, go back to course view on cancel
 
-        // Turn off default grouping for modules that don't provide group mode
-        if($add=='resource' || $add=='glossary' || $add=='label') {
-            $form->groupingid=0;
+    if (plugin_supports('mod', $data->modulename, FEATURE_MOD_INTRO, true)) {
+        $draftid_editor = file_get_submitted_draft_itemid('introeditor');
+        file_prepare_draft_area($draftid_editor, null, null, null, null);
+        $data->introeditor = array('text'=>'', 'format'=>FORMAT_HTML, 'itemid'=>$draftid_editor); // TODO: add better default
         }
         
-        if (!empty($type)) {
-            $form->type = $type;
+    if (!empty($type)) { //TODO: hopefully will be removed in 2.0
+        $data->type = $type;
         }
 
-        $sectionname = get_section_name($course->format);
-        $fullmodulename = get_string("modulename", $module->name);
+    $sectionname = get_section_name($course, $cw);
+    $fullmodulename = get_string('modulename', $module->name);
 
-        if ($form->section && $course->format != 'site') {
+    if ($data->section && $course->format != 'site') {
+        $heading = new stdClass();
             $heading->what = $fullmodulename;
-            $heading->to   = "$sectionname $form->section";
-            $pageheading = get_string("addinganewto", "moodle", $heading);
+        $heading->to   = $sectionname;
+        $pageheading = get_string('addinganewto', 'moodle', $heading);
         } else {
-            $pageheading = get_string("addinganew", "moodle", $fullmodulename);
+        $pageheading = get_string('addinganew', 'moodle', $fullmodulename);
         }
 
-        $CFG->pagepath = 'mod/'.$module->name;
-        if (!empty($type)) {
-            $CFG->pagepath .= '/'.$type;
-        } else {
-            $CFG->pagepath .= '/mod';
-        }
+} else if (!empty($update)) {
 
-        $navlinksinstancename = '';
-    } else if (!empty($update)) {
-        if (! $cm = get_record("course_modules", "id", $update)) {
-            error("This course module doesn't exist");
-        }
+    $url->param('update', $update);
+    $PAGE->set_url($url);
 
-        if (! $course = get_record("course", "id", $cm->course)) {
-            error("This course doesn't exist");
-        }
+    $cm = get_coursemodule_from_id('', $update, 0, false, MUST_EXIST);
+    $course = $DB->get_record('course', array('id'=>$cm->course), '*', MUST_EXIST);
 
-        require_login($course); // needed to setup proper $COURSE
+    require_login($course, false, $cm); // needed to setup proper $COURSE
         $context = get_context_instance(CONTEXT_MODULE, $cm->id);
         require_capability('moodle/course:manageactivities', $context);
 
-        if (! $module = get_record("modules", "id", $cm->module)) {
-            error("This module doesn't exist");
-        }
-
-        if (! $form = get_record($module->name, "id", $cm->instance)) {
-            error("The required instance of this module doesn't exist");
-        }
-
-        if (! $cw = get_record("course_sections", "id", $cm->section)) {
-            error("This course section doesn't exist");
-        }
-
-        $form->coursemodule     = $cm->id;
-        $form->section          = $cw->section;  // The section number itself - relative!!! (section column in course_sections)
-        $form->visible          = $cm->visible; //??  $cw->visible ? $cm->visible : 0; // section hiding overrides
-        $form->cmidnumber       = $cm->idnumber;          // The cm IDnumber
-        $form->groupmode        = groups_get_activity_groupmode($cm); // locked later if forced
-        $form->groupingid       = $cm->groupingid;
-        $form->groupmembersonly = $cm->groupmembersonly;
-        $form->course           = $course->id;
-        $form->module           = $module->id;
-        $form->modulename       = $module->name;
-        $form->instance         = $cm->instance;
-        $form->return           = $return;
-        $form->update           = $update;
-
-        if ($items = grade_item::fetch_all(array('itemtype'=>'mod', 'itemmodule'=>$form->modulename,
-                                           'iteminstance'=>$form->instance, 'courseid'=>$COURSE->id))) {
+    $module = $DB->get_record('modules', array('id'=>$cm->module), '*', MUST_EXIST);
+    $data = $data = $DB->get_record($module->name, array('id'=>$cm->instance), '*', MUST_EXIST);
+    $cw = $DB->get_record('course_sections', array('id'=>$cm->section), '*', MUST_EXIST);
+
+    $data->coursemodule       = $cm->id;
+    $data->section            = $cw->section;  // The section number itself - relative!!! (section column in course_sections)
+    $data->visible            = $cm->visible; //??  $cw->visible ? $cm->visible : 0; // section hiding overrides
+    $data->cmidnumber         = $cm->idnumber;          // The cm IDnumber
+    $data->groupmode          = groups_get_activity_groupmode($cm); // locked later if forced
+    $data->groupingid         = $cm->groupingid;
+    $data->groupmembersonly   = $cm->groupmembersonly;
+    $data->course             = $course->id;
+    $data->module             = $module->id;
+    $data->modulename         = $module->name;
+    $data->instance           = $cm->instance;
+    $data->return             = $return;
+    $data->update             = $update;
+    $data->completion         = $cm->completion;
+    $data->completionview     = $cm->completionview;
+    $data->completionexpected = $cm->completionexpected;
+    $data->completionusegrade = is_null($cm->completiongradeitemnumber) ? 0 : 1;
+    if (!empty($CFG->enableavailability)) {
+        $data->availablefrom      = $cm->availablefrom;
+        $data->availableuntil     = $cm->availableuntil;
+        $data->showavailability   = $cm->showavailability;
+    }
+
+    if (plugin_supports('mod', $data->modulename, FEATURE_MOD_INTRO, true)) {
+        $draftid_editor = file_get_submitted_draft_itemid('introeditor');
+        $currentintro = file_prepare_draft_area($draftid_editor, $context->id, 'mod_'.$data->modulename, 'intro', 0, array('subdirs'=>true), $data->intro);
+        $data->introeditor = array('text'=>$currentintro, 'format'=>$data->introformat, 'itemid'=>$draftid_editor);
+    }
+
+    if ($items = grade_item::fetch_all(array('itemtype'=>'mod', 'itemmodule'=>$data->modulename,
+                                             'iteminstance'=>$data->instance, 'courseid'=>$course->id))) {
             // add existing outcomes
             foreach ($items as $item) {
                 if (!empty($item->outcomeid)) {
-                    $form->{'outcome_'.$item->outcomeid} = 1;
+                $data->{'outcome_'.$item->outcomeid} = 1;
                 }
             }
 
@@ -141,86 +171,80 @@
             }
             if ($gradecat !== false) {
                 // do not set if mixed categories present
-                $form->gradecat = $gradecat;
+            $data->gradecat = $gradecat;
             }
         }
 
-        $sectionname = get_section_name($course->format);
-        $fullmodulename = get_string("modulename", $module->name);
+    $sectionname = get_section_name($course, $cw);
+    $fullmodulename = get_string('modulename', $module->name);
 
-        if ($form->section && $course->format != 'site') {
+    if ($data->section && $course->format != 'site') {
+        $heading = new stdClass();
             $heading->what = $fullmodulename;
-            $heading->in   = "$sectionname $cw->section";
-            $pageheading = get_string("updatingain", "moodle", $heading);
+        $heading->in   = $sectionname;
+        $pageheading = get_string('updatingain', 'moodle', $heading);
         } else {
-            $pageheading = get_string("updatinga", "moodle", $fullmodulename);
+        $pageheading = get_string('updatinga', 'moodle', $fullmodulename);
         }
 
-        $navlinksinstancename = array('name' => format_string($form->name,true), 'link' => "$CFG->wwwroot/mod/$module->name/view.php?id=$cm->id", 'type' => 'activityinstance');
-
-        $CFG->pagepath = 'mod/'.$module->name;
-        if (!empty($type)) {
-            $CFG->pagepath .= '/'.$type;
-        } else {
-            $CFG->pagepath .= '/mod';
-        }
-    } else {
-        error('Invalid operation.');
-    }
-
-    $modmoodleform = "$CFG->dirroot/mod/$module->name/mod_form.php";
-    if (file_exists($modmoodleform)) {
+} else {
+    require_login();
+    print_error('invalidaction');
+}
+
+$pagepath = 'mod-' . $module->name . '-';
+if (!empty($type)) { //TODO: hopefully will be removed in 2.0
+    $pagepath .= $type;
+} else {
+    $pagepath .= 'mod';
+}
+$PAGE->set_pagetype($pagepath);
+$PAGE->set_pagelayout('admin');
+
+$modmoodleform = "$CFG->dirroot/mod/$module->name/mod_form.php";
+if (file_exists($modmoodleform)) {
         require_once($modmoodleform);
+} else {
+    print_error('noformdesc');
+}
 
-    } else {
-        error('No formslib form description file found for this activity.');
-    }
-
-    $modlib = "$CFG->dirroot/mod/$module->name/lib.php";
-    if (file_exists($modlib)) {
+$modlib = "$CFG->dirroot/mod/$module->name/lib.php";
+if (file_exists($modlib)) {
         include_once($modlib);
-    } else {
-        error("This module is missing important code! ($modlib)");
-    }
+} else {
+    print_error('modulemissingcode', '', '', $modlib);
+}
 
-    $mformclassname = 'mod_'.$module->name.'_mod_form';
-    $mform =& new $mformclassname($form->instance, $cw->section, $cm);
-    $mform->set_data($form);
+$mformclassname = 'mod_'.$module->name.'_mod_form';
+$mform = new $mformclassname($data, $cw->section, $cm, $course);
+$mform->set_data($data);
 
-    if ($mform->is_cancelled()) {
-        if ($return && !empty($cm->id)){
+if ($mform->is_cancelled()) {
+    if ($return && !empty($cm->id)) {
             redirect("$CFG->wwwroot/mod/$module->name/view.php?id=$cm->id");
         } else {
-            redirect("view.php?id=$course->id#section-".$cw->section);
+        redirect("$CFG->wwwroot/course/view.php?id=$course->id#section-".$cw->section);
         }
-    } else if ($fromform = $mform->get_data()) {
-        if (empty($fromform->coursemodule)) { //add
+} else if ($fromform = $mform->get_data()) {
+    if (empty($fromform->coursemodule)) {
+        // Add
             $cm = null;
-            if (! $course = get_record("course", "id", $fromform->course)) {
-                error("This course doesn't exist");
-            }
+        $course = $DB->get_record('course', array('id'=>$fromform->course), '*', MUST_EXIST);
             $fromform->instance = '';
             $fromform->coursemodule = '';
-        } else { //update
-            if (! $cm = get_record("course_modules", "id", $fromform->coursemodule)) {
-                error("This course module doesn't exist");
-            }
-
-            if (! $course = get_record("course", "id", $cm->course)) {
-                error("This course doesn't exist");
-            }
+    } else {
+        // Update
+        $cm = get_coursemodule_from_id('', $fromform->coursemodule, 0, false, MUST_EXIST);
+        $course = $DB->get_record('course', array('id'=>$cm->course), '*', MUST_EXIST);
             $fromform->instance = $cm->instance;
             $fromform->coursemodule = $cm->id;
         }
 
-        require_login($course->id); // needed to setup proper $COURSE
-
         if (!empty($fromform->coursemodule)) {
             $context = get_context_instance(CONTEXT_MODULE, $fromform->coursemodule);
         } else {
             $context = get_context_instance(CONTEXT_COURSE, $course->id);
         }
-        require_capability('moodle/course:manageactivities', $context);
 
         $fromform->course = $course->id;
         $fromform->modulename = clean_param($fromform->modulename, PARAM_SAFEDIR);  // For safety
@@ -240,30 +264,93 @@
             $fromform->name = $fromform->modulename;
         }
 
+    if (!isset($fromform->completion)) {
+        $fromform->completion = COMPLETION_DISABLED;
+    }
+    if (!isset($fromform->completionview)) {
+        $fromform->completionview = COMPLETION_VIEW_NOT_REQUIRED;
+    }
+
+    // Convert the 'use grade' checkbox into a grade-item number: 0 if
+    // checked, null if not
+    if (isset($fromform->completionusegrade) && $fromform->completionusegrade) {
+        $fromform->completiongradeitemnumber = 0;
+    } else {
+        $fromform->completiongradeitemnumber = null;
+    }
+
         if (!empty($fromform->update)) {
 
             if (!empty($course->groupmodeforce) or !isset($fromform->groupmode)) {
                 $fromform->groupmode = $cm->groupmode; // keep original
             }
 
-            $returnfromfunc = $updateinstancefunction($fromform);
-            if (!$returnfromfunc) {
-                error("Could not update the $fromform->modulename", "view.php?id=$course->id");
+        // update course module first
+        $cm->groupmode        = $fromform->groupmode;
+        $cm->groupingid       = $fromform->groupingid;
+        $cm->groupmembersonly = $fromform->groupmembersonly;
+
+        $completion = new completion_info($course);
+        if ($completion->is_enabled()) {
+            // Update completion settings
+            $cm->completion                = $fromform->completion;
+            $cm->completiongradeitemnumber = $fromform->completiongradeitemnumber;
+            $cm->completionview            = $fromform->completionview;
+            $cm->completionexpected        = $fromform->completionexpected;
+        }
+        if (!empty($CFG->enableavailability)) {
+            $cm->availablefrom             = $fromform->availablefrom;
+            $cm->availableuntil            = $fromform->availableuntil;
+            // The form time is midnight, but because we want it to be
+            // inclusive, set it to 23:59:59 on that day.
+            if ($cm->availableuntil) {
+                $cm->availableuntil = strtotime('23:59:59',
+                    $cm->availableuntil);
+            }
+            $cm->showavailability          = $fromform->showavailability;
+            condition_info::update_cm_from_form($cm,$fromform,true);
+        }
+
+        $DB->update_record('course_modules', $cm);
+
+        $modcontext = get_context_instance(CONTEXT_MODULE, $fromform->coursemodule);
+
+        // update embedded links and save files
+        if (plugin_supports('mod', $fromform->modulename, FEATURE_MOD_INTRO, true)) {
+            $fromform->intro = file_save_draft_area_files($fromform->introeditor['itemid'], $modcontext->id,
+                                                          'mod_'.$fromform->modulename, 'intro', 0,
+                                                          array('subdirs'=>true), $fromform->introeditor['text']);
+            $fromform->introformat = $fromform->introeditor['format'];
+            unset($fromform->introeditor);
             }
-            if (is_string($returnfromfunc)) {
-                error($returnfromfunc, "view.php?id=$course->id");
+
+        if (!$updateinstancefunction($fromform, $mform)) {
+            print_error('cannotupdatemod', '', "view.php?id={$course->id}#section-{$cw->section}", $fromform->modulename);
             }
 
+        // make sure visibility is set correctly (in particular in calendar)
             set_coursemodule_visible($fromform->coursemodule, $fromform->visible);
-            set_coursemodule_groupmode($fromform->coursemodule, $fromform->groupmode);
-            set_coursemodule_groupingid($fromform->coursemodule, $fromform->groupingid);
-            set_coursemodule_groupmembersonly($fromform->coursemodule, $fromform->groupmembersonly);
 
             if (isset($fromform->cmidnumber)) { //label
-                // set cm idnumber
+            // set cm idnumber - uniqueness is already verified by form validation
                 set_coursemodule_idnumber($fromform->coursemodule, $fromform->cmidnumber);
             }
 
+        // Now that module is fully updated, also update completion data if 
+        // required (this will wipe all user completion data and recalculate it)
+        if ($completion->is_enabled() && !empty($fromform->completionunlocked)) {
+            $completion->reset_all_state($cm);
+        }
+
+        // Trigger mod_updated event with information about this module.
+        $eventdata = new stdClass();
+        $eventdata->modulename = $fromform->modulename;
+        $eventdata->name       = $fromform->name;
+        $eventdata->cmid       = $fromform->coursemodule;
+        $eventdata->courseid   = $course->id;
+        $eventdata->userid     = $USER->id;
+        events_trigger('mod_updated', $eventdata);
+
             add_to_log($course->id, "course", "update mod",
                        "../mod/$fromform->modulename/view.php?id=$fromform->coursemodule",
                        "$fromform->modulename $fromform->instance");
@@ -271,48 +358,111 @@
                        "view.php?id=$fromform->coursemodule",
                        "$fromform->instance", $fromform->coursemodule);
 
-        } else if (!empty($fromform->add)){
+    } else if (!empty($fromform->add)) {
 
             if (!empty($course->groupmodeforce) or !isset($fromform->groupmode)) {
                 $fromform->groupmode = 0; // do not set groupmode
             }
 
-            if (!course_allowed_module($course,$fromform->modulename)) {
-                error("This module ($fromform->modulename) has been disabled for this particular course");
+        if (!course_allowed_module($course, $fromform->modulename)) {
+            print_error('moduledisable', '', '', $fromform->modulename);
             }
 
-            $returnfromfunc = $addinstancefunction($fromform);
-            if (!$returnfromfunc) {
-                error("Could not add a new instance of $fromform->modulename", "view.php?id=$course->id");
+        // first add course_module record because we need the context
+        $newcm = new stdClass();
+        $newcm->course           = $course->id;
+        $newcm->module           = $fromform->module;
+        $newcm->instance         = 0; // not known yet, will be updated later (this is similar to restore code)
+        $newcm->visible          = $fromform->visible;
+        $newcm->groupmode        = $fromform->groupmode;
+        $newcm->groupingid       = $fromform->groupingid;
+        $newcm->groupmembersonly = $fromform->groupmembersonly;
+        $completion = new completion_info($course);
+        if ($completion->is_enabled()) {
+            $newcm->completion                = $fromform->completion;
+            $newcm->completiongradeitemnumber = $fromform->completiongradeitemnumber;
+            $newcm->completionview            = $fromform->completionview;
+            $newcm->completionexpected        = $fromform->completionexpected;
+        }
+        if(!empty($CFG->enableavailability)) {
+            $newcm->availablefrom             = $fromform->availablefrom;
+            $newcm->availableuntil            = $fromform->availableuntil;
+            // The form time is midnight, but because we want it to be
+            // inclusive, set it to 23:59:59 on that day.
+            if ($newcm->availableuntil) {
+                $newcm->availableuntil = strtotime('23:59:59',
+                    $newcm->availableuntil);
             }
-            if (is_string($returnfromfunc)) {
-                error($returnfromfunc, "view.php?id=$course->id");
+            $newcm->showavailability          = $fromform->showavailability;
             }
 
-            $fromform->instance = $returnfromfunc;
+        if (!$fromform->coursemodule = add_course_module($newcm)) {
+            print_error('cannotaddcoursemodule');
+        }
 
-            // course_modules and course_sections each contain a reference
-            // to each other, so we have to update one of them twice.
+        if (plugin_supports('mod', $fromform->modulename, FEATURE_MOD_INTRO, true)) {
+            $introeditor = $fromform->introeditor;
+            unset($fromform->introeditor);
+            $fromform->intro       = $introeditor['text'];
+            $fromform->introformat = $introeditor['format'];
+        }
+
+        $returnfromfunc = $addinstancefunction($fromform, $mform);
+
+        if (!$returnfromfunc or !is_number($returnfromfunc)) {
+            // undo everything we can
+            $modcontext = get_context_instance(CONTEXT_MODULE, $fromform->coursemodule);
+            delete_context(CONTEXT_MODULE, $fromform->coursemodule);
+            $DB->delete_records('course_modules', array('id'=>$fromform->coursemodule));
 
-            if (! $fromform->coursemodule = add_course_module($fromform) ) {
-                error("Could not add a new course module");
+            if (!is_number($returnfromfunc)) {
+                print_error('invalidfunction', '', "view.php?id={$course->id}#section-{$cw->section}");
+            } else {
+                print_error('cannotaddnewmodule', '', "view.php?id={$course->id}#section-{$cw->section}", $fromform->modulename);
             }
-            if (! $sectionid = add_mod_to_section($fromform) ) {
-                error("Could not add the new course module to that section");
             }
 
-            if (! set_field("course_modules", "section", $sectionid, "id", $fromform->coursemodule)) {
-                error("Could not update the course module with the correct section");
+        $fromform->instance = $returnfromfunc;
+
+        $DB->set_field('course_modules', 'instance', $returnfromfunc, array('id'=>$fromform->coursemodule));
+
+        // update embedded links and save files
+        $modcontext = get_context_instance(CONTEXT_MODULE, $fromform->coursemodule);
+        if (!empty($introeditor)) {
+            $fromform->intro = file_save_draft_area_files($introeditor['itemid'], $modcontext->id,
+                                                          'mod_'.$fromform->modulename, 'intro', 0,
+                                                          array('subdirs'=>true), $introeditor['text']);
+            $DB->set_field($fromform->modulename, 'intro', $fromform->intro, array('id'=>$fromform->instance));
             }
 
+        // course_modules and course_sections each contain a reference
+        // to each other, so we have to update one of them twice.
+        $sectionid = add_mod_to_section($fromform);
+
+        $DB->set_field('course_modules', 'section', $sectionid, array('id'=>$fromform->coursemodule));
+
             // make sure visibility is set correctly (in particular in calendar)
             set_coursemodule_visible($fromform->coursemodule, $fromform->visible);
 
             if (isset($fromform->cmidnumber)) { //label
-                // set cm idnumber
+            // set cm idnumber - uniqueness is already verified by form validation
                 set_coursemodule_idnumber($fromform->coursemodule, $fromform->cmidnumber);
             }
 
+        // Set up conditions
+        if ($CFG->enableavailability) {
+            condition_info::update_cm_from_form((object)array('id'=>$fromform->coursemodule), $fromform, false);
+        }
+
+        // Trigger mod_created event with information about this module.
+        $eventdata = new stdClass();
+        $eventdata->modulename = $fromform->modulename;
+        $eventdata->name       = $fromform->name;
+        $eventdata->cmid       = $fromform->coursemodule;
+        $eventdata->courseid   = $course->id;
+        $eventdata->userid     = $USER->id;
+        events_trigger('mod_created', $eventdata);
+
             add_to_log($course->id, "course", "add mod",
                        "../mod/$fromform->modulename/view.php?id=$fromform->coursemodule",
                        "$fromform->modulename $fromform->instance");
@@ -320,12 +470,12 @@
                        "view.php?id=$fromform->coursemodule",
                        "$fromform->instance", $fromform->coursemodule);
         } else {
-            error("Data submitted is invalid.");
+        print_error('invaliddata');
         }
 
         // sync idnumber with grade_item
         if ($grade_item = grade_item::fetch(array('itemtype'=>'mod', 'itemmodule'=>$fromform->modulename,
-                     'iteminstance'=>$fromform->instance, 'itemnumber'=>0, 'courseid'=>$COURSE->id))) {
+                 'iteminstance'=>$fromform->instance, 'itemnumber'=>0, 'courseid'=>$course->id))) {
             if ($grade_item->idnumber != $fromform->cmidnumber) {
                 $grade_item->idnumber = $fromform->cmidnumber;
                 $grade_item->update();
@@ -333,14 +483,14 @@
         }
 
         $items = grade_item::fetch_all(array('itemtype'=>'mod', 'itemmodule'=>$fromform->modulename,
-                                             'iteminstance'=>$fromform->instance, 'courseid'=>$COURSE->id));
+                                         'iteminstance'=>$fromform->instance, 'courseid'=>$course->id));
 
         // create parent category if requested and move to correct parent category
         if ($items and isset($fromform->gradecat)) {
             if ($fromform->gradecat == -1) {
                 $grade_category = new grade_category();
-                $grade_category->courseid = $COURSE->id;
-                $grade_category->fullname = stripslashes($fromform->name);
+            $grade_category->courseid = $course->id;
+            $grade_category->fullname = $fromform->name;
                 $grade_category->insert();
                 if ($grade_item) {
                     $parent = $grade_item->get_parent_category();
@@ -358,7 +508,7 @@
         }
 
         // add outcomes if requested
-        if ($outcomes = grade_outcome::fetch_all_available($COURSE->id)) {
+    if ($outcomes = grade_outcome::fetch_all_available($course->id)) {
             $grade_items = array();
 
             // Outcome grade_item.itemnumber start at 1000, there is nothing above outcomes
@@ -374,7 +524,7 @@
             foreach($outcomes as $outcome) {
                 $elname = 'outcome_'.$outcome->id;
 
-                if (array_key_exists($elname, $fromform) and $fromform->$elname) {
+            if (property_exists($fromform, $elname) and $fromform->$elname) {
                     // so we have a request for new outcome grade item?
                     if ($items) {
                         foreach($items as $item) {
@@ -388,7 +538,7 @@
                     $max_itemnumber++;
 
                     $outcome_item = new grade_item();
-                    $outcome_item->courseid     = $COURSE->id;
+                $outcome_item->courseid     = $course->id;
                     $outcome_item->itemtype     = 'mod';
                     $outcome_item->itemmodule   = $fromform->modulename;
                     $outcome_item->iteminstance = $fromform->instance;
@@ -413,47 +563,38 @@
 
         rebuild_course_cache($course->id);
         grade_regrade_final_grades($course->id);
+    plagiarism_save_form_elements($fromform); //save plagiarism settings
 
         if (isset($fromform->submitbutton)) { 
             redirect("$CFG->wwwroot/mod/$module->name/view.php?id=$fromform->coursemodule");
         } else {
-            redirect("$CFG->wwwroot/course/view.php?id=$course->id");
+        redirect("$CFG->wwwroot/course/view.php?id={$course->id}#section-{$cw->section}");
         }
         exit;
 
-    } else {
+} else {
+
+    $streditinga = get_string('editinga', 'moodle', $fullmodulename);
+    $strmodulenameplural = get_string('modulenameplural', $module->name);
+
         if (!empty($cm->id)) {
             $context = get_context_instance(CONTEXT_MODULE, $cm->id);
         } else {
             $context = get_context_instance(CONTEXT_COURSE, $course->id);
         }
-        require_capability('moodle/course:manageactivities', $context);
-
-        $streditinga = get_string("editinga", "moodle", $fullmodulename);
-        $strmodulenameplural = get_string("modulenameplural", $module->name);
-
-        $navlinks = array();
-        $navlinks[] = array('name' => $strmodulenameplural, 'link' => "$CFG->wwwroot/mod/$module->name/index.php?id=$course->id", 'type' => 'activity');
-        if ($navlinksinstancename) {
-            $navlinks[] = $navlinksinstancename;
-        }
-        $navlinks[] = array('name' => $streditinga, 'link' => '', 'type' => 'title');
-
-        $navigation = build_navigation($navlinks);
 
-        print_header_simple($streditinga, '', $navigation, $mform->focus(), "", false);
+    $PAGE->set_heading($course->fullname);
+    $PAGE->set_title($streditinga);
+    $PAGE->set_cacheable(false);
+    echo $OUTPUT->header();
 
-        if (!empty($cm->id)) {
-            $context = get_context_instance(CONTEXT_MODULE, $cm->id);
-            $overridableroles = get_overridable_roles($context);
-            $assignableroles  = get_assignable_roles($context);
-            $currenttab = 'update';
-            include_once($CFG->dirroot.'/'.$CFG->admin.'/roles/tabs.php');
+    if (get_string_manager()->string_exists('modulename_help', $module->name)) {
+        echo $OUTPUT->heading_with_help($pageheading, 'modulename', $module->name, 'icon');
+    } else {
+        echo $OUTPUT->heading_with_help($pageheading, '', $module->name, 'icon');
         }
-        $icon = '<img src="'.$CFG->modpixpath.'/'.$module->name.'/icon.gif" alt=""/>';
 
-        print_heading_with_help($pageheading, "mods", $module->name, $icon);
         $mform->display();
-        print_footer($course);
-    }
-?>
+
+    echo $OUTPUT->footer();
+}
