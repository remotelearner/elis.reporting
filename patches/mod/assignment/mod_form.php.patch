diff --git a/mod/assignment/mod_form.php b/mod/assignment/mod_form.php
index 376a024..1c5cf31 100644
--- a/mod/assignment/mod_form.php
+++ b/mod/assignment/mod_form.php
@@ -1,28 +1,35 @@
 <?php
+if (!defined('MOODLE_INTERNAL')) {
+    die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
+}
+
 require_once ($CFG->dirroot.'/course/moodleform_mod.php');
 
 class mod_assignment_mod_form extends moodleform_mod {
+    protected $_assignmentinstance = null;
 
     function definition() {
-        global $CFG;
+        global $CFG, $DB;
         $mform =& $this->_form;
 
         // this hack is needed for different settings of each subtype
         if (!empty($this->_instance)) {
-            if($ass = get_record('assignment', 'id', (int)$this->_instance)) {
+            if($ass = $DB->get_record('assignment', array('id'=>$this->_instance))) {
                 $type = $ass->assignmenttype;
             } else {
-                error('incorrect assignment');
+                print_error('invalidassignment', 'assignment');
             }
         } else {
             $type = required_param('type', PARAM_ALPHA);
         }
         $mform->addElement('hidden', 'assignmenttype', $type);
+        $mform->setType('assignmenttype', PARAM_ALPHA);
         $mform->setDefault('assignmenttype', $type);
         $mform->addElement('hidden', 'type', $type);
+        $mform->setType('type', PARAM_ALPHA);
         $mform->setDefault('type', $type);
 
-        require($CFG->dirroot.'/mod/assignment/type/'.$type.'/assignment.class.php');
+        require_once($CFG->dirroot.'/mod/assignment/type/'.$type.'/assignment.class.php');
         $assignmentclass = 'assignment_'.$type;
         $assignmentinstance = new $assignmentclass();
 
@@ -35,17 +42,11 @@ class mod_assignment_mod_form extends moodleform_mod {
         if (!empty($CFG->formatstringstriptags)) {
             $mform->setType('name', PARAM_TEXT);
         } else {
-            $mform->setType('name', PARAM_CLEAN);
+            $mform->setType('name', PARAM_CLEANHTML);
         }
         $mform->addRule('name', null, 'required', null, 'client');
 
-        $mform->addElement('htmleditor', 'description', get_string('description', 'assignment'));
-        $mform->setType('description', PARAM_RAW);
-        $mform->setHelpButton('description', array('writing', 'questions', 'richtext'), false, 'editorhelpbutton');
-        $mform->addRule('description', get_string('required'), 'required', null, 'client');
-
-        $mform->addElement('modgrade', 'grade', get_string('grade'));
-        $mform->setDefault('grade', 100);
+        $this->add_intro_editor(true, get_string('description', 'assignment'));
 
         $mform->addElement('date_time_selector', 'timeavailable', get_string('availabledate', 'assignment'), array('optional'=>true));
         $mform->setDefault('timeavailable', time());
@@ -57,29 +58,67 @@ class mod_assignment_mod_form extends moodleform_mod {
         $mform->addElement('select', 'preventlate', get_string('preventlate', 'assignment'), $ynoptions);
         $mform->setDefault('preventlate', 0);
 
-
-
-        $typetitle = get_string('type'.$type, 'assignment');
-
         // hack to support pluggable assignment type titles
-        if ($typetitle === '[[type'.$type.']]') {
+        if (get_string_manager()->string_exists('type'.$type, 'assignment')) {
+            $typetitle = get_string('type'.$type, 'assignment');
+        } else {
             $typetitle  = get_string('type'.$type, 'assignment_'.$type);
         } 
 
+        $this->standard_grading_coursemodule_elements();
+
         $mform->addElement('header', 'typedesc', $typetitle);
 
         $assignmentinstance->setup_elements($mform);
 
-        $features = new stdClass;
-        $features->groups = true;
-        $features->groupings = true;
-        $features->groupmembersonly = true;
-        $this->standard_coursemodule_elements($features);
+        $this->standard_coursemodule_elements();
 
         $this->add_action_buttons();
     }
 
+    // Needed by plugin assignment types if they include a filemanager element in the settings form
+    function has_instance() {
+        return ($this->_instance != NULL);
+    }
+
+    // Needed by plugin assignment types if they include a filemanager element in the settings form
+    function get_context() {
+        return $this->context;
+    }
+
+    protected function get_assignment_instance() {
+        global $CFG, $DB;
+
+        if ($this->_assignmentinstance) {
+            return $this->_assignmentinstance;
+        }
+        if (!empty($this->_instance)) {
+            if($ass = $DB->get_record('assignment', array('id'=>$this->_instance))) {
+                $type = $ass->assignmenttype;
+            } else {
+                print_error('invalidassignment', 'assignment');
+            }
+        } else {
+            $type = required_param('type', PARAM_ALPHA);
+        }
+        require_once($CFG->dirroot.'/mod/assignment/type/'.$type.'/assignment.class.php');
+        $assignmentclass = 'assignment_'.$type;
+        $this->assignmentinstance = new $assignmentclass();
+        return $this->assignmentinstance;
+    }
+
 
+    function data_preprocessing(&$default_values) {
+        // Allow plugin assignment types to preprocess form data (needed if they include any filemanager elements)
+        $this->get_assignment_instance()->form_data_preprocessing($default_values, $this);
+    }
 
+
+    function validation($data, $files) {
+        // Allow plugin assignment types to do any extra validation after the form has been submitted
+        $errors = parent::validation($data, $files);
+        $errors = array_merge($errors, $this->get_assignment_instance()->form_validation($data, $files));
+        return $errors;
+    }
 }
-?>
\ No newline at end of file
+
