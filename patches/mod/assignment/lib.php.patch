diff --git a/mod/assignment/lib.php b/mod/assignment/lib.php
index 750c0ec..c41dd4f 100644
--- a/mod/assignment/lib.php
+++ b/mod/assignment/lib.php
@@ -1,29 +1,84 @@
-<?PHP  // $Id$
+<?PHP
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
  * assignment_base is the base class for assignment types
  *
  * This class provides all the functionality for an assignment
+ *
+ * @package   mod-assignment
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 
-DEFINE ('ASSIGNMENT_COUNT_WORDS', 1);
-DEFINE ('ASSIGNMENT_COUNT_LETTERS', 2);
+/** Include eventslib.php */
+require_once($CFG->libdir.'/eventslib.php');
+/** Include formslib.php */
+require_once($CFG->libdir.'/formslib.php');
+/** Include calendar/lib.php */
+require_once($CFG->dirroot.'/calendar/lib.php');
+
+/** ASSIGNMENT_COUNT_WORDS = 1 */
+define('ASSIGNMENT_COUNT_WORDS', 1);
+/** ASSIGNMENT_COUNT_LETTERS = 2 */
+define('ASSIGNMENT_COUNT_LETTERS', 2);
 
 /**
  * Standard base class for all assignment submodules (assignment types).
+ *
+ * @package   mod-assignment
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 class assignment_base {
 
+    const FILTER_ALL             = 0;
+    const FILTER_SUBMITTED       = 1;
+    const FILTER_REQUIRE_GRADING = 2;
+
+    /** @var object */
     var $cm;
+    /** @var object */
     var $course;
+    /** @var stdClass */
+    var $coursecontext;
+    /** @var object */
     var $assignment;
+    /** @var string */
     var $strassignment;
+    /** @var string */
     var $strassignments;
+    /** @var string */
     var $strsubmissions;
+    /** @var string */
     var $strlastmodified;
+    /** @var string */
     var $pagetitle;
+    /** @var bool */
     var $usehtmleditor;
+    /**
+     * @todo document this var
+     */
     var $defaultformat;
+    /**
+     * @todo document this var
+     */
     var $context;
+    /** @var string */
     var $type;
 
     /**
@@ -34,13 +89,15 @@ class assignment_base {
      * If the assignment is hidden and the user is not a teacher then
      * this prints a page header and notice.
      *
-     * @param cmid   integer, the current course module id - not set for new assignments
-     * @param assignment   object, usually null, but if we have it we pass it to save db access
-     * @param cm   object, usually null, but if we have it we pass it to save db access
-     * @param course   object, usually null, but if we have it we pass it to save db access
+     * @global object
+     * @global object
+     * @param int $cmid the current course module id - not set for new assignments
+     * @param object $assignment usually null, but if we have it we pass it to save db access
+     * @param object $cm usually null, but if we have it we pass it to save db access
+     * @param object $course usually null, but if we have it we pass it to save db access
      */
     function assignment_base($cmid='staticonly', $assignment=NULL, $cm=NULL, $course=NULL) {
-        global $COURSE;
+        global $COURSE, $DB;
 
         if ($cmid == 'staticonly') {
             //use static functions only!
@@ -52,7 +109,7 @@ class assignment_base {
         if ($cm) {
             $this->cm = $cm;
         } else if (! $this->cm = get_coursemodule_from_id('assignment', $cmid)) {
-            error('Course Module ID was incorrect');
+            print_error('invalidcoursemodule');
         }
 
         $this->context = get_context_instance(CONTEXT_MODULE, $this->cm->id);
@@ -61,14 +118,16 @@ class assignment_base {
             $this->course = $course;
         } else if ($this->cm->course == $COURSE->id) {
             $this->course = $COURSE;
-        } else if (! $this->course = get_record('course', 'id', $this->cm->course)) {
-            error('Course is misconfigured');
+        } else if (! $this->course = $DB->get_record('course', array('id'=>$this->cm->course))) {
+            print_error('invalidid', 'assignment');
         }
+        $this->coursecontext = get_context_instance(CONTEXT_COURSE, $this->course->id);
+        $courseshortname = format_text($this->course->shortname, true, array('context' => $this->coursecontext));
 
         if ($assignment) {
             $this->assignment = $assignment;
-        } else if (! $this->assignment = get_record('assignment', 'id', $this->cm->instance)) {
-            error('assignment ID was incorrect');
+        } else if (! $this->assignment = $DB->get_record('assignment', array('id'=>$this->cm->instance))) {
+            print_error('invalidid', 'assignment');
         }
 
         $this->assignment->cmidnumber = $this->cm->idnumber; // compatibility with modedit assignment obj
@@ -78,17 +137,13 @@ class assignment_base {
         $this->strassignments = get_string('modulenameplural', 'assignment');
         $this->strsubmissions = get_string('submissions', 'assignment');
         $this->strlastmodified = get_string('lastmodified');
-        $this->pagetitle = strip_tags($this->course->shortname.': '.$this->strassignment.': '.format_string($this->assignment->name,true));
+        $this->pagetitle = strip_tags($courseshortname.': '.$this->strassignment.': '.format_string($this->assignment->name, true, array('context' => $this->context)));
 
         // visibility handled by require_login() with $cm parameter
         // get current group only when really needed
 
     /// Set up things for a HTML editor if it's needed
-        if ($this->usehtmleditor = can_use_html_editor()) {
-            $this->defaultformat = FORMAT_HTML;
-        } else {
-            $this->defaultformat = FORMAT_MOODLE;
-        }
+        $this->defaultformat = editors_get_preferred_format();
     }
 
     /**
@@ -123,22 +178,20 @@ class assignment_base {
      * it can be used on other pages in which case the string to denote the
      * page in the navigation trail should be passed as an argument
      *
-     * @param $subpage string Description of subpage to be used in navigation trail
+     * @global object
+     * @param string $subpage Description of subpage to be used in navigation trail
      */
     function view_header($subpage='') {
-
-        global $CFG;
-
+        global $CFG, $PAGE, $OUTPUT;
 
         if ($subpage) {
-            $navigation = build_navigation($subpage, $this->cm);
-        } else {
-            $navigation = build_navigation('', $this->cm);
+            $PAGE->navbar->add($subpage);
         }
 
-        print_header($this->pagetitle, $this->course->fullname, $navigation, '', '',
-                     true, update_module_button($this->cm->id, $this->course->id, $this->strassignment),
-                     navmenu($this->course, $this->cm));
+        $PAGE->set_title($this->pagetitle);
+        $PAGE->set_heading($this->course->fullname);
+
+        echo $OUTPUT->header();
 
         groups_print_activity_menu($this->cm, $CFG->wwwroot . '/mod/assignment/view.php?id=' . $this->cm->id);
 
@@ -154,11 +207,11 @@ class assignment_base {
      * The default implementation prints the assignment description in a box
      */
     function view_intro() {
-        print_simple_box_start('center', '', '', 0, 'generalbox', 'intro');
-        $formatoptions = new stdClass;
-        $formatoptions->noclean = true;
-        echo format_text($this->assignment->description, $this->assignment->format, $formatoptions);
-        print_simple_box_end();
+        global $OUTPUT;
+        echo $OUTPUT->box_start('generalbox boxaligncenter', 'intro');
+        echo format_module_intro('assignment', $this->assignment, $this->cm->id);
+        echo $OUTPUT->box_end();
+        plagiarism_print_disclosure($this->cm->id);
     }
 
     /**
@@ -168,11 +221,12 @@ class assignment_base {
      * This will be suitable for most assignment types
      */
     function view_dates() {
+        global $OUTPUT;
         if (!$this->assignment->timeavailable && !$this->assignment->timedue) {
             return;
         }
 
-        print_simple_box_start('center', '', '', 0, 'generalbox', 'dates');
+        echo $OUTPUT->box_start('generalbox boxaligncenter', 'dates');
         echo '<table>';
         if ($this->assignment->timeavailable) {
             echo '<tr><td class="c0">'.get_string('availabledate','assignment').':</td>';
@@ -183,7 +237,7 @@ class assignment_base {
             echo '    <td class="c1">'.userdate($this->assignment->timedue).'</td></tr>';
         }
         echo '</table>';
-        print_simple_box_end();
+        echo $OUTPUT->box_end();
     }
 
 
@@ -194,7 +248,8 @@ class assignment_base {
      * This will be suitable for most assignment types
      */
     function view_footer() {
-        print_footer($this->course);
+        global $OUTPUT;
+        echo $OUTPUT->footer();
     }
 
     /**
@@ -203,19 +258,26 @@ class assignment_base {
      * This default method prints the teacher picture and name, date when marked,
      * grade and teacher submissioncomment.
      *
-     * @param $submission object The submission object or NULL in which case it will be loaded
+     * @global object
+     * @global object
+     * @global object
+     * @param object $submission The submission object or NULL in which case it will be loaded
      */
     function view_feedback($submission=NULL) {
-        global $USER, $CFG;
+        global $USER, $CFG, $DB, $OUTPUT;
         require_once($CFG->libdir.'/gradelib.php');
 
-        if (!$submission) { /// Get submission for this assignment
-            $submission = $this->get_submission($USER->id, false);
+        if (!is_enrolled($this->context, $USER, 'mod/assignment:view')) {
+            // can not submit assignments -> no feedback
+            return;
         }
 
+        if (!$submission) { /// Get submission for this assignment
+            $submission = $this->get_submission($USER->id);
+        }
         // Check the user can submit
         $cansubmit = has_capability('mod/assignment:submit', $this->context, $USER->id, false);
-        // If not then check if ther user still has the view cap and has a previous submission
+        // If not then check if the user still has the view cap and has a previous submission
         $cansubmit = $cansubmit || (!empty($submission) && has_capability('mod/assignment:view', $this->context, $USER->id, false));
 
         if (!$cansubmit) {
@@ -239,19 +301,19 @@ class assignment_base {
         $graded_by   = $grade->usermodified;
 
     /// We need the teacher info
-        if (!$teacher = get_record('user', 'id', $graded_by)) {
-            error('Could not find the teacher');
+        if (!$teacher = $DB->get_record('user', array('id'=>$graded_by))) {
+            print_error('cannotfindteacher');
         }
 
     /// Print the feedback
-        print_heading(get_string('feedbackfromteacher', 'assignment', $this->course->teacher)); // TODO: fix teacher string
+        echo $OUTPUT->heading(get_string('feedbackfromteacher', 'assignment', fullname($teacher)));
 
         echo '<table cellspacing="0" class="feedback">';
 
         echo '<tr>';
         echo '<td class="left picture">';
         if ($teacher) {
-            print_user_picture($teacher, $this->course->id, $teacher->picture);
+            echo $OUTPUT->user_picture($teacher);
         }
         echo '</td>';
         echo '<td class="topic">';
@@ -277,6 +339,17 @@ class assignment_base {
         echo '</div>';
         echo '</tr>';
 
+         if ($this->type == 'uploadsingle') { //@TODO: move to overload view_feedback method in the class or is uploadsingle merging into upload?
+            $responsefiles = $this->print_responsefiles($submission->userid, true);
+            if (!empty($responsefiles)) {
+                echo '<tr>';
+                echo '<td class="left side">&nbsp;</td>';
+                echo '<td class="content">';
+                echo $responsefiles;
+                echo '</tr>';
+            }
+         }
+
         echo '</table>';
     }
 
@@ -287,13 +360,18 @@ class assignment_base {
      * For teachers it gives the number of submitted assignments with a link
      * For students it gives the time of their submission.
      * This will be suitable for most assignment types.
+     *
+     * @global object
+     * @global object
      * @param bool $allgroup print all groups info if user can access all groups, suitable for index.php
      * @return string
      */
     function submittedlink($allgroups=false) {
         global $USER;
+        global $CFG;
 
         $submitted = '';
+        $urlbase = "{$CFG->wwwroot}/mod/assignment/";
 
         $context = get_context_instance(CONTEXT_MODULE,$this->cm->id);
         if (has_capability('mod/assignment:grade', $context)) {
@@ -302,15 +380,18 @@ class assignment_base {
             } else {
                 $group = groups_get_activity_group($this->cm);
             }
-            if ($count = $this->count_real_submissions($group)) {
-                $submitted = '<a href="submissions.php?id='.$this->cm->id.'">'.
+            if ($this->type == 'offline') {
+                $submitted = '<a href="'.$urlbase.'submissions.php?id='.$this->cm->id.'">'.
+                             get_string('viewfeedback', 'assignment').'</a>';
+            } else if ($count = $this->count_real_submissions($group)) {
+                $submitted = '<a href="'.$urlbase.'submissions.php?id='.$this->cm->id.'">'.
                              get_string('viewsubmissions', 'assignment', $count).'</a>';
             } else {
-                $submitted = '<a href="submissions.php?id='.$this->cm->id.'">'.
+                $submitted = '<a href="'.$urlbase.'submissions.php?id='.$this->cm->id.'">'.
                              get_string('noattempts', 'assignment').'</a>';
             }
         } else {
-            if (!empty($USER->id)) {
+            if (isloggedin()) {
                 if ($submission = $this->get_submission($USER->id)) {
                     if ($submission->timemodified) {
                         if ($submission->timemodified <= $this->assignment->timedue || empty($this->assignment->timedue)) {
@@ -327,36 +408,63 @@ class assignment_base {
     }
 
 
+    /**
+     * @todo Document this function
+     */
     function setup_elements(&$mform) {
 
     }
 
     /**
+     * Any preprocessing needed for the settings form for
+     * this assignment type
+     *
+     * @param array $default_values - array to fill in with the default values
+     *      in the form 'formelement' => 'value'
+     * @param object $form - the form that is to be displayed
+     * @return none
+     */
+    function form_data_preprocessing(&$default_values, $form) {
+    }
+
+    /**
+     * Any extra validation checks needed for the settings
+     * form for this assignment type
+     *
+     * See lib/formslib.php, 'validation' function for details
+     */
+    function form_validation($data, $files) {
+        return array();
+    }
+
+    /**
      * Create a new assignment activity
      *
      * Given an object containing all the necessary data,
-     * (defined by the form in mod.html) this function
+     * (defined by the form in mod_form.php) this function
      * will create a new instance and return the id number
      * of the new instance.
      * The due data is added to the calendar
      * This is common to all assignment types.
      *
-     * @param $assignment object The data from the form on mod.html
+     * @global object
+     * @global object
+     * @param object $assignment The data from the form on mod_form.php
      * @return int The id of the assignment
      */
     function add_instance($assignment) {
-        global $COURSE;
+        global $COURSE, $DB;
 
         $assignment->timemodified = time();
         $assignment->courseid = $assignment->course;
 
-        if ($returnid = insert_record("assignment", $assignment)) {
+        $returnid = $DB->insert_record("assignment", $assignment);
             $assignment->id = $returnid;
 
             if ($assignment->timedue) {
-                $event = new object();
+            $event = new stdClass();
                 $event->name        = $assignment->name;
-                $event->description = $assignment->description;
+            $event->description = format_module_intro('assignment', $assignment, $assignment->coursemodule);
                 $event->courseid    = $assignment->course;
                 $event->groupid     = 0;
                 $event->userid      = 0;
@@ -366,15 +474,11 @@ class assignment_base {
                 $event->timestart   = $assignment->timedue;
                 $event->timeduration = 0;
 
-                add_event($event);
+            calendar_event::create($event);
             }
 
-            $assignment = stripslashes_recursive($assignment);
             assignment_grade_item_update($assignment);
 
-        }
-
-
         return $returnid;
     }
 
@@ -382,31 +486,38 @@ class assignment_base {
      * Deletes an assignment activity
      *
      * Deletes all database records, files and calendar events for this assignment.
-     * @param $assignment object The assignment to be deleted
+     *
+     * @global object
+     * @global object
+     * @param object $assignment The assignment to be deleted
      * @return boolean False indicates error
      */
     function delete_instance($assignment) {
-        global $CFG;
+        global $CFG, $DB;
 
         $assignment->courseid = $assignment->course;
 
         $result = true;
 
-        if (! delete_records('assignment_submissions', 'assignment', $assignment->id)) {
-            $result = false;
+        // now get rid of all files
+        $fs = get_file_storage();
+        if ($cm = get_coursemodule_from_instance('assignment', $assignment->id)) {
+            $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+            $fs->delete_area_files($context->id);
         }
 
-        if (! delete_records('assignment', 'id', $assignment->id)) {
+        if (! $DB->delete_records('assignment_submissions', array('assignment'=>$assignment->id))) {
             $result = false;
         }
 
-        if (! delete_records('event', 'modulename', 'assignment', 'instance', $assignment->id)) {
+        if (! $DB->delete_records('event', array('modulename'=>'assignment', 'instance'=>$assignment->id))) {
             $result = false;
         }
 
-        // delete file area with all attachments - ignore errors
-        require_once($CFG->libdir.'/filelib.php');
-        fulldelete($CFG->dataroot.'/'.$assignment->course.'/'.$CFG->moddata.'/assignment/'.$assignment->id);
+        if (! $DB->delete_records('assignment', array('id'=>$assignment->id))) {
+            $result = false;
+        }
+        $mod = $DB->get_field('modules','id',array('name'=>'assignment'));
 
         assignment_grade_item_delete($assignment);
 
@@ -417,40 +528,41 @@ class assignment_base {
      * Updates a new assignment activity
      *
      * Given an object containing all the necessary data,
-     * (defined by the form in mod.html) this function
+     * (defined by the form in mod_form.php) this function
      * will update the assignment instance and return the id number
      * The due date is updated in the calendar
      * This is common to all assignment types.
      *
-     * @param $assignment object The data from the form on mod.html
+     * @global object
+     * @global object
+     * @param object $assignment The data from the form on mod_form.php
      * @return bool success
      */
     function update_instance($assignment) {
-        global $COURSE;
+        global $COURSE, $DB;
 
         $assignment->timemodified = time();
 
         $assignment->id = $assignment->instance;
         $assignment->courseid = $assignment->course;
 
-        if (!update_record('assignment', $assignment)) {
-            return false;
-        }
+        $DB->update_record('assignment', $assignment);
 
         if ($assignment->timedue) {
-            $event = new object();
+            $event = new stdClass();
 
-            if ($event->id = get_field('event', 'id', 'modulename', 'assignment', 'instance', $assignment->id)) {
+            if ($event->id = $DB->get_field('event', 'id', array('modulename'=>'assignment', 'instance'=>$assignment->id))) {
 
                 $event->name        = $assignment->name;
-                $event->description = $assignment->description;
+                $event->description = format_module_intro('assignment', $assignment, $assignment->coursemodule);
                 $event->timestart   = $assignment->timedue;
 
-                update_event($event);
+                $calendarevent = calendar_event::load($event->id);
+                $calendarevent->update($event);
             } else {
-                $event = new object();
+                $event = new stdClass();
                 $event->name        = $assignment->name;
-                $event->description = $assignment->description;
+                $event->description = format_module_intro('assignment', $assignment, $assignment->coursemodule);
                 $event->courseid    = $assignment->course;
                 $event->groupid     = 0;
                 $event->userid      = 0;
@@ -460,15 +572,13 @@ class assignment_base {
                 $event->timestart   = $assignment->timedue;
                 $event->timeduration = 0;
 
-                add_event($event);
+                calendar_event::create($event);
             }
         } else {
-            delete_records('event', 'modulename', 'assignment', 'instance', $assignment->id);
+            $DB->delete_records('event', array('modulename'=>'assignment', 'instance'=>$assignment->id));
         }
 
         // get existing grade item
-        $assignment = stripslashes_recursive($assignment);
-
         assignment_grade_item_update($assignment);
 
         return true;
@@ -487,7 +597,8 @@ class assignment_base {
      * This is for handling the teacher interaction with the grading interface
      * This should be suitable for most assignment types.
      *
-     * @param $mode string Specifies the kind of teacher interaction taking place
+     * @global object
+     * @param string $mode Specifies the kind of teacher interaction taking place
      */
     function submissions($mode) {
         ///The main switch is changed to facilitate
@@ -496,28 +607,42 @@ class assignment_base {
         ///3) Save and Skip to the next one on the popup
 
         //make user global so we can use the id
-        global $USER;
+        global $USER, $OUTPUT, $DB, $PAGE;
 
         $mailinfo = optional_param('mailinfo', null, PARAM_BOOL);
+
+        if (optional_param('next', null, PARAM_BOOL)) {
+            $mode='next';
+        }
+        if (optional_param('saveandnext', null, PARAM_BOOL)) {
+            $mode='saveandnext';
+        }
+
         if (is_null($mailinfo)) {
+            if (optional_param('sesskey', null, PARAM_BOOL)) {
+                set_user_preference('assignment_mailinfo', $mailinfo);
+            } else {
             $mailinfo = get_user_preferences('assignment_mailinfo', 0);
+            }
         } else {
             set_user_preference('assignment_mailinfo', $mailinfo);
         }
 
         switch ($mode) {
-            case 'grade':                         // We are in a popup window grading
+            case 'grade':                         // We are in a main window grading
                 if ($submission = $this->process_feedback()) {
-                    //IE needs proper header with encoding
-                    print_header(get_string('feedback', 'assignment').':'.format_string($this->assignment->name));
-                    print_heading(get_string('changessaved'));
-                    print $this->update_main_listing($submission);
+                    $this->display_submissions(get_string('changessaved'));
+                } else {
+                    $this->display_submissions();
                 }
-                close_window();
                 break;
 
-            case 'single':                        // We are in a popup window displaying submission
+            case 'single':                        // We are in a main window displaying one submission
+                if ($submission = $this->process_feedback()) {
+                    $this->display_submissions(get_string('changessaved'));
+                } else {
                 $this->display_submission();
+                }
                 break;
 
             case 'all':                          // Main window, display everything
@@ -526,7 +651,6 @@ class assignment_base {
 
             case 'fastgrade':
                 ///do the fast grading stuff  - this process should work for all 3 subclasses
-
                 $grading    = false;
                 $commenting = false;
                 $col        = false;
@@ -573,7 +697,7 @@ class assignment_base {
                     }
                     if ($commenting) {
                         $commentvalue = trim($_POST['submissioncomment'][$id]);
-                        $updatedb = $updatedb || ($submission->submissioncomment != stripslashes($commentvalue));
+                        $updatedb = $updatedb || ($submission->submissioncomment != $commentvalue);
                         $submission->submissioncomment = $commentvalue;
                     } else {
                         unset($submission->submissioncomment);  // Don't need to update this.
@@ -594,51 +718,58 @@ class assignment_base {
                             if (!isset($submission->submissioncomment)) {
                                 $submission->submissioncomment = '';
                             }
-                            if (!$sid = insert_record('assignment_submissions', $submission)) {
-                                return false;
-                            }
+                            $sid = $DB->insert_record('assignment_submissions', $submission);
                             $submission->id = $sid;
                         } else {
-                            if (!update_record('assignment_submissions', $submission)) {
-                                return false;
-                            }
+                            $DB->update_record('assignment_submissions', $submission);
                         }
 
-                        // triger grade event
+                        // trigger grade event
                         $this->update_grade($submission);
 
                         //add to log only if updating
                         add_to_log($this->course->id, 'assignment', 'update grades',
-                                   'submissions.php?id='.$this->assignment->id.'&user='.$submission->userid,
+                                   'submissions.php?id='.$this->cm->id.'&user='.$submission->userid,
                                    $submission->userid, $this->cm->id);
                     }
 
                 }
 
-                $message = notify(get_string('changessaved'), 'notifysuccess', 'center', true);
+                $message = $OUTPUT->notification(get_string('changessaved'), 'notifysuccess');
 
                 $this->display_submissions($message);
                 break;
 
 
-            case 'next':
-                /// We are currently in pop up, but we want to skip to next one without saving.
-                ///    This turns out to be similar to a single case
-                /// The URL used is for the next submission.
-
-                $this->display_submission();
-                break;
-
             case 'saveandnext':
                 ///We are in pop up. save the current one and go to the next one.
                 //first we save the current changes
                 if ($submission = $this->process_feedback()) {
                     //print_heading(get_string('changessaved'));
-                    $extra_javascript = $this->update_main_listing($submission);
+                    //$extra_javascript = $this->update_main_listing($submission);
+                }
+
+            case 'next':
+                /// We are currently in pop up, but we want to skip to next one without saving.
+                ///    This turns out to be similar to a single case
+                /// The URL used is for the next submission.
+                $offset = required_param('offset', PARAM_INT);
+                $nextid = required_param('nextid', PARAM_INT);
+                $id = required_param('id', PARAM_INT);
+                $filter = optional_param('filter', self::FILTER_ALL, PARAM_INT);
+
+                if ($mode == 'next' || $filter !== self::FILTER_REQUIRE_GRADING) {
+                    $offset = (int)$offset+1;
                 }
+                $redirect = new moodle_url('submissions.php',
+                        array('id' => $id, 'offset' => $offset, 'userid' => $nextid,
+                        'mode' => 'single', 'filter' => $filter));
 
-                //then we display the next submission
-                $this->display_submission($extra_javascript);
+                redirect($redirect);
+                break;
+
+            case 'singlenosave':
+                $this->display_submission();
                 break;
 
             default:
@@ -650,10 +781,12 @@ class assignment_base {
     /**
     * Helper method updating the listing on the main script from popup using javascript
     *
+     * @global object
+     * @global object
     * @param $submission object The submission whose data is to be updated on the main page
     */
     function update_main_listing($submission) {
-        global $SESSION, $CFG;
+        global $SESSION, $CFG, $OUTPUT;
 
         $output = '';
 
@@ -665,9 +798,6 @@ class assignment_base {
         $output .= '<script type="text/javascript">'."\n<!--\n";
         if (empty($SESSION->flextable['mod-assignment-submissions']->collapse['submissioncomment'])) {
             if ($quickgrade){
-                //remove carriage return
-                $submission->submissioncomment = str_replace(array("\r\n", "\n"), '', $submission->submissioncomment);
-
                 $output.= 'opener.document.getElementById("submissioncomment'.$submission->userid.'").value="'
                 .trim($submission->submissioncomment).'";'."\n";
              } else {
@@ -702,9 +832,14 @@ class assignment_base {
         if (empty($SESSION->flextable['mod-assignment-submissions']->collapse['status'])) {
             $output.= 'opener.document.getElementById("up'.$submission->userid.'").className="s1";';
             $buttontext = get_string('update');
-            $button = link_to_popup_window ('/mod/assignment/submissions.php?id='.$this->cm->id.'&amp;userid='.$submission->userid.'&amp;mode=single'.'&amp;offset='.(optional_param('offset', '', PARAM_INT)-1),
-                      'grade'.$submission->userid, $buttontext, 450, 700, $buttontext, 'none', true, 'button'.$submission->userid);
-            $output.= 'opener.document.getElementById("up'.$submission->userid.'").innerHTML="'.addslashes_js($button).'";';
+            $url = new moodle_url('/mod/assignment/submissions.php', array(
+                    'id' => $this->cm->id,
+                    'userid' => $submission->userid,
+                    'mode' => 'single',
+                    'offset' => (optional_param('offset', '', PARAM_INT)-1)));
+            $button = $OUTPUT->action_link($url, $buttontext, new popup_action('click', $url, 'grade'.$submission->userid, array('height' => 450, 'width' => 700)), array('ttile'=>$buttontext));
+
+            $output .= 'opener.document.getElementById("up'.$submission->userid.'").innerHTML="'.addslashes_js($button).'";';
         }
 
         $grading_info = grade_get_grades($this->course->id, 'mod', 'assignment', $this->assignment->id, $submission->userid);
@@ -743,10 +878,12 @@ class assignment_base {
     /**
      *  Return a grade in user-friendly form, whether it's a scale or not
      *
-     * @param $grade
+     * @global object
+     * @param mixed $grade
      * @return string User-friendly representation of grade
      */
     function display_grade($grade) {
+        global $DB;
 
         static $scalegrades = array();   // Cache scales for each assignment - they might have different scales!!
 
@@ -759,7 +896,7 @@ class assignment_base {
 
         } else {                                // Scale
             if (empty($scalegrades[$this->assignment->id])) {
-                if ($scale = get_record('scale', 'id', -($this->assignment->grade))) {
+                if ($scale = $DB->get_record('scale', array('id'=>-($this->assignment->grade)))) {
                     $scalegrades[$this->assignment->id] = make_menu_from_list($scale->scale);
                 } else {
                     return '-';
@@ -782,18 +919,26 @@ class assignment_base {
      * Calls preprocess_submission() to give assignment type plug-ins a chance
      * to process submissions before they are graded
      * This method gets its arguments from the page parameters userid and offset
+     *
+     * @global object
+     * @global object
+     * @param string $extra_javascript
      */
-    function display_submission($extra_javascript = '') {
-
-        global $CFG;
+    function display_submission($offset=-1,$userid =-1, $display=true) {
+        global $CFG, $DB, $PAGE, $OUTPUT;
         require_once($CFG->libdir.'/gradelib.php');
         require_once($CFG->libdir.'/tablelib.php');
-
+        require_once("$CFG->dirroot/repository/lib.php");
+        if ($userid==-1) {
         $userid = required_param('userid', PARAM_INT);
+        }
+        if ($offset==-1) {
         $offset = required_param('offset', PARAM_INT);//offset for where to start looking for student.
+        }
+        $filter = optional_param('filter', 0, PARAM_INT);
 
-        if (!$user = get_record('user', 'id', $userid)) {
-            error('No such user!');
+        if (!$user = $DB->get_record('user', array('id'=>$userid))) {
+            print_error('nousers');
         }
 
         if (!$submission = $this->get_submission($user->id)) {
@@ -806,7 +951,7 @@ class assignment_base {
         }
 
         $grading_info = grade_get_grades($this->course->id, 'mod', 'assignment', $this->assignment->id, array($user->id));
-        $disabled = $grading_info->items[0]->grades[$userid]->locked || $grading_info->items[0]->grades[$userid]->overridden;
+        $gradingdisabled = $grading_info->items[0]->grades[$userid]->locked || $grading_info->items[0]->grades[$userid]->overridden;
 
     /// construct SQL, using current offset to find the data of the next student
         $course     = $this->course;
@@ -814,19 +959,18 @@ class assignment_base {
         $cm         = $this->cm;
         $context    = get_context_instance(CONTEXT_MODULE, $cm->id);
 
+        //reset filter to all for offline assignment
+        if ($assignment->assignmenttype == 'offline' && $filter == self::FILTER_SUBMITTED) {
+            $filter = self::FILTER_ALL;
+        }
         /// Get all ppl that can submit assignments
 
         $currentgroup = groups_get_activity_group($cm);
-        if (!empty($CFG->gradebookroles)) {
-            $gradebookroles = explode(",", $CFG->gradebookroles);
-        } else {
-            $gradebookroles = '';
-        }
-        $users = get_role_users($gradebookroles, $context, true, '', 'u.lastname ASC', true, $currentgroup);
+        $users = get_enrolled_users($context, 'mod/assignment:submit', $currentgroup, 'u.id');
         if ($users) {
             $users = array_keys($users);
             // if groupmembersonly used, remove users who are not in any group
-            if (!empty($CFG->enablegroupings) and $cm->groupmembersonly) {
+            if (!empty($CFG->enablegroupmembersonly) and $cm->groupmembersonly) {
                 if ($groupingusers = groups_get_grouping_members($cm->groupingid, 'u.id', 'u.id')) {
                     $users = array_intersect($users, array_keys($groupingusers));
                 }
@@ -834,173 +978,107 @@ class assignment_base {
         }
 
         $nextid = 0;
+        $where = '';
+        if($filter == self::FILTER_SUBMITTED) {
+            $where .= 's.timemodified > 0 AND ';
+        } else if($filter == self::FILTER_REQUIRE_GRADING) {
+            $where .= 's.timemarked < s.timemodified AND ';
+        }
 
         if ($users) {
-            $select = 'SELECT u.id, u.firstname, u.lastname, u.picture, u.imagealt,
+            $userfields = user_picture::fields('u', array('lastaccess'));
+            $select = "SELECT $userfields,
                               s.id AS submissionid, s.grade, s.submissioncomment,
                               s.timemodified, s.timemarked,
                               CASE WHEN s.timemarked > 0 AND s.timemarked >= s.timemodified THEN 1
-                                   ELSE 0 END AS status ';
+                                   ELSE 0 END AS status ";
 
-            $sql = 'FROM '.$CFG->prefix.'user u '.
-                   'LEFT JOIN '.$CFG->prefix.'assignment_submissions s ON u.id = s.userid
+            $sql = 'FROM {user} u '.
+                   'LEFT JOIN {assignment_submissions} s ON u.id = s.userid
                                                                       AND s.assignment = '.$this->assignment->id.' '.
-                   'WHERE u.id IN ('.implode(',', $users).') ';
+                   'WHERE '.$where.'u.id IN ('.implode(',', $users).') ';
 
-            if ($sort = flexible_table::get_sql_sort('mod-assignment-submissions')) {
+            if ($sort = flexible_table::get_sort_for_table('mod-assignment-submissions')) {
                 $sort = 'ORDER BY '.$sort.' ';
             }
+            $auser = $DB->get_records_sql($select.$sql.$sort, null, $offset, 2);
 
-            if (($auser = get_records_sql($select.$sql.$sort, $offset+1, 1)) !== false) {
-                $nextuser = array_shift($auser);
+            if (is_array($auser) && count($auser)>1) {
+                $nextuser = next($auser);
                 $nextid = $nextuser->id;
             }
         }
 
-        print_header(get_string('feedback', 'assignment').':'.fullname($user, true).':'.format_string($this->assignment->name));
-
-        /// Print any extra javascript needed for saveandnext
-        echo $extra_javascript;
-
-        ///SOme javascript to help with setting up >.>
-
-        echo '<script type="text/javascript">'."\n";
-        echo 'function setNext(){'."\n";
-        echo 'document.getElementById(\'submitform\').mode.value=\'next\';'."\n";
-        echo 'document.getElementById(\'submitform\').userid.value="'.$nextid.'";'."\n";
-        echo '}'."\n";
-
-        echo 'function saveNext(){'."\n";
-        echo 'document.getElementById(\'submitform\').mode.value=\'saveandnext\';'."\n";
-        echo 'document.getElementById(\'submitform\').userid.value="'.$nextid.'";'."\n";
-        echo 'document.getElementById(\'submitform\').saveuserid.value="'.$userid.'";'."\n";
-        echo 'document.getElementById(\'submitform\').menuindex.value = document.getElementById(\'submitform\').grade.selectedIndex;'."\n";
-        echo '}'."\n";
-
-        echo '</script>'."\n";
-        echo '<table cellspacing="0" class="feedback '.$subtype.'" >';
-
-        ///Start of teacher info row
-
-        echo '<tr>';
-        echo '<td class="picture teacher">';
         if ($submission->teacher) {
-            $teacher = get_record('user', 'id', $submission->teacher);
+            $teacher = $DB->get_record('user', array('id'=>$submission->teacher));
         } else {
             global $USER;
             $teacher = $USER;
         }
-        print_user_picture($teacher, $this->course->id, $teacher->picture);
-        echo '</td>';
-        echo '<td class="content">';
-        echo '<form id="submitform" action="submissions.php" method="post">';
-        echo '<div>'; // xhtml compatibility - invisiblefieldset was breaking layout here
-        echo '<input type="hidden" name="offset" value="'.($offset+1).'" />';
-        echo '<input type="hidden" name="userid" value="'.$userid.'" />';
-        echo '<input type="hidden" name="id" value="'.$this->cm->id.'" />';
-        echo '<input type="hidden" name="sesskey" value="'.sesskey().'" />';
-        echo '<input type="hidden" name="mode" value="grade" />';
-        echo '<input type="hidden" name="menuindex" value="0" />';//selected menu index
-
-        //new hidden field, initialized to -1.
-        echo '<input type="hidden" name="saveuserid" value="-1" />';
-
-        if ($submission->timemarked) {
-            echo '<div class="from">';
-            echo '<div class="fullname">'.fullname($teacher, true).'</div>';
-            echo '<div class="time">'.userdate($submission->timemarked).'</div>';
-            echo '</div>';
-        }
-        echo '<div class="grade"><label for="menugrade">'.get_string('grade').'</label> ';
-        choose_from_menu(make_grades_menu($this->assignment->grade), 'grade', $submission->grade, get_string('nograde'), '', -1, false, $disabled);
-        echo '</div>';
-
-        echo '<div class="clearer"></div>';
-        echo '<div class="finalgrade">'.get_string('finalgrade', 'grades').': '.$grading_info->items[0]->grades[$userid]->str_grade.'</div>';
-        echo '<div class="clearer"></div>';
-
-        if (!empty($CFG->enableoutcomes)) {
-            foreach($grading_info->outcomes as $n=>$outcome) {
-                echo '<div class="outcome"><label for="menuoutcome_'.$n.'">'.$outcome->name.'</label> ';
-                $options = make_grades_menu(-$outcome->scaleid);
-                if ($outcome->grades[$submission->userid]->locked) {
-                    $options[0] = get_string('nooutcome', 'grades');
-                    echo $options[$outcome->grades[$submission->userid]->grade];
-                } else {
-                    choose_from_menu($options, 'outcome_'.$n.'['.$userid.']', $outcome->grades[$submission->userid]->grade, get_string('nooutcome', 'grades'), '', 0, false, false, 0, 'menuoutcome_'.$n);
-                }
-                echo '</div>';
-                echo '<div class="clearer"></div>';
-            }
-        }
-
 
         $this->preprocess_submission($submission);
 
-        if ($disabled) {
-            echo '<div class="disabledfeedback">'.$grading_info->items[0]->grades[$userid]->str_feedback.'</div>';
-
-        } else {
-            print_textarea($this->usehtmleditor, 14, 58, 0, 0, 'submissioncomment', $submission->submissioncomment, $this->course->id);
-            if ($this->usehtmleditor) {
-                echo '<input type="hidden" name="format" value="'.FORMAT_HTML.'" />';
-            } else {
-                echo '<div class="format">';
-                choose_from_menu(format_text_menu(), "format", $submission->format, "");
-                helpbutton("textformat", get_string("helpformatting"));
-                echo '</div>';
-            }
-        }
-
-        $lastmailinfo = get_user_preferences('assignment_mailinfo', 1) ? 'checked="checked"' : '';
-
-        ///Print Buttons in Single View
-        echo '<input type="hidden" name="mailinfo" value="0" />';
-        echo '<input type="checkbox" id="mailinfo" name="mailinfo" value="1" '.$lastmailinfo.' /><label for="mailinfo">'.get_string('enableemailnotification','assignment').'</label>';
-        echo '<div class="buttons">';
-        echo '<input type="submit" name="submit" value="'.get_string('savechanges').'" onclick = "document.getElementById(\'submitform\').menuindex.value = document.getElementById(\'submitform\').grade.selectedIndex" />';
-        echo '<input type="submit" name="cancel" value="'.get_string('cancel').'" />';
-        //if there are more to be graded.
-        if ($nextid) {
-            echo '<input type="submit" name="saveandnext" value="'.get_string('saveandnext').'" onclick="saveNext()" />';
-            echo '<input type="submit" name="next" value="'.get_string('next').'" onclick="setNext();" />';
-        }
-        echo '</div>';
-        echo '</div></form>';
+        $mformdata = new stdClass();
+        $mformdata->context = $this->context;
+        $mformdata->maxbytes = $this->course->maxbytes;
+        $mformdata->courseid = $this->course->id;
+        $mformdata->teacher = $teacher;
+        $mformdata->assignment = $assignment;
+        $mformdata->submission = $submission;
+        $mformdata->lateness = $this->display_lateness($submission->timemodified);
+        $mformdata->auser = $auser;
+        $mformdata->user = $user;
+        $mformdata->offset = $offset;
+        $mformdata->userid = $userid;
+        $mformdata->cm = $this->cm;
+        $mformdata->grading_info = $grading_info;
+        $mformdata->enableoutcomes = $CFG->enableoutcomes;
+        $mformdata->grade = $this->assignment->grade;
+        $mformdata->gradingdisabled = $gradingdisabled;
+        $mformdata->nextid = $nextid;
+        $mformdata->submissioncomment= $submission->submissioncomment;
+        $mformdata->submissioncommentformat= FORMAT_HTML;
+        $mformdata->submission_content= $this->print_user_files($user->id,true);
+        $mformdata->filter = $filter;
+        $mformdata->mailinfo = get_user_preferences('assignment_mailinfo', 0);
+         if ($assignment->assignmenttype == 'upload') {
+            $mformdata->fileui_options = array('subdirs'=>1, 'maxbytes'=>$assignment->maxbytes, 'maxfiles'=>$assignment->var1, 'accepted_types'=>'*', 'return_types'=>FILE_INTERNAL);
+        } elseif ($assignment->assignmenttype == 'uploadsingle') {
+            $mformdata->fileui_options = array('subdirs'=>0, 'maxbytes'=>$CFG->userquota, 'maxfiles'=>1, 'accepted_types'=>'*', 'return_types'=>FILE_INTERNAL);
+        }
+
+        $submitform = new mod_assignment_grading_form( null, $mformdata );
+
+         if (!$display) {
+            $ret_data = new stdClass();
+            $ret_data->mform = $submitform;
+            $ret_data->fileui_options = $mformdata->fileui_options;
+            return $ret_data;
+        }
+
+        if ($submitform->is_cancelled()) {
+            redirect('submissions.php?id='.$this->cm->id);
+        }
+
+        $submitform->set_data($mformdata);
+
+        $PAGE->set_title($this->course->fullname . ': ' .get_string('feedback', 'assignment').' - '.fullname($user, true));
+        $PAGE->set_heading($this->course->fullname);
+        $PAGE->navbar->add(get_string('submissions', 'assignment'), new moodle_url('/mod/assignment/submissions.php', array('id'=>$cm->id)));
+        $PAGE->navbar->add(fullname($user, true));
+
+        echo $OUTPUT->header();
+        echo $OUTPUT->heading(get_string('feedback', 'assignment').': '.fullname($user, true));
+
+        // display mform here...
+        $submitform->display();
 
         $customfeedback = $this->custom_feedbackform($submission, true);
         if (!empty($customfeedback)) {
             echo $customfeedback;
         }
 
-        echo '</td></tr>';
-
-        ///End of teacher info row, Start of student info row
-        echo '<tr>';
-        echo '<td class="picture user">';
-        print_user_picture($user, $this->course->id, $user->picture);
-        echo '</td>';
-        echo '<td class="topic">';
-        echo '<div class="from">';
-        echo '<div class="fullname">'.fullname($user, true).'</div>';
-        if ($submission->timemodified) {
-            echo '<div class="time">'.userdate($submission->timemodified).
-                                     $this->display_lateness($submission->timemodified).'</div>';
-        }
-        echo '</div>';
-        $this->print_user_files($user->id);
-        echo '</td>';
-        echo '</tr>';
-
-        ///End of student info row
-
-        echo '</table>';
-
-        if (!$disabled and $this->usehtmleditor) {
-            use_html_editor();
-        }
-
-        print_footer('none');
+        echo $OUTPUT->footer();
     }
 
     /**
@@ -1008,36 +1086,49 @@ class assignment_base {
      *
      * Called by display_submission()
      * The default type does nothing here.
-     * @param $submission object The submission object
+     *
+     * @param object $submission The submission object
      */
     function preprocess_submission(&$submission) {
     }
 
     /**
      *  Display all the submissions ready for grading
+     *
+     * @global object
+     * @global object
+     * @global object
+     * @global object
+     * @param string $message
+     * @return bool|void
      */
     function display_submissions($message='') {
-        global $CFG, $db, $USER;
+        global $CFG, $DB, $USER, $DB, $OUTPUT, $PAGE;
         require_once($CFG->libdir.'/gradelib.php');
 
         /* first we check to see if the form has just been submitted
          * to request user_preference updates
          */
 
-        if (isset($_POST['updatepref'])){
+       $filters = array(self::FILTER_ALL             => get_string('all'),
+                        self::FILTER_REQUIRE_GRADING => get_string('requiregrading', 'assignment'));
+
+        $updatepref = optional_param('updatepref', 0, PARAM_BOOL);
+        if ($updatepref) {
             $perpage = optional_param('perpage', 10, PARAM_INT);
             $perpage = ($perpage <= 0) ? 10 : $perpage ;
+            $filter = optional_param('filter', 0, PARAM_INT);
             set_user_preference('assignment_perpage', $perpage);
             set_user_preference('assignment_quickgrade', optional_param('quickgrade', 0, PARAM_BOOL));
+            set_user_preference('assignment_filter', $filter);
         }
 
         /* next we get perpage and quickgrade (allow quick grade) params
          * from database
          */
         $perpage    = get_user_preferences('assignment_perpage', 10);
-
         $quickgrade = get_user_preferences('assignment_quickgrade', 0);
-
+        $filter = get_user_preferences('assignment_filter', 0);
         $grading_info = grade_get_grades($this->course->id, 'mod', 'assignment', $this->assignment->id);
 
         if (!empty($CFG->enableoutcomes) and !empty($grading_info->outcomes)) {
@@ -1054,12 +1145,28 @@ class assignment_base {
         $course     = $this->course;
         $assignment = $this->assignment;
         $cm         = $this->cm;
+        $hassubmission = false;
+
+        // reset filter to all for offline assignment only.
+        if ($assignment->assignmenttype == 'offline') {
+            if ($filter == self::FILTER_SUBMITTED) {
+                $filter = self::FILTER_ALL;
+            }
+        } else {
+            $filters[self::FILTER_SUBMITTED] = get_string('submitted', 'assignment');
+        }
 
         $tabindex = 1; //tabindex for quick grading tabbing; Not working for dropdowns yet
         add_to_log($course->id, 'assignment', 'view submission', 'submissions.php?id='.$this->cm->id, $this->assignment->id, $this->cm->id);
-        $navigation = build_navigation($this->strsubmissions, $this->cm);
-        print_header_simple(format_string($this->assignment->name,true), "", $navigation,
-                '', '', true, update_module_button($cm->id, $course->id, $this->strassignment), navmenu($course, $cm));
+
+        $PAGE->set_title(format_string($this->assignment->name,true));
+        $PAGE->set_heading($this->course->fullname);
+        echo $OUTPUT->header();
+
+        echo '<div class="usersubmissions">';
+
+        //hook to allow plagiarism plugins to update status/print links.
+        plagiarism_update_status($this->course, $this->cm);
 
         $course_context = get_context_instance(CONTEXT_COURSE, $course->id);
         if (has_capability('gradereport/grader:view', $course_context) && has_capability('moodle/grade:viewall', $course_context)) {
@@ -1079,19 +1186,64 @@ class assignment_base {
         $groupmode = groups_get_activity_groupmode($cm);
         $currentgroup = groups_get_activity_group($cm, true);
         groups_print_activity_menu($cm, $CFG->wwwroot . '/mod/assignment/submissions.php?id=' . $this->cm->id);
-        if (!empty($CFG->gradebookroles)) {
-            $gradebookroles = explode(",", $CFG->gradebookroles);
+
+        /// Print quickgrade form around the table
+        if ($quickgrade) {
+            $formattrs = array();
+            $formattrs['action'] = new moodle_url('/mod/assignment/submissions.php');
+            $formattrs['id'] = 'fastg';
+            $formattrs['method'] = 'post';
+
+            echo html_writer::start_tag('form', $formattrs);
+            echo html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'id',      'value'=> $this->cm->id));
+            echo html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'mode',    'value'=> 'fastgrade'));
+            echo html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'page',    'value'=> $page));
+            echo html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'sesskey', 'value'=> sesskey()));
+        }
+
+        /// Get all ppl that are allowed to submit assignments
+        list($esql, $params) = get_enrolled_sql($context, 'mod/assignment:submit', $currentgroup);
+
+        if ($filter == self::FILTER_ALL) {
+            $sql = "SELECT u.id FROM {user} u ".
+                   "LEFT JOIN ($esql) eu ON eu.id=u.id ".
+                   "WHERE u.deleted = 0 AND eu.id=u.id ";
         } else {
-            $gradebookroles = '';
+            $wherefilter = ' AND s.assignment = '. $this->assignment->id;
+            $assignmentsubmission = "LEFT JOIN {assignment_submissions} s ON (u.id = s.userid) ";
+            if($filter == self::FILTER_SUBMITTED) {
+                $wherefilter .= ' AND s.timemodified > 0 ';
+            } else if($filter == self::FILTER_REQUIRE_GRADING && $assignment->assignmenttype != 'offline') {
+                $wherefilter .= ' AND s.timemarked < s.timemodified ';
+            } else { // require grading for offline assignment
+                $assignmentsubmission = "";
+                $wherefilter = "";
+            }
+
+            $sql = "SELECT u.id FROM {user} u ".
+                   "LEFT JOIN ($esql) eu ON eu.id=u.id ".
+                   $assignmentsubmission.
+                   "WHERE u.deleted = 0 AND eu.id=u.id ".
+                   $wherefilter;
+        }
+
+        $users = $DB->get_records_sql($sql, $params);
+        if (!empty($users)) {
+            if($assignment->assignmenttype == 'offline' && $filter == self::FILTER_REQUIRE_GRADING) {
+                //remove users who has submitted their assignment
+                foreach ($this->get_submissions() as $submission) {
+                    if (array_key_exists($submission->userid, $users)) {
+                        unset($users[$submission->userid]);
+                    }
+                }
         }
-        $users = get_role_users($gradebookroles, $context, true, '', 'u.lastname ASC', true, $currentgroup);
-        if ($users) {
             $users = array_keys($users);
-            if (!empty($CFG->enablegroupings) and $cm->groupmembersonly) {
-                $groupingusers = groups_get_grouping_members($cm->groupingid, 'u.id', 'u.id');
-                if ($groupingusers) {
-                    $users = array_intersect($users, array_keys($groupingusers));
                 }
+
+        // if groupmembersonly used, remove users who are not in any group
+        if ($users and !empty($CFG->enablegroupmembersonly) and $cm->groupmembersonly) {
+            if ($groupingusers = groups_get_grouping_members($cm->groupingid, 'u.id', 'u.id')) {
+                $users = array_intersect($users, array_keys($groupingusers));
             }
         }
 
@@ -1101,11 +1253,11 @@ class assignment_base {
         }
 
         $tableheaders = array('',
-                              get_string('fullname'),
+                              get_string('fullnameuser'),
                               get_string('grade'),
                               get_string('comment', 'assignment'),
-                              get_string('lastmodified').' ('.$course->student.')',
-                              get_string('lastmodified').' ('.$course->teacher.')',
+                              get_string('lastmodified').' ('.get_string('submission', 'assignment').')',
+                              get_string('lastmodified').' ('.get_string('grade').')',
                               get_string('status'),
                               get_string('finalgrade', 'grades'));
         if ($uses_outcomes) {
@@ -1142,7 +1294,6 @@ class assignment_base {
         $table->set_attribute('id', 'attempts');
         $table->set_attribute('class', 'submissions');
         $table->set_attribute('width', '100%');
-        //$table->set_attribute('align', 'center');
 
         $table->no_sorting('finalgrade');
         $table->no_sorting('outcome');
@@ -1150,44 +1301,55 @@ class assignment_base {
         // Start working -- this is necessary as soon as the niceties are over
         $table->setup();
 
-        if (empty($users)) {
-            print_heading(get_string('nosubmitusers','assignment'));
-            return true;
-        }
-
     /// Construct the SQL
-
-        if ($where = $table->get_sql_where()) {
+        list($where, $params) = $table->get_sql_where();
+        if ($where) {
             $where .= ' AND ';
         }
 
+        if ($filter == self::FILTER_SUBMITTED) {
+           $where .= 's.timemodified > 0 AND ';
+        } else if($filter == self::FILTER_REQUIRE_GRADING) {
+            $where = '';
+            if ($assignment->assignmenttype != 'offline') {
+               $where .= 's.timemarked < s.timemodified AND ';
+            }
+        }
+
         if ($sort = $table->get_sql_sort()) {
             $sort = ' ORDER BY '.$sort;
         }
 
-        $select = 'SELECT u.id, u.firstname, u.lastname, u.picture, u.imagealt,
+        $ufields = user_picture::fields('u');
+        if (!empty($users)) {
+            $select = "SELECT $ufields,
                           s.id AS submissionid, s.grade, s.submissioncomment,
                           s.timemodified, s.timemarked,
                           CASE WHEN s.timemarked > 0 AND s.timemarked >= s.timemodified THEN 1
-                               ELSE 0 END AS status ';
+                                   ELSE 0 END AS status ";
 
-        $sql = 'FROM '.$CFG->prefix.'user u '.
-               'LEFT JOIN '.$CFG->prefix.'assignment_submissions s ON u.id = s.userid
+            $sql = 'FROM {user} u '.
+                   'LEFT JOIN {assignment_submissions} s ON u.id = s.userid
                                                                   AND s.assignment = '.$this->assignment->id.' '.
                'WHERE '.$where.'u.id IN ('.implode(',',$users).') ';
 
+            $ausers = $DB->get_records_sql($select.$sql.$sort, $params, $table->get_page_start(), $table->get_page_size());
+
         $table->pagesize($perpage, count($users));
 
         ///offset used to calculate index of student in that particular query, needed for the pop up to know who's next
         $offset = $page * $perpage;
-
         $strupdate = get_string('update');
         $strgrade  = get_string('grade');
         $grademenu = make_grades_menu($this->assignment->grade);
 
-        if (($ausers = get_records_sql($select.$sql.$sort, $table->get_page_start(), $table->get_page_size())) !== false) {
+            if ($ausers !== false) {
             $grading_info = grade_get_grades($this->course->id, 'mod', 'assignment', $this->assignment->id, array_keys($ausers));
+                $endposition = $offset + $perpage;
+                $currentposition = 0;
             foreach ($ausers as $auser) {
+                    if ($currentposition == $offset && $offset < $endposition) {
+                        $rowclass = null;
                 $final_grade = $grading_info->items[0]->grades[$auser->id];
                 $grademax = $grading_info->items[0]->grademax;
                 $final_grade->formatted_grade = round($final_grade->grade,2) .' / ' . round($grademax,2);
@@ -1196,22 +1358,28 @@ class assignment_base {
                     $locked_overridden = 'overridden';
                 }
 
-                $picture = print_user_picture($auser, $course->id, $auser->picture, false, true);
+                        $picture = $OUTPUT->user_picture($auser);
 
                 if (empty($auser->submissionid)) {
                     $auser->grade = -1; //no submission yet
                 }
 
                 if (!empty($auser->submissionid)) {
+                            $hassubmission = true;
                 ///Prints student answer and student modified date
                 ///attach file or print link to student answer, depending on the type of the assignment.
                 ///Refer to print_student_answer in inherited classes.
                     if ($auser->timemodified > 0) {
-                        $studentmodified = '<div id="ts'.$auser->id.'">'.$this->print_student_answer($auser->id)
-                                         . userdate($auser->timemodified).'</div>';
+                                $studentmodifiedcontent = $this->print_student_answer($auser->id)
+                                        . userdate($auser->timemodified);
+                                if ($assignment->timedue && $auser->timemodified > $assignment->timedue) {
+                                    $studentmodifiedcontent .= assignment_display_lateness($auser->timemodified, $assignment->timedue);
+                                    $rowclass = 'late';
+                                }
                     } else {
-                        $studentmodified = '<div id="ts'.$auser->id.'">&nbsp;</div>';
+                                $studentmodifiedcontent = '&nbsp;';
                     }
+                            $studentmodified = html_writer::tag('div', $studentmodifiedcontent, array('id' => 'ts' . $auser->id));
                 ///Print grade, dropdown or text
                     if ($auser->timemarked > 0) {
                         $teachermodified = '<div id="tt'.$auser->id.'">'.userdate($auser->timemarked).'</div>';
@@ -1219,9 +1387,9 @@ class assignment_base {
                         if ($final_grade->locked or $final_grade->overridden) {
                             $grade = '<div id="g'.$auser->id.'" class="'. $locked_overridden .'">'.$final_grade->formatted_grade.'</div>';
                         } else if ($quickgrade) {
-                            $menu = choose_from_menu(make_grades_menu($this->assignment->grade),
-                                                     'menu['.$auser->id.']', $auser->grade,
-                                                     get_string('nograde'),'',-1,true,false,$tabindex++);
+                                    $attributes = array();
+                                    $attributes['tabindex'] = $tabindex++;
+                                    $menu = html_writer::select(make_grades_menu($this->assignment->grade), 'menu['.$auser->id.']', $auser->grade, array(-1=>get_string('nograde')), $attributes);
                             $grade = '<div id="g'.$auser->id.'">'. $menu .'</div>';
                         } else {
                             $grade = '<div id="g'.$auser->id.'">'.$this->display_grade($auser->grade).'</div>';
@@ -1232,9 +1400,9 @@ class assignment_base {
                         if ($final_grade->locked or $final_grade->overridden) {
                             $grade = '<div id="g'.$auser->id.'" class="'. $locked_overridden .'">'.$final_grade->formatted_grade.'</div>';
                         } else if ($quickgrade) {
-                            $menu = choose_from_menu(make_grades_menu($this->assignment->grade),
-                                                     'menu['.$auser->id.']', $auser->grade,
-                                                     get_string('nograde'),'',-1,true,false,$tabindex++);
+                                    $attributes = array();
+                                    $attributes['tabindex'] = $tabindex++;
+                                    $menu = html_writer::select(make_grades_menu($this->assignment->grade), 'menu['.$auser->id.']', $auser->grade, array(-1=>get_string('nograde')), $attributes);
                             $grade = '<div id="g'.$auser->id.'">'.$menu.'</div>';
                         } else {
                             $grade = '<div id="g'.$auser->id.'">'.$this->display_grade($auser->grade).'</div>';
@@ -1258,11 +1426,13 @@ class assignment_base {
 
                     if ($final_grade->locked or $final_grade->overridden) {
                         $grade = '<div id="g'.$auser->id.'">'.$final_grade->formatted_grade . '</div>';
+                                $hassubmission = true;
                     } else if ($quickgrade) {   // allow editing
-                        $menu = choose_from_menu(make_grades_menu($this->assignment->grade),
-                                                 'menu['.$auser->id.']', $auser->grade,
-                                                 get_string('nograde'),'',-1,true,false,$tabindex++);
+                                $attributes = array();
+                                $attributes['tabindex'] = $tabindex++;
+                                $menu = html_writer::select(make_grades_menu($this->assignment->grade), 'menu['.$auser->id.']', $auser->grade, array(-1=>get_string('nograde')), $attributes);
                         $grade = '<div id="g'.$auser->id.'">'.$menu.'</div>';
+                                $hassubmission = true;
                     } else {
                         $grade = '<div id="g'.$auser->id.'">-</div>';
                     }
@@ -1288,9 +1458,9 @@ class assignment_base {
 
                 ///No more buttons, we use popups ;-).
                 $popup_url = '/mod/assignment/submissions.php?id='.$this->cm->id
-                           . '&amp;userid='.$auser->id.'&amp;mode=single'.'&amp;offset='.$offset++;
-                $button = link_to_popup_window ($popup_url, 'grade'.$auser->id, $buttontext, 600, 780,
-                                                $buttontext, 'none', true, 'button'.$auser->id);
+                                   . '&amp;userid='.$auser->id.'&amp;mode=single'.'&amp;filter='.$filter.'&amp;offset='.$offset++;
+
+                        $button = $OUTPUT->action_link($popup_url, $buttontext);
 
                 $status  = '<div id="up'.$auser->id.'" class="s'.$auser->status.'">'.$button.'</div>';
 
@@ -1308,9 +1478,10 @@ class assignment_base {
                             $options[0] = get_string('nooutcome', 'grades');
                             $outcomes .= ': <span id="outcome_'.$n.'_'.$auser->id.'">'.$options[$outcome->grades[$auser->id]->grade].'</span>';
                         } else {
-                            $outcomes .= ' ';
-                            $outcomes .= choose_from_menu($options, 'outcome_'.$n.'['.$auser->id.']',
-                                        $outcome->grades[$auser->id]->grade, get_string('nooutcome', 'grades'), '', 0, true, false, 0, 'outcome_'.$n.'_'.$auser->id);
+                                    $attributes = array();
+                                    $attributes['tabindex'] = $tabindex++;
+                                    $attributes['id'] = 'outcome_'.$n.'_'.$auser->id;
+                                    $outcomes .= ' '.html_writer::select($options, 'outcome_'.$n.'['.$auser->id.']', $outcome->grades[$auser->id]->grade, array(0=>get_string('nooutcome', 'grades')), $attributes);
                         }
                         $outcomes .= '</div>';
                     }
@@ -1321,65 +1492,71 @@ class assignment_base {
                 if ($uses_outcomes) {
                     $row[] = $outcomes;
                 }
-
-                $table->add_data($row);
+                        $table->add_data($row, $rowclass);
+                    }
+                    $currentposition++;
+                }
+                if ($hassubmission && ($this->assignment->assignmenttype=='upload' || $this->assignment->assignmenttype=='online' || $this->assignment->assignmenttype=='uploadsingle')) { //TODO: this is an ugly hack, where is the plugin spirit? (skodak)
+                    echo html_writer::start_tag('div', array('class' => 'mod-assignment-download-link'));
+                    echo html_writer::link(new moodle_url('/mod/assignment/submissions.php', array('id' => $this->cm->id, 'download' => 'zip')), get_string('downloadall', 'assignment'));
+                    echo html_writer::end_tag('div');
+                }
+                $table->print_html();  /// Print the whole table
+            } else {
+                if ($filter == self::FILTER_SUBMITTED) {
+                    echo html_writer::tag('div', get_string('nosubmisson', 'assignment'), array('class'=>'nosubmisson'));
+                } else if ($filter == self::FILTER_REQUIRE_GRADING) {
+                    echo html_writer::tag('div', get_string('norequiregrading', 'assignment'), array('class'=>'norequiregrading'));
+                }
             }
         }
 
         /// Print quickgrade form around the table
-        if ($quickgrade){
-            echo '<form action="submissions.php" id="fastg" method="post">';
-            echo '<div>';
-            echo '<input type="hidden" name="id" value="'.$this->cm->id.'" />';
-            echo '<input type="hidden" name="mode" value="fastgrade" />';
-            echo '<input type="hidden" name="page" value="'.$page.'" />';
-            echo '<input type="hidden" name="sesskey" value="'.sesskey().'" />';
-            echo '</div>';
+        if ($quickgrade && $table->started_output && !empty($users)){
+            $mailinfopref = false;
+            if (get_user_preferences('assignment_mailinfo', 1)) {
+                $mailinfopref = true;
         }
+            $emailnotification =  html_writer::checkbox('mailinfo', 1, $mailinfopref, get_string('enablenotification','assignment'));
 
-        $table->print_html();  /// Print the whole table
+            $emailnotification .= $OUTPUT->help_icon('enablenotification', 'assignment');
+            echo html_writer::tag('div', $emailnotification, array('class'=>'emailnotification'));
 
-        if ($quickgrade){
-            $lastmailinfo = get_user_preferences('assignment_mailinfo', 1) ? 'checked="checked"' : '';
-            echo '<div class="fgcontrols">';
-            echo '<div class="emailnotification">';
-            echo '<label for="mailinfo">'.get_string('enableemailnotification','assignment').'</label>';
-            echo '<input type="hidden" name="mailinfo" value="0" />';
-            echo '<input type="checkbox" id="mailinfo" name="mailinfo" value="1" '.$lastmailinfo.' />';
-            helpbutton('emailnotification', get_string('enableemailnotification', 'assignment'), 'assignment').'</p></div>';
-            echo '</div>';
-            echo '<div class="fastgbutton"><input type="submit" name="fastg" value="'.get_string('saveallfeedback', 'assignment').'" /></div>';
-            echo '</div>';
-            echo '</form>';
+            $savefeedback = html_writer::empty_tag('input', array('type'=>'submit', 'name'=>'fastg', 'value'=>get_string('saveallfeedback', 'assignment')));
+            echo html_writer::tag('div', $savefeedback, array('class'=>'fastgbutton'));
+
+            echo html_writer::end_tag('form');
+        } else if ($quickgrade) {
+            echo html_writer::end_tag('form');
         }
+
+        echo '</div>';
         /// End of fast grading form
 
         /// Mini form for setting user preference
-        echo '<div class="qgprefs">';
-        echo '<form id="options" action="submissions.php?id='.$this->cm->id.'" method="post"><div>';
-        echo '<input type="hidden" name="updatepref" value="1" />';
-        echo '<table id="optiontable">';
-        echo '<tr><td>';
-        echo '<label for="perpage">'.get_string('pagesize','assignment').'</label>';
-        echo '</td>';
-        echo '<td>';
-        echo '<input type="text" id="perpage" name="perpage" size="1" value="'.$perpage.'" />';
-        helpbutton('pagesize', get_string('pagesize','assignment'), 'assignment');
-        echo '</td></tr>';
-        echo '<tr><td>';
-        echo '<label for="quickgrade">'.get_string('quickgrade','assignment').'</label>';
-        echo '</td>';
-        echo '<td>';
-        $checked = $quickgrade ? 'checked="checked"' : '';
-        echo '<input type="checkbox" id="quickgrade" name="quickgrade" value="1" '.$checked.' />';
-        helpbutton('quickgrade', get_string('quickgrade', 'assignment'), 'assignment').'</p></div>';
-        echo '</td></tr>';
-        echo '<tr><td colspan="2">';
-        echo '<input type="submit" value="'.get_string('savepreferences').'" />';
-        echo '</td></tr></table>';
-        echo '</div></form></div>';
-        ///End of mini form
-        print_footer($this->course);
+
+        $formaction = new moodle_url('/mod/assignment/submissions.php', array('id'=>$this->cm->id));
+        $mform = new MoodleQuickForm('optionspref', 'post', $formaction, '', array('class'=>'optionspref'));
+
+        $mform->addElement('hidden', 'updatepref');
+        $mform->setDefault('updatepref', 1);
+        $mform->addElement('header', 'qgprefs', get_string('optionalsettings', 'assignment'));
+        $mform->addElement('select', 'filter', get_string('show'),  $filters);
+
+        $mform->setDefault('filter', $filter);
+
+        $mform->addElement('text', 'perpage', get_string('pagesize', 'assignment'), array('size'=>1));
+        $mform->setDefault('perpage', $perpage);
+
+        $mform->addElement('checkbox', 'quickgrade', get_string('quickgrade','assignment'));
+        $mform->setDefault('quickgrade', $quickgrade);
+        $mform->addHelpButton('quickgrade', 'quickgrade', 'assignment');
+
+        $mform->addElement('submit', 'savepreferences', get_string('savepreferences'));
+
+        $mform->display();
+
+        echo $OUTPUT->footer();
     }
 
     /**
@@ -1387,10 +1564,14 @@ class assignment_base {
      *
      * This is called by submissions() when a grading even has taken place.
      * It gets its data from the submitted form.
-     * @return object The updated submission object
+     *
+     * @global object
+     * @global object
+     * @global object
+     * @return object|bool The updated submission object or false
      */
-    function process_feedback() {
-        global $CFG, $USER;
+    function process_feedback($formdata=null) {
+        global $CFG, $USER, $DB;
         require_once($CFG->libdir.'/gradelib.php');
 
         if (!$feedback = data_submitted() or !confirm_sesskey()) {      // No incoming data?
@@ -1415,12 +1596,11 @@ class assignment_base {
 
         $submission = $this->get_submission($feedback->userid, true);  // Get or make one
 
-        if (!$grading_info->items[0]->grades[$feedback->userid]->locked and
-            !$grading_info->items[0]->grades[$feedback->userid]->overridden) {
+        if (!($grading_info->items[0]->grades[$feedback->userid]->locked ||
+            $grading_info->items[0]->grades[$feedback->userid]->overridden) ) {
 
-            $submission->grade      = $feedback->grade;
-            $submission->submissioncomment    = $feedback->submissioncomment;
-            $submission->format     = $feedback->format;
+            $submission->grade      = $feedback->xgrade;
+            $submission->submissioncomment    = $feedback->submissioncomment_editor['text'];
             $submission->teacher    = $USER->id;
             $mailinfo = get_user_preferences('assignment_mailinfo', 0);
             if (!$mailinfo) {
@@ -1437,15 +1617,19 @@ class assignment_base {
                 // $submission->timemodified = time();
             }
 
-            if (! update_record('assignment_submissions', $submission)) {
-                return false;
-            }
+            $DB->update_record('assignment_submissions', $submission);
 
             // triger grade event
             $this->update_grade($submission);
 
             add_to_log($this->course->id, 'assignment', 'update grades',
-                       'submissions.php?id='.$this->assignment->id.'&user='.$feedback->userid, $feedback->userid, $this->cm->id);
+                       'submissions.php?id='.$this->cm->id.'&user='.$feedback->userid, $feedback->userid, $this->cm->id);
+             if (!is_null($formdata)) {
+                    if ($this->type == 'upload' || $this->type == 'uploadsingle') {
+                        $mformdata = $formdata->mform->get_data();
+                        $mformdata = file_postupdate_standard_filemanager($mformdata, 'files', $formdata->fileui_options, $this->context, 'mod_assignment', 'response', $submission->id);
+                    }
+             }
         }
 
         return $submission;
@@ -1485,45 +1669,45 @@ class assignment_base {
     /**
      * Load the submission object for a particular user
      *
+     * @global object
+     * @global object
      * @param $userid int The id of the user whose submission we want or 0 in which case USER->id is used
      * @param $createnew boolean optional Defaults to false. If set to true a new submission object will be created in the database
      * @param bool $teachermodified student submission set if false
      * @return object The submission
      */
     function get_submission($userid=0, $createnew=false, $teachermodified=false) {
-        global $USER;
+        global $USER, $DB;
 
         if (empty($userid)) {
             $userid = $USER->id;
         }
 
-        $submission = get_record('assignment_submissions', 'assignment', $this->assignment->id, 'userid', $userid);
+        $submission = $DB->get_record('assignment_submissions', array('assignment'=>$this->assignment->id, 'userid'=>$userid));
 
         if ($submission || !$createnew) {
             return $submission;
         }
         $newsubmission = $this->prepare_new_submission($userid, $teachermodified);
-        if (!insert_record("assignment_submissions", $newsubmission)) {
-            error("Could not insert a new empty submission");
-        }
+        $DB->insert_record("assignment_submissions", $newsubmission);
 
-        return get_record('assignment_submissions', 'assignment', $this->assignment->id, 'userid', $userid);
+        return $DB->get_record('assignment_submissions', array('assignment'=>$this->assignment->id, 'userid'=>$userid));
     }
 
     /**
      * Instantiates a new submission object for a given user
      *
      * Sets the assignment, userid and times, everything else is set to default values.
-     * @param $userid int The userid for which we want a submission object
+     *
+     * @param int $userid The userid for which we want a submission object
      * @param bool $teachermodified student submission set if false
      * @return object The submission
      */
     function prepare_new_submission($userid, $teachermodified=false) {
-        $submission = new Object;
+        $submission = new stdClass();
         $submission->assignment   = $this->assignment->id;
         $submission->userid       = $userid;
-        //$submission->timecreated  = time();
-        $submission->timecreated = '';
+        $submission->timecreated = time();
         // teachers should not be modifying modified date, except offline assignments
         if ($teachermodified) {
             $submission->timemodified = 0;
@@ -1545,8 +1729,8 @@ class assignment_base {
     /**
      * Return all assignment submissions by ENROLLED students (even empty)
      *
-     * @param $sort string optional field names for the ORDER BY in the sql query
-     * @param $dir string optional specifying the sort direction, defaults to DESC
+     * @param string $sort optional field names for the ORDER BY in the sql query
+     * @param string $dir optional specifying the sort direction, defaults to DESC
      * @return array The submission objects indexed by id
      */
     function get_submissions($sort='', $dir='DESC') {
@@ -1556,7 +1740,7 @@ class assignment_base {
     /**
      * Counts all real assignment submissions by ENROLLED students (not empty ones)
      *
-     * @param $groupid int optional If nonzero then count is restricted to this group
+     * @param int $groupid optional If nonzero then count is restricted to this group
      * @return int The number of submissions
      */
     function count_real_submissions($groupid=0) {
@@ -1569,16 +1753,20 @@ class assignment_base {
      * First checks whether the option to email teachers is set for this assignment.
      * Sends an email to ALL teachers in the course (or in the group if using separate groups).
      * Uses the methods email_teachers_text() and email_teachers_html() to construct the content.
+     *
+     * @global object
+     * @global object
      * @param $submission object The submission that has changed
+     * @return void
      */
     function email_teachers($submission) {
-        global $CFG;
+        global $CFG, $DB;
 
         if (empty($this->assignment->emailteachers)) {          // No need to do anything
             return;
         }
 
-        $user = get_record('user', 'id', $submission->userid);
+        $user = $DB->get_record('user', array('id'=>$submission->userid));
 
         if ($teachers = $this->get_graders($user)) {
 
@@ -1587,22 +1775,52 @@ class assignment_base {
             $strsubmitted  = get_string('submitted', 'assignment');
 
             foreach ($teachers as $teacher) {
-                $info = new object();
+                $info = new stdClass();
                 $info->username = fullname($user, true);
                 $info->assignment = format_string($this->assignment->name,true);
                 $info->url = $CFG->wwwroot.'/mod/assignment/submissions.php?id='.$this->cm->id;
+                $info->timeupdated = userdate($submission->timemodified, '%c', $teacher->timezone);
 
                 $postsubject = $strsubmitted.': '.$info->username.' -> '.$this->assignment->name;
                 $posttext = $this->email_teachers_text($info);
                 $posthtml = ($teacher->mailformat == 1) ? $this->email_teachers_html($info) : '';
 
-                @email_to_user($teacher, $user, $postsubject, $posttext, $posthtml);  // If it fails, oh well, too bad.
+                $eventdata = new stdClass();
+                $eventdata->modulename       = 'assignment';
+                $eventdata->userfrom         = $user;
+                $eventdata->userto           = $teacher;
+                $eventdata->subject          = $postsubject;
+                $eventdata->fullmessage      = $posttext;
+                $eventdata->fullmessageformat = FORMAT_PLAIN;
+                $eventdata->fullmessagehtml  = $posthtml;
+                $eventdata->smallmessage     = $postsubject;
+
+                $eventdata->name            = 'assignment_updates';
+                $eventdata->component       = 'mod_assignment';
+                $eventdata->notification    = 1;
+                $eventdata->contexturl      = $info->url;
+                $eventdata->contexturlname  = $info->assignment;
+
+                message_send($eventdata);
+            }
             }
         }
+
+    /**
+     * @param string $filearea
+     * @param array $args
+     * @return bool
+     */
+    function send_file($filearea, $args) {
+        debugging('plugin does not implement file sending', DEBUG_DEVELOPER);
+        return false;
     }
 
     /**
      * Returns a list of teachers that should be grading given submission
+     *
+     * @param object $user
+     * @return array
      */
     function get_graders($user) {
         //potential graders
@@ -1650,8 +1868,9 @@ class assignment_base {
      * @return string
      */
     function email_teachers_text($info) {
-        $posttext  = format_string($this->course->shortname).' -> '.$this->strassignments.' -> '.
-                     format_string($this->assignment->name)."\n";
+        $posttext  = format_string($this->course->shortname, true, array('context' => $this->coursecontext)).' -> '.
+                     $this->strassignments.' -> '.
+                     format_string($this->assignment->name, true, array('context' => $this->context))."\n";
         $posttext .= '---------------------------------------------------------------------'."\n";
         $posttext .= get_string("emailteachermail", "assignment", $info)."\n";
         $posttext .= "\n---------------------------------------------------------------------\n";
@@ -1667,9 +1886,9 @@ class assignment_base {
     function email_teachers_html($info) {
         global $CFG;
         $posthtml  = '<p><font face="sans-serif">'.
-                     '<a href="'.$CFG->wwwroot.'/course/view.php?id='.$this->course->id.'">'.format_string($this->course->shortname).'</a> ->'.
+                     '<a href="'.$CFG->wwwroot.'/course/view.php?id='.$this->course->id.'">'.format_string($this->course->shortname, true, array('context' => $this->coursecontext)).'</a> ->'.
                      '<a href="'.$CFG->wwwroot.'/mod/assignment/index.php?id='.$this->course->id.'">'.$this->strassignments.'</a> ->'.
-                     '<a href="'.$CFG->wwwroot.'/mod/assignment/view.php?id='.$this->cm->id.'">'.format_string($this->assignment->name).'</a></font></p>';
+                     '<a href="'.$CFG->wwwroot.'/mod/assignment/view.php?id='.$this->cm->id.'">'.format_string($this->assignment->name, true, array('context' => $this->context)).'</a></font></p>';
         $posthtml .= '<hr /><font face="sans-serif">';
         $posthtml .= '<p>'.get_string('emailteachermailhtml', 'assignment', $info).'</p>';
         $posthtml .= '</font><hr />';
@@ -1684,7 +1903,7 @@ class assignment_base {
      * @return string optional
      */
     function print_user_files($userid=0, $return=false) {
-        global $CFG, $USER;
+        global $CFG, $USER, $OUTPUT;
 
         if (!$userid) {
             if (!isloggedin()) {
@@ -1693,21 +1912,41 @@ class assignment_base {
             $userid = $USER->id;
         }
 
-        $filearea = $this->file_area_name($userid);
-
         $output = '';
 
-        if ($basedir = $this->file_area($userid)) {
-            if ($files = get_directory_list($basedir)) {
-                require_once($CFG->libdir.'/filelib.php');
-                foreach ($files as $key => $file) {
+        $submission = $this->get_submission($userid);
+        if (!$submission) {
+            return $output;
+        }
 
-                    $icon = mimeinfo('icon', $file);
-                    $ffurl = get_file_url("$filearea/$file", array('forcedownload'=>1));
+        $fs = get_file_storage();
+        $files = $fs->get_area_files($this->context->id, 'mod_assignment', 'submission', $submission->id, "timemodified", false);
+        if (!empty($files)) {
+            require_once($CFG->dirroot . '/mod/assignment/locallib.php');
+            if ($CFG->enableportfolios) {
+                require_once($CFG->libdir.'/portfoliolib.php');
+                $button = new portfolio_add_button();
+            }
+            foreach ($files as $file) {
+                $filename = $file->get_filename();
+                $mimetype = $file->get_mimetype();
+                $path = file_encode_url($CFG->wwwroot.'/pluginfile.php', '/'.$this->context->id.'/mod_assignment/submission/'.$submission->id.'/'.$filename);
+                $output .= '<a href="'.$path.'" ><img src="'.$OUTPUT->pix_url(file_mimetype_icon($mimetype)).'" class="icon" alt="'.$mimetype.'" />'.s($filename).'</a>';
+                if ($CFG->enableportfolios && $this->portfolio_exportable() && has_capability('mod/assignment:exportownsubmission', $this->context)) {
+                    $button->set_callback_options('assignment_portfolio_caller', array('id' => $this->cm->id, 'submissionid' => $submission->id, 'fileid' => $file->get_id()), '/mod/assignment/locallib.php');
+                    $button->set_format_by_file($file);
+                    $output .= $button->to_html(PORTFOLIO_ADD_ICON_LINK);
+                }
 
-                    $output .= '<img src="'.$CFG->pixpath.'/f/'.$icon.'" class="icon" alt="'.$icon.'" />'.
-                            '<a href="'.$ffurl.'" >'.$file.'</a><br />';
+                if ($CFG->enableplagiarism) {
+                    require_once($CFG->libdir.'/plagiarismlib.php');
+                    $output .= plagiarism_get_links(array('userid'=>$userid, 'file'=>$file, 'cmid'=>$this->cm->id, 'course'=>$this->course, 'assignment'=>$this->assignment));
+                    $output .= '<br />';
+                }
                 }
+            if ($CFG->enableportfolios && count($files) > 1  && $this->portfolio_exportable() && has_capability('mod/assignment:exportownsubmission', $this->context)) {
+                $button->set_callback_options('assignment_portfolio_caller', array('id' => $this->cm->id, 'submissionid' => $submission->id), '/mod/assignment/locallib.php');
+                $output .= '<br />'  . $button->to_html(PORTFOLIO_ADD_TEXT_LINK);
             }
         }
 
@@ -1722,43 +1961,14 @@ class assignment_base {
     /**
      * Count the files uploaded by a given user
      *
-     * @param $userid int The user id
+     * @param $itemid int The submission's id as the file's itemid.
      * @return int
      */
-    function count_user_files($userid) {
-        global $CFG;
-
-        $filearea = $this->file_area_name($userid);
-
-        if ( is_dir($CFG->dataroot.'/'.$filearea) && $basedir = $this->file_area($userid)) {
-            if ($files = get_directory_list($basedir)) {
+    function count_user_files($itemid) {
+        $fs = get_file_storage();
+        $files = $fs->get_area_files($this->context->id, 'mod_assignment', 'submission', $itemid, "id", false);
                 return count($files);
             }
-        }
-        return 0;
-    }
-
-    /**
-     * Creates a directory file name, suitable for make_upload_directory()
-     *
-     * @param $userid int The user id
-     * @return string path to file area
-     */
-    function file_area_name($userid) {
-        global $CFG;
-
-        return $this->course->id.'/'.$CFG->moddata.'/assignment/'.$this->assignment->id.'/'.$userid;
-    }
-
-    /**
-     * Makes an upload directory
-     *
-     * @param $userid int The user id
-     * @return string path to file area.
-     */
-    function file_area($userid) {
-        return make_upload_directory( $this->file_area_name($userid) );
-    }
 
     /**
      * Returns true if the student is allowed to submit
@@ -1800,7 +2010,8 @@ class assignment_base {
      * @return object with properties ->info and ->time
      */
     function user_outline($grade) {
-        $result = new object();
+
+        $result = new stdClass();
         $result->info = get_string('grade').': '.$grade->str_long_grade;
         $result->time = $grade->dategraded;
         return $result;
@@ -1812,24 +2023,26 @@ class assignment_base {
      * @param $user object
      */
     function user_complete($user, $grade=null) {
+        global $OUTPUT;
         if ($grade) {
-            echo '<p>'.get_string('grade').': '.$grade->str_long_grade.'</p>';
+            echo $OUTPUT->container(get_string('grade').': '.$grade->str_long_grade);
             if ($grade->str_feedback) {
-                echo '<p>'.get_string('feedback').': '.$grade->str_feedback.'</p>';
+                echo $OUTPUT->container(get_string('feedback').': '.$grade->str_feedback);
             }
         }
 
         if ($submission = $this->get_submission($user->id)) {
-            if ($basedir = $this->file_area($user->id)) {
-                if ($files = get_directory_list($basedir)) {
+
+            $fs = get_file_storage();
+
+            if ($files = $fs->get_area_files($this->context->id, 'mod_assignment', 'submission', $submission->id, "timemodified", false)) {
                     $countfiles = count($files)." ".get_string("uploadedfiles", "assignment");
                     foreach ($files as $file) {
-                        $countfiles .= "; $file";
-                    }
+                    $countfiles .= "; ".$file->get_filename();
                 }
             }
 
-            print_simple_box_start();
+            echo $OUTPUT->box_start();
             echo get_string("lastmodified").": ";
             echo userdate($submission->timemodified);
             echo $this->display_lateness($submission->timemodified);
@@ -1840,7 +2053,7 @@ class assignment_base {
 
             $this->view_feedback($submission);
 
-            print_simple_box_end();
+            echo $OUTPUT->box_end();
 
         } else {
             print_string("notsubmittedyet", "assignment");
@@ -1881,7 +2094,7 @@ class assignment_base {
      * when printing this activity in a course listing.  See get_array_of_activities() in course/lib.php.
      *
      * @param $coursemodule object The coursemodule object (record).
-     * @return object An object on information that the coures will know about (most noticeably, an icon).
+     * @return object An object on information that the courses will know about (most noticeably, an icon).
      *
      */
     function get_coursemodule_info($coursemodule) {
@@ -1900,10 +2113,9 @@ class assignment_base {
      * Reset all submissions
      */
     function reset_userdata($data) {
-        global $CFG;
-        require_once($CFG->libdir.'/filelib.php');
+        global $CFG, $DB;
 
-        if (!count_records('assignment', 'course', $data->courseid, 'assignmenttype', $this->type)) {
+        if (!$DB->count_records('assignment', array('course'=>$data->courseid, 'assignmenttype'=>$this->type))) {
             return array(); // no assignments of this type present
         }
 
@@ -1918,17 +2130,25 @@ class assignment_base {
 
         if (!empty($data->reset_assignment_submissions)) {
             $assignmentssql = "SELECT a.id
-                                 FROM {$CFG->prefix}assignment a
-                                WHERE a.course={$data->courseid} AND a.assignmenttype='{$this->type}'";
-
-            delete_records_select('assignment_submissions', "assignment IN ($assignmentssql)");
+                                 FROM {assignment} a
+                                WHERE a.course=? AND a.assignmenttype=?";
+            $params = array($data->courseid, $this->type);
 
-            if ($assignments = get_records_sql($assignmentssql)) {
+            // now get rid of all submissions and responses
+            $fs = get_file_storage();
+            if ($assignments = $DB->get_records_sql($assignmentssql, $params)) {
                 foreach ($assignments as $assignmentid=>$unused) {
-                    fulldelete($CFG->dataroot.'/'.$data->courseid.'/moddata/assignment/'.$assignmentid);
+                    if (!$cm = get_coursemodule_from_instance('assignment', $assignmentid)) {
+                        continue;
+                    }
+                    $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+                    $fs->delete_area_files($context->id, 'mod_assignment', 'submission');
+                    $fs->delete_area_files($context->id, 'mod_assignment', 'response');
                 }
             }
 
+            $DB->delete_records_select('assignment_submissions', "assignment IN ($assignmentssql)", $params);
+
             $status[] = array('component'=>$componentstr, 'item'=>get_string('deleteallsubmissions','assignment').': '.$typestr, 'error'=>false);
 
             if (empty($data->reset_gradebook_grades)) {
@@ -1946,6 +2166,11 @@ class assignment_base {
         return $status;
     }
 
+
+    function portfolio_exportable() {
+        return false;
+    }
+
     /**
      * base implementation for backing up subtype specific information
      * for one single module
@@ -1957,7 +2182,7 @@ class assignment_base {
      *
      * @static
      */
-    function backup_one_mod($bf, $preferences, $assignment) {
+    static function backup_one_mod($bf, $preferences, $assignment) {
         return true;
     }
 
@@ -1973,7 +2198,7 @@ class assignment_base {
      *
      * @static
      */
-    function backup_one_submission($bf, $preferences, $assignment, $submission) {
+    static function backup_one_submission($bf, $preferences, $assignment, $submission) {
         return true;
     }
 
@@ -1988,7 +2213,7 @@ class assignment_base {
      *
      * @static
      */
-    function restore_one_mod($info, $restore, $assignment) {
+    static function restore_one_mod($info, $restore, $assignment) {
         return true;
     }
 
@@ -2004,13 +2229,231 @@ class assignment_base {
      *
      * @static
      */
-    function restore_one_submission($info, $restore, $assignment, $submission) {
+    static function restore_one_submission($info, $restore, $assignment, $submission) {
         return true;
     }
 
 } ////// End of the assignment_base class
 
 
+class mod_assignment_grading_form extends moodleform {
+
+    function definition() {
+        global $OUTPUT;
+        $mform =& $this->_form;
+
+        $formattr = $mform->getAttributes();
+        $formattr['id'] = 'submitform';
+        $mform->setAttributes($formattr);
+        // hidden params
+        $mform->addElement('hidden', 'offset', ($this->_customdata->offset+1));
+        $mform->setType('offset', PARAM_INT);
+        $mform->addElement('hidden', 'userid', $this->_customdata->userid);
+        $mform->setType('userid', PARAM_INT);
+        $mform->addElement('hidden', 'nextid', $this->_customdata->nextid);
+        $mform->setType('nextid', PARAM_INT);
+        $mform->addElement('hidden', 'id', $this->_customdata->cm->id);
+        $mform->setType('id', PARAM_INT);
+        $mform->addElement('hidden', 'sesskey', sesskey());
+        $mform->setType('sesskey', PARAM_ALPHANUM);
+        $mform->addElement('hidden', 'mode', 'grade');
+        $mform->setType('mode', PARAM_TEXT);
+        $mform->addElement('hidden', 'menuindex', "0");
+        $mform->setType('menuindex', PARAM_INT);
+        $mform->addElement('hidden', 'saveuserid', "-1");
+        $mform->setType('saveuserid', PARAM_INT);
+        $mform->addElement('hidden', 'filter', "0");
+        $mform->setType('filter', PARAM_INT);
+
+        $mform->addElement('static', 'picture', $OUTPUT->user_picture($this->_customdata->user),
+                                                fullname($this->_customdata->user, true) . '<br/>' .
+                                                userdate($this->_customdata->submission->timemodified) .
+                                                $this->_customdata->lateness );
+
+        $this->add_submission_content();
+        $this->add_grades_section();
+
+        $this->add_feedback_section();
+
+        if ($this->_customdata->submission->timemarked) {
+            $datestring = userdate($this->_customdata->submission->timemarked)."&nbsp; (".format_time(time() - $this->_customdata->submission->timemarked).")";
+            $mform->addElement('header', 'Last Grade', get_string('lastgrade', 'assignment'));
+            $mform->addElement('static', 'picture', $OUTPUT->user_picture($this->_customdata->teacher) ,
+                                                    fullname($this->_customdata->teacher,true).
+                                                    '<br/>'.$datestring);
+        }
+        // buttons
+        $this->add_action_buttons();
+
+    }
+
+    function add_grades_section() {
+        global $CFG;
+        $mform =& $this->_form;
+        $attributes = array();
+        if ($this->_customdata->gradingdisabled) {
+            $attributes['disabled'] ='disabled';
+        }
+
+        $grademenu = make_grades_menu($this->_customdata->assignment->grade);
+        $grademenu['-1'] = get_string('nograde');
+
+        $mform->addElement('header', 'Grades', get_string('grades', 'grades'));
+        $mform->addElement('select', 'xgrade', get_string('grade').':', $grademenu, $attributes);
+        $mform->setDefault('xgrade', $this->_customdata->submission->grade ); //@fixme some bug when element called 'grade' makes it break
+        $mform->setType('xgrade', PARAM_INT);
+
+        if (!empty($this->_customdata->enableoutcomes)) {
+            foreach($this->_customdata->grading_info->outcomes as $n=>$outcome) {
+                $options = make_grades_menu(-$outcome->scaleid);
+                if ($outcome->grades[$this->_customdata->submission->userid]->locked) {
+                    $options[0] = get_string('nooutcome', 'grades');
+                    echo $options[$outcome->grades[$this->_customdata->submission->userid]->grade];
+                } else {
+                    $options[''] = get_string('nooutcome', 'grades');
+                    $attributes = array('id' => 'menuoutcome_'.$n );
+                    $mform->addElement('select', 'outcome_'.$n.'['.$this->_customdata->userid.']', $outcome->name.':', $options, $attributes );
+                    $mform->setType('outcome_'.$n.'['.$this->_customdata->userid.']', PARAM_INT);
+                    $mform->setDefault('outcome_'.$n.'['.$this->_customdata->userid.']', $outcome->grades[$this->_customdata->submission->userid]->grade );
+                }
+            }
+        }
+        $course_context = get_context_instance(CONTEXT_MODULE , $this->_customdata->cm->id);
+        if (has_capability('gradereport/grader:view', $course_context) && has_capability('moodle/grade:viewall', $course_context)) {
+            $grade = '<a href="'.$CFG->wwwroot.'/grade/report/grader/index.php?id='. $this->_customdata->courseid .'" >'.
+                        $this->_customdata->grading_info->items[0]->grades[$this->_customdata->userid]->str_grade . '</a>';
+        }else{
+            $grade = $this->_customdata->grading_info->items[0]->grades[$this->_customdata->userid]->str_grade;
+        }
+        $mform->addElement('static', 'finalgrade', get_string('currentgrade', 'assignment').':' ,$grade);
+        $mform->setType('finalgrade', PARAM_INT);
+    }
+
+    /**
+     *
+     * @global core_renderer $OUTPUT
+     */
+    function add_feedback_section() {
+        global $OUTPUT;
+        $mform =& $this->_form;
+        $mform->addElement('header', 'Feed Back', get_string('feedback', 'grades'));
+
+        if ($this->_customdata->gradingdisabled) {
+            $mform->addElement('static', 'disabledfeedback', $this->_customdata->grading_info->items[0]->grades[$this->_customdata->userid]->str_feedback );
+        } else {
+            // visible elements
+
+            $mform->addElement('editor', 'submissioncomment_editor', get_string('feedback', 'assignment').':', null, $this->get_editor_options() );
+            $mform->setType('submissioncomment_editor', PARAM_RAW); // to be cleaned before display
+            $mform->setDefault('submissioncomment_editor', $this->_customdata->submission->submissioncomment);
+            //$mform->addRule('submissioncomment', get_string('required'), 'required', null, 'client');
+            switch ($this->_customdata->assignment->assignmenttype) {
+                case 'upload' :
+                case 'uploadsingle' :
+                    $mform->addElement('filemanager', 'files_filemanager', get_string('responsefiles', 'assignment'). ':', null, $this->_customdata->fileui_options);
+                    break;
+                default :
+                    break;
+            }
+            $mform->addElement('hidden', 'mailinfo_h', "0");
+            $mform->setType('mailinfo_h', PARAM_INT);
+            $mform->addElement('checkbox', 'mailinfo',get_string('enablenotification','assignment').
+            $OUTPUT->help_icon('enablenotification', 'assignment') .':' );
+            $mform->setType('mailinfo', PARAM_INT);
+        }
+    }
+
+    function add_action_buttons() {
+        $mform =& $this->_form;
+        //if there are more to be graded.
+        if ($this->_customdata->nextid>0) {
+            $buttonarray=array();
+            $buttonarray[] = &$mform->createElement('submit', 'submitbutton', get_string('savechanges'));
+            //@todo: fix accessibility: javascript dependency not necessary
+            $buttonarray[] = &$mform->createElement('submit', 'saveandnext', get_string('saveandnext'));
+            $buttonarray[] = &$mform->createElement('submit', 'next', get_string('next'));
+            $buttonarray[] = &$mform->createElement('cancel');
+        } else {
+            $buttonarray=array();
+            $buttonarray[] = &$mform->createElement('submit', 'submitbutton', get_string('savechanges'));
+            $buttonarray[] = &$mform->createElement('cancel');
+        }
+        $mform->addGroup($buttonarray, 'grading_buttonar', '', array(' '), false);
+        $mform->closeHeaderBefore('grading_buttonar');
+        $mform->setType('grading_buttonar', PARAM_RAW);
+    }
+
+    function add_submission_content() {
+        $mform =& $this->_form;
+        $mform->addElement('header', 'Submission', get_string('submission', 'assignment'));
+        $mform->addElement('static', '', '' , $this->_customdata->submission_content );
+    }
+
+    protected function get_editor_options() {
+        $editoroptions = array();
+        $editoroptions['component'] = 'mod_assignment';
+        $editoroptions['filearea'] = 'feedback';
+        $editoroptions['noclean'] = false;
+        $editoroptions['maxfiles'] = 0; //TODO: no files for now, we need to first implement assignment_feedback area, integration with gradebook, files support in quickgrading, etc. (skodak)
+        $editoroptions['maxbytes'] = $this->_customdata->maxbytes;
+        $editoroptions['context'] = $this->_customdata->context;
+        return $editoroptions;
+    }
+
+    public function set_data($data) {
+        $editoroptions = $this->get_editor_options();
+        if (!isset($data->text)) {
+            $data->text = '';
+        }
+        if (!isset($data->format)) {
+            $data->textformat = FORMAT_HTML;
+        } else {
+            $data->textformat = $data->format;
+        }
+
+        if (!empty($this->_customdata->submission->id)) {
+            $itemid = $this->_customdata->submission->id;
+        } else {
+            $itemid = null;
+        }
+
+        switch ($this->_customdata->assignment->assignmenttype) {
+                case 'upload' :
+                case 'uploadsingle' :
+                    $data = file_prepare_standard_filemanager($data, 'files', $editoroptions, $this->_customdata->context, 'mod_assignment', 'response', $itemid);
+                    break;
+                default :
+                    break;
+        }
+
+        $data = file_prepare_standard_editor($data, 'submissioncomment', $editoroptions, $this->_customdata->context, $editoroptions['component'], $editoroptions['filearea'], $itemid);
+        return parent::set_data($data);
+    }
+
+    public function get_data() {
+        $data = parent::get_data();
+
+        if (!empty($this->_customdata->submission->id)) {
+            $itemid = $this->_customdata->submission->id;
+        } else {
+            $itemid = null; //TODO: this is wrong, itemid MUST be known when saving files!! (skodak)
+        }
+
+        if ($data) {
+            $editoroptions = $this->get_editor_options();
+            switch ($this->_customdata->assignment->assignmenttype) {
+                case 'upload' :
+                case 'uploadsingle' :
+                    $data = file_postupdate_standard_filemanager($data, 'files', $editoroptions, $this->_customdata->context, 'mod_assignment', 'response', $itemid);
+                    break;
+                default :
+                    break;
+            }
+            $data = file_postupdate_standard_editor($data, 'submissioncomment', $editoroptions, $this->_customdata->context, $editoroptions['component'], $editoroptions['filearea'], $itemid);
+        }
+        return $data;
+    }
+}
 
 /// OTHER STANDARD FUNCTIONS ////////////////////////////////////////////////////////
 
@@ -2020,9 +2463,9 @@ class assignment_base {
  * This is done by calling the delete_instance() method of the assignment type class
  */
 function assignment_delete_instance($id){
-    global $CFG;
+    global $CFG, $DB;
 
-    if (! $assignment = get_record('assignment', 'id', $id)) {
+    if (! $assignment = $DB->get_record('assignment', array('id'=>$id))) {
         return false;
     }
 
@@ -2123,13 +2566,12 @@ function assignment_user_complete($course, $user, $mod, $assignment) {
  * Finds all assignment notifications that have yet to be mailed out, and mails them
  */
 function assignment_cron () {
-
-    global $CFG, $USER;
+    global $CFG, $USER, $DB;
 
     /// first execute all crons in plugins
-    if ($plugins = get_list_of_plugins('mod/assignment/type')) {
-        foreach ($plugins as $plugin) {
-            require_once("$CFG->dirroot/mod/assignment/type/$plugin/assignment.class.php");
+    if ($plugins = get_plugin_list('assignment')) {
+        foreach ($plugins as $plugin=>$dir) {
+            require_once("$dir/assignment.class.php");
             $assignmentclass = "assignment_$plugin";
             $ass = new $assignmentclass();
             $ass->cron();
@@ -2149,10 +2591,7 @@ function assignment_cron () {
         $realuser = clone($USER);
 
         foreach ($submissions as $key => $submission) {
-            if (! set_field("assignment_submissions", "mailed", "1", "id", "$submission->id")) {
-                echo "Could not update the mailed field for id $submission->id.  Not mailed.\n";
-                unset($submissions[$key]);
-            }
+            $DB->set_field("assignment_submissions", "mailed", "1", array("id"=>$submission->id));
         }
 
         $timenow = time();
@@ -2161,27 +2600,28 @@ function assignment_cron () {
 
             echo "Processing assignment submission $submission->id\n";
 
-            if (! $user = get_record("user", "id", "$submission->userid")) {
-                echo "Could not find user $post->userid\n";
+            if (! $user = $DB->get_record("user", array("id"=>$submission->userid))) {
+                echo "Could not find user $user->id\n";
                 continue;
             }
 
-            if (! $course = get_record("course", "id", "$submission->course")) {
+            if (! $course = $DB->get_record("course", array("id"=>$submission->course))) {
                 echo "Could not find course $submission->course\n";
                 continue;
             }
 
             /// Override the language and timezone of the "current" user, so that
             /// mail is customised for the receiver.
-            $USER = $user;
-            course_setup($course);
+            cron_setup_user($user, $course);
 
-            if (!has_capability('moodle/course:view', get_context_instance(CONTEXT_COURSE, $submission->course), $user->id)) {
-                echo fullname($user)." not an active participant in " . format_string($course->shortname) . "\n";
+            $coursecontext = get_context_instance(CONTEXT_COURSE, $submission->course);
+            $courseshortname = format_string($course->shortname, true, array('context' => $coursecontext));
+            if (!is_enrolled($coursecontext, $user->id)) {
+                echo fullname($user)." not an active participant in " . $courseshortname . "\n";
                 continue;
             }
 
-            if (! $teacher = get_record("user", "id", "$submission->teacher")) {
+            if (! $teacher = $DB->get_record("user", array("id"=>$submission->teacher))) {
                 echo "Could not find teacher $submission->teacher\n";
                 continue;
             }
@@ -2198,20 +2638,20 @@ function assignment_cron () {
             $strassignments = get_string("modulenameplural", "assignment");
             $strassignment  = get_string("modulename", "assignment");
 
-            $assignmentinfo = new object();
+            $assignmentinfo = new stdClass();
             $assignmentinfo->teacher = fullname($teacher);
             $assignmentinfo->assignment = format_string($submission->name,true);
             $assignmentinfo->url = "$CFG->wwwroot/mod/assignment/view.php?id=$mod->id";
 
-            $postsubject = "$course->shortname: $strassignments: ".format_string($submission->name,true);
-            $posttext  = "$course->shortname -> $strassignments -> ".format_string($submission->name,true)."\n";
+            $postsubject = "$courseshortname: $strassignments: ".format_string($submission->name,true);
+            $posttext  = "$courseshortname -> $strassignments -> ".format_string($submission->name,true)."\n";
             $posttext .= "---------------------------------------------------------------------\n";
             $posttext .= get_string("assignmentmail", "assignment", $assignmentinfo)."\n";
             $posttext .= "---------------------------------------------------------------------\n";
 
             if ($user->mailformat == 1) {  // HTML
                 $posthtml = "<p><font face=\"sans-serif\">".
-                "<a href=\"$CFG->wwwroot/course/view.php?id=$course->id\">$course->shortname</a> ->".
+                "<a href=\"$CFG->wwwroot/course/view.php?id=$course->id\">$courseshortname</a> ->".
                 "<a href=\"$CFG->wwwroot/mod/assignment/index.php?id=$course->id\">$strassignments</a> ->".
                 "<a href=\"$CFG->wwwroot/mod/assignment/view.php?id=$mod->id\">".format_string($submission->name,true)."</a></font></p>";
                 $posthtml .= "<hr /><font face=\"sans-serif\">";
@@ -2221,14 +2661,26 @@ function assignment_cron () {
                 $posthtml = "";
             }
 
-            if (! email_to_user($user, $teacher, $postsubject, $posttext, $posthtml)) {
-                echo "Error: assignment cron: Could not send out mail for id $submission->id to user $user->id ($user->email)\n";
-            }
-        }
+            $eventdata = new stdClass();
+            $eventdata->modulename       = 'assignment';
+            $eventdata->userfrom         = $teacher;
+            $eventdata->userto           = $user;
+            $eventdata->subject          = $postsubject;
+            $eventdata->fullmessage      = $posttext;
+            $eventdata->fullmessageformat = FORMAT_PLAIN;
+            $eventdata->fullmessagehtml  = $posthtml;
+            $eventdata->smallmessage     = get_string('assignmentmailsmall', 'assignment', $assignmentinfo);
+
+            $eventdata->name            = 'assignment_updates';
+            $eventdata->component       = 'mod_assignment';
+            $eventdata->notification    = 1;
+            $eventdata->contexturl      = $assignmentinfo->url;
+            $eventdata->contexturlname  = $assignmentinfo->assignment;
 
-        $USER = $realuser;
-        course_setup(SITEID); // reset cron user language, theme and timezone settings
+            message_send($eventdata);
+        }
 
+        cron_setup_user();
     }
 
     return true;
@@ -2242,58 +2694,79 @@ function assignment_cron () {
  * @return array array of grades, false if none
  */
 function assignment_get_user_grades($assignment, $userid=0) {
-    global $CFG;
+    global $CFG, $DB;
 
-    $user = $userid ? "AND u.id = $userid" : "";
+    if ($userid) {
+        $user = "AND u.id = :userid";
+        $params = array('userid'=>$userid);
+    } else {
+        $user = "";
+    }
+    $params['aid'] = $assignment->id;
 
     $sql = "SELECT u.id, u.id AS userid, s.grade AS rawgrade, s.submissioncomment AS feedback, s.format AS feedbackformat,
                    s.teacher AS usermodified, s.timemarked AS dategraded, s.timemodified AS datesubmitted
-              FROM {$CFG->prefix}user u, {$CFG->prefix}assignment_submissions s
-             WHERE u.id = s.userid AND s.assignment = $assignment->id
+              FROM {user} u, {assignment_submissions} s
+             WHERE u.id = s.userid AND s.assignment = :aid
                    $user";
 
-    return get_records_sql($sql);
+    return $DB->get_records_sql($sql, $params);
 }
 
 /**
- * Update grades by firing grade_updated event
+ * Update activity grades
  *
- * @param object $assignment null means all assignments
- * @param int $userid specific user only, 0 mean all
+ * @param object $assignment
+ * @param int $userid specific user only, 0 means all
  */
-function assignment_update_grades($assignment=null, $userid=0, $nullifnone=true) {
-    global $CFG;
-    if (!function_exists('grade_update')) { //workaround for buggy PHP versions
+function assignment_update_grades($assignment, $userid=0, $nullifnone=true) {
+    global $CFG, $DB;
         require_once($CFG->libdir.'/gradelib.php');
-    }
 
-    if ($assignment != null) {
-        if ($grades = assignment_get_user_grades($assignment, $userid)) {
+    if ($assignment->grade == 0) {
+        assignment_grade_item_update($assignment);
+
+    } else if ($grades = assignment_get_user_grades($assignment, $userid)) {
             foreach($grades as $k=>$v) {
                 if ($v->rawgrade == -1) {
                     $grades[$k]->rawgrade = null;
                 }
             }
             assignment_grade_item_update($assignment, $grades);
+
         } else {
             assignment_grade_item_update($assignment);
         }
+}
 
-    } else {
-        $sql = "SELECT a.*, cm.idnumber as cmidnumber, a.course as courseid
-                  FROM {$CFG->prefix}assignment a, {$CFG->prefix}course_modules cm, {$CFG->prefix}modules m
+/**
+ * Update all grades in gradebook.
+ */
+function assignment_upgrade_grades() {
+    global $DB;
+
+    $sql = "SELECT COUNT('x')
+              FROM {assignment} a, {course_modules} cm, {modules} m
                  WHERE m.name='assignment' AND m.id=cm.module AND cm.instance=a.id";
-        if ($rs = get_recordset_sql($sql)) {
-            while ($assignment = rs_fetch_next_record($rs)) {
-                if ($assignment->grade != 0) {
+    $count = $DB->count_records_sql($sql);
+
+    $sql = "SELECT a.*, cm.idnumber AS cmidnumber, a.course AS courseid
+              FROM {assignment} a, {course_modules} cm, {modules} m
+             WHERE m.name='assignment' AND m.id=cm.module AND cm.instance=a.id";
+    $rs = $DB->get_recordset_sql($sql);
+    if ($rs->valid()) {
+        // too much debug output
+        $pbar = new progress_bar('assignmentupgradegrades', 500, true);
+        $i=0;
+        foreach ($rs as $assignment) {
+            $i++;
+            upgrade_set_timeout(60*5); // set up timeout, may also abort execution
                     assignment_update_grades($assignment);
-                } else {
-                    assignment_grade_item_update($assignment);
-                }
-            }
-            rs_close($rs);
+            $pbar->update($i, $count, "Updating Assignment grades ($i/$count).");
         }
+        upgrade_set_timeout(); // reset to default timeout
     }
+    $rs->close();
 }
 
 /**
@@ -2305,9 +2778,7 @@ function assignment_update_grades($assignment=null, $userid=0, $nullifnone=true)
  */
 function assignment_grade_item_update($assignment, $grades=NULL) {
     global $CFG;
-    if (!function_exists('grade_update')) { //workaround for buggy PHP versions
         require_once($CFG->libdir.'/gradelib.php');
-    }
 
     if (!isset($assignment->courseid)) {
         $assignment->courseid = $assignment->course;
@@ -2356,25 +2827,26 @@ function assignment_grade_item_delete($assignment) {
 /**
  * Returns the users with data in one assignment (students and teachers)
  *
+ * @todo: deprecated - to be deleted in 2.2
+ *
  * @param $assignmentid int
  * @return array of user objects
  */
 function assignment_get_participants($assignmentid) {
-
-    global $CFG;
+    global $CFG, $DB;
 
     //Get students
-    $students = get_records_sql("SELECT DISTINCT u.id, u.id
-                                 FROM {$CFG->prefix}user u,
-                                      {$CFG->prefix}assignment_submissions a
-                                 WHERE a.assignment = '$assignmentid' and
-                                       u.id = a.userid");
+    $students = $DB->get_records_sql("SELECT DISTINCT u.id, u.id
+                                        FROM {user} u,
+                                             {assignment_submissions} a
+                                       WHERE a.assignment = ? and
+                                             u.id = a.userid", array($assignmentid));
     //Get teachers
-    $teachers = get_records_sql("SELECT DISTINCT u.id, u.id
-                                 FROM {$CFG->prefix}user u,
-                                      {$CFG->prefix}assignment_submissions a
-                                 WHERE a.assignment = '$assignmentid' and
-                                       u.id = a.teacher");
+    $teachers = $DB->get_records_sql("SELECT DISTINCT u.id, u.id
+                                        FROM {user} u,
+                                             {assignment_submissions} a
+                                       WHERE a.assignment = ? and
+                                             u.id = a.teacher", array($assignmentid));
 
     //Add teachers to students
     if ($teachers) {
@@ -2387,6 +2859,36 @@ function assignment_get_participants($assignmentid) {
 }
 
 /**
+ * Serves assignment submissions and other files.
+ *
+ * @param object $course
+ * @param object $cm
+ * @param object $context
+ * @param string $filearea
+ * @param array $args
+ * @param bool $forcedownload
+ * @return bool false if file not found, does not return if found - just send the file
+ */
+function assignment_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload) {
+    global $CFG, $DB;
+
+    if ($context->contextlevel != CONTEXT_MODULE) {
+        return false;
+    }
+
+    require_login($course, false, $cm);
+
+    if (!$assignment = $DB->get_record('assignment', array('id'=>$cm->instance))) {
+        return false;
+    }
+
+    require_once($CFG->dirroot.'/mod/assignment/type/'.$assignment->assignmenttype.'/assignment.class.php');
+    $assignmentclass = 'assignment_'.$assignment->assignmenttype;
+    $assignmentinstance = new $assignmentclass($cm->id, $assignment, $cm, $course);
+
+    return $assignmentinstance->send_file($filearea, $args);
+}
+/**
  * Checks if a scale is being used by an assignment
  *
  * This is used by the backup code to decide whether to back up a scale
@@ -2395,10 +2897,11 @@ function assignment_get_participants($assignmentid) {
  * @return boolean True if the scale is used by the assignment
  */
 function assignment_scale_used($assignmentid, $scaleid) {
+    global $DB;
 
     $return = false;
 
-    $rec = get_record('assignment','id',$assignmentid,'grade',-$scaleid);
+    $rec = $DB->get_record('assignment', array('id'=>$assignmentid,'grade'=>-$scaleid));
 
     if (!empty($rec) && !empty($scaleid)) {
         $return = true;
@@ -2415,7 +2918,9 @@ function assignment_scale_used($assignmentid, $scaleid) {
  * @return boolean True if the scale is used by any assignment
  */
 function assignment_scale_used_anywhere($scaleid) {
-    if ($scaleid and record_exists('assignment', 'grade', -$scaleid)) {
+    global $DB;
+
+    if ($scaleid and $DB->record_exists('assignment', array('grade'=>-$scaleid))) {
         return true;
     } else {
         return false;
@@ -2435,25 +2940,27 @@ function assignment_scale_used_anywhere($scaleid) {
  * @return boolean Always returns true
  */
 function assignment_refresh_events($courseid = 0) {
+    global $DB;
 
     if ($courseid == 0) {
-        if (! $assignments = get_records("assignment")) {
+        if (! $assignments = $DB->get_records("assignment")) {
             return true;
         }
     } else {
-        if (! $assignments = get_records("assignment", "course", $courseid)) {
+        if (! $assignments = $DB->get_records("assignment", array("course"=>$courseid))) {
             return true;
         }
     }
-    $moduleid = get_field('modules', 'id', 'name', 'assignment');
+    $moduleid = $DB->get_field('modules', 'id', array('name'=>'assignment'));
 
     foreach ($assignments as $assignment) {
-        $event = NULL;
-        $event->name        = addslashes($assignment->name);
-        $event->description = addslashes($assignment->description);
+        $cm = get_coursemodule_from_id('assignment', $assignment->id);
+        $event = new stdClass();
+        $event->name        = $assignment->name;
+        $event->description = format_module_intro('assignment', $assignment, $cm->id);
         $event->timestart   = $assignment->timedue;
 
-        if ($event->id = get_field('event', 'id', 'modulename', 'assignment', 'instance', $assignment->id)) {
+        if ($event->id = $DB->get_field('event', 'id', array('modulename'=>'assignment', 'instance'=>$assignment->id))) {
             update_event($event);
 
         } else {
@@ -2464,7 +2971,7 @@ function assignment_refresh_events($courseid = 0) {
             $event->instance    = $assignment->id;
             $event->eventtype   = 'due';
             $event->timeduration = 0;
-            $event->visible     = get_field('course_modules', 'visible', 'module', $moduleid, 'instance', $assignment->id);
+            $event->visible     = $DB->get_field('course_modules', 'visible', array('module'=>$moduleid, 'instance'=>$assignment->id));
             add_event($event);
         }
 
@@ -2478,21 +2985,21 @@ function assignment_refresh_events($courseid = 0) {
  * This is used by the recent activity block
  */
 function assignment_print_recent_activity($course, $viewfullnames, $timestart) {
-    global $CFG, $USER;
+    global $CFG, $USER, $DB, $OUTPUT;
 
     // do not use log table if possible, it may be huge
 
-    if (!$submissions = get_records_sql("SELECT asb.id, asb.timemodified, cm.id AS cmid, asb.userid,
+    if (!$submissions = $DB->get_records_sql("SELECT asb.id, asb.timemodified, cm.id AS cmid, asb.userid,
                                                 u.firstname, u.lastname, u.email, u.picture
-                                           FROM {$CFG->prefix}assignment_submissions asb
-                                                JOIN {$CFG->prefix}assignment a      ON a.id = asb.assignment
-                                                JOIN {$CFG->prefix}course_modules cm ON cm.instance = a.id
-                                                JOIN {$CFG->prefix}modules md        ON md.id = cm.module
-                                                JOIN {$CFG->prefix}user u            ON u.id = asb.userid
-                                          WHERE asb.timemodified > $timestart AND
-                                                a.course = {$course->id} AND
+                                                FROM {assignment_submissions} asb
+                                                     JOIN {assignment} a      ON a.id = asb.assignment
+                                                     JOIN {course_modules} cm ON cm.instance = a.id
+                                                     JOIN {modules} md        ON md.id = cm.module
+                                                     JOIN {user} u            ON u.id = asb.userid
+                                               WHERE asb.timemodified > ? AND
+                                                     a.course = ? AND
                                                 md.name = 'assignment'
-                                       ORDER BY asb.timemodified ASC")) {
+                                            ORDER BY asb.timemodified ASC", array($timestart, $course->id))) {
          return false;
     }
 
@@ -2555,7 +3062,7 @@ function assignment_print_recent_activity($course, $viewfullnames, $timestart) {
         return false;
     }
 
-    print_headline(get_string('newsubmissions', 'assignment').':', 3);
+    echo $OUTPUT->heading(get_string('newsubmissions', 'assignment').':', 3);
 
     foreach ($show as $submission) {
         $cm = $modinfo->cms[$submission->cmid];
@@ -2571,42 +3078,49 @@ function assignment_print_recent_activity($course, $viewfullnames, $timestart) {
  * Returns all assignments since a given time in specified forum.
  */
 function assignment_get_recent_mod_activity(&$activities, &$index, $timestart, $courseid, $cmid, $userid=0, $groupid=0)  {
-
-    global $CFG, $COURSE, $USER;
+    global $CFG, $COURSE, $USER, $DB;
 
     if ($COURSE->id == $courseid) {
         $course = $COURSE;
     } else {
-        $course = get_record('course', 'id', $courseid);
+        $course = $DB->get_record('course', array('id'=>$courseid));
     }
 
     $modinfo =& get_fast_modinfo($course);
 
     $cm = $modinfo->cms[$cmid];
 
+    $params = array();
     if ($userid) {
-        $userselect = "AND u.id = $userid";
+        $userselect = "AND u.id = :userid";
+        $params['userid'] = $userid;
     } else {
         $userselect = "";
     }
 
     if ($groupid) {
-        $groupselect = "AND gm.groupid = $groupid";
-        $groupjoin   = "JOIN {$CFG->prefix}groups_members gm ON  gm.userid=u.id";
+        $groupselect = "AND gm.groupid = :groupid";
+        $groupjoin   = "JOIN {groups_members} gm ON  gm.userid=u.id";
+        $params['groupid'] = $groupid;
     } else {
         $groupselect = "";
         $groupjoin   = "";
     }
 
-    if (!$submissions = get_records_sql("SELECT asb.id, asb.timemodified, asb.userid,
-                                                u.firstname, u.lastname, u.email, u.picture
-                                           FROM {$CFG->prefix}assignment_submissions asb
-                                                JOIN {$CFG->prefix}assignment a      ON a.id = asb.assignment
-                                                JOIN {$CFG->prefix}user u            ON u.id = asb.userid
+    $params['cminstance'] = $cm->instance;
+    $params['timestart'] = $timestart;
+
+    $userfields = user_picture::fields('u', null, 'userid');
+
+    if (!$submissions = $DB->get_records_sql("SELECT asb.id, asb.timemodified,
+                                                     $userfields
+                                                FROM {assignment_submissions} asb
+                                                JOIN {assignment} a      ON a.id = asb.assignment
+                                                JOIN {user} u            ON u.id = asb.userid
                                                 $groupjoin
-                                          WHERE asb.timemodified > $timestart AND a.id = $cm->instance
+                                               WHERE asb.timemodified > :timestart AND a.id = :cminstance
                                                 $userselect $groupselect
-                                       ORDER BY asb.timemodified ASC")) {
+                                            ORDER BY asb.timemodified ASC", $params)) {
          return;
     }
 
@@ -2647,7 +3161,7 @@ function assignment_get_recent_mod_activity(&$activities, &$index, $timestart, $
             $usersgroups = groups_get_all_groups($course->id, $cm->userid, $cm->groupingid);
             if (is_array($usersgroups)) {
                 $usersgroups = array_keys($usersgroups);
-                $interset = array_intersect($usersgroups, $modinfo->groups[$cm->id]);
+                $intersect = array_intersect($usersgroups, $modinfo->groups[$cm->id]);
                 if (empty($intersect)) {
                     continue;
                 }
@@ -2672,7 +3186,7 @@ function assignment_get_recent_mod_activity(&$activities, &$index, $timestart, $
 
     $aname = format_string($cm->name,true);
     foreach ($show as $submission) {
-        $tmpactivity = new object();
+        $tmpactivity = new stdClass();
 
         $tmpactivity->type         = 'assignment';
         $tmpactivity->cmid         = $cm->id;
@@ -2684,9 +3198,15 @@ function assignment_get_recent_mod_activity(&$activities, &$index, $timestart, $
             $tmpactivity->grade = $grades->items[0]->grades[$submission->userid]->str_long_grade;
         }
 
-        $tmpactivity->user->userid   = $submission->userid;
+        $userfields = explode(',', user_picture::fields());
+        foreach ($userfields as $userfield) {
+            if ($userfield == 'id') {
+                $tmpactivity->user->{$userfield} = $submission->userid; // aliased in SQL above
+            } else {
+                $tmpactivity->user->{$userfield} = $submission->{$userfield};
+            }
+        }
         $tmpactivity->user->fullname = fullname($submission, $viewfullnames);
-        $tmpactivity->user->picture  = $submission->picture;
 
         $activities[$index++] = $tmpactivity;
     }
@@ -2700,18 +3220,18 @@ function assignment_get_recent_mod_activity(&$activities, &$index, $timestart, $
  * This is used by course/recent.php
  */
 function assignment_print_recent_mod_activity($activity, $courseid, $detail, $modnames)  {
-    global $CFG;
+    global $CFG, $OUTPUT;
 
     echo '<table border="0" cellpadding="3" cellspacing="0" class="assignment-recent">';
 
     echo "<tr><td class=\"userpicture\" valign=\"top\">";
-    print_user_picture($activity->user->userid, $courseid, $activity->user->picture);
+    echo $OUTPUT->user_picture($activity->user);
     echo "</td><td>";
 
     if ($detail) {
         $modname = $modnames[$activity->type];
         echo '<div class="title">';
-        echo "<img src=\"$CFG->modpixpath/assignment/icon.gif\" ".
+        echo "<img src=\"" . $OUTPUT->pix_url('icon', 'assignment') . "\" ".
              "class=\"icon\" alt=\"$modname\">";
         echo "<a href=\"$CFG->wwwroot/mod/assignment/view.php?id={$activity->cmid}\">{$activity->name}</a>";
         echo '</div>';
@@ -2725,7 +3245,7 @@ function assignment_print_recent_mod_activity($activity, $courseid, $detail, $mo
     }
 
     echo '<div class="user">';
-    echo "<a href=\"$CFG->wwwroot/user/view.php?id={$activity->user->userid}&amp;course=$courseid\">"
+    echo "<a href=\"$CFG->wwwroot/user/view.php?id={$activity->user->id}&amp;course=$courseid\">"
          ."{$activity->user->fullname}</a>  - ".userdate($activity->timestamp);
     echo '</div>';
 
@@ -2741,12 +3261,11 @@ function assignment_print_recent_mod_activity($activity, $courseid, $detail, $mo
  * @return array with assignment name and user firstname and lastname
  */
 function assignment_log_info($log) {
-    global $CFG;
-    return get_record_sql("SELECT a.name, u.firstname, u.lastname
-                             FROM {$CFG->prefix}assignment a,
-                                  {$CFG->prefix}user u
-                            WHERE a.id = '$log->info'
-                              AND u.id = '$log->userid'");
+    global $CFG, $DB;
+
+    return $DB->get_record_sql("SELECT a.name, u.firstname, u.lastname
+                                  FROM {assignment} a, {user} u
+                                 WHERE a.id = ? AND u.id = ?", array($log->info, $log->userid));
 }
 
 /**
@@ -2755,59 +3274,41 @@ function assignment_log_info($log) {
  * @return array
  */
 function assignment_get_unmailed_submissions($starttime, $endtime) {
+    global $CFG, $DB;
 
-    global $CFG;
-
-    return get_records_sql("SELECT s.*, a.course, a.name
-                              FROM {$CFG->prefix}assignment_submissions s,
-                                   {$CFG->prefix}assignment a
+    return $DB->get_records_sql("SELECT s.*, a.course, a.name
+                                   FROM {assignment_submissions} s,
+                                        {assignment} a
                              WHERE s.mailed = 0
-                               AND s.timemarked <= $endtime
-                               AND s.timemarked >= $starttime
-                               AND s.assignment = a.id");
-
-    /* return get_records_sql("SELECT s.*, a.course, a.name
-                              FROM {$CFG->prefix}assignment_submissions s,
-                                   {$CFG->prefix}assignment a,
-                                   {$CFG->prefix}user_students us
-                             WHERE s.mailed = 0
-                               AND s.timemarked <= $endtime
-                               AND s.timemarked >= $starttime
-                               AND s.assignment = a.id
-                               AND s.userid = us.userid
-                               AND a.course = us.course");
-    */
+                                        AND s.timemarked <= ?
+                                        AND s.timemarked >= ?
+                                        AND s.assignment = a.id", array($endtime, $starttime));
 }
 
 /**
  * Counts all real assignment submissions by ENROLLED students (not empty ones)
  *
- * There are also assignment type methods count_real_submissions() wich in the default
+ * There are also assignment type methods count_real_submissions() which in the default
  * implementation simply call this function.
  * @param $groupid int optional If nonzero then count is restricted to this group
  * @return int The number of submissions
  */
 function assignment_count_real_submissions($cm, $groupid=0) {
-    global $CFG;
+    global $CFG, $DB;
 
     $context = get_context_instance(CONTEXT_MODULE, $cm->id);
 
-    if (!empty($CFG->gradebookroles)) {
-        $gradebookroles = explode(",", $CFG->gradebookroles);
-    } else {
-        $gradebookroles = '';
-    }
-    $users = get_role_users($gradebookroles, $context, true, '', 'u.lastname ASC', true, $groupid);
-    if ($users) {
+    // this is all the users with this capability set, in this context or higher
+    if ($users = get_enrolled_users($context, 'mod/assignment:view', $groupid, 'u.id')) {
         $users = array_keys($users);
+    }
+
         // if groupmembersonly used, remove users who are not in any group
-        if (!empty($CFG->enablegroupings) and $cm->groupmembersonly) {
-            $groupingusers = groups_get_grouping_members($cm->groupingid, 'u.id', 'u.id');
-            if ($groupingusers) {
+    if ($users and !empty($CFG->enablegroupmembersonly) and $cm->groupmembersonly) {
+        if ($groupingusers = groups_get_grouping_members($cm->groupingid, 'u.id', 'u.id')) {
                 $users = array_intersect($users, array_keys($groupingusers));
             }
         }
-    }
 
     if (empty($users)) {
         return 0;
@@ -2815,11 +3316,11 @@ function assignment_count_real_submissions($cm, $groupid=0) {
 
     $userlists = implode(',', $users);
 
-    return count_records_sql("SELECT COUNT('x')
-                                FROM {$CFG->prefix}assignment_submissions
-                               WHERE assignment = $cm->instance AND
+    return $DB->count_records_sql("SELECT COUNT('x')
+                                     FROM {assignment_submissions}
+                                    WHERE assignment = ? AND
                                      timemodified > 0 AND
-                                     userid IN ($userlists)");
+                                          userid IN ($userlists)", array($cm->instance));
 }
 
 
@@ -2834,7 +3335,7 @@ function assignment_count_real_submissions($cm, $groupid=0) {
  */
 function assignment_get_all_submissions($assignment, $sort="", $dir="DESC") {
 /// Return all assignment submissions by ENROLLED students (even empty)
-    global $CFG;
+    global $CFG, $DB;
 
     if ($sort == "lastname" or $sort == "firstname") {
         $sort = "u.$sort $dir";
@@ -2844,28 +3345,18 @@ function assignment_get_all_submissions($assignment, $sort="", $dir="DESC") {
         $sort = "a.$sort $dir";
     }
 
-    /* not sure this is needed at all since assignmenet already has a course define, so this join?
+    /* not sure this is needed at all since assignment already has a course define, so this join?
     $select = "s.course = '$assignment->course' AND";
     if ($assignment->course == SITEID) {
         $select = '';
     }*/
 
-    return get_records_sql("SELECT a.*
-                              FROM {$CFG->prefix}assignment_submissions a,
-                                   {$CFG->prefix}user u
+    return $DB->get_records_sql("SELECT a.*
+                                   FROM {assignment_submissions} a, {user} u
                              WHERE u.id = a.userid
-                               AND a.assignment = '$assignment->id'
-                          ORDER BY $sort");
-
-    /* return get_records_sql("SELECT a.*
-                              FROM {$CFG->prefix}assignment_submissions a,
-                                   {$CFG->prefix}user_students s,
-                                   {$CFG->prefix}user u
-                             WHERE a.userid = s.userid
-                               AND u.id = a.userid
-                               AND $select a.assignment = '$assignment->id'
-                          ORDER BY $sort");
-    */
+                                        AND a.assignment = ?
+                               ORDER BY $sort", array($assignment->id));
+
 }
 
 /**
@@ -2876,13 +3367,13 @@ function assignment_get_all_submissions($assignment, $sort="", $dir="DESC") {
  * when printing this activity in a course listing.  See get_array_of_activities() in course/lib.php.
  *
  * @param $coursemodule object The coursemodule object (record).
- * @return object An object on information that the coures will know about (most noticeably, an icon).
+ * @return object An object on information that the courses will know about (most noticeably, an icon).
  *
  */
 function assignment_get_coursemodule_info($coursemodule) {
-    global $CFG;
+    global $CFG, $DB;
 
-    if (! $assignment = get_record('assignment', 'id', $coursemodule->instance, '', '', '', '', 'id, assignmenttype, name')) {
+    if (! $assignment = $DB->get_record('assignment', array('id'=>$coursemodule->instance), 'id, assignmenttype, name')) {
         return false;
     }
 
@@ -2895,7 +3386,7 @@ function assignment_get_coursemodule_info($coursemodule) {
         if ($result = $ass->get_coursemodule_info($coursemodule)) {
             return $result;
         } else {
-            $info = new object();
+            $info = new stdClass();
             $info->name = $assignment->name;
             return $info;
         }
@@ -2917,8 +3408,8 @@ function assignment_get_coursemodule_info($coursemodule) {
  */
 function assignment_types() {
     $types = array();
-    $names = get_list_of_plugins('mod/assignment/type');
-    foreach ($names as $name) {
+    $names = get_plugin_list('assignment');
+    foreach ($names as $name=>$dir) {
         $types[$name] = get_string('type'.$name, 'assignment');
 
         // ugly hack to support pluggable assignment type titles..
@@ -2930,21 +3421,8 @@ function assignment_types() {
     return $types;
 }
 
-/**
- * Executes upgrade scripts for assignment types when necessary
- */
-function assignment_upgrade_submodules() {
-
-    global $CFG;
-
-/// Install/upgrade assignment types (it uses, simply, the standard plugin architecture)
-    upgrade_plugins('assignment_type', 'mod/assignment/type', "$CFG->wwwroot/$CFG->admin/index.php");
-
-}
-
 function assignment_print_overview($courses, &$htmlarray) {
-
-    global $USER, $CFG;
+    global $USER, $CFG, $DB;
 
     if (empty($courses) || !is_array($courses) || count($courses) == 0) {
         return array();
@@ -2968,13 +3446,13 @@ function assignment_print_overview($courses, &$htmlarray) {
         }
         if (empty($isopen) || empty($assignment->timedue)) {
             unset($assignments[$key]);
-        }else{
+        } else {
             $assignmentids[] = $assignment->id;
         }
     }
 
-    if(empty($assignmentids)){
-        // no assigments to look at - we're done
+    if (empty($assignmentids)){
+        // no assignments to look at - we're done
         return true;
     }
 
@@ -2989,26 +3467,28 @@ function assignment_print_overview($courses, &$htmlarray) {
 
 
     // NOTE: we do all possible database work here *outside* of the loop to ensure this scales
+    //
+    list($sqlassignmentids, $assignmentidparams) = $DB->get_in_or_equal($assignmentids);
 
-    // build up and array of unmarked submissions indexed by assigment id/ userid
-    // for use where the user has grading rights on assigment
-    $rs = get_recordset_sql("SELECT id, assignment, userid
-                            FROM {$CFG->prefix}assignment_submissions
+    // build up and array of unmarked submissions indexed by assignment id/ userid
+    // for use where the user has grading rights on assignment
+    $rs = $DB->get_recordset_sql("SELECT id, assignment, userid
+                            FROM {assignment_submissions}
                             WHERE teacher = 0 AND timemarked = 0
-                            AND assignment IN (". implode(',', $assignmentids).")");
+                            AND assignment $sqlassignmentids", $assignmentidparams);
 
     $unmarkedsubmissions = array();
-    while ($ra = rs_fetch_next_record($rs)) {
-        $unmarkedsubmissions[$ra->assignment][$ra->userid] = $ra->id;
+    foreach ($rs as $rd) {
+        $unmarkedsubmissions[$rd->assignment][$rd->userid] = $rd->id;
     }
-    rs_close($rs);
+    $rs->close();
 
 
-    // get all user submissions, indexed by assigment id
-    $mysubmissions = get_records_sql("SELECT assignment, timemarked, teacher, grade
-                                      FROM {$CFG->prefix}assignment_submissions
-                                      WHERE userid = {$USER->id} AND
-                                      assignment IN (".implode(',', $assignmentids).")");
+    // get all user submissions, indexed by assignment id
+    $mysubmissions = $DB->get_records_sql("SELECT assignment, timemarked, teacher, grade
+                                      FROM {assignment_submissions}
+                                      WHERE userid = ? AND
+                                      assignment $sqlassignmentids", array_merge(array($USER->id), $assignmentidparams));
 
     foreach ($assignments as $assignment) {
         $str = '<div class="assignment overview"><div class="name">'.$strassignment. ': '.
@@ -3026,25 +3506,21 @@ function assignment_print_overview($courses, &$htmlarray) {
 
             // count how many people can submit
             $submissions = 0; // init
-            if (!empty($CFG->gradebookroles)) {
-                $gradebookroles = explode(",", $CFG->gradebookroles);
-            } else {
-                $gradebookroles = '';
-            }
-            $students = get_role_users($gradebookroles, $context, true);
-            if ($students) {
-                foreach($students as $student){
-                    if(isset($unmarkedsubmissions[$assignment->id][$student->id])){
+            if ($students = get_enrolled_users($context, 'mod/assignment:view', 0, 'u.id')) {
+                foreach ($students as $student) {
+                    if (isset($unmarkedsubmissions[$assignment->id][$student->id])) {
                         $submissions++;
                     }
                 }
             }
 
             if ($submissions) {
-                $str .= get_string('submissionsnotgraded', 'assignment', $submissions);
+                $link = new moodle_url('/mod/assignment/submissions.php', array('id'=>$assignment->coursemodule));
+                $str .= '<div class="details"><a href="'.$link.'">'.get_string('submissionsnotgraded', 'assignment', $submissions).'</a></div>';
             }
         } else {
-            if(isset($mysubmissions[$assignment->id])){
+            $str .= '<div class="details">';
+            if (isset($mysubmissions[$assignment->id])) {
 
                 $submission = $mysubmissions[$assignment->id];
 
@@ -3058,6 +3534,7 @@ function assignment_print_overview($courses, &$htmlarray) {
             } else {
                 $str .= $strnotsubmittedyet . ' ' . assignment_display_lateness(time(), $assignment->timedue);
             }
+            $str .= '</div>';
         }
         $str .= '</div>';
         if (empty($htmlarray[$assignment->course]['assignment'])) {
@@ -3094,7 +3571,7 @@ function assignment_get_types() {
     global $CFG;
     $types = array();
 
-    $type = new object();
+    $type = new stdClass();
     $type->modclass = MOD_CLASS_ACTIVITY;
     $type->type = "assignment_group_start";
     $type->typestr = '--'.get_string('modulenameplural', 'assignment');
@@ -3102,7 +3579,7 @@ function assignment_get_types() {
 
     $standardassignments = array('upload','online','uploadsingle','offline');
     foreach ($standardassignments as $assignmenttype) {
-        $type = new object();
+        $type = new stdClass();
         $type->modclass = MOD_CLASS_ACTIVITY;
         $type->type = "assignment&amp;type=$assignmenttype";
         $type->typestr = get_string("type$assignmenttype", 'assignment');
@@ -3116,7 +3593,7 @@ function assignment_get_types() {
             continue;
         }
         if (!in_array($assignmenttype, $standardassignments)) {
-            $type = new object();
+            $type = new stdClass();
             $type->modclass = MOD_CLASS_ACTIVITY;
             $type->type = "assignment&amp;type=$assignmenttype";
             $type->typestr = get_string("type$assignmenttype", 'assignment_'.$assignmenttype);
@@ -3124,7 +3601,7 @@ function assignment_get_types() {
         }
     }
 
-    $type = new object();
+    $type = new stdClass();
     $type->modclass = MOD_CLASS_ACTIVITY;
     $type->type = "assignment_group_end";
     $type->typestr = '--';
@@ -3139,15 +3616,19 @@ function assignment_get_types() {
  * @param string optional type
  */
 function assignment_reset_gradebook($courseid, $type='') {
-    global $CFG;
+    global $CFG, $DB;
 
-    $type = $type ? "AND a.assignmenttype='$type'" : '';
+    $params = array('courseid'=>$courseid);
+    if ($type) {
+        $type = "AND a.assignmenttype= :type";
+        $params['type'] = $type;
+    }
 
     $sql = "SELECT a.*, cm.idnumber as cmidnumber, a.course as courseid
-              FROM {$CFG->prefix}assignment a, {$CFG->prefix}course_modules cm, {$CFG->prefix}modules m
-             WHERE m.name='assignment' AND m.id=cm.module AND cm.instance=a.id AND a.course=$courseid $type";
+              FROM {assignment} a, {course_modules} cm, {modules} m
+             WHERE m.name='assignment' AND m.id=cm.module AND cm.instance=a.id AND a.course=:courseid $type";
 
-    if ($assignments = get_records_sql($sql)) {
+    if ($assignments = $DB->get_records_sql($sql, $params)) {
         foreach ($assignments as $assignment) {
             assignment_grade_item_update($assignment, 'reset');
         }
@@ -3165,9 +3646,8 @@ function assignment_reset_userdata($data) {
     global $CFG;
 
     $status = array();
-
-    foreach (get_list_of_plugins('mod/assignment/type') as $type) {
-        require_once("$CFG->dirroot/mod/assignment/type/$type/assignment.class.php");
+    foreach (get_plugin_list('assignment') as $type=>$dir) {
+        require_once("$dir/assignment.class.php");
         $assignmentclass = "assignment_$type";
         $ass = new $assignmentclass();
         $status = array_merge($status, $ass->reset_userdata($data));
@@ -3200,4 +3680,110 @@ function assignment_get_extra_capabilities() {
     return array('moodle/site:accessallgroups', 'moodle/site:viewfullnames');
 }
 
-?>
+/**
+ * @param string $feature FEATURE_xx constant for requested feature
+ * @return mixed True if module supports feature, null if doesn't know
+ */
+function assignment_supports($feature) {
+    switch($feature) {
+        case FEATURE_GROUPS:                  return true;
+        case FEATURE_GROUPINGS:               return true;
+        case FEATURE_GROUPMEMBERSONLY:        return true;
+        case FEATURE_MOD_INTRO:               return true;
+        case FEATURE_COMPLETION_TRACKS_VIEWS: return true;
+        case FEATURE_GRADE_HAS_GRADE:         return true;
+        case FEATURE_GRADE_OUTCOMES:          return true;
+        case FEATURE_GRADE_HAS_GRADE:         return true;
+        case FEATURE_BACKUP_MOODLE2:          return true;
+
+        default: return null;
+    }
+}
+
+/**
+ * Adds module specific settings to the settings block
+ *
+ * @param settings_navigation $settings The settings navigation object
+ * @param navigation_node $assignmentnode The node to add module settings to
+ */
+function assignment_extend_settings_navigation(settings_navigation $settings, navigation_node $assignmentnode) {
+    global $PAGE, $DB, $USER, $CFG;
+
+    $assignmentrow = $DB->get_record("assignment", array("id" => $PAGE->cm->instance));
+    require_once "$CFG->dirroot/mod/assignment/type/$assignmentrow->assignmenttype/assignment.class.php";
+
+    $assignmentclass = 'assignment_'.$assignmentrow->assignmenttype;
+    $assignmentinstance = new $assignmentclass($PAGE->cm->id, $assignmentrow, $PAGE->cm, $PAGE->course);
+
+    $allgroups = false;
+
+    // Add assignment submission information
+    if (has_capability('mod/assignment:grade', $PAGE->cm->context)) {
+        if ($allgroups && has_capability('moodle/site:accessallgroups', $PAGE->cm->context)) {
+            $group = 0;
+        } else {
+            $group = groups_get_activity_group($PAGE->cm);
+        }
+        $link = new moodle_url('/mod/assignment/submissions.php', array('id'=>$PAGE->cm->id));
+        if ($assignmentrow->assignmenttype == 'offline') {
+            $string = get_string('viewfeedback', 'assignment');
+        } else if ($count = $assignmentinstance->count_real_submissions($group)) {
+            $string = get_string('viewsubmissions', 'assignment', $count);
+        } else {
+            $string = get_string('noattempts', 'assignment');
+        }
+        $assignmentnode->add($string, $link, navigation_node::TYPE_SETTING);
+    }
+
+    if (is_object($assignmentinstance) && method_exists($assignmentinstance, 'extend_settings_navigation')) {
+        $assignmentinstance->extend_settings_navigation($assignmentnode);
+    }
+}
+
+/**
+ * generate zip file from array of given files
+ * @param array $filesforzipping - array of files to pass into archive_to_pathname
+ * @return path of temp file - note this returned file does not have a .zip extension - it is a temp file.
+ */
+function assignment_pack_files($filesforzipping) {
+        global $CFG;
+        //create path for new zip file.
+        $tempzip = tempnam($CFG->dataroot.'/temp/', 'assignment_');
+        //zip files
+        $zipper = new zip_packer();
+        if ($zipper->archive_to_pathname($filesforzipping, $tempzip)) {
+            return $tempzip;
+        }
+        return false;
+}
+
+/**
+ * Lists all file areas current user may browse
+ *
+ * @param object $course
+ * @param object $cm
+ * @param object $context
+ * @return array
+ */
+function assignment_get_file_areas($course, $cm, $context) {
+    $areas = array();
+    if (has_capability('moodle/course:managefiles', $context)) {
+        $areas['submission'] = get_string('assignmentsubmission', 'assignment');
+    }
+    return $areas;
+}
+
+/**
+ * Return a list of page types
+ * @param string $pagetype current page type
+ * @param stdClass $parentcontext Block's parent context
+ * @param stdClass $currentcontext Current context of block
+ */
+function assignment_page_type_list($pagetype, $parentcontext, $currentcontext) {
+    $module_pagetype = array(
+        'mod-assignment-*'=>get_string('page-mod-assignment-x', 'assignment'),
+        'mod-assignment-view'=>get_string('page-mod-assignment-view', 'assignment'),
+        'mod-assignment-submissions'=>get_string('page-mod-assignment-submissions', 'assignment')
+    );
+    return $module_pagetype;
+}
