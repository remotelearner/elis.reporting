diff --git a/mod/assignment/type/upload/assignment.class.php b/mod/assignment/type/upload/assignment.class.php
index b62c080..6e24785 100644
--- a/mod/assignment/type/upload/assignment.class.php
+++ b/mod/assignment/type/upload/assignment.class.php
@@ -1,5 +1,30 @@
-<?php // $Id$
-require_once($CFG->libdir.'/formslib.php');
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Assignment upload type implementation
+ *
+ * @package   mod-assignment
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/upload_form.php');
+require_once($CFG->libdir . '/portfoliolib.php');
+require_once($CFG->dirroot . '/mod/assignment/lib.php');
 
 define('ASSIGNMENT_STATUS_SUBMITTED', 'submitted'); // student thinks it is finished
 define('ASSIGNMENT_STATUS_CLOSED', 'closed');       // teacher prevents more submissions
@@ -16,9 +41,10 @@ class assignment_upload extends assignment_base {
     }
 
     function view() {
-        global $USER;
+        global $USER, $OUTPUT;
 
         require_capability('mod/assignment:view', $this->context);
+        $cansubmit = has_capability('mod/assignment:submit', $this->context);
 
         add_to_log($this->course->id, 'assignment', 'view', "view.php?id={$this->cm->id}", $this->assignment->id, $this->cm->id);
 
@@ -27,52 +53,56 @@ class assignment_upload extends assignment_base {
         if ($this->assignment->timeavailable > time()
           and !has_capability('mod/assignment:grade', $this->context)      // grading user can see it anytime
           and $this->assignment->var3) {                                   // force hiding before available date
-            print_simple_box_start('center', '', '', 0, 'generalbox', 'intro');
+            echo $OUTPUT->box_start('generalbox boxaligncenter', 'intro');
             print_string('notavailableyet', 'assignment');
-            print_simple_box_end();
+            echo $OUTPUT->box_end();
         } else {
             $this->view_intro();
         }
 
         $this->view_dates();
 
-        $filecount = $this->count_user_files($USER->id);
-        $submission = $this->get_submission($USER->id);
-
+        if (is_enrolled($this->context, $USER)) {
+            if ($submission = $this->get_submission($USER->id)) {
+                $filecount = $this->count_user_files($submission->id);
+            } else {
+                $filecount = 0;
+            }
+            if ($cansubmit or !empty($filecount)) { //if a user has submitted files using a previous role we should still show the files
         $this->view_feedback();
 
         if (!$this->drafts_tracked() or !$this->isopen() or $this->is_finalized($submission)) {
-            print_heading(get_string('submission', 'assignment'), '', 3);
+                    echo $OUTPUT->heading(get_string('submission', 'assignment'), 3);
         } else {
-            print_heading(get_string('submissiondraft', 'assignment'), '', 3);
+                    echo $OUTPUT->heading(get_string('submissiondraft', 'assignment'), 3);
         }
 
         if ($filecount and $submission) {
-            print_simple_box($this->print_user_files($USER->id, true), 'center');
+                    echo $OUTPUT->box($this->print_user_files($USER->id, true), 'generalbox boxaligncenter', 'userfiles');
         } else {
             if (!$this->isopen() or $this->is_finalized($submission)) {
-                print_simple_box(get_string('nofiles', 'assignment'), 'center');
+                        echo $OUTPUT->box(get_string('nofiles', 'assignment'), 'generalbox boxaligncenter nofiles', 'userfiles');
             } else {
-                print_simple_box(get_string('nofilesyet', 'assignment'), 'center');
+                        echo $OUTPUT->box(get_string('nofilesyet', 'assignment'), 'generalbox boxaligncenter nofiles', 'userfiles');
             }
         }
 
-        if (has_capability('mod/assignment:submit', $this->context)) {
             $this->view_upload_form();
-        }
 
         if ($this->notes_allowed()) {
-            print_heading(get_string('notes', 'assignment'), '', 3);
+                    echo $OUTPUT->heading(get_string('notes', 'assignment'), 3);
             $this->view_notes();
         }
 
         $this->view_final_submission();
+            }
+        }
         $this->view_footer();
     }
 
 
     function view_feedback($submission=NULL) {
-        global $USER, $CFG;
+        global $USER, $CFG, $DB, $OUTPUT;
         require_once($CFG->libdir.'/gradelib.php');
 
         if (!$submission) { /// Get submission for this assignment
@@ -91,11 +121,11 @@ class assignment_upload extends assignment_base {
             return;
         }
 
-        if ($grade->grade === null and empty($grade->str_feedback)) {   // No grades to show yet
-            if ($this->count_responsefiles($USER->id)) {   // but possibly response files to show
-                print_heading(get_string('responsefiles', 'assignment', $this->course->teacher), '', 3);
+        if ($grade->grade === null and empty($grade->str_feedback)) {   // No grade to show yet
+            if ($this->count_responsefiles($USER->id)) {   // but possibly response files are present
+                echo $OUTPUT->heading(get_string('responsefiles', 'assignment'), 3);
                 $responsefiles = $this->print_responsefiles($USER->id, true);
-                print_simple_box($responsefiles, 'center');
+                echo $OUTPUT->box($responsefiles, 'generalbox boxaligncenter');
             }
             return;
         }
@@ -104,18 +134,18 @@ class assignment_upload extends assignment_base {
         $graded_by   = $grade->usermodified;
 
     /// We need the teacher info
-        if (!$teacher = get_record('user', 'id', $graded_by)) {
-            error('Could not find the teacher');
+        if (!$teacher = $DB->get_record('user', array('id'=>$graded_by))) {
+            print_error('cannotfindteacher');
         }
 
     /// Print the feedback
-        print_heading(get_string('submissionfeedback', 'assignment'), '', 3);
+        echo $OUTPUT->heading(get_string('submissionfeedback', 'assignment'), 3);
 
         echo '<table cellspacing="0" class="feedback">';
 
         echo '<tr>';
         echo '<td class="left picture">';
-        print_user_picture($teacher, $this->course->id, $teacher->picture);
+        echo $OUTPUT->user_picture($teacher);
         echo '</td>';
         echo '<td class="topic">';
         echo '<div class="from">';
@@ -151,63 +181,56 @@ class assignment_upload extends assignment_base {
 
 
     function view_upload_form() {
-        global $CFG, $USER;
+        global $CFG, $USER, $OUTPUT;
 
         $submission = $this->get_submission($USER->id);
 
-        $struploadafile = get_string('uploadafile');
-        $maxbytes = $this->assignment->maxbytes == 0 ? $this->course->maxbytes : $this->assignment->maxbytes;
-        $strmaxsize = get_string('maxsize', '', display_size($maxbytes));
-
         if ($this->is_finalized($submission)) {
             // no uploading
             return;
         }
 
         if ($this->can_upload_file($submission)) {
-            echo '<div style="text-align:center">';
-            echo '<form enctype="multipart/form-data" method="post" action="upload.php">';
-            echo '<fieldset class="invisiblefieldset">';
-            echo "<p>$struploadafile ($strmaxsize)</p>";
-            echo '<input type="hidden" name="id" value="'.$this->cm->id.'" />';
-            echo '<input type="hidden" name="sesskey" value="'.sesskey().'" />';
-            echo '<input type="hidden" name="action" value="uploadfile" />';
-            require_once($CFG->libdir.'/uploadlib.php');
-            upload_print_form_fragment(1,array('newfile'),null,false,null,0,$this->assignment->maxbytes,false);
-            echo '<input type="submit" name="save" value="'.get_string('uploadthisfile').'" />';
-            echo '</fieldset>';
-            echo '</form>';
-            echo '</div>';
-            echo '<br />';
+            $fs = get_file_storage();
+            // edit files in another page
+            if ($submission) {
+                if ($files = $fs->get_area_files($this->context->id, 'mod_assignment', 'submission', $submission->id, "timemodified", false)) {
+                    $str = get_string('editthesefiles', 'assignment');
+                } else {
+                    $str = get_string('uploadfiles', 'assignment');
+                }
+            } else {
+                $str = get_string('uploadfiles', 'assignment');
+            }
+            echo $OUTPUT->single_button(new moodle_url('/mod/assignment/type/upload/upload.php', array('contextid'=>$this->context->id, 'userid'=>$USER->id)), $str, 'get');
         }
-
     }
 
     function view_notes() {
-        global $USER;
+        global $USER, $OUTPUT;
 
         if ($submission = $this->get_submission($USER->id)
           and !empty($submission->data1)) {
-            print_simple_box(format_text($submission->data1, FORMAT_HTML), 'center', '630px');
+            echo $OUTPUT->box(format_text($submission->data1, FORMAT_HTML, array('overflowdiv'=>true)), 'generalbox boxaligncenter boxwidthwide');
         } else {
-            print_simple_box(get_string('notesempty', 'assignment'), 'center');
+            echo $OUTPUT->box(get_string('notesempty', 'assignment'), 'generalbox boxaligncenter');
         }
         if ($this->can_update_notes($submission)) {
             $options = array ('id'=>$this->cm->id, 'action'=>'editnotes');
             echo '<div style="text-align:center">';
-            print_single_button('upload.php', $options, get_string('edit'), 'post', '_self', false);
+            echo $OUTPUT->single_button(new moodle_url('upload.php', $options), get_string('edit'));
             echo '</div>';
         }
     }
 
     function view_final_submission() {
-        global $CFG, $USER;
+        global $CFG, $USER, $OUTPUT;
 
         $submission = $this->get_submission($USER->id);
 
         if ($this->isopen() and $this->can_finalize($submission)) {
             //print final submit button
-            print_heading(get_string('submitformarking','assignment'), '', 3);
+            echo $OUTPUT->heading(get_string('submitformarking','assignment'), 3);
             echo '<div style="text-align:center">';
             echo '<form method="post" action="upload.php">';
             echo '<fieldset class="invisiblefieldset">';
@@ -219,13 +242,13 @@ class assignment_upload extends assignment_base {
             echo '</form>';
             echo '</div>';
         } else if (!$this->isopen()) {
-            print_heading(get_string('nomoresubmissions','assignment'), '', 3);
+            echo $OUTPUT->heading(get_string('nomoresubmissions','assignment'), 3);
 
         } else if ($this->drafts_tracked() and $state = $this->is_finalized($submission)) {
             if ($state == ASSIGNMENT_STATUS_SUBMITTED) {
-                print_heading(get_string('submitedformarking','assignment'), '', 3);
+                echo $OUTPUT->heading(get_string('submitedformarking','assignment'), 3);
             } else {
-                print_heading(get_string('nomoresubmissions','assignment'), '', 3);
+                echo $OUTPUT->heading(get_string('nomoresubmissions','assignment'), 3);
             }
         } else {
             //no submission yet
@@ -242,77 +265,30 @@ class assignment_upload extends assignment_base {
         return ($this->assignment->var3 && (time() <= $this->assignment->timeavailable));
     }
 
-    function custom_feedbackform($submission, $return=false) {
-        global $CFG;
-
-        $mode         = optional_param('mode', '', PARAM_ALPHA);
-        $offset       = optional_param('offset', 0, PARAM_INT);
-        $forcerefresh = optional_param('forcerefresh', 0, PARAM_BOOL);
-
-        $output = get_string('responsefiles', 'assignment').': ';
-
-        $output .= '<form enctype="multipart/form-data" method="post" '.
-             "action=\"$CFG->wwwroot/mod/assignment/upload.php\">";
-        $output .= '<div>';
-        $output .= '<input type="hidden" name="id" value="'.$this->cm->id.'" />';
-        $output .= '<input type="hidden" name="action" value="uploadresponse" />';
-        $output .= '<input type="hidden" name="mode" value="'.$mode.'" />';
-        $output .= '<input type="hidden" name="offset" value="'.$offset.'" />';
-        $output .= '<input type="hidden" name="userid" value="'.$submission->userid.'" />';
-        $output .= '<input type="hidden" name="sesskey" value="'.sesskey().'" />';
-        require_once($CFG->libdir.'/uploadlib.php');
-        $output .= upload_print_form_fragment(1,array('newfile'),null,false,null,0,0,true);
-        $output .= '<input type="submit" name="save" value="'.get_string('uploadthisfile').'" />';
-        $output .= '</div>';
-        $output .= '</form>';
-
-        if ($forcerefresh) {
-            $output .= $this->update_main_listing($submission);
-        }
-
-        $responsefiles = $this->print_responsefiles($submission->userid, true);
-        if (!empty($responsefiles)) {
-            $output .= $responsefiles;
-        }
-
-        if ($return) {
-            return $output;
-        }
-        echo $output;
-        return;
-    }
-
-
     function print_student_answer($userid, $return=false){
-        global $CFG;
+        global $CFG, $OUTPUT, $PAGE;
 
-        $filearea = $this->file_area_name($userid);
         $submission = $this->get_submission($userid);
 
         $output = '';
 
-        if ($basedir = $this->file_area($userid)) {
             if ($this->drafts_tracked() and $this->isopen() and !$this->is_finalized($submission)) {
                 $output .= '<strong>'.get_string('draft', 'assignment').':</strong> ';
             }
 
             if ($this->notes_allowed() and !empty($submission->data1)) {
-                $output .= link_to_popup_window ('/mod/assignment/type/upload/notes.php?id='.$this->cm->id.'&amp;userid='.$userid,
-                                                'notes'.$userid, get_string('notes', 'assignment'), 500, 780, get_string('notes', 'assignment'), 'none', true, 'notesbutton'.$userid);
+            $link = new moodle_url("/mod/assignment/type/upload/notes.php", array('id'=>$this->cm->id, 'userid'=>$userid));
+            $action = new popup_action('click', $link, 'notes', array('height' => 500, 'width' => 780));
+            $output .= $OUTPUT->action_link($link, get_string('notes', 'assignment'), $action, array('title'=>get_string('notes', 'assignment')));
+
                 $output .= '&nbsp;';
             }
 
-            if ($files = get_directory_list($basedir, 'responses')) {
-                require_once($CFG->libdir.'/filelib.php');
-                foreach ($files as $key => $file) {
-                    $icon = mimeinfo('icon', $file);
-                    $ffurl = get_file_url("$filearea/$file");
-                    $output .= '<a href="'.$ffurl.'" ><img class="icon" src="'.$CFG->pixpath.'/f/'.$icon.'" alt="'.$icon.'" />'.$file.'</a>&nbsp;';
-                }
-            }
-        }
-        $output = '<div class="files">'.$output.'</div>';
-        $output .= '<br />';
+
+        $renderer = $PAGE->get_renderer('mod_assignment');
+        $output = $OUTPUT->box_start('files').$output;
+        $output .= $renderer->assignment_files($this->context, $submission->id);
+        $output .= $OUTPUT->box_end();
 
         return $output;
     }
@@ -326,7 +302,7 @@ class assignment_upload extends assignment_base {
      * @return string optional
      */
     function print_user_files($userid=0, $return=false) {
-        global $CFG, $USER;
+        global $CFG, $USER, $OUTPUT, $PAGE;
 
         $mode    = optional_param('mode', '', PARAM_ALPHA);
         $offset  = optional_param('offset', 0, PARAM_INT);
@@ -338,16 +314,12 @@ class assignment_upload extends assignment_base {
             $userid = $USER->id;
         }
 
-        $filearea = $this->file_area_name($userid);
-
-        $output = '';
+        $output = $OUTPUT->box_start('files');
 
         $submission = $this->get_submission($userid);
 
-        $candelete = $this->can_delete_files($submission);
-        $strdelete   = get_string('delete');
-
-        if ($this->drafts_tracked() and $this->isopen() and !$this->is_finalized($submission) and !empty($mode)) {                 // only during grading
+        // only during grading
+        if ($this->drafts_tracked() and $this->isopen() and !$this->is_finalized($submission) and !empty($mode)) {
             $output .= '<strong>'.get_string('draft', 'assignment').':</strong><br />';
         }
 
@@ -358,39 +330,23 @@ class assignment_upload extends assignment_base {
 
         }
 
-        if ($basedir = $this->file_area($userid)) {
-            if ($files = get_directory_list($basedir, 'responses')) {
-                require_once($CFG->libdir.'/filelib.php');
-                foreach ($files as $key => $file) {
-
-                    $icon = mimeinfo('icon', $file);
-                    $ffurl = get_file_url("$filearea/$file");
-
-                    $output .= '<a href="'.$ffurl.'" ><img src="'.$CFG->pixpath.'/f/'.$icon.'" class="icon" alt="'.$icon.'" />'.$file.'</a>';
-
-                    if ($candelete) {
-                        $delurl  = "$CFG->wwwroot/mod/assignment/delete.php?id={$this->cm->id}&amp;file=$file&amp;userid={$submission->userid}&amp;mode=$mode&amp;offset=$offset";
-
-                        $output .= '<a href="'.$delurl.'">&nbsp;'
-                                  .'<img title="'.$strdelete.'" src="'.$CFG->pixpath.'/t/delete.gif" class="iconsmall" alt="" /></a> ';
-                    }
-
-                    $output .= '<br />';
-                }
-            }
-        }
-
         if ($this->drafts_tracked() and $this->isopen() and has_capability('mod/assignment:grade', $this->context) and $mode != '') { // we do not want it on view.php page
             if ($this->can_unfinalize($submission)) {
-                $options = array ('id'=>$this->cm->id, 'userid'=>$userid, 'action'=>'unfinalize', 'mode'=>$mode, 'offset'=>$offset, 'sesskey'=>sesskey());
-                $output .= print_single_button('upload.php', $options, get_string('unfinalize', 'assignment'), 'post', '_self', true);
+                //$options = array ('id'=>$this->cm->id, 'userid'=>$userid, 'action'=>'unfinalize', 'mode'=>$mode, 'offset'=>$offset);
+                $output .= '<br /><input type="submit" name="unfinalize" value="'.get_string('unfinalize', 'assignment').'" />';
+                $output .=  $OUTPUT->help_icon('unfinalize', 'assignment');
+
             } else if ($this->can_finalize($submission)) {
-                $options = array ('id'=>$this->cm->id, 'userid'=>$userid, 'action'=>'finalizeclose', 'mode'=>$mode, 'offset'=>$offset, 'sesskey'=>sesskey());
-                $output .= print_single_button('upload.php', $options, get_string('finalize', 'assignment'), 'post', '_self', true);
+                //$options = array ('id'=>$this->cm->id, 'userid'=>$userid, 'action'=>'finalizeclose', 'mode'=>$mode, 'offset'=>$offset);
+                $output .= '<br /><input type="submit" name="finalize" value="'.get_string('finalize', 'assignment').'" />';
             }
         }
 
-        $output = '<div class="files">'.$output.'</div>';
+        if ($submission) {
+            $renderer = $PAGE->get_renderer('mod_assignment');
+            $output .= $renderer->assignment_files($this->context, $submission->id);
+        }
+        $output .= $OUTPUT->box_end();
 
         if ($return) {
             return $output;
@@ -398,47 +354,50 @@ class assignment_upload extends assignment_base {
         echo $output;
     }
 
+    function submissions($mode) {
+        // redirects out of form to process (un)finalizing.
+        $unfinalize = optional_param('unfinalize', FALSE, PARAM_TEXT);
+        $finalize = optional_param('finalize', FALSE, PARAM_TEXT);
+        if ($unfinalize) {
+            $this->unfinalize('single');
+        } else if ($finalize) {
+            $this->finalize('single');
+        }
+        if ($unfinalize || $finalize) {
+            $mode = 'singlenosave';
+        }
+        parent::submissions($mode);
+    }
+
+    function process_feedback() {
+        if (!$feedback = data_submitted() or !confirm_sesskey()) {      // No incoming data?
+            return false;
+        }
+        $userid = required_param('userid', PARAM_INT);
+        $offset = required_param('offset', PARAM_INT);
+        $mform = $this->display_submission($offset, $userid, false);
+        parent::process_feedback($mform);
+    }
+
     function print_responsefiles($userid, $return=false) {
-        global $CFG, $USER;
+        global $CFG, $USER, $OUTPUT, $PAGE;
 
         $mode    = optional_param('mode', '', PARAM_ALPHA);
         $offset  = optional_param('offset', 0, PARAM_INT);
 
-        $filearea = $this->file_area_name($userid).'/responses';
-
-        $output = '';
+        $output = $OUTPUT->box_start('responsefiles');
 
         $candelete = $this->can_manage_responsefiles();
         $strdelete   = get_string('delete');
 
-        if ($basedir = $this->file_area($userid)) {
-            $basedir .= '/responses';
-
-            if ($files = get_directory_list($basedir)) {
-                require_once($CFG->libdir.'/filelib.php');
-                foreach ($files as $key => $file) {
-
-                    $icon = mimeinfo('icon', $file);
-
-                    $ffurl = get_file_url("$filearea/$file");
-
-                    $output .= '<a href="'.$ffurl.'" ><img src="'.$CFG->pixpath.'/f/'.$icon.'" alt="'.$icon.'" />'.$file.'</a>';
-
-                    if ($candelete) {
-                        $delurl  = "$CFG->wwwroot/mod/assignment/delete.php?id={$this->cm->id}&amp;file=$file&amp;userid=$userid&amp;mode=$mode&amp;offset=$offset&amp;action=response";
-
-                        $output .= '<a href="'.$delurl.'">&nbsp;'
-                                  .'<img title="'.$strdelete.'" src="'.$CFG->pixpath.'/t/delete.gif" class="iconsmall" alt=""/></a> ';
-                    }
-
-                    $output .= '&nbsp;';
-                }
-            }
-
-
-            $output = '<div class="responsefiles">'.$output.'</div>';
+        $fs = get_file_storage();
+        $browser = get_file_browser();
 
+        if ($submission = $this->get_submission($userid)) {
+            $renderer = $PAGE->get_renderer('mod_assignment');
+            $output .= $renderer->assignment_files($this->context, $submission->id, 'response');
         }
+        $output .= $OUTPUT->box_end();
 
         if ($return) {
             return $output;
@@ -447,9 +406,14 @@ class assignment_upload extends assignment_base {
     }
 
 
-    function upload() {
+    /**
+     * Upload files
+     * upload_file function requires moodle form instance and file manager options
+     * @param object $mform
+     * @param array $options
+     */
+    function upload($mform = null, $filemanager_options = null) {
         $action = required_param('action', PARAM_ALPHA);
-
         switch ($action) {
             case 'finalize':
                 $this->finalize();
@@ -461,28 +425,28 @@ class assignment_upload extends assignment_base {
                 $this->unfinalize();
                 break;
             case 'uploadresponse':
-                $this->upload_responsefile();
+                $this->upload_responsefile($mform, $filemanager_options);
                 break;
             case 'uploadfile':
-                $this->upload_file();
+                $this->upload_file($mform, $filemanager_options);
             case 'savenotes':
             case 'editnotes':
                 $this->upload_notes();
             default:
-                error('Error: Unknow upload action ('.$action.').');
+                print_error('unknowuploadaction', '', '', $action);
         }
     }
 
     function upload_notes() {
-        global $CFG, $USER;
+        global $CFG, $USER, $OUTPUT, $DB;
 
         $action = required_param('action', PARAM_ALPHA);
 
-        $returnurl = 'view.php?id='.$this->cm->id;
+        $returnurl  = new moodle_url('/mod/assignment/view.php', array('id'=>$this->cm->id));
 
         $mform = new mod_assignment_upload_notes_form();
 
-        $defaults = new object();
+        $defaults = new stdClass();
         $defaults->id = $this->cm->id;
 
         if ($submission = $this->get_submission($USER->id)) {
@@ -494,43 +458,36 @@ class assignment_upload extends assignment_base {
         $mform->set_data($defaults);
 
         if ($mform->is_cancelled()) {
-            redirect('view.php?id='.$this->cm->id);
+            $returnurl  = new moodle_url('/mod/assignment/view.php', array('id'=>$this->cm->id));
+            redirect($returnurl);
         }
 
         if (!$this->can_update_notes($submission)) {
             $this->view_header(get_string('upload'));
-            notify(get_string('uploaderror', 'assignment'));
-            print_continue($returnurl);
+            echo $OUTPUT->notification(get_string('uploaderror', 'assignment'));
+            echo $OUTPUT->continue_button($returnurl);
             $this->view_footer();
             die;
         }
 
         if ($data = $mform->get_data() and $action == 'savenotes') {
             $submission = $this->get_submission($USER->id, true); // get or create submission
-            $updated = new object();
+            $updated = new stdClass();
             $updated->id           = $submission->id;
             $updated->timemodified = time();
             $updated->data1        = $data->text;
 
-            if (update_record('assignment_submissions', $updated)) {
+            $DB->update_record('assignment_submissions', $updated);
                 add_to_log($this->course->id, 'assignment', 'upload', 'view.php?a='.$this->assignment->id, $this->assignment->id, $this->cm->id);
                 redirect($returnurl);
                 $submission = $this->get_submission($USER->id);
                 $this->update_grade($submission);
-
-            } else {
-                $this->view_header(get_string('notes', 'assignment'));
-                notify(get_string('notesupdateerror', 'assignment'));
-                print_continue($returnurl);
-                $this->view_footer();
-                die;
-            }
         }
 
         /// show notes edit form
         $this->view_header(get_string('notes', 'assignment'));
 
-        print_heading(get_string('notes', 'assignment'), '');
+        echo $OUTPUT->heading(get_string('notes', 'assignment'));
 
         $mform->display();
 
@@ -538,138 +495,200 @@ class assignment_upload extends assignment_base {
         die;
     }
 
-    function upload_responsefile() {
-        global $CFG;
+    function upload_responsefile($mform, $options) {
+        global $CFG, $USER, $OUTPUT, $PAGE;
 
         $userid = required_param('userid', PARAM_INT);
         $mode   = required_param('mode', PARAM_ALPHA);
         $offset = required_param('offset', PARAM_INT);
 
-        $returnurl = "submissions.php?id={$this->cm->id}&amp;userid=$userid&amp;mode=$mode&amp;offset=$offset";
+        $returnurl = new moodle_url("submissions.php", array('id'=>$this->cm->id,'userid'=>$userid,'mode'=>$mode,'offset'=>$offset)); //not xhtml, just url.
 
-        if (data_submitted('nomatch') and $this->can_manage_responsefiles() and confirm_sesskey()) {
-            $dir = $this->file_area_name($userid).'/responses';
-            check_dir_exists($CFG->dataroot.'/'.$dir, true, true);
-
-            require_once($CFG->dirroot.'/lib/uploadlib.php');
-            $um = new upload_manager('newfile',false,true,$this->course,false,0,true);
-
-            if (!$um->process_file_uploads($dir)) {
-                print_header(get_string('upload'));
-                notify(get_string('uploaderror', 'assignment'));
-                echo $um->get_errors();
-                print_continue($returnurl);
-                print_footer('none');
-                die;
+        if ($formdata = $mform->get_data() and $this->can_manage_responsefiles()) {
+            $fs = get_file_storage();
+            $submission = $this->get_submission($userid, true, true);
+            if ($formdata = file_postupdate_standard_filemanager($formdata, 'files', $options, $this->context, 'mod_assignment', 'response', $submission->id)) {
+                $returnurl = new moodle_url("/mod/assignment/submissions.php", array('id'=>$this->cm->id,'userid'=>$formdata->userid,'mode'=>$formdata->mode,'offset'=>$formdata->offset));
+                redirect($returnurl->out(false));
             }
         }
-        redirect($returnurl);
+        $PAGE->set_title(get_string('upload'));
+        echo $OUTPUT->header();
+        echo $OUTPUT->notification(get_string('uploaderror', 'assignment'));
+        echo $OUTPUT->continue_button($returnurl->out(true));
+        echo $OUTPUT->footer();
+        die;
     }
 
-    function upload_file() {
-        global $CFG, $USER;
-
-        $mode   = optional_param('mode', '', PARAM_ALPHA);
-        $offset = optional_param('offset', 0, PARAM_INT);
+    function upload_file($mform, $options) {
+        global $CFG, $USER, $DB, $OUTPUT;
 
-        $returnurl = 'view.php?id='.$this->cm->id;
-
-        $filecount = $this->count_user_files($USER->id);
+        $returnurl  = new moodle_url('/mod/assignment/view.php', array('id'=>$this->cm->id));
         $submission = $this->get_submission($USER->id);
 
         if (!$this->can_upload_file($submission)) {
             $this->view_header(get_string('upload'));
-            notify(get_string('uploaderror', 'assignment'));
-            print_continue($returnurl);
+            echo $OUTPUT->notification(get_string('uploaderror', 'assignment'));
+            echo $OUTPUT->continue_button($returnurl);
             $this->view_footer();
             die;
         }
 
-        $dir = $this->file_area_name($USER->id);
-        check_dir_exists($CFG->dataroot.'/'.$dir, true, true); // better to create now so that student submissions do not block it later
-
-        require_once($CFG->dirroot.'/lib/uploadlib.php');
-        $um = new upload_manager('newfile',false,true,$this->course,false,$this->assignment->maxbytes,true);
-
-        if ($um->process_file_uploads($dir) and confirm_sesskey()) {
+        if ($formdata = $mform->get_data()) {
+            $fs = get_file_storage();
             $submission = $this->get_submission($USER->id, true); //create new submission if needed
-            $updated = new object();
-            $updated->id           = $submission->id;
-            $updated->timemodified = time();
-
-            if (update_record('assignment_submissions', $updated)) {
+            $fs->delete_area_files($this->context->id, 'mod_assignment', 'submission', $submission->id);
+            $formdata = file_postupdate_standard_filemanager($formdata, 'files', $options, $this->context, 'mod_assignment', 'submission', $submission->id);
+            $updates = new stdClass();
+            $updates->id = $submission->id;
+            $updates->timemodified = time();
+            $DB->update_record('assignment_submissions', $updates);
                 add_to_log($this->course->id, 'assignment', 'upload',
                         'view.php?a='.$this->assignment->id, $this->assignment->id, $this->cm->id);
-                $submission = $this->get_submission($USER->id);
                 $this->update_grade($submission);
                 if (!$this->drafts_tracked()) {
                     $this->email_teachers($submission);
                 }
-            } else {
-                $new_filename = $um->get_new_filename();
+
+            // send files to event system
+            $files = $fs->get_area_files($this->context->id, 'mod_assignment', 'submission', $submission->id);
+            // Let Moodle know that assessable files were  uploaded (eg for plagiarism detection)
+            $eventdata = new stdClass();
+            $eventdata->modulename   = 'assignment';
+            $eventdata->cmid         = $this->cm->id;
+            $eventdata->itemid       = $submission->id;
+            $eventdata->courseid     = $this->course->id;
+            $eventdata->userid       = $USER->id;
+            if ($files) {
+                $eventdata->files        = $files;
+            }
+            events_trigger('assessable_file_uploaded', $eventdata);
+            $returnurl  = new moodle_url('/mod/assignment/view.php', array('id'=>$this->cm->id));
+            redirect($returnurl);
+        }
+
                 $this->view_header(get_string('upload'));
-                notify(get_string('uploadnotregistered', 'assignment', $new_filename));
-                print_continue($returnurl);
+        echo $OUTPUT->notification(get_string('uploaderror', 'assignment'));
+        echo $OUTPUT->continue_button($returnurl);
                 $this->view_footer();
                 die;
             }
-            redirect('view.php?id='.$this->cm->id);
+
+    function send_file($filearea, $args) {
+        global $CFG, $DB, $USER;
+        require_once($CFG->libdir.'/filelib.php');
+
+        require_login($this->course, false, $this->cm);
+
+        if ($filearea === 'submission') {
+            $submissionid = (int)array_shift($args);
+
+            if (!$submission = $DB->get_record('assignment_submissions', array('assignment'=>$this->assignment->id, 'id'=>$submissionid))) {
+                return false;
         }
-        $this->view_header(get_string('upload'));
-        notify(get_string('uploaderror', 'assignment'));
-        echo $um->get_errors();
-        print_continue($returnurl);
-        $this->view_footer();
-        die;
+
+            if ($USER->id != $submission->userid and !has_capability('mod/assignment:grade', $this->context)) {
+                return false;
     }
 
-    function finalize() {
-        global $USER;
+            $relativepath = implode('/', $args);
+            $fullpath = "/{$this->context->id}/mod_assignment/submission/$submission->id/$relativepath";
+
+            $fs = get_file_storage();
+            if (!$file = $fs->get_file_by_hash(sha1($fullpath)) or $file->is_directory()) {
+                return false;
+            }
+            send_stored_file($file, 0, 0, true); // download MUST be forced - security!
+
+        } else if ($filearea === 'response') {
+            $submissionid = (int)array_shift($args);
+
+            if (!$submission = $DB->get_record('assignment_submissions', array('assignment'=>$this->assignment->id, 'id'=>$submissionid))) {
+                return false;
+            }
+
+            if ($USER->id != $submission->userid and !has_capability('mod/assignment:grade', $this->context)) {
+                return false;
+            }
 
+            $relativepath = implode('/', $args);
+            $fullpath = "/{$this->context->id}/mod_assignment/response/$submission->id/$relativepath";
+
+            $fs = get_file_storage();
+            if (!$file = $fs->get_file_by_hash(sha1($fullpath)) or $file->is_directory()) {
+                return false;
+            }
+            send_stored_file($file, 0, 0, true);
+        }
+
+        return false;
+    }
+
+    function finalize($forcemode=null) {
+        global $USER, $DB, $OUTPUT;
+        $userid = optional_param('userid', $USER->id, PARAM_INT);
+        $offset = optional_param('offset', 0, PARAM_INT);
         $confirm    = optional_param('confirm', 0, PARAM_BOOL);
-        $returnurl  = 'view.php?id='.$this->cm->id;
-        $submission = $this->get_submission($USER->id);
+        $returnurl  = new moodle_url('/mod/assignment/view.php', array('id'=>$this->cm->id));
+        $submission = $this->get_submission($userid);
+
+        if ($forcemode!=null) {
+            $returnurl  = new moodle_url('/mod/assignment/submissions.php',
+                array('id'=>$this->cm->id,
+                    'userid'=>$userid,
+                    'mode'=>$forcemode,
+                    'offset'=>$offset
+                ));
+        }
 
         if (!$this->can_finalize($submission)) {
-            redirect($returnurl); // probably already graded, redirect to assignment page, the reason should be obvious
+            redirect($returnurl->out(false)); // probably already graded, redirect to assignment page, the reason should be obvious
         }
 
+        if ($forcemode==null) {
         if (!data_submitted() or !$confirm or !confirm_sesskey()) {
             $optionsno = array('id'=>$this->cm->id);
             $optionsyes = array ('id'=>$this->cm->id, 'confirm'=>1, 'action'=>'finalize', 'sesskey'=>sesskey());
             $this->view_header(get_string('submitformarking', 'assignment'));
-            print_heading(get_string('submitformarking', 'assignment'));
-            notice_yesno(get_string('onceassignmentsent', 'assignment'), 'upload.php', 'view.php', $optionsyes, $optionsno, 'post', 'get');
+                echo $OUTPUT->heading(get_string('submitformarking', 'assignment'));
+                echo $OUTPUT->confirm(get_string('onceassignmentsent', 'assignment'), new moodle_url('upload.php', $optionsyes),new moodle_url( 'view.php', $optionsno));
             $this->view_footer();
             die;
-
         }
-        $updated = new object();
+        }
+        $updated = new stdClass();
         $updated->id           = $submission->id;
         $updated->data2        = ASSIGNMENT_STATUS_SUBMITTED;
         $updated->timemodified = time();
 
-        if (update_record('assignment_submissions', $updated)) {
+        $DB->update_record('assignment_submissions', $updated);
             add_to_log($this->course->id, 'assignment', 'upload', //TODO: add finalize action to log
                     'view.php?a='.$this->assignment->id, $this->assignment->id, $this->cm->id);
-            $submission = $this->get_submission($USER->id);
+        $submission = $this->get_submission($userid);
             $this->update_grade($submission);
             $this->email_teachers($submission);
-        } else {
-            $this->view_header(get_string('submitformarking', 'assignment'));
-            notify(get_string('finalizeerror', 'assignment'));
-            print_continue($returnurl);
-            $this->view_footer();
-            die;
+
+        // Trigger assessable_files_done event to show files are complete
+        $eventdata = new stdClass();
+        $eventdata->modulename   = 'assignment';
+        $eventdata->cmid         = $this->cm->id;
+        $eventdata->itemid       = $submission->id;
+        $eventdata->courseid     = $this->course->id;
+        $eventdata->userid       = $userid;
+        events_trigger('assessable_files_done', $eventdata);
+
+        if ($forcemode==null) {
+            redirect($returnurl->out(false));
         }
-        redirect($returnurl);
     }
 
     function finalizeclose() {
+        global $DB;
+
         $userid    = optional_param('userid', 0, PARAM_INT);
         $mode      = required_param('mode', PARAM_ALPHA);
         $offset    = required_param('offset', PARAM_INT);
-        $returnurl = "submissions.php?id={$this->cm->id}&amp;userid=$userid&amp;mode=$mode&amp;offset=$offset&amp;forcerefresh=1";
+        $returnurl  = new moodle_url('/mod/assignment/submissions.php', array('id'=>$this->cm->id, 'userid'=>$userid, 'mode'=>$mode, 'offset'=>$offset, 'forcerefresh'=>1));
 
         // create but do not add student submission date
         $submission = $this->get_submission($userid, true, true);
@@ -678,50 +697,48 @@ class assignment_upload extends assignment_base {
             redirect($returnurl); // probably closed already
         }
 
-        $updated = new object();
+        $updated = new stdClass();
         $updated->id    = $submission->id;
         $updated->data2 = ASSIGNMENT_STATUS_CLOSED;
 
-        if (update_record('assignment_submissions', $updated)) {
+        $DB->update_record('assignment_submissions', $updated);
             add_to_log($this->course->id, 'assignment', 'upload', //TODO: add finalize action to log
                     'view.php?a='.$this->assignment->id, $this->assignment->id, $this->cm->id);
             $submission = $this->get_submission($userid, false, true);
             $this->update_grade($submission);
-        }
         redirect($returnurl);
     }
 
-    function unfinalize() {
+    function unfinalize($forcemode=null) {
+        global $DB;
 
         $userid = required_param('userid', PARAM_INT);
         $mode   = required_param('mode', PARAM_ALPHA);
         $offset = required_param('offset', PARAM_INT);
 
-        $returnurl = "submissions.php?id={$this->cm->id}&amp;userid=$userid&amp;mode=$mode&amp;offset=$offset&amp;forcerefresh=1";
-
-        if (data_submitted('nomatch')
+        if ($forcemode!=null) {
+            $mode=$forcemode;
+        }
+        $returnurl = new moodle_url('/mod/assignment/submissions.php', array('id'=>$this->cm->id, 'userid'=>$userid, 'mode'=>$mode, 'offset'=>$offset, 'forcerefresh'=>1) );
+        if (data_submitted()
           and $submission = $this->get_submission($userid)
           and $this->can_unfinalize($submission)
           and confirm_sesskey()) {
 
-            $updated = new object();
+            $updated = new stdClass();
             $updated->id = $submission->id;
             $updated->data2 = '';
-            if (update_record('assignment_submissions', $updated)) {
+            $DB->update_record('assignment_submissions', $updated);
                 //TODO: add unfinalize action to log
-                add_to_log($this->course->id, 'assignment', 'view submission', 'submissions.php?id='.$this->assignment->id, $this->assignment->id, $this->cm->id);
+            add_to_log($this->course->id, 'assignment', 'view submission', 'submissions.php?id='.$this->cm->id.'&userid='.$userid.'&mode='.$mode.'&offset='.$offset, $this->assignment->id, $this->cm->id);
                 $submission = $this->get_submission($userid);
                 $this->update_grade($submission);
-            } else {
-                $this->view_header(get_string('submitformarking', 'assignment'));
-                notify(get_string('unfinalizeerror', 'assignment'));
-                print_continue($returnurl);
-                $this->view_footer();
-                die;
-            }
         }
+
+        if ($forcemode==null) {
         redirect($returnurl);
     }
+    }
 
 
     function delete() {
@@ -739,7 +756,7 @@ class assignment_upload extends assignment_base {
 
 
     function delete_responsefile() {
-        global $CFG;
+        global $CFG, $OUTPUT,$PAGE;
 
         $file     = required_param('file', PARAM_FILE);
         $userid   = required_param('userid', PARAM_INT);
@@ -747,7 +764,7 @@ class assignment_upload extends assignment_base {
         $offset   = required_param('offset', PARAM_INT);
         $confirm  = optional_param('confirm', 0, PARAM_BOOL);
 
-        $returnurl = "submissions.php?id={$this->cm->id}&amp;userid=$userid&amp;mode=$mode&amp;offset=$offset";
+        $returnurl  = new moodle_url('/mod/assignment/submissions.php', array('id'=>$this->cm->id, 'userid'=>$userid, 'mode'=>$mode, 'offset'=>$offset));
 
         if (!$this->can_manage_responsefiles()) {
            redirect($returnurl);
@@ -756,35 +773,28 @@ class assignment_upload extends assignment_base {
         $urlreturn = 'submissions.php';
         $optionsreturn = array('id'=>$this->cm->id, 'offset'=>$offset, 'mode'=>$mode, 'userid'=>$userid);
 
-        if (!data_submitted('nomatch') or !$confirm or !confirm_sesskey()) {
+        if (!data_submitted() or !$confirm or !confirm_sesskey()) {
             $optionsyes = array ('id'=>$this->cm->id, 'file'=>$file, 'userid'=>$userid, 'confirm'=>1, 'action'=>'response', 'mode'=>$mode, 'offset'=>$offset, 'sesskey'=>sesskey());
-            print_header(get_string('delete'));
-            print_heading(get_string('delete'));
-            notice_yesno(get_string('confirmdeletefile', 'assignment', $file), 'delete.php', $urlreturn, $optionsyes, $optionsreturn, 'post', 'get');
-            print_footer('none');
+            $PAGE->set_title(get_string('delete'));
+            echo $OUTPUT->header();
+            echo $OUTPUT->heading(get_string('delete'));
+            echo $OUTPUT->confirm(get_string('confirmdeletefile', 'assignment', $file), new moodle_url('delete.php', $optionsyes), new moodle_url($urlreturn, $optionsreturn));
+            echo $OUTPUT->footer();
             die;
         }
 
-        $dir = $this->file_area_name($userid).'/responses';
-        $filepath = $CFG->dataroot.'/'.$dir.'/'.$file;
-        if (file_exists($filepath)) {
-            if (@unlink($filepath)) {
-                redirect($returnurl);
+        if ($submission = $this->get_submission($userid)) {
+            $fs = get_file_storage();
+            if ($file = $fs->get_file($this->context->id, 'mod_assignment', 'response', $submission->id, '/', $file)) {
+                $file->delete();
             }
         }
-
-        // print delete error
-        print_header(get_string('delete'));
-        notify(get_string('deletefilefailed', 'assignment'));
-        print_continue($returnurl);
-        print_footer('none');
-        die;
-
+        redirect($returnurl);
     }
 
 
     function delete_file() {
-        global $CFG;
+        global $CFG, $DB, $OUTPUT, $PAGE;
 
         $file     = required_param('file', PARAM_FILE);
         $userid   = required_param('userid', PARAM_INT);
@@ -797,80 +807,59 @@ class assignment_upload extends assignment_base {
         if (empty($mode)) {
             $urlreturn = 'view.php';
             $optionsreturn = array('id'=>$this->cm->id);
-            $returnurl = 'view.php?id='.$this->cm->id;
+            $returnurl  = new moodle_url('/mod/assignment/view.php', array('id'=>$this->cm->id));
         } else {
             $urlreturn = 'submissions.php';
             $optionsreturn = array('id'=>$this->cm->id, 'offset'=>$offset, 'mode'=>$mode, 'userid'=>$userid);
-            $returnurl = "submissions.php?id={$this->cm->id}&amp;offset=$offset&amp;mode=$mode&amp;userid=$userid";
+            $returnurl  = new moodle_url('/mod/assignment/submissions.php', array('id'=>$this->cm->id, 'offset'=>$offset, 'userid'=>$userid));
         }
 
         if (!$submission = $this->get_submission($userid) // incorrect submission
           or !$this->can_delete_files($submission)) {     // can not delete
             $this->view_header(get_string('delete'));
-            notify(get_string('cannotdeletefiles', 'assignment'));
-            print_continue($returnurl);
+            echo $OUTPUT->notification(get_string('cannotdeletefiles', 'assignment'));
+            echo $OUTPUT->continue_button($returnurl);
             $this->view_footer();
             die;
         }
-        $dir = $this->file_area_name($userid);
 
-        if (!data_submitted('nomatch') or !$confirm or !confirm_sesskey()) {
+        if (!data_submitted() or !$confirm or !confirm_sesskey()) {
             $optionsyes = array ('id'=>$this->cm->id, 'file'=>$file, 'userid'=>$userid, 'confirm'=>1, 'sesskey'=>sesskey(), 'mode'=>$mode, 'offset'=>$offset, 'sesskey'=>sesskey());
             if (empty($mode)) {
                 $this->view_header(get_string('delete'));
             } else {
-                print_header(get_string('delete'));
+                $PAGE->set_title(get_string('delete'));
+                echo $OUTPUT->header();
             }
-            print_heading(get_string('delete'));
-            notice_yesno(get_string('confirmdeletefile', 'assignment', $file), 'delete.php', $urlreturn, $optionsyes, $optionsreturn, 'post', 'get');
+            echo $OUTPUT->heading(get_string('delete'));
+            echo $OUTPUT->confirm(get_string('confirmdeletefile', 'assignment', $file), new moodle_url('delete.php', $optionsyes), new moodle_url($urlreturn, $optionsreturn));
             if (empty($mode)) {
                 $this->view_footer();
             } else {
-                print_footer('none');
+                echo $OUTPUT->footer();
             }
             die;
         }
 
-        $filepath = $CFG->dataroot.'/'.$dir.'/'.$file;
-        if (file_exists($filepath)) {
-            if (@unlink($filepath)) {
-                $updated = new object();
-                $updated->id = $submission->id;
-                $updated->timemodified = time();
-                if (update_record('assignment_submissions', $updated)) {
+        $fs = get_file_storage();
+        if ($file = $fs->get_file($this->context->id, 'mod_assignment', 'submission', $submission->id, '/', $file)) {
+            $file->delete();
+            $submission->timemodified = time();
+            $DB->update_record('assignment_submissions', $submission);
                     add_to_log($this->course->id, 'assignment', 'upload', //TODO: add delete action to log
                             'view.php?a='.$this->assignment->id, $this->assignment->id, $this->cm->id);
-                    $submission = $this->get_submission($userid);
                     $this->update_grade($submission);
                 }
                 redirect($returnurl);
             }
-        }
-
-        // print delete error
-        if (empty($mode)) {
-            $this->view_header(get_string('delete'));
-        } else {
-            print_header(get_string('delete'));
-        }
-        notify(get_string('deletefilefailed', 'assignment'));
-        print_continue($returnurl);
-        if (empty($mode)) {
-            $this->view_footer();
-        } else {
-            print_footer('none');
-        }
-        die;
-    }
 
 
     function can_upload_file($submission) {
         global $USER;
 
-        if (has_capability('mod/assignment:submit', $this->context)           // can submit
+        if (is_enrolled($this->context, $USER, 'mod/assignment:submit')
           and $this->isopen()                                                 // assignment not closed yet
-          and (empty($submission) or $submission->userid == $USER->id)        // his/her own submission
-          and $this->count_user_files($USER->id) < $this->assignment->var1    // file limit not reached
+          and (empty($submission) or ($submission->userid == $USER->id))        // his/her own submission
           and !$this->is_finalized($submission)) {                            // no uploading after final submission
             return true;
         } else {
@@ -893,7 +882,7 @@ class assignment_upload extends assignment_base {
             return true;
         }
 
-        if (has_capability('mod/assignment:submit', $this->context)
+        if (is_enrolled($this->context, $USER, 'mod/assignment:submit')
           and $this->isopen()                                      // assignment not closed yet
           and $this->assignment->resubmit                          // deleting allowed
           and $USER->id == $submission->userid                     // his/her own submission
@@ -929,9 +918,14 @@ class assignment_upload extends assignment_base {
     }
 
     function can_unfinalize($submission) {
+        if(is_bool($submission)) {
+            return false;
+        }
+
         if (!$this->drafts_tracked()) {
             return false;
         }
+
         if (has_capability('mod/assignment:grade', $this->context)
           and $this->isopen()
           and $this->is_finalized($submission)) {
@@ -943,6 +937,11 @@ class assignment_upload extends assignment_base {
 
     function can_finalize($submission) {
         global $USER;
+
+        if(is_bool($submission)) {
+            return false;
+        }
+
         if (!$this->drafts_tracked()) {
             return false;
         }
@@ -954,11 +953,11 @@ class assignment_upload extends assignment_base {
         if (has_capability('mod/assignment:grade', $this->context)) {
             return true;
 
-        } else if (has_capability('mod/assignment:submit', $this->context)    // can submit
+        } else if (is_enrolled($this->context, $USER, 'mod/assignment:submit')
           and $this->isopen()                                                 // assignment not closed yet
           and !empty($submission)                                             // submission must exist
           and $submission->userid == $USER->id                                // his/her own submission
-          and ($this->count_user_files($USER->id)
+          and ($this->count_user_files($submission->id)
             or ($this->notes_allowed() and !empty($submission->data1)))) {    // something must be submitted
 
             return true;
@@ -970,7 +969,7 @@ class assignment_upload extends assignment_base {
     function can_update_notes($submission) {
         global $USER;
 
-        if (has_capability('mod/assignment:submit', $this->context)
+        if (is_enrolled($this->context, $USER, 'mod/assignment:submit')
           and $this->notes_allowed()                                          // notesd must be allowed
           and $this->isopen()                                                 // assignment not closed yet
           and (empty($submission) or $USER->id == $submission->userid)        // his/her own submission
@@ -985,38 +984,15 @@ class assignment_upload extends assignment_base {
         return (boolean)$this->assignment->var2;
     }
 
-    /**
-     * Count the files uploaded by a given user
-     *
-     * @param $userid int The user id
-     * @return int
-     */
-    function count_user_files($userid) {
-        global $CFG;
-
-        $filearea = $this->file_area_name($userid);
-
-        if ( is_dir($CFG->dataroot.'/'.$filearea) && $basedir = $this->file_area($userid)) {
-            if ($files = get_directory_list($basedir, 'responses')) {
-                return count($files);
-            }
-        }
-        return 0;
-    }
-
     function count_responsefiles($userid) {
-        global $CFG;
-
-        $filearea = $this->file_area_name($userid).'/responses';
-
-        if ( is_dir($CFG->dataroot.'/'.$filearea) && $basedir = $this->file_area($userid)) {
-            $basedir .= '/responses';
-            if ($files = get_directory_list($basedir)) {
+        if ($submission = $this->get_submission($userid)) {
+            $fs = get_file_storage();
+            $files = $fs->get_area_files($this->context->id, 'mod_assignment', 'response', $submission->id, "id", false);
                 return count($files);
-            }
-        }
+        } else {
         return 0;
     }
+    }
 
     function setup_elements(&$mform) {
         global $CFG, $COURSE;
@@ -1028,56 +1004,207 @@ class assignment_upload extends assignment_base {
         $mform->addElement('select', 'maxbytes', get_string('maximumsize', 'assignment'), $choices);
         $mform->setDefault('maxbytes', $CFG->assignment_maxbytes);
 
-        $mform->addElement('select', 'resubmit', get_string("allowdeleting", "assignment"), $ynoptions);
-        $mform->setHelpButton('resubmit', array('allowdeleting', get_string('allowdeleting', 'assignment'), 'assignment'));
+        $mform->addElement('select', 'resubmit', get_string('allowdeleting', 'assignment'), $ynoptions);
+        $mform->addHelpButton('resubmit', 'allowdeleting', 'assignment');
         $mform->setDefault('resubmit', 1);
 
         $options = array();
         for($i = 1; $i <= 20; $i++) {
             $options[$i] = $i;
         }
-        $mform->addElement('select', 'var1', get_string("allowmaxfiles", "assignment"), $options);
-        $mform->setHelpButton('var1', array('allowmaxfiles', get_string('allowmaxfiles', 'assignment'), 'assignment'));
+        $mform->addElement('select', 'var1', get_string('allowmaxfiles', 'assignment'), $options);
+        $mform->addHelpButton('var1', 'allowmaxfiles', 'assignment');
         $mform->setDefault('var1', 3);
 
-        $mform->addElement('select', 'var2', get_string("allownotes", "assignment"), $ynoptions);
-        $mform->setHelpButton('var2', array('allownotes', get_string('allownotes', 'assignment'), 'assignment'));
+        $mform->addElement('select', 'var2', get_string('allownotes', 'assignment'), $ynoptions);
+        $mform->addHelpButton('var2', 'allownotes', 'assignment');
         $mform->setDefault('var2', 0);
 
-        $mform->addElement('select', 'var3', get_string("hideintro", "assignment"), $ynoptions);
-        $mform->setHelpButton('var3', array('hideintro', get_string('hideintro', 'assignment'), 'assignment'));
+        $mform->addElement('select', 'var3', get_string('hideintro', 'assignment'), $ynoptions);
+        $mform->addHelpButton('var3', 'hideintro', 'assignment');
         $mform->setDefault('var3', 0);
 
-        $mform->addElement('select', 'emailteachers', get_string("emailteachers", "assignment"), $ynoptions);
-        $mform->setHelpButton('emailteachers', array('emailteachers', get_string('emailteachers', 'assignment'), 'assignment'));
+        $mform->addElement('select', 'emailteachers', get_string('emailteachers', 'assignment'), $ynoptions);
+        $mform->addHelpButton('emailteachers', 'emailteachers', 'assignment');
         $mform->setDefault('emailteachers', 0);
 
-        $mform->addElement('select', 'var4', get_string("trackdrafts", "assignment"), $ynoptions);
-        $mform->setHelpButton('var4', array('trackdrafts', get_string('trackdrafts', 'assignment'), 'assignment'));
+        $mform->addElement('select', 'var4', get_string('trackdrafts', 'assignment'), $ynoptions);
+        $mform->addHelpButton('var4', 'trackdrafts', 'assignment');
         $mform->setDefault('var4', 1);
 
+        $course_context = get_context_instance(CONTEXT_COURSE, $COURSE->id);
+        plagiarism_get_form_elements_module($mform, $course_context);
     }
 
+    function portfolio_exportable() {
+        return true;
+    }
+
+    function extend_settings_navigation($node) {
+        global $CFG, $USER, $OUTPUT;
+
+        // get users submission if there is one
+        $submission = $this->get_submission();
+        if (is_enrolled($this->context, $USER, 'mod/assignment:submit')) {
+            $editable = $this->isopen() && (!$submission || $this->assignment->resubmit || !$submission->timemarked);
+        } else {
+            $editable = false;
+        }
+
+        // If the user has submitted something add a bit more stuff
+        if ($submission) {
+            // Add a view link to the settings nav
+            $link = new moodle_url('/mod/assignment/view.php', array('id'=>$this->cm->id));
+            $node->add(get_string('viewmysubmission', 'assignment'), $link, navigation_node::TYPE_SETTING);
+            if (!empty($submission->timemodified)) {
+                $submittednode = $node->add(get_string('submitted', 'assignment') . ' ' . userdate($submission->timemodified));
+                $submittednode->text = preg_replace('#([^,])\s#', '$1&nbsp;', $submittednode->text);
+                $submittednode->add_class('note');
+                if ($submission->timemodified <= $this->assignment->timedue || empty($this->assignment->timedue)) {
+                    $submittednode->add_class('early');
+                } else {
+                    $submittednode->add_class('late');
+                }
+            }
+        }
+
+        // Check if the user has uploaded any files, if so we can add some more stuff to the settings nav
+        if ($submission && is_enrolled($this->context, $USER, 'mod/assignment:submit') && $this->count_user_files($submission->id)) {
+            $fs = get_file_storage();
+            if ($files = $fs->get_area_files($this->context->id, 'mod_assignment', 'submission', $submission->id, "timemodified", false)) {
+                if (!$this->drafts_tracked() or !$this->isopen() or $this->is_finalized($submission)) {
+                    $filenode = $node->add(get_string('submission', 'assignment'));
+                } else {
+                    $filenode = $node->add(get_string('submissiondraft', 'assignment'));
+                }
+                foreach ($files as $file) {
+                    $filename = $file->get_filename();
+                    $mimetype = $file->get_mimetype();
+                    $link = file_encode_url($CFG->wwwroot.'/pluginfile.php', '/'.$this->context->id.'/mod_assignment/submission/'.$submission->id.'/'.$filename);
+                    $filenode->add($filename, $link, navigation_node::TYPE_SETTING, null, null, new pix_icon(file_mimetype_icon($mimetype),''));
+                }
+            }
+        }
+
+        // Show a notes link if they are enabled
+        if ($this->notes_allowed()) {
+            $link = new moodle_url('/mod/assignment/upload.php', array('id'=>$this->cm->id, 'action'=>'editnotes', 'sesskey'=>sesskey()));
+            $node->add(get_string('notes', 'assignment'), $link);
+        }
+    }
+
+    /**
+     * creates a zip of all assignment submissions and sends a zip to the browser
+     */
+    public function download_submissions() {
+        global $CFG,$DB;
+        require_once($CFG->libdir.'/filelib.php');
+        $submissions = $this->get_submissions('','');
+        if (empty($submissions)) {
+            print_error('errornosubmissions', 'assignment');
+        }
+        $filesforzipping = array();
+        $fs = get_file_storage();
+
+        $groupmode = groups_get_activity_groupmode($this->cm);
+        $groupid = 0;   // All users
+        $groupname = '';
+        if ($groupmode) {
+            $groupid = groups_get_activity_group($this->cm, true);
+            $groupname = groups_get_group_name($groupid).'-';
+        }
+        $filename = str_replace(' ', '_', clean_filename($this->course->shortname.'-'.$this->assignment->name.'-'.$groupname.$this->assignment->id.".zip")); //name of new zip file.
+        foreach ($submissions as $submission) {
+            $a_userid = $submission->userid; //get userid
+            if ((groups_is_member($groupid,$a_userid)or !$groupmode or !$groupid)) {
+                $a_assignid = $submission->assignment; //get name of this assignment for use in the file names.
+                $a_user = $DB->get_record("user", array("id"=>$a_userid),'id,username,firstname,lastname'); //get user firstname/lastname
+
+                $files = $fs->get_area_files($this->context->id, 'mod_assignment', 'submission', $submission->id, "timemodified", false);
+                foreach ($files as $file) {
+                    //get files new name.
+                    $fileext = strstr($file->get_filename(), '.');
+                    $fileoriginal = str_replace($fileext, '', $file->get_filename());
+                    $fileforzipname =  clean_filename(fullname($a_user) . "_" . $fileoriginal."_".$a_userid.$fileext);
+                    //save file name to array for zipping.
+                    $filesforzipping[$fileforzipname] = $file;
+                }
+            }
+        } // end of foreach loop
+        if ($zipfile = assignment_pack_files($filesforzipping)) {
+            send_temp_file($zipfile, $filename); //send file and delete after sending.
+        }
+    }
 }
 
 class mod_assignment_upload_notes_form extends moodleform {
+
+    function get_data() {
+        $data = parent::get_data();
+        if ($data) {
+            $data->format = $data->text['format'];
+            $data->text = $data->text['text'];
+        }
+        return $data;
+    }
+
+    function set_data($data) {
+        if (!isset($data->format)) {
+            $data->format = FORMAT_HTML;
+        }
+        if (isset($data->text)) {
+            $data->text = array('text'=>$data->text, 'format'=>$data->format);
+        }
+        parent::set_data($data);
+    }
+
     function definition() {
-        $mform =& $this->_form;
+        $mform = $this->_form;
 
         // visible elements
-        $mform->addElement('htmleditor', 'text', get_string('notes', 'assignment'), array('cols'=>85, 'rows'=>30));
+        $mform->addElement('editor', 'text', get_string('notes', 'assignment'), null, null);
         $mform->setType('text', PARAM_RAW); // to be cleaned before display
-        $mform->setHelpButton('text', array('reading', 'writing'), false, 'editorhelpbutton');
 
         // hidden params
         $mform->addElement('hidden', 'id', 0);
         $mform->setType('id', PARAM_INT);
         $mform->addElement('hidden', 'action', 'savenotes');
-        $mform->setType('id', PARAM_ALPHA);
+        $mform->setType('action', PARAM_ALPHA);
 
         // buttons
         $this->add_action_buttons();
     }
 }
 
-?>
+class mod_assignment_upload_response_form extends moodleform {
+    function definition() {
+        $mform = $this->_form;
+        $instance = $this->_customdata;
+
+        // visible elements
+        $mform->addElement('filemanager', 'files_filemanager', get_string('uploadafile'), null, $instance->options);
+
+        // hidden params
+        $mform->addElement('hidden', 'id', $instance->cm->id);
+        $mform->setType('id', PARAM_INT);
+        $mform->addElement('hidden', 'contextid', $instance->contextid);
+        $mform->setType('contextid', PARAM_INT);
+        $mform->addElement('hidden', 'action', 'uploadresponse');
+        $mform->setType('action', PARAM_ALPHA);
+        $mform->addElement('hidden', 'mode', $instance->mode);
+        $mform->setType('mode', PARAM_ALPHA);
+        $mform->addElement('hidden', 'offset', $instance->offset);
+        $mform->setType('offset', PARAM_INT);
+        $mform->addElement('hidden', 'forcerefresh' , $instance->forcerefresh);
+        $mform->setType('forcerefresh', PARAM_INT);
+        $mform->addElement('hidden', 'userid', $instance->userid);
+        $mform->setType('userid', PARAM_INT);
+
+        // buttons
+        $this->add_action_buttons(false, get_string('uploadthisfile'));
+    }
+}
+
+
+
+
