diff --git a/mod/quiz/index.php b/mod/quiz/index.php
index 602564f..926fa2e 100644
--- a/mod/quiz/index.php
+++ b/mod/quiz/index.php
@@ -1,27 +1,48 @@
-<?php // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
- * This page lists all the instances of quiz in a particular course
+ * This script lists all the instances of quiz in a particular course
  *
- * @author Martin Dougiamas and many others.
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package quiz
+ * @package    mod
+ * @subpackage quiz
+ * @copyright  1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
-    require_once("../../config.php");
-    require_once("locallib.php");
 
-    $id = required_param('id', PARAM_INT);
-    if (!$course = get_record("course", "id", $id)) {
-        error("Course ID is incorrect");
-    }
-    $coursecontext = get_context_instance(CONTEXT_COURSE, $id);
-    require_login($course->id);
-    add_to_log($course->id, "quiz", "view all", "index.php?id=$course->id", "");
+
+require_once("../../config.php");
+require_once("locallib.php");
+
+$id = required_param('id', PARAM_INT);
+$PAGE->set_url('/mod/quiz/index.php', array('id'=>$id));
+if (!$course = $DB->get_record('course', array('id' => $id))) {
+    print_error('invalidcourseid');
+}
+$coursecontext = get_context_instance(CONTEXT_COURSE, $id);
+require_login($course->id);
+$PAGE->set_pagelayout('incourse');
+
+add_to_log($course->id, "quiz", "view all", "index.php?id=$course->id", "");
 
 // Print the header
-    $strquizzes = get_string("modulenameplural", "quiz");
-    $streditquestions = '';
-    $editqcontexts = new question_edit_contexts($coursecontext);
-    if ($editqcontexts->have_one_edit_tab_cap('questions')) {
+$strquizzes = get_string("modulenameplural", "quiz");
+$streditquestions = '';
+$editqcontexts = new question_edit_contexts($coursecontext);
+if ($editqcontexts->have_one_edit_tab_cap('questions')) {
         $streditquestions =
                 "<form target=\"_parent\" method=\"get\" action=\"$CFG->wwwroot/question/edit.php\">
                    <div>
@@ -29,73 +50,79 @@
                    <input type=\"submit\" value=\"".get_string("editquestions", "quiz")."\" />
                    </div>
                  </form>";
-    }
-    $navlinks = array();
-    $navlinks[] = array('name' => $strquizzes, 'link' => '', 'type' => 'activity');
-    $navigation = build_navigation($navlinks);
-
-    print_header_simple($strquizzes, '', $navigation,
-                 '', '', true, $streditquestions, navmenu($course));
+}
+$PAGE->navbar->add($strquizzes);
+$PAGE->set_title($strquizzes);
+$PAGE->set_button($streditquestions);
+$PAGE->set_heading($course->fullname);
+echo $OUTPUT->header();
 
 // Get all the appropriate data
-    if (!$quizzes = get_all_instances_in_course("quiz", $course)) {
+if (!$quizzes = get_all_instances_in_course("quiz", $course)) {
         notice(get_string('thereareno', 'moodle', $strquizzes), "../../course/view.php?id=$course->id");
         die;
-    }
+}
+$sections = get_all_sections($course->id);
 
 // Check if we need the closing date header
-    $showclosingheader = false;
-    $showfeedback = false;
-    foreach ($quizzes as $quiz) {
+$showclosingheader = false;
+$showfeedback = false;
+foreach ($quizzes as $quiz) {
         if ($quiz->timeclose!=0) {
             $showclosingheader=true;
         }
-        if (quiz_has_feedback($quiz->id)) {
+    if (quiz_has_feedback($quiz)) {
             $showfeedback=true;
         }
-        if($showclosingheader && $showfeedback) {
+    if ($showclosingheader && $showfeedback) {
             break;
         }
-    }
+}
 
 // Configure table for displaying the list of instances.
-    $headings = array(get_string('name'));
-    $align = array('left');
+$headings = array(get_string('name'));
+$align = array('left');
 
-    if ($showclosingheader) {
+if ($showclosingheader) {
         array_push($headings, get_string('quizcloses', 'quiz'));
         array_push($align, 'left');
-    }
+}
 
-    if ($course->format == 'weeks' or $course->format == 'weekscss') {
-        array_unshift($headings, get_string('week'));
-    } else {
-        array_unshift($headings, get_string('section'));
-    }
-    array_unshift($align, 'center');
+array_unshift($headings, get_string('sectionname', 'format_'.$course->format));
+array_unshift($align, 'center');
 
-    $showing = '';  // default
+$showing = '';  // default
 
-    if (has_capability('mod/quiz:viewreports', $coursecontext)) {
+if (has_capability('mod/quiz:viewreports', $coursecontext)) {
         array_push($headings, get_string('attempts', 'quiz'));
         array_push($align, 'left');
         $showing = 'stats';
-    } else if (has_any_capability(array('mod/quiz:reviewmyattempts', 'mod/quiz:attempt'), $coursecontext)) {
+
+} else if (has_any_capability(array('mod/quiz:reviewmyattempts', 'mod/quiz:attempt'),
+        $coursecontext)) {
         array_push($headings, get_string('grade', 'quiz'));
         array_push($align, 'left');
         if ($showfeedback) {
             array_push($headings, get_string('feedback', 'quiz'));
             array_push($align, 'left');
         }
-        $showing = 'scores';  // default
-    }
+    $showing = 'grades';  // default
+
+    $grades = $DB->get_records_sql_menu('
+            SELECT qg.quiz, qg.grade
+            FROM {quiz_grades} qg
+            JOIN {quiz} q ON q.id = qg.quiz
+            WHERE q.course = ? AND qg.userid = ?',
+            array($course->id, $USER->id));
+}
 
-    $table->head = $headings;
-    $table->align = $align;
+$table = new html_table();
+$table->head = $headings;
+$table->align = $align;
 
-/// Populate the table with the list of instances.
-    $currentsection = '';
-    foreach ($quizzes as $quiz) {
+// Populate the table with the list of instances.
+$currentsection = '';
+foreach ($quizzes as $quiz) {
         $cm = get_coursemodule_from_instance('quiz', $quiz->id);
         $context = get_context_instance(CONTEXT_MODULE, $cm->id);
         $data = array();
@@ -105,6 +132,7 @@
         if ($quiz->section != $currentsection) {
             if ($quiz->section) {
                 $strsection = $quiz->section;
+            $strsection = get_section_name($course, $sections[$quiz->section]);
             }
             if ($currentsection) {
                 $learningtable->data[] = 'hr';
@@ -118,7 +146,8 @@
         if (!$quiz->visible) {
             $class = ' class="dimmed"';
         }
-        $data[] = "<a$class href=\"view.php?id=$quiz->coursemodule\">" . format_string($quiz->name, true) . '</a>';
+    $data[] = "<a$class href=\"view.php?id=$quiz->coursemodule\">" .
+            format_string($quiz->name, true) . '</a>';
 
         // Close date.
         if ($quiz->timeclose) {
@@ -130,27 +159,25 @@
         if ($showing == 'stats') {
             // The $quiz objects returned by get_all_instances_in_course have the necessary $cm
             // fields set to make the following call work.
-            $attemptcount = quiz_num_attempt_summary($quiz, $quiz);
-            if ($attemptcount) {
-                $data[] = "<a$class href=\"report.php?id=$quiz->coursemodule\">$attemptcount</a>";
-            } else {
-                $data[] = '';
-            }
-        } else if ($showing == 'scores') {
+        $data[] = quiz_attempt_summary_link_to_reports($quiz, $cm, $context);
 
+    } else if ($showing == 'grades') {
             // Grade and feedback.
-            $bestgrade = quiz_get_best_grade($quiz, $USER->id);
             $attempts = quiz_get_user_attempts($quiz->id, $USER->id, 'all');
-            list($someoptions, $alloptions) = quiz_get_combined_reviewoptions($quiz, $attempts, $context);
+        list($someoptions, $alloptions) = quiz_get_combined_reviewoptions(
+                $quiz, $attempts, $context);
 
             $grade = '';
             $feedback = '';
-            if ($quiz->grade && !is_null($bestgrade)) {
-                if ($alloptions->scores) {
-                    $grade = round($bestgrade, $quiz->decimalpoints) . ' / ' . $quiz->grade;
+        if ($quiz->grade && array_key_exists($quiz->id, $grades)) {
+            if ($alloptions->marks >= question_display_options::MARK_AND_MAX) {
+                $a = new stdClass();
+                $a->grade = quiz_format_grade($quiz, $grades[$quiz->id]);
+                $a->maxgrade = quiz_format_grade($quiz, $quiz->grade);
+                $grade = get_string('outofshort', 'quiz', $a);
                 }
                 if ($alloptions->overallfeedback) {
-                    $feedback = quiz_feedback_for_grade($bestgrade, $quiz->id);
+                $feedback = quiz_feedback_for_grade($grades[$quiz->id], $quiz, $context);
                 }
             }
             $data[] = $grade;
@@ -160,12 +187,10 @@
         }
 
         $table->data[] = $data;
-    } // End of loop over quiz instances.
+} // End of loop over quiz instances.
 
 // Display the table.
-    echo '<br />';
-    print_table($table);
+echo html_writer::table($table);
 
 // Finish the page
-    print_footer($course);
-?>
+echo $OUTPUT->footer();
