diff --git a/mod/quiz/lib.php b/mod/quiz/lib.php
index 309b1f2..a9f5e02 100644
--- a/mod/quiz/lib.php
+++ b/mod/quiz/lib.php
@@ -1,64 +1,56 @@
-<?php  // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
-* Library of functions for the quiz module.
-*
-* This contains functions that are called also from outside the quiz module
-* Functions that are only called by the quiz module itself are in {@link locallib.php}
-* @author Martin Dougiamas and many others.
-* @license http://www.gnu.org/copyleft/gpl.html GNU Public License
-* @package quiz
-*/
+ * Library of functions for the quiz module.
+ *
+ * This contains functions that are called also from outside the quiz module
+ * Functions that are only called by the quiz module itself are in {@link locallib.php}
+ *
+ * @package    mod
+ * @subpackage quiz
+ * @copyright  1999 onwards Martin Dougiamas {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 
-require_once($CFG->libdir.'/pagelib.php');
 
-/// CONSTANTS ///////////////////////////////////////////////////////////////////
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->libdir . '/eventslib.php');
+require_once($CFG->dirroot . '/calendar/lib.php');
+
 
 /**#@+
- * The different review options are stored in the bits of $quiz->review
- * These constants help to extract the options
- *
- * This is more of a mess than you might think necessary, because originally
- * it was though that 3x6 bits were enough, but then they ran out. PHP integers
- * are only reliably 32 bits signed, so the simplest solution was then to
- * add 4x3 more bits.
- */
-/**
- * The first 6 + 4 bits refer to the time immediately after the attempt
- */
-define('QUIZ_REVIEW_IMMEDIATELY', 0x3c003f);
-/**
- * the next 6 + 4 bits refer to the time after the attempt but while the quiz is open
- */
-define('QUIZ_REVIEW_OPEN',       0x3c00fc0);
-/**
- * the final 6 + 4 bits refer to the time after the quiz closes
+ * Option controlling what options are offered on the quiz settings form.
  */
-define('QUIZ_REVIEW_CLOSED',    0x3c03f000);
-
-// within each group of 6 bits we determine what should be shown
-define('QUIZ_REVIEW_RESPONSES',       1*0x1041); // Show responses
-define('QUIZ_REVIEW_SCORES',          2*0x1041); // Show scores
-define('QUIZ_REVIEW_FEEDBACK',        4*0x1041); // Show question feedback
-define('QUIZ_REVIEW_ANSWERS',         8*0x1041); // Show correct answers
-// Some handling of worked solutions is already in the code but not yet fully supported
-// and not switched on in the user interface.
-define('QUIZ_REVIEW_SOLUTIONS',      16*0x1041); // Show solutions
-define('QUIZ_REVIEW_GENERALFEEDBACK',32*0x1041); // Show question general feedback
-define('QUIZ_REVIEW_OVERALLFEEDBACK', 1*0x4440000); // Show quiz overall feedback
-// Multipliers 2*0x4440000, 4*0x4440000 and 8*0x4440000 are still available
+define('QUIZ_MAX_ATTEMPT_OPTION', 10);
+define('QUIZ_MAX_QPP_OPTION', 50);
+define('QUIZ_MAX_DECIMAL_OPTION', 5);
+define('QUIZ_MAX_Q_DECIMAL_OPTION', 7);
 /**#@-*/
 
 /**
  * If start and end date for the quiz are more than this many seconds apart
  * they will be represented by two separate events in the calendar
  */
-define("QUIZ_MAX_EVENT_LENGTH", 5*24*60*60);   // 5 days maximum
-
-/// FUNCTIONS ///////////////////////////////////////////////////////////////////
+define('QUIZ_MAX_EVENT_LENGTH', 5*24*60*60); // 5 days
 
 /**
  * Given an object containing all the necessary data,
- * (defined by the form in mod.html) this function
+ * (defined by the form in mod_form.php) this function
  * will create a new instance and return the id number
  * of the new instance.
  *
@@ -67,6 +59,8 @@ define("QUIZ_MAX_EVENT_LENGTH", 5*24*60*60);   // 5 days maximum
  *          false or a string error message on failure.
  */
 function quiz_add_instance($quiz) {
+    global $DB;
+    $cmid = $quiz->coursemodule;
 
     // Process the options from the form.
     $quiz->created = time();
@@ -77,9 +71,7 @@ function quiz_add_instance($quiz) {
     }
 
     // Try to store it in the database.
-    if (!$quiz->id = insert_record("quiz", $quiz)) {
-        return false;
-    }
+    $quiz->id = $DB->insert_record('quiz', $quiz);
 
     // Do the processing required after an add or an update.
     quiz_after_add_or_update($quiz);
@@ -89,13 +81,14 @@ function quiz_add_instance($quiz) {
 
 /**
  * Given an object containing all the necessary data,
- * (defined by the form in mod.html) this function
+ * (defined by the form in mod_form.php) this function
  * will update an existing instance with new data.
  *
  * @param object $quiz the data that came from the form.
  * @return mixed true on success, false or a string error message on failure.
  */
-function quiz_update_instance($quiz) {
+function quiz_update_instance($quiz, $mform) {
+    global $CFG, $DB;
 
     // Process the options from the form.
     $result = quiz_process_options($quiz);
@@ -103,115 +96,281 @@ function quiz_update_instance($quiz) {
         return $result;
     }
 
+    $oldquiz = $DB->get_record('quiz', array('id' => $quiz->instance));
+
+    // Repaginate, if asked to.
+    if (!$quiz->shufflequestions && !empty($quiz->repaginatenow)) {
+        require_once($CFG->dirroot . '/mod/quiz/locallib.php');
+        $quiz->questions = quiz_repaginate(quiz_clean_layout($oldquiz->questions, true),
+                $quiz->questionsperpage);
+    }
+    unset($quiz->repaginatenow);
+
     // Update the database.
     $quiz->id = $quiz->instance;
-    if (!update_record("quiz", $quiz)) {
-        return false;  // some error occurred
-    }
+    $DB->update_record('quiz', $quiz);
 
     // Do the processing required after an add or an update.
     quiz_after_add_or_update($quiz);
 
+    if ($oldquiz->grademethod != $quiz->grademethod) {
+        require_once($CFG->dirroot . '/mod/quiz/locallib.php');
+        $quiz->sumgrades = $oldquiz->sumgrades;
+        $quiz->grade = $oldquiz->grade;
+        quiz_update_all_final_grades($quiz);
+        quiz_update_grades($quiz);
+    }
+
     // Delete any previous preview attempts
-    delete_records('quiz_attempts', 'preview', '1', 'quiz', $quiz->id);
+    quiz_delete_previews($quiz);
 
     return true;
 }
 
+/**
+ * Given an ID of an instance of this module,
+ * this function will permanently delete the instance
+ * and any data that depends on it.
+ *
+ * @param int $id the id of the quiz to delete.
+ * @return bool success or failure.
+ */
 function quiz_delete_instance($id) {
-/// Given an ID of an instance of this module,
-/// this function will permanently delete the instance
-/// and any data that depends on it.
+    global $DB;
 
-    if (! $quiz = get_record("quiz", "id", "$id")) {
-        return false;
-    }
+    $quiz = $DB->get_record('quiz', array('id' => $id), '*', MUST_EXIST);
 
-    $result = true;
+    quiz_delete_all_attempts($quiz);
+    quiz_delete_all_overrides($quiz);
 
-    if ($attempts = get_records("quiz_attempts", "quiz", "$quiz->id")) {
-        // TODO: this should use the delete_attempt($attempt->uniqueid) function in questionlib.php
-        // require_once($CFG->libdir.'/questionlib.php');
-        foreach ($attempts as $attempt) {
-            if (! delete_records("question_states", "attempt", "$attempt->uniqueid")) {
-                $result = false;
+    $DB->delete_records('quiz_question_instances', array('quiz' => $quiz->id));
+    $DB->delete_records('quiz_feedback', array('quizid' => $quiz->id));
+
+    $events = $DB->get_records('event', array('modulename' => 'quiz', 'instance' => $quiz->id));
+    foreach ($events as $event) {
+        $event = calendar_event::load($event);
+        $event->delete();
             }
-            if (! delete_records("question_sessions", "attemptid", "$attempt->uniqueid")) {
-                $result = false;
+
+    quiz_grade_item_delete($quiz);
+    $DB->delete_records('quiz', array('id' => $quiz->id));
+
+    return true;
+}
+
+/**
+ * Deletes a quiz override from the database and clears any corresponding calendar events
+ *
+ * @param object $quiz The quiz object.
+ * @param int $overrideid The id of the override being deleted
+ * @return bool true on success
+ */
+function quiz_delete_override($quiz, $overrideid) {
+    global $DB;
+
+    $override = $DB->get_record('quiz_overrides', array('id' => $overrideid), '*', MUST_EXIST);
+
+    // Delete the events
+    $events = $DB->get_records('event', array('modulename' => 'quiz',
+            'instance' => $quiz->id, 'groupid' => (int)$override->groupid,
+            'userid' => (int)$override->userid));
+    foreach ($events as $event) {
+        $eventold = calendar_event::load($event);
+        $eventold->delete();
             }
+
+    $DB->delete_records('quiz_overrides', array('id' => $overrideid));
+    return true;
+}
+
+/**
+ * Deletes all quiz overrides from the database and clears any corresponding calendar events
+ *
+ * @param object $quiz The quiz object.
+ */
+function quiz_delete_all_overrides($quiz) {
+    global $DB;
+
+    $overrides = $DB->get_records('quiz_overrides', array('quiz' => $quiz->id), 'id');
+    foreach ($overrides as $override) {
+        quiz_delete_override($quiz, $override->id);
         }
+}
+
+/**
+ * Updates a quiz object with override information for a user.
+ *
+ * Algorithm:  For each quiz setting, if there is a matching user-specific override,
+ *   then use that otherwise, if there are group-specific overrides, return the most
+ *   lenient combination of them.  If neither applies, leave the quiz setting unchanged.
+ *
+ *   Special case: if there is more than one password that applies to the user, then
+ *   quiz->extrapasswords will contain an array of strings giving the remaining
+ *   passwords.
+ *
+ * @param object $quiz The quiz object.
+ * @param int $userid The userid.
+ * @return object $quiz The updated quiz object.
+ */
+function quiz_update_effective_access($quiz, $userid) {
+    global $DB;
+
+    // check for user override
+    $override = $DB->get_record('quiz_overrides', array('quiz' => $quiz->id, 'userid' => $userid));
+
+    if (!$override) {
+        $override = new stdClass();
+        $override->timeopen = null;
+        $override->timeclose = null;
+        $override->timelimit = null;
+        $override->attempts = null;
+        $override->password = null;
     }
 
-    $tables_to_purge = array(
-        'quiz_attempts' => 'quiz',
-        'quiz_grades' => 'quiz',
-        'quiz_question_instances' => 'quiz',
-        'quiz_grades' => 'quiz',
-        'quiz_feedback' => 'quizid',
-        'quiz' => 'id'
-    );
-    foreach ($tables_to_purge as $table => $keyfield) {
-        if (!delete_records($table, $keyfield, $quiz->id)) {
-            $result = false;
+    // check for group overrides
+    $groupings = groups_get_user_groups($quiz->course, $userid);
+
+    if (!empty($groupings[0])) {
+        // Select all overrides that apply to the User's groups
+        list($extra, $params) = $DB->get_in_or_equal(array_values($groupings[0]));
+        $sql = "SELECT * FROM {quiz_overrides}
+                WHERE groupid $extra AND quiz = ?";
+        $params[] = $quiz->id;
+        $records = $DB->get_records_sql($sql, $params);
+
+        // Combine the overrides
+        $opens = array();
+        $closes = array();
+        $limits = array();
+        $attempts = array();
+        $passwords = array();
+
+        foreach ($records as $gpoverride) {
+            if (isset($gpoverride->timeopen)) {
+                $opens[] = $gpoverride->timeopen;
         }
+            if (isset($gpoverride->timeclose)) {
+                $closes[] = $gpoverride->timeclose;
     }
-
-    $pagetypes = page_import_types('mod/quiz/');
-    foreach($pagetypes as $pagetype) {
-        if(!blocks_delete_all_on_page($pagetype, $quiz->id)) {
-            $result = false;
+            if (isset($gpoverride->timelimit)) {
+                $limits[] = $gpoverride->timelimit;
         }
+            if (isset($gpoverride->attempts)) {
+                $attempts[] = $gpoverride->attempts;
+            }
+            if (isset($gpoverride->password)) {
+                $passwords[] = $gpoverride->password;
+            }
+        }
+        // If there is a user override for a setting, ignore the group override
+        if (is_null($override->timeopen) && count($opens)) {
+            $override->timeopen = min($opens);
+        }
+        if (is_null($override->timeclose) && count($closes)) {
+            $override->timeclose = max($closes);
+        }
+        if (is_null($override->timelimit) && count($limits)) {
+            $override->timelimit = max($limits);
+        }
+        if (is_null($override->attempts) && count($attempts)) {
+            $override->attempts = max($attempts);
+        }
+        if (is_null($override->password) && count($passwords)) {
+            $override->password = array_shift($passwords);
+            if (count($passwords)) {
+                $override->extrapasswords = $passwords;
+            }
+        }
+
     }
 
-    if ($events = get_records_select('event', "modulename = 'quiz' and instance = '$quiz->id'")) {
-        foreach($events as $event) {
-            delete_event($event->id);
+    // merge with quiz defaults
+    $keys = array('timeopen', 'timeclose', 'timelimit', 'attempts', 'password', 'extrapasswords');
+    foreach ($keys as $key) {
+        if (isset($override->{$key})) {
+            $quiz->{$key} = $override->{$key};
         }
     }
 
-    quiz_grade_item_delete($quiz);
+    return $quiz;
+}
 
-    return $result;
+/**
+ * Delete all the attempts belonging to a quiz.
+ *
+ * @param object $quiz The quiz object.
+ */
+function quiz_delete_all_attempts($quiz) {
+    global $CFG, $DB;
+    require_once($CFG->dirroot . '/mod/quiz/locallib.php');
+    question_engine::delete_questions_usage_by_activities(new qubaids_for_quiz($quiz->id));
+    $DB->delete_records('quiz_attempts', array('quiz' => $quiz->id));
+    $DB->delete_records('quiz_grades', array('quiz' => $quiz->id));
 }
 
 /**
  * Get the best current grade for a particular user in a quiz.
  *
- * @param object $quiz the quiz object.
- * @param integer $userid the id of the user.
- * @return float the user's current grade for this quiz.
+ * @param object $quiz the quiz settings.
+ * @param int $userid the id of the user.
+ * @return float the user's current grade for this quiz, or null if this user does
+ * not have a grade on this quiz.
  */
 function quiz_get_best_grade($quiz, $userid) {
-    $grade = get_field('quiz_grades', 'grade', 'quiz', $quiz->id, 'userid', $userid);
+    global $DB;
+    $grade = $DB->get_field('quiz_grades', 'grade',
+            array('quiz' => $quiz->id, 'userid' => $userid));
 
-    // Need to detect errors/no result, without catching 0 scores.
-    if (is_numeric($grade)) {
-        return $grade + 0;
-    } else {
-        return NULL;
+    // Need to detect errors/no result, without catching 0 grades.
+    if ($grade === false) {
+        return null;
     }
+
+    return $grade + 0; // Convert to number.
+}
+
+/**
+ * Is this a graded quiz? If this method returns true, you can assume that
+ * $quiz->grade and $quiz->sumgrades are non-zero (for example, if you want to
+ * divide by them).
+ *
+ * @param object $quiz a row from the quiz table.
+ * @return bool whether this is a graded quiz.
+ */
+function quiz_has_grades($quiz) {
+    return $quiz->grade >= 0.000005 && $quiz->sumgrades >= 0.000005;
 }
 
+/**
+ * Return a small object with summary information about what a
+ * user has done with a given particular instance of this module
+ * Used for user activity reports.
+ * $return->time = the time they did it
+ * $return->info = a short text description
+ *
+ * @param object $course
+ * @param object $user
+ * @param object $mod
+ * @param object $quiz
+ * @return object|null
+ */
 function quiz_user_outline($course, $user, $mod, $quiz) {
-/// Return a small object with summary information about what a
-/// user has done with a given particular instance of this module
-/// Used for user activity reports.
-/// $return->time = the time they did it
-/// $return->info = a short text description
-    global $CFG;
+    global $DB, $CFG;
     require_once("$CFG->libdir/gradelib.php");
     $grades = grade_get_grades($course->id, 'mod', 'quiz', $quiz->id, $user->id);
+
     if (empty($grades->items[0]->grades)) {
         return null;
     } else {
         $grade = reset($grades->items[0]->grades);
     }
 
-    $result = new stdClass;
+    $result = new stdClass();
     $result->info = get_string('grade') . ': ' . $grade->str_long_grade;
 
     //datesubmitted == time created. dategraded == time modified or time overridden
     //if grade was last modified by the user themselves use date graded. Otherwise use date submitted
+    //TODO: move this copied & pasted code somewhere in the grades API. See MDL-26704
     if ($grade->usermodified == $user->id || empty($grade->datesubmitted)) {
         $result->time = $grade->dategraded;
     } else {
@@ -221,27 +380,39 @@ function quiz_user_outline($course, $user, $mod, $quiz) {
     return $result;
 }
 
+/**
+ * Print a detailed representation of what a  user has done with
+ * a given particular instance of this module, for user activity reports.
+ *
+ * @global object
+ * @param object $course
+ * @param object $user
+ * @param object $mod
+ * @param object $quiz
+ * @return bool
+ */
 function quiz_user_complete($course, $user, $mod, $quiz) {
-/// Print a detailed representation of what a  user has done with
-/// a given particular instance of this module, for user activity reports.
-    global $CFG;
+    global $DB, $CFG, $OUTPUT;
     require_once("$CFG->libdir/gradelib.php");
+
     $grades = grade_get_grades($course->id, 'mod', 'quiz', $quiz->id, $user->id);
     if (!empty($grades->items[0]->grades)) {
         $grade = reset($grades->items[0]->grades);
-        echo '<p>'.get_string('grade').': '.$grade->str_long_grade.'</p>';
+        echo $OUTPUT->container(get_string('grade').': '.$grade->str_long_grade);
         if ($grade->str_feedback) {
-            echo '<p>'.get_string('feedback').': '.$grade->str_feedback.'</p>';
+            echo $OUTPUT->container(get_string('feedback').': '.$grade->str_feedback);
         }
     }
 
-    if ($attempts = get_records_select('quiz_attempts', "userid='$user->id' AND quiz='$quiz->id'", 'attempt ASC')) {
+    if ($attempts = $DB->get_records('quiz_attempts',
+            array('userid' => $user->id, 'quiz' => $quiz->id), 'attempt')) {
         foreach ($attempts as $attempt) {
             echo get_string('attempt', 'quiz').' '.$attempt->attempt.': ';
             if ($attempt->timefinish == 0) {
                 print_string('unfinished');
             } else {
-                echo round($attempt->sumgrades, $quiz->decimalpoints).'/'.$quiz->sumgrades;
+                echo quiz_format_grade($quiz, $attempt->sumgrades) . '/' .
+                        quiz_format_grade($quiz, $quiz->sumgrades);
             }
             echo ' - '.userdate($attempt->timemodified).'<br />';
         }
@@ -252,23 +423,27 @@ function quiz_user_complete($course, $user, $mod, $quiz) {
     return true;
 }
 
+/**
+ * Function to be run periodically according to the moodle cron
+ * This function searches for things that need to be done, such
+ * as sending out mail, toggling flags etc ...
+ *
+ * @return bool true
+ */
 function quiz_cron() {
-/// Function to be run periodically according to the moodle cron
-/// This function searches for things that need to be done, such
-/// as sending out mail, toggling flags etc ...
-
-    global $CFG;
-
     return true;
 }
 
 /**
- * @param integer $quizid the quiz id.
- * @param integer $userid the userid.
+ * @param int $quizid the quiz id.
+ * @param int $userid the userid.
  * @param string $status 'all', 'finished' or 'unfinished' to control
- * @return an array of all the user's attempts at this quiz. Returns an empty array if there are none.
+ * @param bool $includepreviews
+ * @return an array of all the user's attempts at this quiz. Returns an empty
+ *      array if there are none.
  */
 function quiz_get_user_attempts($quizid, $userid, $status = 'finished', $includepreviews = false) {
+    global $DB;
     $status_condition = array(
         'all' => '',
         'finished' => ' AND timefinish > 0',
@@ -278,13 +453,9 @@ function quiz_get_user_attempts($quizid, $userid, $status = 'finished', $include
     if (!$includepreviews) {
         $previewclause = ' AND preview = 0';
     }
-    if ($attempts = get_records_select('quiz_attempts',
-            "quiz = '$quizid' AND userid = '$userid'" . $previewclause . $status_condition[$status],
-            'attempt ASC')) {
-        return $attempts;
-    } else {
-        return array();
-    }
+    return $DB->get_records_select('quiz_attempts',
+            'quiz = ? AND userid = ?' . $previewclause . $status_condition[$status],
+            array($quizid, $userid), 'attempt ASC');
 }
 
 /**
@@ -292,82 +463,138 @@ function quiz_get_user_attempts($quizid, $userid, $status = 'finished', $include
  *
  * @param int $quizid id of quiz
  * @param int $userid optional user id, 0 means all users
- * @return array array of grades, false if none
+ * @return array array of grades, false if none. These are raw grades. They should
+ * be processed with quiz_format_grade for display.
  */
-function quiz_get_user_grades($quiz, $userid=0) {
-    global $CFG;
+function quiz_get_user_grades($quiz, $userid = 0) {
+    global $CFG, $DB;
 
-    $user = $userid ? "AND u.id = $userid" : "";
+    $params = array($quiz->id);
+    $usertest = '';
+    if ($userid) {
+        $params[] = $userid;
+        $usertest = 'AND u.id = ?';
+    }
+    return $DB->get_records_sql("
+            SELECT
+                u.id,
+                u.id AS userid,
+                qg.grade AS rawgrade,
+                qg.timemodified AS dategraded,
+                MAX(qa.timefinish) AS datesubmitted
+
+            FROM {user} u
+            JOIN {quiz_grades} qg ON u.id = qg.userid
+            JOIN {quiz_attempts} qa ON qa.quiz = qg.quiz AND qa.userid = u.id
+
+            WHERE qg.quiz = ?
+            $usertest
+            GROUP BY u.id, qg.grade, qg.timemodified", $params);
+}
 
-    $sql = "SELECT u.id, u.id AS userid, g.grade AS rawgrade, g.timemodified AS dategraded, MAX(a.timefinish) AS datesubmitted
-            FROM {$CFG->prefix}user u, {$CFG->prefix}quiz_grades g, {$CFG->prefix}quiz_attempts a
-            WHERE u.id = g.userid AND g.quiz = {$quiz->id} AND a.quiz = g.quiz AND u.id = a.userid
-                  $user
-            GROUP BY u.id, g.grade, g.timemodified";
+/**
+ * Round a grade to to the correct number of decimal places, and format it for display.
+ *
+ * @param object $quiz The quiz table row, only $quiz->decimalpoints is used.
+ * @param float $grade The grade to round.
+ * @return float
+ */
+function quiz_format_grade($quiz, $grade) {
+    if (is_null($grade)) {
+        return get_string('notyetgraded', 'quiz');
+    }
+    return format_float($grade, $quiz->decimalpoints);
+}
 
-    return get_records_sql($sql);
+/**
+ * Round a grade to to the correct number of decimal places, and format it for display.
+ *
+ * @param object $quiz The quiz table row, only $quiz->decimalpoints is used.
+ * @param float $grade The grade to round.
+ * @return float
+ */
+function quiz_format_question_grade($quiz, $grade) {
+    if (empty($quiz->questiondecimalpoints)) {
+        $quiz->questiondecimalpoints = -1;
+    }
+    if ($quiz->questiondecimalpoints == -1) {
+        return format_float($grade, $quiz->decimalpoints);
+    } else {
+        return format_float($grade, $quiz->questiondecimalpoints);
+    }
 }
 
 /**
  * Update grades in central gradebook
  *
- * @param object $quiz null means all quizs
- * @param int $userid specific user only, 0 mean all
+ * @param object $quiz the quiz settings.
+ * @param int $userid specific user only, 0 means all users.
  */
-function quiz_update_grades($quiz=null, $userid=0, $nullifnone=true) {
-    global $CFG;
-    if (!function_exists('grade_update')) { //workaround for buggy PHP versions
+function quiz_update_grades($quiz, $userid = 0, $nullifnone = true) {
+    global $CFG, $DB;
         require_once($CFG->libdir.'/gradelib.php');
-    }
 
-    if ($quiz != null) {
-        if ($grades = quiz_get_user_grades($quiz, $userid)) {
+    if ($quiz->grade == 0) {
+        quiz_grade_item_update($quiz);
+
+    } else if ($grades = quiz_get_user_grades($quiz, $userid)) {
             quiz_grade_item_update($quiz, $grades);
 
-        } else if ($userid and $nullifnone) {
-            $grade = new object();
+    } else if ($userid && $nullifnone) {
+        $grade = new stdClass();
             $grade->userid   = $userid;
-            $grade->rawgrade = NULL;
+        $grade->rawgrade = null;
             quiz_grade_item_update($quiz, $grade);
 
         } else {
             quiz_grade_item_update($quiz);
         }
+}
 
-    } else {
-        $sql = "SELECT a.*, cm.idnumber as cmidnumber, a.course as courseid
-                  FROM {$CFG->prefix}quiz a, {$CFG->prefix}course_modules cm, {$CFG->prefix}modules m
+/**
+ * Update all grades in gradebook.
+ */
+function quiz_upgrade_grades() {
+    global $DB;
+
+    $sql = "SELECT COUNT('x')
+              FROM {quiz} a, {course_modules} cm, {modules} m
                  WHERE m.name='quiz' AND m.id=cm.module AND cm.instance=a.id";
-        if ($rs = get_recordset_sql($sql)) {
-            while ($quiz = rs_fetch_next_record($rs)) {
-                if ($quiz->grade != 0) {
+    $count = $DB->count_records_sql($sql);
+
+    $sql = "SELECT a.*, cm.idnumber AS cmidnumber, a.course AS courseid
+              FROM {quiz} a, {course_modules} cm, {modules} m
+             WHERE m.name='quiz' AND m.id=cm.module AND cm.instance=a.id";
+    $rs = $DB->get_recordset_sql($sql);
+    if ($rs->valid()) {
+        $pbar = new progress_bar('quizupgradegrades', 500, true);
+        $i=0;
+        foreach ($rs as $quiz) {
+            $i++;
+            upgrade_set_timeout(60*5); // set up timeout, may also abort execution
                     quiz_update_grades($quiz, 0, false);
-                } else {
-                    quiz_grade_item_update($quiz);
-                }
-            }
-            rs_close($rs);
+            $pbar->update($i, $count, "Updating Quiz grades ($i/$count).");
         }
     }
+    $rs->close();
 }
 
 /**
  * Create grade item for given quiz
  *
  * @param object $quiz object with extra cmidnumber
- * @param mixed optional array/object of grade(s); 'reset' means reset grades in gradebook
+ * @param mixed $grades optional array/object of grade(s); 'reset' means reset grades in gradebook
  * @return int 0 if ok, error code otherwise
  */
-function quiz_grade_item_update($quiz, $grades=NULL) {
-    global $CFG;
-    if (!function_exists('grade_update')) { //workaround for buggy PHP versions
+function quiz_grade_item_update($quiz, $grades = null) {
+    global $CFG, $OUTPUT;
+    require_once($CFG->dirroot . '/mod/quiz/locallib.php');
         require_once($CFG->libdir.'/gradelib.php');
-    }
 
-    if (array_key_exists('cmidnumber', $quiz)) { //it may not be always present
-        $params = array('itemname'=>$quiz->name, 'idnumber'=>$quiz->cmidnumber);
+    if (array_key_exists('cmidnumber', $quiz)) { // may not be always present
+        $params = array('itemname' => $quiz->name, 'idnumber' => $quiz->cmidnumber);
     } else {
-        $params = array('itemname'=>$quiz->name);
+        $params = array('itemname' => $quiz->name);
     }
 
     if ($quiz->grade > 0) {
@@ -379,18 +606,23 @@ function quiz_grade_item_update($quiz, $grades=NULL) {
         $params['gradetype'] = GRADE_TYPE_NONE;
     }
 
-/* description by TJ:
-1/ If the quiz is set to not show scores while the quiz is still open, and is set to show scores after
-   the quiz is closed, then create the grade_item with a show-after date that is the quiz close date.
-2/ If the quiz is set to not show scores at either of those times, create the grade_item as hidden.
-3/ If the quiz is set to show scores, create the grade_item visible.
-*/
-    if (!($quiz->review & QUIZ_REVIEW_SCORES & QUIZ_REVIEW_CLOSED)
-    and !($quiz->review & QUIZ_REVIEW_SCORES & QUIZ_REVIEW_OPEN)) {
+    // description by TJ:
+    // 1. If the quiz is set to not show grades while the quiz is still open,
+    //    and is set to show grades after the quiz is closed, then create the
+    //    grade_item with a show-after date that is the quiz close date.
+    // 2. If the quiz is set to not show grades at either of those times,
+    //    create the grade_item as hidden.
+    // 3. If the quiz is set to show grades, create the grade_item visible.
+    $openreviewoptions = mod_quiz_display_options::make_from_quiz($quiz,
+            mod_quiz_display_options::LATER_WHILE_OPEN);
+    $closedreviewoptions = mod_quiz_display_options::make_from_quiz($quiz,
+            mod_quiz_display_options::AFTER_CLOSE);
+    if ($openreviewoptions->marks < question_display_options::MARK_AND_MAX &&
+            $closedreviewoptions->marks < question_display_options::MARK_AND_MAX) {
         $params['hidden'] = 1;
 
-    } else if ( ($quiz->review & QUIZ_REVIEW_SCORES & QUIZ_REVIEW_CLOSED)
-           and !($quiz->review & QUIZ_REVIEW_SCORES & QUIZ_REVIEW_OPEN)) {
+    } else if ($openreviewoptions->marks < question_display_options::MARK_AND_MAX &&
+            $closedreviewoptions->marks >= question_display_options::MARK_AND_MAX) {
         if ($quiz->timeclose) {
             $params['hidden'] = $quiz->timeclose;
         } else {
@@ -399,13 +631,14 @@ function quiz_grade_item_update($quiz, $grades=NULL) {
 
     } else {
         // a) both open and closed enabled
-        // b) open enabled, closed disabled - we can not "hide after", grades are kept visible even after closing
+        // b) open enabled, closed disabled - we can not "hide after",
+        //    grades are kept visible even after closing
         $params['hidden'] = 0;
     }
 
     if ($grades  === 'reset') {
         $params['reset'] = true;
-        $grades = NULL;
+        $grades = null;
     }
     
     $gradebook_grades = grade_get_grades($quiz->course, 'mod', 'quiz', $quiz->id);
@@ -415,15 +648,16 @@ function quiz_grade_item_update($quiz, $grades=NULL) {
             $confirm_regrade = optional_param('confirm_regrade', 0, PARAM_INT);
             if (!$confirm_regrade) {
                 $message = get_string('gradeitemislocked', 'grades');
-                $back_link = $CFG->wwwroot . '/mod/quiz/report.php?q=' . $quiz->id . '&amp;mode=overview';
+                $back_link = $CFG->wwwroot . '/mod/quiz/report.php?q=' . $quiz->id .
+                        '&amp;mode=overview';
                 $regrade_link = qualified_me() . '&amp;confirm_regrade=1';
-                print_box_start('generalbox', 'notice');
+                echo $OUTPUT->box_start('generalbox', 'notice');
                 echo '<p>'. $message .'</p>';
-                echo '<div class="buttons">';
-                print_single_button($regrade_link, null, get_string('regradeanyway', 'grades'), 'post', $CFG->framename);
-                print_single_button($back_link,  null,  get_string('cancel'),  'post',  $CFG->framename);
-                echo '</div>';
-                print_box_end();
+                echo $OUTPUT->container_start('buttons');
+                echo $OUTPUT->single_button($regrade_link, get_string('regradeanyway', 'grades'));
+                echo $OUTPUT->single_button($back_link,  get_string('cancel'));
+                echo $OUTPUT->container_end();
+                echo $OUTPUT->box_end();
     
                 return GRADE_UPDATE_ITEM_LOCKED;
             }
@@ -441,121 +675,56 @@ function quiz_grade_item_update($quiz, $grades=NULL) {
  */
 function quiz_grade_item_delete($quiz) {
     global $CFG;
-    require_once($CFG->libdir.'/gradelib.php');
+    require_once($CFG->libdir . '/gradelib.php');
 
-    return grade_update('mod/quiz', $quiz->course, 'mod', 'quiz', $quiz->id, 0, NULL, array('deleted'=>1));
+    return grade_update('mod/quiz', $quiz->course, 'mod', 'quiz', $quiz->id, 0,
+            null, array('deleted' => 1));
 }
 
+/**
+ * Returns an array of users who have data in a given quiz
+ *
+ * @todo: deprecated - to be deleted in 2.2
+ *
+ * @param int $quizid the quiz id.
+ * @return array of userids.
+ */
 function quiz_get_participants($quizid) {
-/// Returns an array of users who have data in a given quiz
-/// (users with records in quiz_attempts and quiz_question_versions)
-
-    global $CFG;
-
-    //Get users from attempts
-    $us_attempts = get_records_sql("SELECT DISTINCT u.id, u.id
-                                    FROM {$CFG->prefix}user u,
-                                         {$CFG->prefix}quiz_attempts a
-                                    WHERE a.quiz = '$quizid' and
-                                          u.id = a.userid");
-
-    //Get users from question_versions
-    $us_versions = get_records_sql("SELECT DISTINCT u.id, u.id
-                                    FROM {$CFG->prefix}user u,
-                                         {$CFG->prefix}quiz_question_versions v
-                                    WHERE v.quiz = '$quizid' and
-                                          u.id = v.userid");
-
-    //Add us_versions to us_attempts
-    if ($us_versions) {
-        foreach ($us_versions as $us_version) {
-            $us_attempts[$us_version->id] = $us_version;
-        }
-    }
-    //Return us_attempts array (it contains an array of unique users)
-    return ($us_attempts);
+    global $CFG, $DB;
 
+    return $DB->get_records_sql('
+            SELECT DISTINCT userid, userid
+            JOIN {quiz_attempts} qa
+            WHERE a.quiz = ?', array($quizid));
 }
 
+/**
+ * This standard function will check all instances of this module
+ * and make sure there are up-to-date events created for each of them.
+ * If courseid = 0, then every quiz event in the site is checked, else
+ * only quiz events belonging to the course specified are checked.
+ * This function is used, in its new format, by restore_refresh_events()
+ *
+ * @param int $courseid
+ * @return bool
+ */
 function quiz_refresh_events($courseid = 0) {
-// This standard function will check all instances of this module
-// and make sure there are up-to-date events created for each of them.
-// If courseid = 0, then every quiz event in the site is checked, else
-// only quiz events belonging to the course specified are checked.
-// This function is used, in its new format, by restore_refresh_events()
+    global $DB;
 
     if ($courseid == 0) {
-        if (! $quizzes = get_records("quiz")) {
+        if (!$quizzes = $DB->get_records('quiz')) {
             return true;
         }
     } else {
-        if (! $quizzes = get_records("quiz", "course", $courseid)) {
+        if (!$quizzes = $DB->get_records('quiz', array('course' => $courseid))) {
             return true;
         }
     }
-    $moduleid = get_field('modules', 'id', 'name', 'quiz');
 
     foreach ($quizzes as $quiz) {
-        $event = NULL;
-        $event2 = NULL;
-        $event2old = NULL;
-
-        if ($events = get_records_select('event', "modulename = 'quiz' AND instance = '$quiz->id' ORDER BY timestart")) {
-            $event = array_shift($events);
-            if (!empty($events)) {
-                $event2old = array_shift($events);
-                if (!empty($events)) {
-                    foreach ($events as $badevent) {
-                        delete_records('event', 'id', $badevent->id);
-                    }
-                }
-            }
-        }
-
-        $event->name        = addslashes($quiz->name);
-        $event->description = addslashes($quiz->intro);
-        $event->courseid    = $quiz->course;
-        $event->groupid     = 0;
-        $event->userid      = 0;
-        $event->modulename  = 'quiz';
-        $event->instance    = $quiz->id;
-        $event->visible     = instance_is_visible('quiz', $quiz);
-        $event->timestart   = $quiz->timeopen;
-        $event->eventtype   = 'open';
-        $event->timeduration = ($quiz->timeclose - $quiz->timeopen);
-
-        if ($event->timeduration > QUIZ_MAX_EVENT_LENGTH) {  /// Set up two events
-
-            $event2 = $event;
-
-            $event->name         = addslashes($quiz->name).' ('.get_string('quizopens', 'quiz').')';
-            $event->timeduration = 0;
-
-            $event2->name        = addslashes($quiz->name).' ('.get_string('quizcloses', 'quiz').')';
-            $event2->timestart   = $quiz->timeclose;
-            $event2->eventtype   = 'close';
-            $event2->timeduration = 0;
-
-            if (empty($event2old->id)) {
-                unset($event2->id);
-                add_event($event2);
-            } else {
-                $event2->id = $event2old->id;
-                update_event($event2);
-            }
-        } else if (!empty($event2old->id)) {
-            delete_event($event2old->id);
-        }
-
-        if (empty($event->id)) {
-            if (!empty($event->timestart)) {
-                add_event($event);
-            }
-        } else {
-            update_event($event);
+        quiz_update_events($quiz);
         }
 
-    }
     return true;
 }
 
@@ -564,46 +733,51 @@ function quiz_refresh_events($courseid = 0) {
  */
 function quiz_get_recent_mod_activity(&$activities, &$index, $timestart,
         $courseid, $cmid, $userid = 0, $groupid = 0) {
-    global $CFG, $COURSE, $USER;
+    global $CFG, $COURSE, $USER, $DB;
     require_once('locallib.php');
 
     if ($COURSE->id == $courseid) {
         $course = $COURSE;
     } else {
-        $course = get_record('course', 'id', $courseid);
+        $course = $DB->get_record('course', array('id' => $courseid));
     }
 
     $modinfo =& get_fast_modinfo($course);
 
     $cm = $modinfo->cms[$cmid];
-    $quiz = get_record('quiz', 'id', $cm->instance);
+    $quiz = $DB->get_record('quiz', array('id' => $cm->instance));
 
     if ($userid) {
-        $userselect = "AND u.id = $userid";
+        $userselect = "AND u.id = :userid";
+        $params['userid'] = $userid;
     } else {
         $userselect = '';
     }
 
     if ($groupid) {
-        $groupselect = "AND gm.groupid = $groupid";
-        $groupjoin   = "JOIN {$CFG->prefix}groups_members gm ON  gm.userid = u.id";
+        $groupselect = 'AND gm.groupid = :groupid';
+        $groupjoin   = 'JOIN {groups_members} gm ON  gm.userid=u.id';
+        $params['groupid'] = $groupid;
     } else {
         $groupselect = '';
         $groupjoin   = '';
     }
 
-    if (!$attempts = get_records_sql("
+    $params['timestart'] = $timestart;
+    $params['quizid'] = $quiz->id;
+
+    if (!$attempts = $DB->get_records_sql("
               SELECT qa.*,
                      u.firstname, u.lastname, u.email, u.picture, u.imagealt
-                FROM {$CFG->prefix}quiz_attempts qa
-                     JOIN {$CFG->prefix}user u ON u.id = qa.userid
+                FROM {quiz_attempts} qa
+                     JOIN {user} u ON u.id = qa.userid
                      $groupjoin
-               WHERE qa.timefinish > $timestart
-                 AND qa.quiz = $quiz->id
+               WHERE qa.timefinish > :timestart
+                 AND qa.quiz = :quizid
                  AND qa.preview = 0
                      $userselect
                      $groupselect
-            ORDER BY qa.timefinish ASC")) {
+            ORDER BY qa.timefinish ASC", $params)) {
         return;
     }
 
@@ -614,13 +788,12 @@ function quiz_get_recent_mod_activity(&$activities, &$index, $timestart,
     $groupmode       = groups_get_activity_groupmode($cm, $course);
 
     if (is_null($modinfo->groups)) {
-        $modinfo->groups = groups_get_user_groups($course->id); // load all my groups and cache it in modinfo
+        // load all my groups and cache it in modinfo
+        $modinfo->groups = groups_get_user_groups($course->id);
     }
 
-    $hasgrades = $quiz->grade != 0 && $quiz->sumgrades != 0;
-
     $usersgroups = null;
-    $aname = format_string($cm->name,true);
+    $aname = format_string($cm->name, true);
     foreach ($attempts as $attempt) {
         if ($attempt->userid != $USER->id) {
             if (!$grader) {
@@ -644,9 +817,9 @@ function quiz_get_recent_mod_activity(&$activities, &$index, $timestart,
             }
         }
 
-        $options = quiz_get_reviewoptions($quiz, $attempt, $context);
+        $options = quiz_get_review_options($quiz, $attempt, $context);
 
-        $tmpactivity = new stdClass;
+        $tmpactivity = new stdClass();
 
         $tmpactivity->type       = 'quiz';
         $tmpactivity->cmid       = $cm->id;
@@ -656,38 +829,39 @@ function quiz_get_recent_mod_activity(&$activities, &$index, $timestart,
 
         $tmpactivity->content->attemptid = $attempt->id;
         $tmpactivity->content->attempt   = $attempt->attempt;
-        if ($hasgrades && $options->scores) {
-            $tmpactivity->content->sumgrades = round($attempt->sumgrades, $quiz->decimalpoints);
-            $tmpactivity->content->maxgrade  = round($quiz->sumgrades, $quiz->decimalpoints);
+        if (quiz_has_grades($quiz) && $options->marks >= question_display_options::MARK_AND_MAX) {
+            $tmpactivity->content->sumgrades = quiz_format_grade($quiz, $attempt->sumgrades);
+            $tmpactivity->content->maxgrade  = quiz_format_grade($quiz, $quiz->sumgrades);
         } else {
             $tmpactivity->content->sumgrades = null;
             $tmpactivity->content->maxgrade  = null;
         }
 
-        $tmpactivity->user->userid   = $attempt->userid;
+        $tmpactivity->user->id        = $attempt->userid;
+        $tmpactivity->user->firstname = $attempt->firstname;
+        $tmpactivity->user->lastname  = $attempt->lastname;
         $tmpactivity->user->fullname = fullname($attempt, $viewfullnames);
         $tmpactivity->user->picture  = $attempt->picture;
         $tmpactivity->user->imagealt = $attempt->imagealt;
+        $tmpactivity->user->email     = $attempt->email;
 
         $activities[$index++] = $tmpactivity;
     }
-
-  return;
 }
 
 function quiz_print_recent_mod_activity($activity, $courseid, $detail, $modnames) {
-    global $CFG;
+    global $CFG, $OUTPUT;
 
     echo '<table border="0" cellpadding="3" cellspacing="0" class="forum-recent">';
 
     echo '<tr><td class="userpicture" valign="top">';
-    print_user_picture($activity->user->userid, $courseid, $activity->user->picture);
+    echo $OUTPUT->user_picture($activity->user, array('courseid' => $courseid));
     echo '</td><td>';
 
     if ($detail) {
         $modname = $modnames[$activity->type];
         echo '<div class="title">';
-        echo '<img src="' . $CFG->modpixpath . '/' . $activity->type . '/icon.gif" '.
+        echo '<img src="' . $OUTPUT->pix_url('icon', $activity->type) . '" ' .
              'class="icon" alt="' . $modname . '" />';
         echo '<a href="' . $CFG->wwwroot . '/mod/quiz/view.php?id=' .
                 $activity->cmid . '">' . $activity->name . '</a>';
@@ -695,7 +869,7 @@ function quiz_print_recent_mod_activity($activity, $courseid, $detail, $modnames
     }
 
     echo '<div class="grade">';
-    echo  get_string('attempt', 'quiz') . ' ' . $activity->content->attempt;
+    echo  get_string('attempt', 'quiz', $activity->content->attempt);
     if (isset($activity->content->maxgrade)) {
         $grades = $activity->content->sumgrades . ' / ' . $activity->content->maxgrade;
         echo ': (<a href="' . $CFG->wwwroot . '/mod/quiz/review.php?attempt=' .
@@ -704,7 +878,7 @@ function quiz_print_recent_mod_activity($activity, $courseid, $detail, $modnames
     echo '</div>';
 
     echo '<div class="user">';
-    echo '<a href="' . $CFG->wwwroot . '/user/view.php?id=' . $activity->user->userid . 
+    echo '<a href="' . $CFG->wwwroot . '/user/view.php?id=' . $activity->user->id .
             '&amp;course=' . $courseid . '">' . $activity->user->fullname .
             '</a> - ' . userdate($activity->timestamp);
     echo '</div>';
@@ -716,32 +890,22 @@ function quiz_print_recent_mod_activity($activity, $courseid, $detail, $modnames
 
 /**
  * Pre-process the quiz options form data, making any necessary adjustments.
- * Called by add/update instance in this file, and the save code in admin/module.php.
+ * Called by add/update instance in this file.
  *
  * @param object $quiz The variables set on the form.
  */
-function quiz_process_options(&$quiz) {
+function quiz_process_options($quiz) {
     global $CFG;
+    require_once($CFG->dirroot . '/mod/quiz/locallib.php');
     require_once($CFG->libdir . '/questionlib.php');
 
     $quiz->timemodified = time();
 
-    // Quiz open time.
-    if (empty($quiz->timeopen)) {
-        $quiz->preventlate = 0;
-    }
-
     // Quiz name.
     if (!empty($quiz->name)) {
         $quiz->name = trim($quiz->name);
     }
 
-    // Time limit. (Get rid of it if the checkbox was not ticked.)
-    if (empty($quiz->timelimitenable)) {
-        $quiz->timelimit = 0;
-    }
-    $quiz->timelimit = round($quiz->timelimit);
-
     // Password field - different in form to stop browsers that remember passwords
     // getting confused.
     $quiz->password = $quiz->quizpassword;
@@ -751,10 +915,10 @@ function quiz_process_options(&$quiz) {
     if (isset($quiz->feedbacktext)) {
         // Clean up the boundary text.
         for ($i = 0; $i < count($quiz->feedbacktext); $i += 1) {
-            if (empty($quiz->feedbacktext[$i])) {
-                $quiz->feedbacktext[$i] = '';
+            if (empty($quiz->feedbacktext[$i]['text'])) {
+                $quiz->feedbacktext[$i]['text'] = '';
             } else {
-                $quiz->feedbacktext[$i] = trim($quiz->feedbacktext[$i]);
+                $quiz->feedbacktext[$i]['text'] = trim($quiz->feedbacktext[$i]['text']);
             }
         }
 
@@ -786,121 +950,59 @@ function quiz_process_options(&$quiz) {
         // Check there is nothing in the remaining unused fields.
         if (!empty($quiz->feedbackboundaries)) {
             for ($i = $numboundaries; $i < count($quiz->feedbackboundaries); $i += 1) {
-                if (!empty($quiz->feedbackboundaries[$i]) && trim($quiz->feedbackboundaries[$i]) != '') {
+                if (!empty($quiz->feedbackboundaries[$i]) &&
+                        trim($quiz->feedbackboundaries[$i]) != '') {
                     return get_string('feedbackerrorjunkinboundary', 'quiz', $i + 1);
                 }
             }
         }
         for ($i = $numboundaries + 1; $i < count($quiz->feedbacktext); $i += 1) {
-            if (!empty($quiz->feedbacktext[$i]) && trim($quiz->feedbacktext[$i]) != '') {
+            if (!empty($quiz->feedbacktext[$i]['text']) &&
+                    trim($quiz->feedbacktext[$i]['text']) != '') {
                 return get_string('feedbackerrorjunkinfeedback', 'quiz', $i + 1);
             }
         }
-        $quiz->feedbackboundaries[-1] = $quiz->grade + 1; // Needs to be bigger than $quiz->grade because of '<' test in quiz_feedback_for_grade().
+        // Needs to be bigger than $quiz->grade because of '<' test in quiz_feedback_for_grade().
+        $quiz->feedbackboundaries[-1] = $quiz->grade + 1;
         $quiz->feedbackboundaries[$numboundaries] = 0;
         $quiz->feedbackboundarycount = $numboundaries;
     }
 
-    // Settings that get combined to go into the optionflags column.
-    $quiz->optionflags = 0;
-    if (!empty($quiz->adaptive)) {
-        $quiz->optionflags |= QUESTION_ADAPTIVE;
-    }
-
-    // Settings that get combined to go into the review column.
-    $review = 0;
-    if (isset($quiz->responsesimmediately)) {
-        $review += (QUIZ_REVIEW_RESPONSES & QUIZ_REVIEW_IMMEDIATELY);
-        unset($quiz->responsesimmediately);
-    }
-    if (isset($quiz->responsesopen)) {
-        $review += (QUIZ_REVIEW_RESPONSES & QUIZ_REVIEW_OPEN);
-        unset($quiz->responsesopen);
-    }
-    if (isset($quiz->responsesclosed)) {
-        $review += (QUIZ_REVIEW_RESPONSES & QUIZ_REVIEW_CLOSED);
-        unset($quiz->responsesclosed);
-    }
-
-    if (isset($quiz->scoreimmediately)) {
-        $review += (QUIZ_REVIEW_SCORES & QUIZ_REVIEW_IMMEDIATELY);
-        unset($quiz->scoreimmediately);
-    }
-    if (isset($quiz->scoreopen)) {
-        $review += (QUIZ_REVIEW_SCORES & QUIZ_REVIEW_OPEN);
-        unset($quiz->scoreopen);
-    }
-    if (isset($quiz->scoreclosed)) {
-        $review += (QUIZ_REVIEW_SCORES & QUIZ_REVIEW_CLOSED);
-        unset($quiz->scoreclosed);
-    }
-
-    if (isset($quiz->feedbackimmediately)) {
-        $review += (QUIZ_REVIEW_FEEDBACK & QUIZ_REVIEW_IMMEDIATELY);
-        unset($quiz->feedbackimmediately);
-    }
-    if (isset($quiz->feedbackopen)) {
-        $review += (QUIZ_REVIEW_FEEDBACK & QUIZ_REVIEW_OPEN);
-        unset($quiz->feedbackopen);
-    }
-    if (isset($quiz->feedbackclosed)) {
-        $review += (QUIZ_REVIEW_FEEDBACK & QUIZ_REVIEW_CLOSED);
-        unset($quiz->feedbackclosed);
-    }
-
-    if (isset($quiz->answersimmediately)) {
-        $review += (QUIZ_REVIEW_ANSWERS & QUIZ_REVIEW_IMMEDIATELY);
-        unset($quiz->answersimmediately);
-    }
-    if (isset($quiz->answersopen)) {
-        $review += (QUIZ_REVIEW_ANSWERS & QUIZ_REVIEW_OPEN);
-        unset($quiz->answersopen);
-    }
-    if (isset($quiz->answersclosed)) {
-        $review += (QUIZ_REVIEW_ANSWERS & QUIZ_REVIEW_CLOSED);
-        unset($quiz->answersclosed);
-    }
-
-    if (isset($quiz->solutionsimmediately)) {
-        $review += (QUIZ_REVIEW_SOLUTIONS & QUIZ_REVIEW_IMMEDIATELY);
-        unset($quiz->solutionsimmediately);
-    }
-    if (isset($quiz->solutionsopen)) {
-        $review += (QUIZ_REVIEW_SOLUTIONS & QUIZ_REVIEW_OPEN);
-        unset($quiz->solutionsopen);
-    }
-    if (isset($quiz->solutionsclosed)) {
-        $review += (QUIZ_REVIEW_SOLUTIONS & QUIZ_REVIEW_CLOSED);
-        unset($quiz->solutionsclosed);
-    }
+    // Combing the individual settings into the review columns.
+    $quiz->reviewattempt = quiz_review_option_form_to_db($quiz, 'attempt');
+    $quiz->reviewcorrectness = quiz_review_option_form_to_db($quiz, 'correctness');
+    $quiz->reviewmarks = quiz_review_option_form_to_db($quiz, 'marks');
+    $quiz->reviewspecificfeedback = quiz_review_option_form_to_db($quiz, 'specificfeedback');
+    $quiz->reviewgeneralfeedback = quiz_review_option_form_to_db($quiz, 'generalfeedback');
+    $quiz->reviewrightanswer = quiz_review_option_form_to_db($quiz, 'rightanswer');
+    $quiz->reviewoverallfeedback = quiz_review_option_form_to_db($quiz, 'overallfeedback');
+    $quiz->reviewattempt |= mod_quiz_display_options::DURING;
+    $quiz->reviewoverallfeedback &= ~mod_quiz_display_options::DURING;
+}
 
-    if (isset($quiz->generalfeedbackimmediately)) {
-        $review += (QUIZ_REVIEW_GENERALFEEDBACK & QUIZ_REVIEW_IMMEDIATELY);
-        unset($quiz->generalfeedbackimmediately);
-    }
-    if (isset($quiz->generalfeedbackopen)) {
-        $review += (QUIZ_REVIEW_GENERALFEEDBACK & QUIZ_REVIEW_OPEN);
-        unset($quiz->generalfeedbackopen);
-    }
-    if (isset($quiz->generalfeedbackclosed)) {
-        $review += (QUIZ_REVIEW_GENERALFEEDBACK & QUIZ_REVIEW_CLOSED);
-        unset($quiz->generalfeedbackclosed);
-    }
+/**
+ * Helper function for {@link quiz_process_options()}.
+ * @param object $fromform the sumbitted form date.
+ * @param string $field one of the review option field names.
+ */
+function quiz_review_option_form_to_db($fromform, $field) {
+    static $times = array(
+        'during' => mod_quiz_display_options::DURING,
+        'immediately' => mod_quiz_display_options::IMMEDIATELY_AFTER,
+        'open' => mod_quiz_display_options::LATER_WHILE_OPEN,
+        'closed' => mod_quiz_display_options::AFTER_CLOSE,
+    );
 
-    if (isset($quiz->overallfeedbackimmediately)) {
-        $review += (QUIZ_REVIEW_OVERALLFEEDBACK & QUIZ_REVIEW_IMMEDIATELY);
-        unset($quiz->overallfeedbackimmediately);
-    }
-    if (isset($quiz->overallfeedbackopen)) {
-        $review += (QUIZ_REVIEW_OVERALLFEEDBACK & QUIZ_REVIEW_OPEN);
-        unset($quiz->overallfeedbackopen);
+    $review = 0;
+    foreach ($times as $whenname => $when) {
+        $fieldname = $field . $whenname;
+        if (isset($fromform->$fieldname)) {
+            $review |= $when;
+            unset($fromform->$fieldname);
     }
-    if (isset($quiz->overallfeedbackclosed)) {
-        $review += (QUIZ_REVIEW_OVERALLFEEDBACK & QUIZ_REVIEW_CLOSED);
-        unset($quiz->overallfeedbackclosed);
     }
 
-    $quiz->review = $review;
+    return $review;
 }
 
 /**
@@ -910,202 +1012,282 @@ function quiz_process_options(&$quiz) {
  * @param object $quiz the quiz object.
  */
 function quiz_after_add_or_update($quiz) {
+    global $DB;
+    $cmid = $quiz->coursemodule;
+
+    // we need to use context now, so we need to make sure all needed info is already in db
+    $DB->set_field('course_modules', 'instance', $quiz->id, array('id'=>$cmid));
+    $context = get_context_instance(CONTEXT_MODULE, $cmid);
 
     // Save the feedback
-    delete_records('quiz_feedback', 'quizid', $quiz->id);
+    $DB->delete_records('quiz_feedback', array('quizid' => $quiz->id));
 
-    for ($i = 0; $i <= $quiz->feedbackboundarycount; $i += 1) {
-        $feedback = new stdClass;
+    for ($i = 0; $i <= $quiz->feedbackboundarycount; $i++) {
+        $feedback = new stdClass();
         $feedback->quizid = $quiz->id;
-        $feedback->feedbacktext = $quiz->feedbacktext[$i];
+        $feedback->feedbacktext = $quiz->feedbacktext[$i]['text'];
+        $feedback->feedbacktextformat = $quiz->feedbacktext[$i]['format'];
         $feedback->mingrade = $quiz->feedbackboundaries[$i];
         $feedback->maxgrade = $quiz->feedbackboundaries[$i - 1];
-        if (!insert_record('quiz_feedback', $feedback, false)) {
-            return "Could not save quiz feedback.";
-        }
+        $feedback->id = $DB->insert_record('quiz_feedback', $feedback);
+        $feedbacktext = file_save_draft_area_files((int)$quiz->feedbacktext[$i]['itemid'],
+                $context->id, 'mod_quiz', 'feedback', $feedback->id,
+                array('subdirs' => false, 'maxfiles' => -1, 'maxbytes' => 0),
+                $quiz->feedbacktext[$i]['text']);
+        $DB->set_field('quiz_feedback', 'feedbacktext', $feedbacktext,
+                array('id' => $feedback->id));
     }
 
     // Update the events relating to this quiz.
-    // This is slightly inefficient, deleting the old events and creating new ones. However,
-    // there are at most two events, and this keeps the code simpler.
-    if ($events = get_records_select('event', "modulename = 'quiz' and instance = '$quiz->id'")) {
-        foreach($events as $event) {
-            delete_event($event->id);
-        }
+    quiz_update_events($quiz);
+
+    //update related grade item
+    quiz_grade_item_update($quiz);
+}
+
+/**
+ * This function updates the events associated to the quiz.
+ * If $override is non-zero, then it updates only the events
+ * associated with the specified override.
+ *
+ * @uses QUIZ_MAX_EVENT_LENGTH
+ * @param object $quiz the quiz object.
+ * @param object optional $override limit to a specific override
+ */
+function quiz_update_events($quiz, $override = null) {
+    global $DB;
+
+    // Load the old events relating to this quiz.
+    $conds = array('modulename'=>'quiz',
+                   'instance'=>$quiz->id);
+    if (!empty($override)) {
+        // only load events for this override
+        $conds['groupid'] = isset($override->groupid)?  $override->groupid : 0;
+        $conds['userid'] = isset($override->userid)?  $override->userid : 0;
+    }
+    $oldevents = $DB->get_records('event', $conds);
+
+    // Now make a todo list of all that needs to be updated
+    if (empty($override)) {
+        // We are updating the primary settings for the quiz, so we
+        // need to add all the overrides
+        $overrides = $DB->get_records('quiz_overrides', array('quiz' => $quiz->id));
+        // as well as the original quiz (empty override)
+        $overrides[] = new stdClass();
+    } else {
+        // Just do the one override
+        $overrides = array($override);
     }
 
-    $event = new stdClass;
+    foreach ($overrides as $current) {
+        $groupid   = isset($current->groupid)?  $current->groupid : 0;
+        $userid    = isset($current->userid)? $current->userid : 0;
+        $timeopen  = isset($current->timeopen)?  $current->timeopen : $quiz->timeopen;
+        $timeclose = isset($current->timeclose)? $current->timeclose : $quiz->timeclose;
+
+        // only add open/close events for an override if they differ from the quiz default
+        $addopen  = empty($current->id) || !empty($current->timeopen);
+        $addclose = empty($current->id) || !empty($current->timeclose);
+
+        $event = new stdClass();
     $event->description = $quiz->intro;
-    $event->courseid    = $quiz->course;
-    $event->groupid     = 0;
-    $event->userid      = 0;
+        // Events module won't show user events when the courseid is nonzero
+        $event->courseid    = ($userid) ? 0 : $quiz->course;
+        $event->groupid     = $groupid;
+        $event->userid      = $userid;
     $event->modulename  = 'quiz';
     $event->instance    = $quiz->id;
-    $event->timestart   = $quiz->timeopen;
-    $event->timeduration = $quiz->timeclose - $quiz->timeopen;
+        $event->timestart   = $timeopen;
+        $event->timeduration = max($timeclose - $timeopen, 0);
     $event->visible     = instance_is_visible('quiz', $quiz);
     $event->eventtype   = 'open';
 
-    if ($quiz->timeclose and $quiz->timeopen and $event->timeduration <= QUIZ_MAX_EVENT_LENGTH) {
+        // Determine the event name
+        if ($groupid) {
+            $params = new stdClass();
+            $params->quiz = $quiz->name;
+            $params->group = groups_get_group_name($groupid);
+            if ($params->group === false) {
+                // group doesn't exist, just skip it
+                continue;
+            }
+            $eventname = get_string('overridegroupeventname', 'quiz', $params);
+        } else if ($userid) {
+            $params = new stdClass();
+            $params->quiz = $quiz->name;
+            $eventname = get_string('overrideusereventname', 'quiz', $params);
+        } else {
+            $eventname = $quiz->name;
+        }
+        if ($addopen or $addclose) {
+            if ($timeclose and $timeopen and $event->timeduration <= QUIZ_MAX_EVENT_LENGTH) {
         // Single event for the whole quiz.
-        $event->name = $quiz->name;
-        add_event($event);
+                if ($oldevent = array_shift($oldevents)) {
+                    $event->id = $oldevent->id;
+                } else {
+                    unset($event->id);
+                }
+                $event->name = $eventname;
+                // calendar_event::create will reuse a db record if the id field is set
+                calendar_event::create($event);
     } else {
         // Separate start and end events.
         $event->timeduration  = 0;
-        if ($quiz->timeopen) {
-            $event->name = $quiz->name.' ('.get_string('quizopens', 'quiz').')';
-            add_event($event);
-            unset($event->id); // So we can use the same object for the close event.
+                if ($timeopen && $addopen) {
+                    if ($oldevent = array_shift($oldevents)) {
+                        $event->id = $oldevent->id;
+                    } else {
+                        unset($event->id);
         }
-        if ($quiz->timeclose) {
-            $event->name      = $quiz->name.' ('.get_string('quizcloses', 'quiz').')';
-            $event->timestart = $quiz->timeclose;
+                    $event->name = $eventname.' ('.get_string('quizopens', 'quiz').')';
+                    // calendar_event::create will reuse a db record if the id field is set
+                    calendar_event::create($event);
+                }
+                if ($timeclose && $addclose) {
+                    if ($oldevent = array_shift($oldevents)) {
+                        $event->id = $oldevent->id;
+                    } else {
+                        unset($event->id);
+                    }
+                    $event->name      = $eventname.' ('.get_string('quizcloses', 'quiz').')';
+                    $event->timestart = $timeclose;
             $event->eventtype = 'close';
-            add_event($event);
+                    calendar_event::create($event);
+                }
+            }
         }
     }
 
-    //update related grade item
-    quiz_grade_item_update(stripslashes_recursive($quiz));
+    // Delete any leftover events
+    foreach ($oldevents as $badevent) {
+        $badevent = calendar_event::load($badevent);
+        $badevent->delete();
+    }
 }
 
+/**
+ * @return array
+ */
 function quiz_get_view_actions() {
-    return array('view','view all','report');
+    return array('view', 'view all', 'report', 'review');
 }
 
+/**
+ * @return array
+ */
 function quiz_get_post_actions() {
-    return array('attempt','editquestions','review','submit');
+    return array('attempt', 'close attempt', 'preview', 'editquestions',
+            'delete attempt', 'manualgrade');
 }
 
 /**
- * Returns an array of names of quizzes that use this question
- *
- * @param object $questionid
- * @return array of strings
+ * @param array $questionids of question ids.
+ * @return bool whether any of these questions are used by any instance of this module.
  */
-function quiz_question_list_instances($questionid) {
-    global $CFG;
-
-    // TODO: we should also consider other questions that are used by
-    // random questions in this quiz, but that is very hard.
-
-    $sql = "SELECT q.id, q.name
-            FROM {$CFG->prefix}quiz q
-            INNER JOIN
-                 {$CFG->prefix}quiz_question_instances qqi
-            ON q.id = qqi.quiz
-            WHERE qqi.question = '$questionid'";
-
-    if ($instances = get_records_sql_menu($sql)) {
-        return $instances;
-    }
-    return array();
+function quiz_questions_in_use($questionids) {
+    global $DB, $CFG;
+    require_once($CFG->libdir . '/questionlib.php');
+    list($test, $params) = $DB->get_in_or_equal($questionids);
+    return $DB->record_exists_select('quiz_question_instances',
+            'question ' . $test, $params) || question_engine::questions_in_use(
+            $questionids, new qubaid_join('{quiz_attempts} quiza',
+            'quiza.uniqueid', 'quiza.preview = 0'));
 }
 
 /**
  * Implementation of the function for printing the form elements that control
  * whether the course reset functionality affects the quiz.
- * @param $mform form passed by reference
+ *
+ * @param $mform the course reset form that is being built.
  */
-function quiz_reset_course_form_definition(&$mform) {
-    $mform->addElement('header', 'forumheader', get_string('modulenameplural', 'quiz'));
-    $mform->addElement('advcheckbox', 'reset_quiz_attempts', get_string('removeallquizattempts','quiz'));
+function quiz_reset_course_form_definition($mform) {
+    $mform->addElement('header', 'quizheader', get_string('modulenameplural', 'quiz'));
+    $mform->addElement('advcheckbox', 'reset_quiz_attempts',
+            get_string('removeallquizattempts', 'quiz'));
 }
 
 /**
  * Course reset form defaults.
+ * @return array the defaults.
  */
 function quiz_reset_course_form_defaults($course) {
-    return array('reset_quiz_attempts'=>1);
+    return array('reset_quiz_attempts' => 1);
 }
 
 /**
  * Removes all grades from gradebook
+ *
  * @param int $courseid
  * @param string optional type
  */
 function quiz_reset_gradebook($courseid, $type='') {
-    global $CFG;
+    global $CFG, $DB;
 
-    $sql = "SELECT q.*, cm.idnumber as cmidnumber, q.course as courseid
-              FROM {$CFG->prefix}quiz q, {$CFG->prefix}course_modules cm, {$CFG->prefix}modules m
-             WHERE m.name='quiz' AND m.id=cm.module AND cm.instance=q.id AND q.course=$courseid";
+    $quizzes = $DB->get_records_sql("
+            SELECT q.*, cm.idnumber as cmidnumber, q.course as courseid
+            FROM {modules} m
+            JOIN {course_modules} cm ON m.id = cm.module
+            JOIN {quiz} q ON cm.instance = q.id
+            WHERE m.name = 'quiz' AND cm.course = ?", array($courseid));
 
-    if ($quizs = get_records_sql($sql)) {
-        foreach ($quizs as $quiz) {
+    foreach ($quizzes as $quiz) {
             quiz_grade_item_update($quiz, 'reset');
         }
-    }
 }
 
 /**
- * Actual implementation of the rest coures functionality, delete all the
+ * Actual implementation of the reset course functionality, delete all the
  * quiz attempts for course $data->courseid, if $data->reset_quiz_attempts is
  * set and true.
  *
  * Also, move the quiz open and close dates, if the course start date is changing.
- * @param $data the data submitted from the reset course.
+ *
+ * @param object $data the data submitted from the reset course.
  * @return array status array
  */
 function quiz_reset_userdata($data) {
-    global $CFG, $QTYPES;
-    
-    if (empty($QTYPES)) {
-        require_once($CFG->libdir . '/questionlib.php');
-    }
-
-    // TODO: this should use the delete_attempt($attempt->uniqueid) function in questionlib.php
-    // require_once($CFG->libdir.'/questionlib.php');
+    global $CFG, $DB;
+    require_once($CFG->libdir.'/questionlib.php');
 
     $componentstr = get_string('modulenameplural', 'quiz');
     $status = array();
 
-    /// Delete attempts.
+    // Delete attempts.
     if (!empty($data->reset_quiz_attempts)) {
+        require_once($CFG->libdir . '/questionlib.php');
 
-        $stateslistsql = "SELECT s.id
-                            FROM {$CFG->prefix}question_states s
-                                 INNER JOIN {$CFG->prefix}quiz_attempts qza ON s.attempt=qza.uniqueid
-                                 INNER JOIN {$CFG->prefix}quiz q ON qza.quiz=q.id
-                           WHERE q.course={$data->courseid}";
-
-        $attemptssql   = "SELECT a.uniqueid
-                            FROM {$CFG->prefix}quiz_attempts a, {$CFG->prefix}quiz q
-                           WHERE q.course={$data->courseid} AND a.quiz=q.id";
-
-        $quizessql     = "SELECT q.id
-                            FROM {$CFG->prefix}quiz q
-                           WHERE q.course={$data->courseid}";
-
-        if ($states = get_records_sql($stateslistsql)) {
-            //TODO: not sure if this works
-            $stateslist = implode(',', array_keys($states));
-            foreach ($QTYPES as $qtype) {
-                $qtype->delete_states($stateslist);
-            }
-        }
-
-        delete_records_select('question_states', "attempt IN ($attemptssql)");
-        delete_records_select('question_sessions', "attemptid IN ($attemptssql)");
-        delete_records_select('question_attempts', "id IN ($attemptssql)");
-
-        // remove all grades from gradebook
+        question_engine::delete_questions_usage_by_activities(new qubaid_join(
+                '{quiz_attempts} quiza JOIN {quiz} quiz ON quiza.quiz = quiz.id',
+                'quiza.uniqueid', 'quiz.course = :quizcourseid',
+                array('quizcourseid' => $data->courseid)));
+
+        $DB->delete_records_select('quiz_attempts',
+                'quiz IN (SELECT id FROM {quiz} WHERE course = ?)', array($data->courseid));
+        $status[] = array(
+            'component' => $componentstr,
+            'item' => get_string('attemptsdeleted', 'quiz'),
+            'error' => false);
+
+        // Remove all grades from gradebook
+        $DB->delete_records_select('quiz_grades',
+                'quiz IN (SELECT id FROM {quiz} WHERE course = ?)', array($data->courseid));
         if (empty($data->reset_gradebook_grades)) {
             quiz_reset_gradebook($data->courseid);
         }
-
-        delete_records_select('quiz_grades', "quiz IN ($quizessql)");
-        $status[] = array('component'=>$componentstr, 'item'=>get_string('gradesdeleted','quiz'), 'error'=>false);
-
-        delete_records_select('quiz_attempts', "quiz IN ($quizessql)");
-        $status[] = array('component'=>$componentstr, 'item'=>get_string('attemptsdeleted','quiz'), 'error'=>false);
+        $status[] = array(
+            'component' => $componentstr,
+            'item' => get_string('gradesdeleted', 'quiz'),
+            'error' => false);
     }
 
-    /// updating dates - shift may be negative too
+    // Updating dates - shift may be negative too
     if ($data->timeshift) {
-        shift_course_mod_dates('quiz', array('timeopen', 'timeclose'), $data->timeshift, $data->courseid);
-        $status[] = array('component'=>$componentstr, 'item'=>get_string('openclosedatesupdated', 'quiz'), 'error'=>false);
+        shift_course_mod_dates('quiz', array('timeopen', 'timeclose'),
+                $data->timeshift, $data->courseid);
+        $status[] = array(
+            'component' => $componentstr,
+            'item' => get_string('openclosedatesupdated', 'quiz'),
+            'error' => false);
     }
 
     return $status;
@@ -1117,33 +1299,57 @@ function quiz_reset_userdata($data) {
  *
  * @param int $attemptuniqueid int attempt id
  * @param int $questionid int question id
- * @return boolean to indicate access granted or denied
+ * @return bool to indicate access granted or denied
  */
-function quiz_check_file_access($attemptuniqueid, $questionid) {
-    global $USER;
+function quiz_check_file_access($attemptuniqueid, $questionid, $context = null) {
+    global $USER, $DB, $CFG;
+    require_once(dirname(__FILE__).'/attemptlib.php');
+    require_once(dirname(__FILE__).'/locallib.php');
+
+    $attempt = $DB->get_record('quiz_attempts', array('uniqueid' => $attemptuniqueid));
+    $attemptobj = quiz_attempt::create($attempt->id);
 
-    $attempt = get_record("quiz_attempts", 'uniqueid', $attemptuniqueid);
-    $quiz = get_record("quiz", 'id', $attempt->quiz);
-    $context = get_context_instance(CONTEXT_COURSE, $quiz->course);
+    // does question exist?
+    if (!$question = $DB->get_record('question', array('id' => $questionid))) {
+        return false;
+    }
+
+    if ($context === null) {
+        $quiz = $DB->get_record('quiz', array('id' => $attempt->quiz));
+        $cm = get_coursemodule_from_id('quiz', $quiz->id);
+        $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+    }
+
+    // Load those questions and the associated states.
+    $attemptobj->load_questions(array($questionid));
+    $attemptobj->load_question_states(array($questionid));
+
+    // obtain state
+    $state = $attemptobj->get_question_state($questionid);
+    // obtain questoin
+    $question = $attemptobj->get_question($questionid);
 
     // access granted if the current user submitted this file
-    if ($attempt->userid == $USER->id) {
-        return true;
+    if ($attempt->userid != $USER->id) {
+        return false;
+    }
     // access granted if the current user has permission to grade quizzes in this course
-    } else if (has_capability('mod/quiz:viewreports', $context) || has_capability('mod/quiz:grade', $context)) {
-        return true;
+    if (!(has_capability('mod/quiz:viewreports', $context) ||
+            has_capability('mod/quiz:grade', $context))) {
+        return false;
     }
 
-    // otherwise, this user does not have permission
-    return false;
+    return array($question, $state, array());
 }
 
 /**
  * Prints quiz summaries on MyMoodle Page
+ * @param arry $courses
+ * @param array $htmlarray
  */
 function quiz_print_overview($courses, &$htmlarray) {
     global $USER, $CFG;
-/// These next 6 Lines are constant in all modules (just change module name)
+    // These next 6 Lines are constant in all modules (just change module name)
     if (empty($courses) || !is_array($courses) || count($courses) == 0) {
         return array();
     }
@@ -1152,43 +1358,50 @@ function quiz_print_overview($courses, &$htmlarray) {
         return;
     }
 
-/// Fetch some language strings outside the main loop.
+    // Fetch some language strings outside the main loop.
     $strquiz = get_string('modulename', 'quiz');
     $strnoattempts = get_string('noattempts', 'quiz');
 
-/// We want to list quizzes that are currently available, and which have a close date.
-/// This is the same as what the lesson does, and the dabate is in MDL-10568.
+    // We want to list quizzes that are currently available, and which have a close date.
+    // This is the same as what the lesson does, and the dabate is in MDL-10568.
     $now = time();
     foreach ($quizzes as $quiz) {
         if ($quiz->timeclose >= $now && $quiz->timeopen < $now) {
-        /// Give a link to the quiz, and the deadline.
+            // Give a link to the quiz, and the deadline.
             $str = '<div class="quiz overview">' .
-                    '<div class="name">' . $strquiz . ': <a ' . ($quiz->visible ? '' : ' class="dimmed"') .
-                    ' href="' . $CFG->wwwroot . '/mod/quiz/view.php?id=' . $quiz->coursemodule . '">' .
+                    '<div class="name">' . $strquiz . ': <a ' .
+                    ($quiz->visible ? '' : ' class="dimmed"') .
+                    ' href="' . $CFG->wwwroot . '/mod/quiz/view.php?id=' .
+                    $quiz->coursemodule . '">' .
                     $quiz->name . '</a></div>';
-            $str .= '<div class="info">' . get_string('quizcloseson', 'quiz', userdate($quiz->timeclose)) . '</div>';
+            $str .= '<div class="info">' . get_string('quizcloseson', 'quiz',
+                    userdate($quiz->timeclose)) . '</div>';
 
-        /// Now provide more information depending on the uers's role.
+            // Now provide more information depending on the uers's role.
             $context = get_context_instance(CONTEXT_MODULE, $quiz->coursemodule);
             if (has_capability('mod/quiz:viewreports', $context)) {
-            /// For teacher-like people, show a summary of the number of student attempts.
+                // For teacher-like people, show a summary of the number of student attempts.
                 // The $quiz objects returned by get_all_instances_in_course have the necessary $cm 
                 // fields set to make the following call work.
-                $str .= '<div class="info">' . quiz_num_attempt_summary($quiz, $quiz, true) . '</div>';
-            } else if (has_any_capability(array('mod/quiz:reviewmyattempts', 'mod/quiz:attempt'), $context)) { // Student
-            /// For student-like people, tell them how many attempts they have made.
-                if (isset($USER->id) && ($attempts = quiz_get_user_attempts($quiz->id, $USER->id))) {
+                $str .= '<div class="info">' .
+                        quiz_num_attempt_summary($quiz, $quiz, true) . '</div>';
+            } else if (has_any_capability(array('mod/quiz:reviewmyattempts', 'mod/quiz:attempt'),
+                    $context)) { // Student
+                // For student-like people, tell them how many attempts they have made.
+                if (isset($USER->id) &&
+                        ($attempts = quiz_get_user_attempts($quiz->id, $USER->id))) {
                     $numattempts = count($attempts);
-                    $str .= '<div class="info">' . get_string('numattemptsmade', 'quiz', $numattempts) . '</div>';  
+                    $str .= '<div class="info">' .
+                            get_string('numattemptsmade', 'quiz', $numattempts) . '</div>';
                 } else {
                     $str .= '<div class="info">' . $strnoattempts . '</div>';
                 }
             } else {
-            /// For ayone else, there is no point listing this quiz, so stop processing.
+                // For ayone else, there is no point listing this quiz, so stop processing.
                 continue;
             }
 
-        /// Add the output for this quiz to the rest.
+            // Add the output for this quiz to the rest.
             $str .= '</div>';
             if (empty($htmlarray[$quiz->course]['quiz'])) {
                 $htmlarray[$quiz->course]['quiz'] = $str;
@@ -1200,34 +1413,39 @@ function quiz_print_overview($courses, &$htmlarray) {
 }
 
 /**
- * Return a textual summary of the number of attemtps that have been made at a particular quiz,
- * returns '' if no attemtps have been made yet, unless $returnzero is passed as true.
+ * Return a textual summary of the number of attempts that have been made at a particular quiz,
+ * returns '' if no attempts have been made yet, unless $returnzero is passed as true.
+ *
  * @param object $quiz the quiz object. Only $quiz->id is used at the moment.
- * @param object $cm the cm object. Only $cm->course, $cm->groupmode and $cm->groupingid fields are used at the moment.
- * @param boolean $returnzero if false (default), when no attempts have been made '' is returned instead of 'Attempts: 0'.
+ * @param object $cm the cm object. Only $cm->course, $cm->groupmode and
+ *      $cm->groupingid fields are used at the moment.
+ * @param bool $returnzero if false (default), when no attempts have been
+ *      made '' is returned instead of 'Attempts: 0'.
  * @param int $currentgroup if there is a concept of current group where this method is being called
  *         (e.g. a report) pass it in here. Default 0 which means no current group.
  * @return string a string like "Attempts: 123", "Attemtps 123 (45 from your groups)" or
  *          "Attemtps 123 (45 from this group)".
  */
 function quiz_num_attempt_summary($quiz, $cm, $returnzero = false, $currentgroup = 0) {
-    global $CFG, $USER;
-    $numattempts = count_records('quiz_attempts', 'quiz', $quiz->id, 'preview', 0);
+    global $DB, $USER;
+    $numattempts = $DB->count_records('quiz_attempts', array('quiz'=> $quiz->id, 'preview'=>0));
     if ($numattempts || $returnzero) {
         if (groups_get_activity_groupmode($cm)) {
             $a->total = $numattempts;
             if ($currentgroup) {
-                $a->group = count_records_sql('SELECT count(1) FROM ' .
-                        $CFG->prefix . 'quiz_attempts qa JOIN ' .
-                        $CFG->prefix . 'groups_members gm ON qa.userid = gm.userid ' .
-                        'WHERE quiz = ' . $quiz->id . ' AND preview = 0 AND groupid = ' . $currentgroup);
+                $a->group = $DB->count_records_sql('SELECT count(1) FROM ' .
+                        '{quiz_attempts} qa JOIN ' .
+                        '{groups_members} gm ON qa.userid = gm.userid ' .
+                        'WHERE quiz = ? AND preview = 0 AND groupid = ?',
+                        array($quiz->id, $currentgroup));
                 return get_string('attemptsnumthisgroup', 'quiz', $a);
             } else if ($groups = groups_get_all_groups($cm->course, $USER->id, $cm->groupingid)) { 
-                $a->group = count_records_sql('SELECT count(1) FROM ' .
-                        $CFG->prefix . 'quiz_attempts qa JOIN ' .
-                        $CFG->prefix . 'groups_members gm ON qa.userid = gm.userid ' .
-                        'WHERE quiz = ' . $quiz->id . ' AND preview = 0 AND ' .
-                        'groupid IN (' . implode(',', array_keys($groups)) . ')');
+                list($usql, $params) = $DB->get_in_or_equal(array_keys($groups));
+                $a->group = $DB->count_records_sql('SELECT count(1) FROM ' .
+                        '{quiz_attempts} qa JOIN ' .
+                        '{groups_members} gm ON qa.userid = gm.userid ' .
+                        'WHERE quiz = ? AND preview = 0 AND ' .
+                        "groupid $usql", array_merge(array($quiz->id), $params));
                 return get_string('attemptsnumyourgroups', 'quiz', $a);
             }
         }
@@ -1237,22 +1455,268 @@ function quiz_num_attempt_summary($quiz, $cm, $returnzero = false, $currentgroup
 }
 
 /**
- * Returns all other caps used in module
+ * Returns the same as {@link quiz_num_attempt_summary()} but wrapped in a link
+ * to the quiz reports.
+ *
+ * @param object $quiz the quiz object. Only $quiz->id is used at the moment.
+ * @param object $cm the cm object. Only $cm->course, $cm->groupmode and
+ *      $cm->groupingid fields are used at the moment.
+ * @param object $context the quiz context.
+ * @param bool $returnzero if false (default), when no attempts have been made
+ *      '' is returned instead of 'Attempts: 0'.
+ * @param int $currentgroup if there is a concept of current group where this method is being called
+ *         (e.g. a report) pass it in here. Default 0 which means no current group.
+ * @return string HTML fragment for the link.
+ */
+function quiz_attempt_summary_link_to_reports($quiz, $cm, $context, $returnzero = false,
+        $currentgroup = 0) {
+    global $CFG;
+    $summary = quiz_num_attempt_summary($quiz, $cm, $returnzero, $currentgroup);
+    if (!$summary) {
+        return '';
+    }
+
+    require_once($CFG->dirroot . '/mod/quiz/report/reportlib.php');
+    $url = new moodle_url('/mod/quiz/report.php', array(
+            'id' => $cm->id, 'mode' => quiz_report_default_report($context)));
+    return html_writer::link($url, $summary);
+}
+
+/**
+ * @param string $feature FEATURE_xx constant for requested feature
+ * @return bool True if quiz supports feature
+ */
+function quiz_supports($feature) {
+    switch($feature) {
+        case FEATURE_GROUPS:                  return true;
+        case FEATURE_GROUPINGS:               return true;
+        case FEATURE_GROUPMEMBERSONLY:        return true;
+        case FEATURE_MOD_INTRO:               return true;
+        case FEATURE_COMPLETION_TRACKS_VIEWS: return true;
+        case FEATURE_GRADE_HAS_GRADE:         return true;
+        case FEATURE_GRADE_OUTCOMES:          return false;
+        case FEATURE_BACKUP_MOODLE2:          return true;
+
+        default: return null;
+    }
+}
+
+/**
+ * @return array all other caps used in module
  */
 function quiz_get_extra_capabilities() {
-    return array(
-        'moodle/site:accessallgroups',
-        'moodle/question:add',
-        'moodle/question:editmine',
-        'moodle/question:editall',
-        'moodle/question:viewmine',
-        'moodle/question:viewall',
-        'moodle/question:usemine',
-        'moodle/question:useall',
-        'moodle/question:movemine',
-        'moodle/question:moveall',
-        'moodle/question:managecategory',
-    );
+    global $CFG;
+    require_once($CFG->libdir.'/questionlib.php');
+    $caps = question_get_all_capabilities();
+    $caps[] = 'moodle/site:accessallgroups';
+    return $caps;
 }
 
-?>
+/**
+ * This fucntion extends the global navigation for the site.
+ * It is important to note that you should not rely on PAGE objects within this
+ * body of code as there is no guarantee that during an AJAX request they are
+ * available
+ *
+ * @param navigation_node $quiznode The quiz node within the global navigation
+ * @param object $course The course object returned from the DB
+ * @param object $module The module object returned from the DB
+ * @param object $cm The course module instance returned from the DB
+ */
+function quiz_extend_navigation($quiznode, $course, $module, $cm) {
+    global $CFG;
+
+    $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+
+    if (has_capability('mod/quiz:view', $context)) {
+        $url = new moodle_url('/mod/quiz/view.php', array('id'=>$cm->id));
+        $quiznode->add(get_string('info', 'quiz'), $url, navigation_node::TYPE_SETTING,
+                null, null, new pix_icon('i/info', ''));
+    }
+
+    if (has_any_capability(array('mod/quiz:viewreports', 'mod/quiz:grade'), $context)) {
+        require_once($CFG->dirroot.'/mod/quiz/report/reportlib.php');
+        $reportlist = quiz_report_list($context);
+
+        $url = new moodle_url('/mod/quiz/report.php',
+                array('id' => $cm->id, 'mode' => reset($reportlist)));
+        $reportnode = $quiznode->add(get_string('results', 'quiz'), $url,
+                navigation_node::TYPE_SETTING,
+                null, null, new pix_icon('i/report', ''));
+
+        foreach ($reportlist as $report) {
+            $url = new moodle_url('/mod/quiz/report.php',
+                    array('id' => $cm->id, 'mode' => $report));
+            $reportnode->add(get_string($report, 'quiz_'.$report), $url,
+                    navigation_node::TYPE_SETTING,
+                    null, 'quiz_report_' . $report, new pix_icon('i/item', ''));
+        }
+    }
+}
+
+/**
+ * This function extends the settings navigation block for the site.
+ *
+ * It is safe to rely on PAGE here as we will only ever be within the module
+ * context when this is called
+ *
+ * @param settings_navigation $settings
+ * @param navigation_node $quiznode
+ */
+function quiz_extend_settings_navigation($settings, $quiznode) {
+    global $PAGE, $CFG;
+
+    /**
+     * Require {@link questionlib.php}
+     * Included here as we only ever want to include this file if we really need to.
+     */
+    require_once($CFG->libdir . '/questionlib.php');
+
+    // We want to add these new nodes after the Edit settings node, and before the
+    // Locally assigned roles node. Of course, both of those are controlled by capabilities.
+    $keys = $quiznode->get_children_key_list();
+    $beforekey = null;
+    $i = array_search('modedit', $keys);
+    if ($i === false and array_key_exists(0, $keys)) {
+        $beforekey = $keys[0];
+    } else if (array_key_exists($i + 1, $keys)) {
+        $beforekey = $keys[$i + 1];
+    }
+
+    if (has_capability('mod/quiz:manageoverrides', $PAGE->cm->context)) {
+        $url = new moodle_url('/mod/quiz/overrides.php', array('cmid'=>$PAGE->cm->id));
+        $node = navigation_node::create(get_string('groupoverrides', 'quiz'),
+                new moodle_url($url, array('mode'=>'group')),
+                navigation_node::TYPE_SETTING, null, 'mod_quiz_groupoverrides');
+        $quiznode->add_node($node, $beforekey);
+
+        $node = navigation_node::create(get_string('useroverrides', 'quiz'),
+                new moodle_url($url, array('mode'=>'user')),
+                navigation_node::TYPE_SETTING, null, 'mod_quiz_useroverrides');
+        $quiznode->add_node($node, $beforekey);
+    }
+
+    if (has_capability('mod/quiz:manage', $PAGE->cm->context)) {
+        $node = navigation_node::create(get_string('editquiz', 'quiz'),
+                new moodle_url('/mod/quiz/edit.php', array('cmid'=>$PAGE->cm->id)),
+                navigation_node::TYPE_SETTING, null, 'mod_quiz_edit',
+                new pix_icon('t/edit', ''));
+        $quiznode->add_node($node, $beforekey);
+    }
+
+    if (has_capability('mod/quiz:preview', $PAGE->cm->context)) {
+        $url = new moodle_url('/mod/quiz/startattempt.php',
+                array('cmid'=>$PAGE->cm->id, 'sesskey'=>sesskey()));
+        $node = navigation_node::create(get_string('preview', 'quiz'), $url,
+                navigation_node::TYPE_SETTING, null, 'mod_quiz_preview',
+                new pix_icon('t/preview', ''));
+        $quiznode->add_node($node, $beforekey);
+    }
+
+    question_extend_settings_navigation($quiznode, $PAGE->cm->context)->trim_if_empty();
+}
+
+/**
+ * Serves the quiz files.
+ *
+ * @param object $course
+ * @param object $cm
+ * @param object $context
+ * @param string $filearea
+ * @param array $args
+ * @param bool $forcedownload
+ * @return bool false if file not found, does not return if found - justsend the file
+ */
+function quiz_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload) {
+    global $CFG, $DB;
+
+    if ($context->contextlevel != CONTEXT_MODULE) {
+        return false;
+    }
+
+    require_login($course, false, $cm);
+
+    if (!$quiz = $DB->get_record('quiz', array('id'=>$cm->instance))) {
+        return false;
+    }
+
+    // 'intro' area is served by pluginfile.php
+    $fileareas = array('feedback');
+    if (!in_array($filearea, $fileareas)) {
+        return false;
+    }
+
+    $feedbackid = (int)array_shift($args);
+    if (!$feedback = $DB->get_record('quiz_feedback', array('id'=>$feedbackid))) {
+        return false;
+    }
+
+    $fs = get_file_storage();
+    $relativepath = implode('/', $args);
+    $fullpath = "/$context->id/mod_quiz/$filearea/$feedbackid/$relativepath";
+    if (!$file = $fs->get_file_by_hash(sha1($fullpath)) or $file->is_directory()) {
+        return false;
+    }
+    send_stored_file($file, 0, 0, true);
+}
+
+/**
+ * Called via pluginfile.php -> question_pluginfile to serve files belonging to
+ * a question in a question_attempt when that attempt is a quiz attempt.
+ *
+ * @param object $course course settings object
+ * @param object $context context object
+ * @param string $component the name of the component we are serving files for.
+ * @param string $filearea the name of the file area.
+ * @param array $args the remaining bits of the file path.
+ * @param bool $forcedownload whether the user must be forced to download the file.
+ * @return bool false if file not found, does not return if found - justsend the file
+ */
+function mod_quiz_question_pluginfile($course, $context, $component,
+        $filearea, $qubaid, $slot, $args, $forcedownload) {
+    global $USER, $CFG;
+    require_once($CFG->dirroot . '/mod/quiz/locallib.php');
+
+    $attemptobj = quiz_attempt::create_from_usage_id($qubaid);
+    require_login($attemptobj->get_courseid(), false, $attemptobj->get_cm());
+
+    if ($attemptobj->is_own_attempt() && !$attemptobj->is_finished()) {
+        // In the middle of an attempt.
+        if (!$attemptobj->is_preview_user()) {
+            $attemptobj->require_capability('mod/quiz:attempt');
+        }
+        $isreviewing = false;
+
+    } else {
+        // Reviewing an attempt.
+        $attemptobj->check_review_capability();
+        $isreviewing = true;
+    }
+
+    if (!$attemptobj->check_file_access($slot, $isreviewing, $context->id,
+            $component, $filearea, $args, $forcedownload)) {
+        send_file_not_found();
+    }
+
+    $fs = get_file_storage();
+    $relativepath = implode('/', $args);
+    $fullpath = "/$context->id/$component/$filearea/$relativepath";
+    if (!$file = $fs->get_file_by_hash(sha1($fullpath)) or $file->is_directory()) {
+        send_file_not_found();
+    }
+
+    send_stored_file($file, 0, 0, $forcedownload);
+}
+
+/**
+ * Return a list of page types
+ * @param string $pagetype current page type
+ * @param stdClass $parentcontext Block's parent context
+ * @param stdClass $currentcontext Current context of block
+ */
+function quiz_page_type_list($pagetype, $parentcontext, $currentcontext) {
+    $module_pagetype = array(
+        'mod-quiz-*'=>get_string('page-mod-quiz-x', 'quiz'),
+        'mod-quiz-edit'=>get_string('page-mod-quiz-edit', 'quiz'));
+    return $module_pagetype;
+}
