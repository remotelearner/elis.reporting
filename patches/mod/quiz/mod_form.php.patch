diff --git a/mod/quiz/mod_form.php b/mod/quiz/mod_form.php
index 80510bf..ee27b16 100644
--- a/mod/quiz/mod_form.php
+++ b/mod/quiz/mod_form.php
@@ -1,199 +1,287 @@
-<?php // $Id$
-require_once ($CFG->dirroot.'/course/moodleform_mod.php');
-
-require_once("$CFG->dirroot/mod/quiz/locallib.php");
-
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Defines the quiz module ettings form.
+ *
+ * @package    mod
+ * @subpackage quiz
+ * @copyright  2006 Jamie Pratt
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/course/moodleform_mod.php');
+require_once($CFG->dirroot . '/mod/quiz/locallib.php');
+
+
+/**
+ * Settings form for the quiz module.
+ *
+ * @copyright  2006 Jamie Pratt
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 class mod_quiz_mod_form extends moodleform_mod {
-    var $_feedbacks;
-
-    function definition() {
-
-        global $COURSE, $CFG;
-        $mform    =& $this->_form;
-
-//-------------------------------------------------------------------------------
+    protected $_feedbacks;
+    protected static $reviewfields = array(); // Initialised in the constructor.
+
+    public function __construct($current, $section, $cm, $course) {
+        self::$reviewfields = array(
+            'attempt' => get_string('theattempt', 'quiz'),
+            'correctness' => get_string('whethercorrect', 'question'),
+            'marks' => get_string('marks', 'question'),
+            'specificfeedback' => get_string('specificfeedback', 'question'),
+            'generalfeedback' => get_string('generalfeedback', 'question'),
+            'rightanswer' => get_string('rightanswer', 'question'),
+            'overallfeedback' => get_string('overallfeedback', 'quiz'),
+        );
+        parent::__construct($current, $section, $cm, $course);
+    }
+
+    protected function definition() {
+        global $COURSE, $CFG, $DB, $PAGE;
+        $quizconfig = get_config('quiz');
+        $mform = $this->_form;
+
+        //-------------------------------------------------------------------------------
         $mform->addElement('header', 'general', get_string('general', 'form'));
 
+        // Name.
         $mform->addElement('text', 'name', get_string('name'), array('size'=>'64'));
         if (!empty($CFG->formatstringstriptags)) {
             $mform->setType('name', PARAM_TEXT);
         } else {
-            $mform->setType('name', PARAM_CLEAN);
+            $mform->setType('name', PARAM_CLEANHTML);
         }
         $mform->addRule('name', null, 'required', null, 'client');
 
-        $mform->addElement('htmleditor', 'intro', get_string("introduction", "quiz"));
-        $mform->setType('intro', PARAM_RAW);
-        $mform->setHelpButton('intro', array('richtext', get_string('helprichtext')));
-
-//-------------------------------------------------------------------------------
-        $mform->addElement('header', 'timinghdr', get_string('timing', 'form'));
-        $mform->addElement('date_time_selector', 'timeopen', get_string('quizopen', 'quiz'), array('optional'=>true));
-        $mform->setHelpButton('timeopen', array('timeopen', get_string('quizopen', 'quiz'), 'quiz'));
-
-        $mform->addElement('date_time_selector', 'timeclose', get_string('quizclose', 'quiz'), array('optional'=>true));
-        $mform->setHelpButton('timeclose', array('timeopen', get_string('quizclose', 'quiz'), 'quiz'));
-
-
-        $timelimitgrp=array();
-        $timelimitgrp[] = &$mform->createElement('text', 'timelimit');
-        $timelimitgrp[] = &$mform->createElement('checkbox', 'timelimitenable', '', get_string('enable'));
-        $mform->addGroup($timelimitgrp, 'timelimitgrp', get_string('timelimitmin', 'quiz'), array(' '), false);
-        $mform->setType('timelimit', PARAM_TEXT);
-        $timelimitgrprules = array();
-        $timelimitgrprules['timelimit'][] = array(null, 'numeric', null, 'client');
-        $mform->addGroupRule('timelimitgrp', $timelimitgrprules);
-        $mform->disabledIf('timelimitgrp', 'timelimitenable');
-        $mform->setAdvanced('timelimitgrp', $CFG->quiz_fix_timelimit);
-        $mform->setHelpButton('timelimitgrp', array("timelimit", get_string("quiztimer","quiz"), "quiz"));
-        $mform->setDefault('timelimit', $CFG->quiz_timelimit);
-        $mform->setDefault('timelimitenable', !empty($CFG->quiz_timelimit));
-
-
-        //enforced time delay between quiz attempts add-on
-        $timedelayoptions = array();
-        $timedelayoptions[0] = get_string('none');
-        $timedelayoptions[1800] = get_string('numminutes', '', 30);
-        $timedelayoptions[3600] = get_string('numminutes', '', 60);
-        for($i=2; $i<=23; $i++) {
-             $seconds  = $i*3600;
-             $timedelayoptions[$seconds] = get_string('numhours', '', $i);
-        }
-        $timedelayoptions[86400] = get_string('numhours', '', 24);
-        for($i=2; $i<=7; $i++) {
-             $seconds = $i*86400;
-             $timedelayoptions[$seconds] = get_string('numdays', '', $i);
-        }
-        $mform->addElement('select', 'delay1', get_string("delay1", "quiz"), $timedelayoptions);
-        $mform->setHelpButton('delay1', array("timedelay1", get_string("delay1", "quiz"), "quiz"));
-        $mform->setAdvanced('delay1', $CFG->quiz_fix_delay1);
-        $mform->setDefault('delay1', $CFG->quiz_delay1);
-
-        $mform->addElement('select', 'delay2', get_string("delay2", "quiz"), $timedelayoptions);
-        $mform->setHelpButton('delay2', array("timedelay2", get_string("delay2", "quiz"), "quiz"));
-        $mform->setAdvanced('delay2', $CFG->quiz_fix_delay2);
-        $mform->setDefault('delay2', $CFG->quiz_delay2);
-
-//-------------------------------------------------------------------------------
-        $mform->addElement('header', 'displayhdr', get_string('display', 'form'));
-        $perpage = array();
-        for ($i = 0; $i <= 50; ++$i) {
-            $perpage[$i] = $i;
-        }
-        $perpage[0] = get_string('allinone', 'quiz');
-        $mform->addElement('select', 'questionsperpage', get_string('questionsperpage', 'quiz'), $perpage);
-        $mform->setHelpButton('questionsperpage', array('questionsperpage', get_string('questionsperpage', 'quiz'), 'quiz'));
-        $mform->setAdvanced('questionsperpage', $CFG->quiz_fix_questionsperpage);
-        $mform->setDefault('questionsperpage', $CFG->quiz_questionsperpage);
-
-        $mform->addElement('selectyesno', 'shufflequestions', get_string("shufflequestions", "quiz"));
-        $mform->setHelpButton('shufflequestions', array("shufflequestions", get_string("shufflequestions","quiz"), "quiz"));
-        $mform->setAdvanced('shufflequestions', $CFG->quiz_fix_shufflequestions);
-        $mform->setDefault('shufflequestions', $CFG->quiz_shufflequestions);
-
-        $mform->addElement('selectyesno', 'shuffleanswers', get_string("shufflewithin", "quiz"));
-        $mform->setHelpButton('shuffleanswers', array("shufflewithin", get_string("shufflewithin","quiz"), "quiz"));
-        $mform->setAdvanced('shuffleanswers', $CFG->quiz_fix_shuffleanswers);
-        $mform->setDefault('shuffleanswers', $CFG->quiz_shuffleanswers);
-
-//-------------------------------------------------------------------------------
-        $mform->addElement('header', 'attemptshdr', get_string('attempts', 'quiz'));
-        $attemptoptions = array('0' => get_string('unlimited'));
-        for ($i = 1; $i <= 10; $i++) {
-            $attemptoptions[$i] = $i;
-        }
-        $mform->addElement('select', 'attempts', get_string("attemptsallowed", "quiz"), $attemptoptions);
-        $mform->setHelpButton('attempts', array("attempts", get_string("attemptsallowed","quiz"), "quiz"));
-        $mform->setAdvanced('attempts', $CFG->quiz_fix_attempts);
-        $mform->setDefault('attempts', $CFG->quiz_attempts);
-
-        $mform->addElement('selectyesno', 'attemptonlast', get_string("eachattemptbuildsonthelast", "quiz"));
-        $mform->setHelpButton('attemptonlast', array("repeatattempts", get_string("eachattemptbuildsonthelast", "quiz"), "quiz"));
-        $mform->setAdvanced('attemptonlast', $CFG->quiz_fix_attemptonlast);
-        $mform->setDefault('attemptonlast', $CFG->quiz_attemptonlast);
+        // Introduction.
+        $this->add_intro_editor(false, get_string('introduction', 'quiz'));
 
-        $mform->addElement('selectyesno', 'adaptive', get_string("adaptive", "quiz"));
-        $mform->setHelpButton('adaptive', array("adaptive", get_string("adaptive","quiz"), "quiz"));
-        $mform->setAdvanced('adaptive', $CFG->quiz_fix_adaptive);
-        $mform->setDefault('adaptive', $CFG->quiz_optionflags & QUESTION_ADAPTIVE);
+        // Open and close dates.
+        $mform->addElement('date_time_selector', 'timeopen', get_string('quizopen', 'quiz'),
+                array('optional' => true, 'step' => 1));
+        $mform->addHelpButton('timeopen', 'quizopenclose', 'quiz');
 
+        $mform->addElement('date_time_selector', 'timeclose', get_string('quizclose', 'quiz'),
+                array('optional' => true, 'step' => 1));
 
-//-------------------------------------------------------------------------------
-        $mform->addElement('header', 'gradeshdr', get_string('grades', 'grades'));
-        $mform->addElement('select', 'grademethod', get_string("grademethod", "quiz"), quiz_get_grading_options());
-        $mform->setHelpButton('grademethod', array("grademethod", get_string("grademethod","quiz"), "quiz"));
-        $mform->setAdvanced('grademethod', $CFG->quiz_fix_grademethod);
-        $mform->setDefault('grademethod', $CFG->quiz_grademethod);
+        // Time limit.
+        $mform->addElement('duration', 'timelimit', get_string('timelimit', 'quiz'),
+                array('optional' => true));
+        $mform->addHelpButton('timelimit', 'timelimit', 'quiz');
+        $mform->setAdvanced('timelimit', $quizconfig->timelimit_adv);
+        $mform->setDefault('timelimit', $quizconfig->timelimit);
 
-        $mform->addElement('selectyesno', 'penaltyscheme', get_string("penaltyscheme", "quiz"));
-        $mform->setHelpButton('penaltyscheme', array("penaltyscheme", get_string("penaltyscheme","quiz"), "quiz"));
-        $mform->setAdvanced('penaltyscheme', $CFG->quiz_fix_penaltyscheme);
-        $mform->setDefault('penaltyscheme', $CFG->quiz_penaltyscheme);
-
-        $options = array(
-                    0 => '0',
-                    1 => '1',
-                    2 => '2',
-                    3 => '3');
-        $mform->addElement('select', 'decimalpoints', get_string("decimaldigits", "quiz"), $options);
-        $mform->setHelpButton('decimalpoints', array("decimalpoints", get_string("decimaldigits","quiz"), "quiz"));
-        $mform->setAdvanced('decimalpoints', $CFG->quiz_fix_decimalpoints);
-        $mform->setDefault('decimalpoints', $CFG->quiz_decimalpoints);
-
-//-------------------------------------------------------------------------------
-        $mform->addElement('header', 'reviewoptionshdr', get_string('reviewoptionsheading', 'quiz'));
-        $mform->setHelpButton('reviewoptionshdr', array('reviewoptions', get_string('reviewoptionsheading','quiz'), 'quiz'));
-        $mform->setAdvanced('reviewoptionshdr', $CFG->quiz_fix_review);
-
-        $immediatelyoptionsgrp=array();
-        $immediatelyoptionsgrp[] = &$mform->createElement('checkbox', 'responsesimmediately', '', get_string('responses', 'quiz'));
-        $immediatelyoptionsgrp[] = &$mform->createElement('checkbox', 'answersimmediately', '', get_string('answers', 'quiz'));
-        $immediatelyoptionsgrp[] = &$mform->createElement('checkbox', 'feedbackimmediately', '', get_string('feedback', 'quiz'));
-        $immediatelyoptionsgrp[] = &$mform->createElement('checkbox', 'generalfeedbackimmediately', '', get_string('generalfeedback', 'quiz'));
-        $immediatelyoptionsgrp[] = &$mform->createElement('checkbox', 'scoreimmediately', '', get_string('scores', 'quiz'));
-        $immediatelyoptionsgrp[] = &$mform->createElement('checkbox', 'overallfeedbackimmediately', '', get_string('overallfeedback', 'quiz'));
-        $mform->addGroup($immediatelyoptionsgrp, 'immediatelyoptionsgrp', get_string("reviewimmediately", "quiz"), null, false);
-        $mform->setDefault('responsesimmediately', $CFG->quiz_review & QUIZ_REVIEW_RESPONSES & QUIZ_REVIEW_IMMEDIATELY);
-        $mform->setDefault('answersimmediately', $CFG->quiz_review & QUIZ_REVIEW_ANSWERS & QUIZ_REVIEW_IMMEDIATELY);
-        $mform->setDefault('feedbackimmediately', $CFG->quiz_review & QUIZ_REVIEW_FEEDBACK & QUIZ_REVIEW_IMMEDIATELY);
-        $mform->setDefault('generalfeedbackimmediately', $CFG->quiz_review & QUIZ_REVIEW_GENERALFEEDBACK & QUIZ_REVIEW_IMMEDIATELY);
-        $mform->setDefault('scoreimmediately', $CFG->quiz_review & QUIZ_REVIEW_SCORES & QUIZ_REVIEW_IMMEDIATELY);
-        $mform->setDefault('overallfeedbackimmediately', $CFG->quiz_review & QUIZ_REVIEW_OVERALLFEEDBACK & QUIZ_REVIEW_IMMEDIATELY);
-
-        $openoptionsgrp=array();
-        $openoptionsgrp[] = &$mform->createElement('checkbox', 'responsesopen', '', get_string('responses', 'quiz'));
-        $openoptionsgrp[] = &$mform->createElement('checkbox', 'answersopen', '', get_string('answers', 'quiz'));
-        $openoptionsgrp[] = &$mform->createElement('checkbox', 'feedbackopen', '', get_string('feedback', 'quiz'));
-        $openoptionsgrp[] = &$mform->createElement('checkbox', 'generalfeedbackopen', '', get_string('generalfeedback', 'quiz'));
-        $openoptionsgrp[] = &$mform->createElement('checkbox', 'scoreopen', '', get_string('scores', 'quiz'));
-        $openoptionsgrp[] = &$mform->createElement('checkbox', 'overallfeedbackopen', '', get_string('overallfeedback', 'quiz'));
-        $mform->addGroup($openoptionsgrp, 'openoptionsgrp', get_string("reviewopen", "quiz"), array(' '), false);
-        $mform->setDefault('responsesopen', $CFG->quiz_review & QUIZ_REVIEW_RESPONSES & QUIZ_REVIEW_OPEN);
-        $mform->setDefault('answersopen', $CFG->quiz_review & QUIZ_REVIEW_ANSWERS & QUIZ_REVIEW_OPEN);
-        $mform->setDefault('feedbackopen', $CFG->quiz_review & QUIZ_REVIEW_FEEDBACK & QUIZ_REVIEW_OPEN);
-        $mform->setDefault('generalfeedbackopen', $CFG->quiz_review & QUIZ_REVIEW_GENERALFEEDBACK & QUIZ_REVIEW_OPEN);
-        $mform->setDefault('scoreopen', $CFG->quiz_review & QUIZ_REVIEW_SCORES & QUIZ_REVIEW_OPEN);
-        $mform->setDefault('overallfeedbackopen', $CFG->quiz_review & QUIZ_REVIEW_OVERALLFEEDBACK & QUIZ_REVIEW_OPEN);
-
-
-        $closedoptionsgrp=array();
-        $closedoptionsgrp[] = &$mform->createElement('checkbox', 'responsesclosed', '', get_string('responses', 'quiz'));
-        $closedoptionsgrp[] = &$mform->createElement('checkbox', 'answersclosed', '', get_string('answers', 'quiz'));
-        $closedoptionsgrp[] = &$mform->createElement('checkbox', 'feedbackclosed', '', get_string('feedback', 'quiz'));
-        $closedoptionsgrp[] = &$mform->createElement('checkbox', 'generalfeedbackclosed', '', get_string('generalfeedback', 'quiz'));
-        $closedoptionsgrp[] = &$mform->createElement('checkbox', 'scoreclosed', '', get_string('scores', 'quiz'));
-        $closedoptionsgrp[] = &$mform->createElement('checkbox', 'overallfeedbackclosed', '', get_string('overallfeedback', 'quiz'));
-        $mform->addGroup($closedoptionsgrp, 'closedoptionsgrp', get_string("reviewclosed", "quiz"), array(' '), false);
-        $mform->setDefault('responsesclosed', $CFG->quiz_review & QUIZ_REVIEW_RESPONSES & QUIZ_REVIEW_CLOSED);
-        $mform->setDefault('answersclosed', $CFG->quiz_review & QUIZ_REVIEW_ANSWERS & QUIZ_REVIEW_CLOSED);
-        $mform->setDefault('feedbackclosed', $CFG->quiz_review & QUIZ_REVIEW_FEEDBACK & QUIZ_REVIEW_CLOSED);
-        $mform->setDefault('generalfeedbackclosed', $CFG->quiz_review & QUIZ_REVIEW_GENERALFEEDBACK & QUIZ_REVIEW_CLOSED);
-        $mform->setDefault('scoreclosed', $CFG->quiz_review & QUIZ_REVIEW_SCORES & QUIZ_REVIEW_CLOSED);
-        $mform->setDefault('overallfeedbackclosed', $CFG->quiz_review & QUIZ_REVIEW_OVERALLFEEDBACK & QUIZ_REVIEW_CLOSED);
-
-//-------------------------------------------------------------------------------
-        $mform->addElement('header', 'security', get_string('security', 'form'));
+        // Number of attempts.
+        $attemptoptions = array('0' => get_string('unlimited'));
+        for ($i = 1; $i <= QUIZ_MAX_ATTEMPT_OPTION; $i++) {
+            $attemptoptions[$i] = $i;
+        }
+        $mform->addElement('select', 'attempts', get_string('attemptsallowed', 'quiz'),
+                $attemptoptions);
+        $mform->setAdvanced('attempts', $quizconfig->attempts_adv);
+        $mform->setDefault('attempts', $quizconfig->attempts);
+
+        // Grading method.
+        $mform->addElement('select', 'grademethod', get_string('grademethod', 'quiz'),
+                quiz_get_grading_options());
+        $mform->addHelpButton('grademethod', 'grademethod', 'quiz');
+        $mform->setAdvanced('grademethod', $quizconfig->grademethod_adv);
+        $mform->setDefault('grademethod', $quizconfig->grademethod);
+        $mform->disabledIf('grademethod', 'attempts', 'eq', 1);
+
+        //-------------------------------------------------------------------------------
+        // Grade settings
+        $this->standard_grading_coursemodule_elements();
+
+        $mform->removeElement('grade');
+        $mform->addElement('hidden', 'grade', $quizconfig->maximumgrade);
+        $mform->setType('grade', PARAM_NUMBER);
+
+        //-------------------------------------------------------------------------------
+        $mform->addElement('header', 'layouthdr', get_string('layout', 'quiz'));
+
+        // Shuffle questions.
+        $shuffleoptions = array(
+            0 => get_string('asshownoneditscreen', 'quiz'),
+            1 => get_string('shuffledrandomly', 'quiz')
+        );
+        $mform->addElement('select', 'shufflequestions', get_string('questionorder', 'quiz'),
+                $shuffleoptions, array('id' => 'id_shufflequestions'));
+        $mform->setAdvanced('shufflequestions', $quizconfig->shufflequestions_adv);
+        $mform->setDefault('shufflequestions', $quizconfig->shufflequestions);
+
+        // Questions per page.
+        $pageoptions = array();
+        $pageoptions[0] = get_string('neverallononepage', 'quiz');
+        $pageoptions[1] = get_string('everyquestion', 'quiz');
+        for ($i = 2; $i <= QUIZ_MAX_QPP_OPTION; ++$i) {
+            $pageoptions[$i] = get_string('everynquestions', 'quiz', $i);
+        }
+
+        $pagegroup = array();
+        $pagegroup[] = $mform->createElement('select', 'questionsperpage',
+                get_string('newpage', 'quiz'), $pageoptions, array('id' => 'id_questionsperpage'));
+        $mform->setDefault('questionsperpage', $quizconfig->questionsperpage);
+
+        if (!empty($this->_cm)) {
+            $pagegroup[] = $mform->createElement('checkbox', 'repaginatenow', '',
+                    get_string('repaginatenow', 'quiz'), array('id' => 'id_repaginatenow'));
+            $mform->disabledIf('repaginatenow', 'shufflequestions', 'eq', 1);
+            $PAGE->requires->yui2_lib('event');
+            $PAGE->requires->js('/mod/quiz/edit.js');
+            $PAGE->requires->js_init_call('quiz_settings_init');
+        }
+
+        $mform->addGroup($pagegroup, 'questionsperpagegrp',
+                get_string('newpage', 'quiz'), null, false);
+        $mform->addHelpButton('questionsperpagegrp', 'newpage', 'quiz');
+        $mform->setAdvanced('questionsperpagegrp', $quizconfig->questionsperpage_adv);
+
+        //-------------------------------------------------------------------------------
+        $mform->addElement('header', 'interactionhdr', get_string('questionbehaviour', 'quiz'));
+
+        // Shuffle within questions.
+        $mform->addElement('selectyesno', 'shuffleanswers', get_string('shufflewithin', 'quiz'));
+        $mform->addHelpButton('shuffleanswers', 'shufflewithin', 'quiz');
+        $mform->setAdvanced('shuffleanswers', $quizconfig->shuffleanswers_adv);
+        $mform->setDefault('shuffleanswers', $quizconfig->shuffleanswers);
+
+        // How questions behave (question behaviour).
+        if (!empty($this->current->preferredbehaviour)) {
+            $currentbehaviour = $this->current->preferredbehaviour;
+        } else {
+            $currentbehaviour = '';
+        }
+        $behaviours = question_engine::get_behaviour_options($currentbehaviour);
+        $mform->addElement('select', 'preferredbehaviour',
+                get_string('howquestionsbehave', 'question'), $behaviours);
+        $mform->addHelpButton('preferredbehaviour', 'howquestionsbehave', 'question');
+        $mform->setDefault('preferredbehaviour', $quizconfig->preferredbehaviour);
+
+        // Each attempt builds on last.
+        $mform->addElement('selectyesno', 'attemptonlast',
+                get_string('eachattemptbuildsonthelast', 'quiz'));
+        $mform->addHelpButton('attemptonlast', 'eachattemptbuildsonthelast', 'quiz');
+        $mform->setAdvanced('attemptonlast', $quizconfig->attemptonlast_adv);
+        $mform->setDefault('attemptonlast', $quizconfig->attemptonlast);
+        $mform->disabledIf('attemptonlast', 'attempts', 'eq', 1);
+
+        //-------------------------------------------------------------------------------
+        $mform->addElement('header', 'reviewoptionshdr',
+                get_string('reviewoptionsheading', 'quiz'));
+        $mform->addHelpButton('reviewoptionshdr', 'reviewoptionsheading', 'quiz');
+
+        // Review options.
+        $this->add_review_options_group($mform, $quizconfig, 'during',
+                mod_quiz_display_options::DURING);
+        $this->add_review_options_group($mform, $quizconfig, 'immediately',
+                mod_quiz_display_options::IMMEDIATELY_AFTER);
+        $this->add_review_options_group($mform, $quizconfig, 'open',
+                mod_quiz_display_options::LATER_WHILE_OPEN);
+        $this->add_review_options_group($mform, $quizconfig, 'closed',
+                mod_quiz_display_options::AFTER_CLOSE);
+
+        foreach ($behaviours as $behaviour => $notused) {
+            $unusedoptions = question_engine::get_behaviour_unused_display_options($behaviour);
+            foreach ($unusedoptions as $unusedoption) {
+                $mform->disabledIf($unusedoption . 'during', 'preferredbehaviour',
+                        'eq', $behaviour);
+            }
+        }
+        $mform->disabledIf('attemptduring', 'preferredbehaviour',
+                'neq', 'wontmatch');
+        $mform->disabledIf('overallfeedbackduring', 'preferredbehaviour',
+                'neq', 'wontmatch');
+
+        //-------------------------------------------------------------------------------
+        $mform->addElement('header', 'display', get_string('display', 'form'));
+
+        // Show user picture.
+        $mform->addElement('selectyesno', 'showuserpicture',
+                get_string('showuserpicture', 'quiz'));
+        $mform->addHelpButton('showuserpicture', 'showuserpicture', 'quiz');
+        $mform->setAdvanced('showuserpicture', $quizconfig->showuserpicture_adv);
+        $mform->setDefault('showuserpicture', $quizconfig->showuserpicture);
+
+        // Overall decimal points.
+        $options = array();
+        for ($i = 0; $i <= QUIZ_MAX_DECIMAL_OPTION; $i++) {
+            $options[$i] = $i;
+        }
+        $mform->addElement('select', 'decimalpoints', get_string('decimalplaces', 'quiz'),
+                $options);
+        $mform->addHelpButton('decimalpoints', 'decimalplaces', 'quiz');
+        $mform->setAdvanced('decimalpoints', $quizconfig->decimalpoints_adv);
+        $mform->setDefault('decimalpoints', $quizconfig->decimalpoints);
+
+        // Question decimal points.
+        $options = array(-1 => get_string('sameasoverall', 'quiz'));
+        for ($i = 0; $i <= QUIZ_MAX_Q_DECIMAL_OPTION; $i++) {
+            $options[$i] = $i;
+        }
+        $mform->addElement('select', 'questiondecimalpoints',
+                get_string('decimalplacesquestion', 'quiz'), $options);
+        $mform->addHelpButton('questiondecimalpoints', 'decimalplacesquestion', 'quiz');
+        $mform->setAdvanced('questiondecimalpoints', $quizconfig->questiondecimalpoints_adv);
+        $mform->setDefault('questiondecimalpoints', $quizconfig->questiondecimalpoints);
+
+        // Show blocks during quiz attempt
+        $mform->addElement('selectyesno', 'showblocks', get_string('showblocks', 'quiz'));
+        $mform->addHelpButton('showblocks', 'showblocks', 'quiz');
+        $mform->setAdvanced('showblocks', $quizconfig->showblocks_adv);
+        $mform->setDefault('showblocks', $quizconfig->showblocks);
+
+        //-------------------------------------------------------------------------------
+        $mform->addElement('header', 'security', get_string('extraattemptrestrictions', 'quiz'));
+
+        // Enforced time delay between quiz attempts.
+        $mform->addElement('passwordunmask', 'quizpassword', get_string('requirepassword', 'quiz'));
+        $mform->setType('quizpassword', PARAM_TEXT);
+        $mform->addHelpButton('quizpassword', 'requirepassword', 'quiz');
+        $mform->setAdvanced('quizpassword', $quizconfig->password_adv);
+        $mform->setDefault('quizpassword', $quizconfig->password);
 
+        // IP address.
+        $mform->addElement('text', 'subnet', get_string('requiresubnet', 'quiz'));
+        $mform->setType('subnet', PARAM_TEXT);
+        $mform->addHelpButton('subnet', 'requiresubnet', 'quiz');
+        $mform->setAdvanced('subnet', $quizconfig->subnet_adv);
+        $mform->setDefault('subnet', $quizconfig->subnet);
+
+        // Enforced time delay between quiz attempts.
+        $mform->addElement('duration', 'delay1', get_string('delay1st2nd', 'quiz'),
+                array('optional' => true));
+        $mform->addHelpButton('delay1', 'delay1st2nd', 'quiz');
+        $mform->setAdvanced('delay1', $quizconfig->delay1_adv);
+        $mform->setDefault('delay1', $quizconfig->delay1);
+        $mform->disabledIf('delay1', 'attempts', 'eq', 1);
+
+        $mform->addElement('duration', 'delay2', get_string('delaylater', 'quiz'),
+                array('optional' => true));
+        $mform->addHelpButton('delay2', 'delaylater', 'quiz');
+        $mform->setAdvanced('delay2', $quizconfig->delay2_adv);
+        $mform->setDefault('delay2', $quizconfig->delay2);
+        $mform->disabledIf('delay2', 'attempts', 'eq', 1);
+        $mform->disabledIf('delay2', 'attempts', 'eq', 2);
+
+        // 'Secure' window.
         $options = array(
                     0 => get_string('none', 'quiz'),
                     1 => get_string('popupwithjavascriptsupport', 'quiz'));
@@ -201,88 +289,129 @@ class mod_quiz_mod_form extends moodleform_mod {
             $options[2] = get_string('requiresafeexambrowser', 'quiz');
         }
         $mform->addElement('select', 'popup', get_string('browsersecurity', 'quiz'), $options);
-        $mform->setHelpButton('popup', array('browsersecurity', get_string('browsersecurity', 'quiz'), 'quiz'));
-        $mform->setAdvanced('popup', $CFG->quiz_fix_popup);
-        $mform->setDefault('popup', $CFG->quiz_popup);
+        $mform->addHelpButton('popup', 'browsersecurity', 'quiz');
+        $mform->setAdvanced('popup', $quizconfig->popup_adv);
+        $mform->setDefault('popup', $quizconfig->popup);
 
-        $mform->addElement('passwordunmask', 'quizpassword', get_string("requirepassword", "quiz"));
-        $mform->setType('quizpassword', PARAM_TEXT);
-        $mform->setHelpButton('quizpassword', array("requirepassword", get_string("requirepassword", "quiz"), "quiz"));
-        $mform->setAdvanced('quizpassword', $CFG->quiz_fix_password);
-        $mform->setDefault('quizpassword', $CFG->quiz_password);
-
-        $mform->addElement('text', 'subnet', get_string("requiresubnet", "quiz"));
-        $mform->setType('subnet', PARAM_TEXT);
-        $mform->setHelpButton('subnet', array("requiresubnet", get_string("requiresubnet", "quiz"), "quiz"));
-        $mform->setAdvanced('subnet', $CFG->quiz_fix_subnet);
-        $mform->setDefault('subnet', $CFG->quiz_subnet);
-
-//-------------------------------------------------------------------------------
-        $features = new stdClass;
-        $features->groups = true;
-        $features->groupings = true;
-        $features->groupmembersonly = true;
-        $this->standard_coursemodule_elements($features);
-//-------------------------------------------------------------------------------
+        //-------------------------------------------------------------------------------
         $mform->addElement('header', 'overallfeedbackhdr', get_string('overallfeedback', 'quiz'));
-        $mform->setHelpButton('overallfeedbackhdr', array('overallfeedback', get_string('overallfeedback', 'quiz'), 'quiz'));
+        $mform->addHelpButton('overallfeedbackhdr', 'overallfeedback', 'quiz');
 
-        $mform->addElement('hidden', 'grade', $CFG->quiz_maximumgrade);
-        $mform->setType('grade', PARAM_RAW);
-        if (empty($this->_cm)) {
-            $needwarning = $CFG->quiz_maximumgrade == 0;
+        if (isset($this->current->grade)) {
+            $needwarning = $this->current->grade === 0;
         } else {
-            $quizgrade = get_field('quiz', 'grade', 'id', $this->_instance);
-            $needwarning = $quizgrade == 0;
+            $needwarning = $quizconfig->maximumgrade == 0;
         }
         if ($needwarning) {
-            $mform->addElement('static', 'nogradewarning', '', get_string('nogradewarning', 'quiz'));
+            $mform->addElement('static', 'nogradewarning', '',
+                    get_string('nogradewarning', 'quiz'));
         }
 
-        $mform->addElement('static', 'gradeboundarystatic1', get_string('gradeboundary', 'quiz'), '100%');
+        $mform->addElement('static', 'gradeboundarystatic1',
+                get_string('gradeboundary', 'quiz'), '100%');
 
         $repeatarray = array();
-        $repeatarray[] = &MoodleQuickForm::createElement('text', 'feedbacktext', get_string('feedback', 'quiz'), array('size' => 50));
-        $mform->setType('feedbacktext', PARAM_RAW);
-        $repeatarray[] = &MoodleQuickForm::createElement('text', 'feedbackboundaries', get_string('gradeboundary', 'quiz'), array('size' => 10));
-        $mform->setType('feedbackboundaries', PARAM_NOTAGS);
+        $repeatedoptions = array();
+        $repeatarray[] = MoodleQuickForm::createElement('editor', 'feedbacktext',
+                get_string('feedback', 'quiz'), null, array('maxfiles' => EDITOR_UNLIMITED_FILES,
+                        'noclean' => true, 'context' => $this->context));
+        $repeatarray[] = MoodleQuickForm::createElement('text', 'feedbackboundaries',
+                get_string('gradeboundary', 'quiz'), array('size' => 10));
+        $repeatedoptions['feedbacktext']['type'] = PARAM_RAW;
+        $repeatedoptions['feedbackboundaries']['type'] = PARAM_RAW;
 
         if (!empty($this->_instance)) {
-            $this->_feedbacks = get_records('quiz_feedback', 'quizid', $this->_instance, 'mingrade DESC');
+            $this->_feedbacks = $DB->get_records('quiz_feedback',
+                    array('quizid' => $this->_instance), 'mingrade DESC');
         } else {
             $this->_feedbacks = array();
         }
         $numfeedbacks = max(count($this->_feedbacks) * 1.5, 5);
 
         $nextel = $this->repeat_elements($repeatarray, $numfeedbacks - 1,
-                array(), 'boundary_repeats', 'boundary_add_fields', 3,
+                $repeatedoptions, 'boundary_repeats', 'boundary_add_fields', 3,
                 get_string('addmoreoverallfeedbacks', 'quiz'), true);
 
         // Put some extra elements in before the button
-        $insertEl = &MoodleQuickForm::createElement('text', "feedbacktext[$nextel]", get_string('feedback', 'quiz'), array('size' => 50));
-        $mform->insertElementBefore($insertEl, 'boundary_add_fields');
-
-        $insertEl = &MoodleQuickForm::createElement('static', 'gradeboundarystatic2', get_string('gradeboundary', 'quiz'), '0%');
-        $mform->insertElementBefore($insertEl, 'boundary_add_fields');
+        $mform->insertElementBefore(MoodleQuickForm::createElement('editor',
+                "feedbacktext[$nextel]", get_string('feedback', 'quiz'), null,
+                array('maxfiles' => EDITOR_UNLIMITED_FILES, 'noclean' => true,
+                      'context' => $this->context)),
+                'boundary_add_fields');
+        $mform->insertElementBefore(MoodleQuickForm::createElement('static',
+                'gradeboundarystatic2', get_string('gradeboundary', 'quiz'), '0%'),
+                'boundary_add_fields');
 
         // Add the disabledif rules. We cannot do this using the $repeatoptions parameter to
-        // repeat_elements becuase we don't want to dissable the first feedbacktext.
+        // repeat_elements because we don't want to dissable the first feedbacktext.
         for ($i = 0; $i < $nextel; $i++) {
             $mform->disabledIf('feedbackboundaries[' . $i . ']', 'grade', 'eq', 0);
             $mform->disabledIf('feedbacktext[' . ($i + 1) . ']', 'grade', 'eq', 0);
         }
 
-//-------------------------------------------------------------------------------
+        //-------------------------------------------------------------------------------
+        $this->standard_coursemodule_elements();
+
+        //-------------------------------------------------------------------------------
         // buttons
         $this->add_action_buttons();
     }
 
-    function data_preprocessing(&$default_values){
+    protected function add_review_options_group($mform, $quizconfig, $whenname, $when) {
+        $group = array();
+        foreach (self::$reviewfields as $field => $label) {
+            $group[] = $mform->createElement('checkbox', $field . $whenname, '', $label);
+        }
+        $mform->addGroup($group, $whenname . 'optionsgrp',
+                get_string('review' . $whenname, 'quiz'), null, false);
+
+        foreach (self::$reviewfields as $field => $notused) {
+            $cfgfield = 'review' . $field;
+            if ($quizconfig->$cfgfield & $when) {
+                $mform->setDefault($field . $whenname, 1);
+            } else {
+                $mform->setDefault($field . $whenname, 0);
+            }
+        }
+
+        $mform->disabledIf('correctness' . $whenname, 'attempt' . $whenname);
+        $mform->disabledIf('specificfeedback' . $whenname, 'attempt' . $whenname);
+        $mform->disabledIf('generalfeedback' . $whenname, 'attempt' . $whenname);
+        $mform->disabledIf('rightanswer' . $whenname, 'attempt' . $whenname);
+    }
+
+    protected function preprocessing_review_settings(&$toform, $whenname, $when) {
+        foreach (self::$reviewfields as $field => $notused) {
+            $fieldname = 'review' . $field;
+            if (array_key_exists($fieldname, $toform)) {
+                $toform[$field . $whenname] = $toform[$fieldname] & $when;
+            }
+        }
+    }
+
+    public function data_preprocessing(&$toform) {
+        if (isset($toform['grade'])) {
+            // Convert to a real number, so we don't get 0.0000.
+            $toform['grade'] = $toform['grade'] + 0;
+        }
+
         if (count($this->_feedbacks)) {
             $key = 0;
-            foreach ($this->_feedbacks as $feedback){
-                $default_values['feedbacktext['.$key.']'] = $feedback->feedbacktext;
-                if ($default_values['grade'] == 0) {
+            foreach ($this->_feedbacks as $feedback) {
+                $draftid = file_get_submitted_draft_itemid('feedbacktext['.$key.']');
+                $toform['feedbacktext['.$key.']']['text'] = file_prepare_draft_area(
+                    $draftid,               // draftid
+                    $this->context->id,     // context
+                    'mod_quiz',             // component
+                    'feedback',             // filarea
+                    !empty($feedback->id) ? (int) $feedback->id : null, // itemid
+                    null,
+                    $feedback->feedbacktext // text
+                );
+                $toform['feedbacktext['.$key.']']['format'] = $feedback->feedbacktextformat;
+                $toform['feedbacktext['.$key.']']['itemid'] = $draftid;
+
+                if ($toform['grade'] == 0) {
                     // When a quiz is un-graded, there can only be one lot of
                     // feedback. If the quiz previously had a maximum grade and
                     // several lots of feedback, we must now avoid putting text
@@ -290,61 +419,44 @@ class mod_quiz_mod_form extends moodleform_mod {
                     // validation will insist are blank.
                     break;
                 }
+
                 if ($feedback->mingrade > 0) {
-                    $default_values['feedbackboundaries['.$key.']'] = (100.0 * $feedback->mingrade / $default_values['grade']) . '%';
+                    $toform['feedbackboundaries['.$key.']'] =
+                            (100.0 * $feedback->mingrade / $toform['grade']) . '%';
                 }
                 $key++;
             }
         }
 
-        if (isset($default_values['timelimit'])) {
-            $default_values['timelimitenable'] = $default_values['timelimit'] > 0;
+        if (isset($toform['timelimit'])) {
+            $toform['timelimitenable'] = $toform['timelimit'] > 0;
         }
 
-        if (isset($default_values['review'])){
-            $review = (int)$default_values['review'];
-            unset($default_values['review']);
-
-            $default_values['responsesimmediately'] = $review & QUIZ_REVIEW_RESPONSES & QUIZ_REVIEW_IMMEDIATELY;
-            $default_values['answersimmediately'] = $review & QUIZ_REVIEW_ANSWERS & QUIZ_REVIEW_IMMEDIATELY;
-            $default_values['feedbackimmediately'] = $review & QUIZ_REVIEW_FEEDBACK & QUIZ_REVIEW_IMMEDIATELY;
-            $default_values['generalfeedbackimmediately'] = $review & QUIZ_REVIEW_GENERALFEEDBACK & QUIZ_REVIEW_IMMEDIATELY;
-            $default_values['scoreimmediately'] = $review & QUIZ_REVIEW_SCORES & QUIZ_REVIEW_IMMEDIATELY;
-            $default_values['overallfeedbackimmediately'] = $review & QUIZ_REVIEW_OVERALLFEEDBACK & QUIZ_REVIEW_IMMEDIATELY;
+        $this->preprocessing_review_settings($toform, 'during',
+                mod_quiz_display_options::DURING);
+        $this->preprocessing_review_settings($toform, 'immediately',
+                mod_quiz_display_options::IMMEDIATELY_AFTER);
+        $this->preprocessing_review_settings($toform, 'open',
+                mod_quiz_display_options::LATER_WHILE_OPEN);
+        $this->preprocessing_review_settings($toform, 'closed',
+                mod_quiz_display_options::AFTER_CLOSE);
+        $toform['attemptduring'] = true;
+        $toform['overallfeedbackduring'] = false;
 
-            $default_values['responsesopen'] = $review & QUIZ_REVIEW_RESPONSES & QUIZ_REVIEW_OPEN;
-            $default_values['answersopen'] = $review & QUIZ_REVIEW_ANSWERS & QUIZ_REVIEW_OPEN;
-            $default_values['feedbackopen'] = $review & QUIZ_REVIEW_FEEDBACK & QUIZ_REVIEW_OPEN;
-            $default_values['generalfeedbackopen'] = $review & QUIZ_REVIEW_GENERALFEEDBACK & QUIZ_REVIEW_OPEN;
-            $default_values['scoreopen'] = $review & QUIZ_REVIEW_SCORES & QUIZ_REVIEW_OPEN;
-            $default_values['overallfeedbackopen'] = $review & QUIZ_REVIEW_OVERALLFEEDBACK & QUIZ_REVIEW_OPEN;
-
-            $default_values['responsesclosed'] = $review & QUIZ_REVIEW_RESPONSES & QUIZ_REVIEW_CLOSED;
-            $default_values['answersclosed'] = $review & QUIZ_REVIEW_ANSWERS & QUIZ_REVIEW_CLOSED;
-            $default_values['feedbackclosed'] = $review & QUIZ_REVIEW_FEEDBACK & QUIZ_REVIEW_CLOSED;
-            $default_values['generalfeedbackclosed'] = $review & QUIZ_REVIEW_GENERALFEEDBACK & QUIZ_REVIEW_CLOSED;
-            $default_values['scoreclosed'] = $review & QUIZ_REVIEW_SCORES & QUIZ_REVIEW_CLOSED;
-            $default_values['overallfeedbackclosed'] = $review & QUIZ_REVIEW_OVERALLFEEDBACK & QUIZ_REVIEW_CLOSED;
+        // Password field - different in form to stop browsers that remember
+        // passwords from getting confused.
+        if (isset($toform['password'])) {
+            $toform['quizpassword'] = $toform['password'];
+            unset($toform['password']);
         }
-
-        if (isset($default_values['optionflags'])){
-            $default_values['adaptive'] = $default_values['optionflags'] & QUESTION_ADAPTIVE;
-            unset($default_values['optionflags']);
         }
 
-        // Password field - different in form to stop browsers that remember passwords
-        // getting confused.
-        if (isset($default_values['password'])) {
-            $default_values['quizpassword'] = $default_values['password'];
-            unset($default_values['password']);
-        }
-    }
-
-    function validation($data, $files) {
+    public function validation($data, $files) {
         $errors = parent::validation($data, $files);
 
         // Check open and close times are consistent.
-        if ($data['timeopen'] != 0 && $data['timeclose'] != 0 && $data['timeclose'] < $data['timeopen']) {
+        if ($data['timeopen'] != 0 && $data['timeclose'] != 0 &&
+                $data['timeclose'] < $data['timeopen']) {
             $errors['timeclose'] = get_string('closebeforeopen', 'quiz');
         }
 
@@ -357,14 +469,18 @@ class mod_quiz_mod_form extends moodleform_mod {
                 if (is_numeric($boundary)) {
                     $boundary = $boundary * $data['grade'] / 100.0;
                 } else {
-                    $errors["feedbackboundaries[$i]"] = get_string('feedbackerrorboundaryformat', 'quiz', $i + 1);
+                    $errors["feedbackboundaries[$i]"] =
+                            get_string('feedbackerrorboundaryformat', 'quiz', $i + 1);
                 }
             }
             if (is_numeric($boundary) && $boundary <= 0 || $boundary >= $data['grade'] ) {
-                $errors["feedbackboundaries[$i]"] = get_string('feedbackerrorboundaryoutofrange', 'quiz', $i + 1);
+                $errors["feedbackboundaries[$i]"] =
+                        get_string('feedbackerrorboundaryoutofrange', 'quiz', $i + 1);
             }
-            if (is_numeric($boundary) && $i > 0 && $boundary >= $data['feedbackboundaries'][$i - 1]) {
-                $errors["feedbackboundaries[$i]"] = get_string('feedbackerrororder', 'quiz', $i + 1);
+            if (is_numeric($boundary) && $i > 0 &&
+                    $boundary >= $data['feedbackboundaries'][$i - 1]) {
+                $errors["feedbackboundaries[$i]"] =
+                        get_string('feedbackerrororder', 'quiz', $i + 1);
             }
             $data['feedbackboundaries'][$i] = $boundary;
             $i += 1;
@@ -374,23 +490,21 @@ class mod_quiz_mod_form extends moodleform_mod {
         // Check there is nothing in the remaining unused fields.
         if (!empty($data['feedbackboundaries'])) {
             for ($i = $numboundaries; $i < count($data['feedbackboundaries']); $i += 1) {
-                if (!empty($data['feedbackboundaries'][$i] ) && trim($data['feedbackboundaries'][$i] ) != '') {
-                    $errors["feedbackboundaries[$i]"] = get_string('feedbackerrorjunkinboundary', 'quiz', $i + 1);
+                if (!empty($data['feedbackboundaries'][$i] ) &&
+                        trim($data['feedbackboundaries'][$i] ) != '') {
+                    $errors["feedbackboundaries[$i]"] =
+                            get_string('feedbackerrorjunkinboundary', 'quiz', $i + 1);
                 }
             }
         }
         for ($i = $numboundaries + 1; $i < count($data['feedbacktext']); $i += 1) {
-            if (!empty($data['feedbacktext'][$i] ) && trim($data['feedbacktext'][$i] ) != '') {
-                $errors["feedbacktext[$i]"] = get_string('feedbackerrorjunkinfeedback', 'quiz', $i + 1);
+            if (!empty($data['feedbacktext'][$i]['text']) &&
+                    trim($data['feedbacktext'][$i]['text'] ) != '') {
+                $errors["feedbacktext[$i]"] =
+                        get_string('feedbackerrorjunkinfeedback', 'quiz', $i + 1);
             }
         }
 
-        if (count($errors) == 0) {
-            return true;
-        } else {
             return $errors;
         }
-    }
-
 }
-?>
