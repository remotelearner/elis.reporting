diff --git a/mod/quiz/report/overview/overviewgraph.php b/mod/quiz/report/overview/overviewgraph.php
index 8380f6c..4efa315 100644
--- a/mod/quiz/report/overview/overviewgraph.php
+++ b/mod/quiz/report/overview/overviewgraph.php
@@ -1,35 +1,66 @@
-<?php  // $Id$
-include '../../../../config.php';
-include $CFG->dirroot."/lib/graphlib.php";
-include $CFG->dirroot."/mod/quiz/report/reportlib.php";
-function graph_get_new_colour(){
-    static $colourindex = 0;
-    $colours = array('red', 'green', 'yellow', 'orange', 'purple', 'black', 'maroon', 'blue', 'ltgreen', 'navy', 'ltred', 'ltltgreen', 'ltltorange', 'olive', 'gray', 'ltltred', 'ltorange', 'lime', 'ltblue', 'ltltblue');
-    $colour = $colours[$colourindex];
-    $colourindex++;
-    if ($colourindex > (count($colours)-1)){
-        $colourindex =0;
-    }
-    return $colour;
-}
-define('QUIZ_REPORT_MAX_PARTICIPANTS_TO_SHOW_ALL_GROUPS', 500);
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file renders the quiz overview graph.
+ *
+ * @package    quiz
+ * @subpackage overview
+ * @copyright  2008 Jamie Pratt
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+require_once(dirname(__FILE__) . '/../../../../config.php');
+require_once($CFG->libdir . '/graphlib.php');
+require_once($CFG->dirroot . '/mod/quiz/locallib.php');
+require_once($CFG->dirroot . '/mod/quiz/report/reportlib.php');
+
 $quizid = required_param('id', PARAM_INT);
+$groupid = optional_param('groupid', 0, PARAM_INT);
 
-$quiz = get_record('quiz', 'id', $quizid);
-$course = get_record('course', 'id', $quiz->course);
-require_login($course);
+$quiz = $DB->get_record('quiz', array('id' => $quizid));
+$course = $DB->get_record('course', array('id' => $quiz->course));
 $cm = get_coursemodule_from_instance('quiz', $quizid);
-if ($groupmode = groups_get_activity_groupmode($cm)) {   // Groups are being used
+
+require_login($course, false, $cm);
+$modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
+require_capability('mod/quiz:viewreports', $modcontext);
+
+if ($groupid && $groupmode = groups_get_activity_groupmode($cm)) {
+    // Groups are being used
     $groups = groups_get_activity_allowed_groups($cm);
+    if (!array_key_exists($groupid, $groups)) {
+        print_error('errorinvalidgroup', 'group', null, $groupid);
+    }
+    $group = $groups[$groupid];
+    $groupusers = get_users_by_capability($modcontext,
+            array('mod/quiz:reviewmyattempts', 'mod/quiz:attempt'),
+            '', '', '', '', $group->id, '', false);
+    if (!$groupusers) {
+        print_error('nostudentsingroup');
+    }
+    $groupusers = array_keys($groupusers);
 } else {
-    $groups = false;
+    $groupusers = array();
 }
-$modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
-require_capability('mod/quiz:viewreports', $modcontext);
 
-$line = new graph(800,600);
+$line = new graph(800, 600);
 $line->parameter['title']   = '';
-$line->parameter['y_label_left'] = $course->students;
+$line->parameter['y_label_left'] = get_string('participants');
 $line->parameter['x_label'] = get_string('grade');
 $line->parameter['y_label_angle'] = 90;
 $line->parameter['x_label_angle'] = 0;
@@ -39,92 +70,59 @@ $line->parameter['x_axis_angle'] = 60;
 $line->y_tick_labels = null;
 $line->offset_relation = null;
 
-$line->parameter['bar_size']    = 1; // will make size > 1 to get overlap effect when showing groups
-$line->parameter['bar_spacing'] = 10; // don't forget to increase spacing so that graph doesn't become one big block of colour
+// will make size > 1 to get overlap effect when showing groups
+$line->parameter['bar_size'] = 1;
+// don't forget to increase spacing so that graph doesn't become one big block of colour
+$line->parameter['bar_spacing'] = 10;
 
 //pick a sensible number of bands depending on quiz maximum grade.
 $bands = $quiz->grade;
-while ($bands >= 20 || $bands < 10){
-    if ($bands >= 50){
-        $bands = $bands /5;
-    } else if ($bands >= 20) {
-        $bands = $bands /2;
+while ($bands > 20 || $bands <= 10) {
+    if ($bands > 50) {
+        $bands /= 5;
+    } else if ($bands > 20) {
+        $bands /= 2;
     }
-    if ($bands < 4){
-        $bands = $bands * 5;
-    } else if ($bands < 10){
-        $bands = $bands * 2;
+    if ($bands < 4) {
+        $bands *= 5;
+    } else if ($bands <= 10) {
+        $bands *= 2;
     }
 }
 
-$bandwidth = $quiz->grade / $bands;
 $bands = ceil($bands);
+$bandwidth = $quiz->grade / $bands;
 $bandlabels = array();
-for ($i=0;$i < $quiz->grade;$i += $bandwidth){
-    $label = number_format($i, $quiz->decimalpoints).' - ';
-    if ($quiz->grade > $i+$bandwidth){
-        $label .= number_format($i+$bandwidth, $quiz->decimalpoints);
-    } else {
-        $label .= number_format($quiz->grade, $quiz->decimalpoints);
-    }
-    $bandlabels[] = $label;
+for ($i = 1; $i <= $bands; $i++) {
+    $bandlabels[] = quiz_format_grade($quiz, ($i - 1) * $bandwidth) . ' - ' .
+            quiz_format_grade($quiz, $i * $bandwidth);
 } 
 $line->x_data          = $bandlabels;
 
-$line->y_format['allusers'] =
-  array('colour' => graph_get_new_colour(), 'bar' => 'fill', 'shadow_offset' => 1, 'legend' => get_string('allparticipants'));
-$line->y_data['allusers'] = quiz_report_grade_bands($bandwidth, $bands, $quizid);
-if (array_sum($line->y_data['allusers'])>QUIZ_REPORT_MAX_PARTICIPANTS_TO_SHOW_ALL_GROUPS ||
-        count($groups)>4){
-    if ($groups){
-        if ($currentgroup = groups_get_activity_group($cm)){
-            $groups = array($currentgroup=>'');
-        } else {
-            $groups = false;//all participants mode
-        }
-    }
-}
-$line->y_order = array('allusers');
-if ($groups){
-    foreach (array_keys($groups) as $group){
-        $useridingroup = get_users_by_capability($modcontext, array('mod/quiz:reviewmyattempts', 'mod/quiz:attempt'),'','','','',$group,'',false);
-        if ($useridingroup){
-            $useridingrouplist = join(',',array_keys($useridingroup));
-            $groupdata = quiz_report_grade_bands($bandwidth, $bands, $quizid, $useridingrouplist);
-            if ($groupdata){
-                $line->parameter['bar_size']    = 1.2;
-                $line->y_data['groupusers'.$group] = $groupdata;
-                //only turn on legends if there is more than one set of bars
-                $line->parameter['legend']        = 'outside-top';
-                $line->parameter['legend_border'] = 'black';
-                $line->parameter['legend_offset'] = 4;
-                $line->y_format['groupusers'.$group] =
-                    array('colour' => graph_get_new_colour(), 'bar' => 'fill', 'shadow_offset' => 1, 'legend' => groups_get_group_name($group));
-                $line->y_order[] ='groupusers'.$group;
-            }
-        }
-    }
-}
-
-
+$line->y_format['allusers'] = array(
+    'colour' => 'red',
+    'bar' => 'fill',
+    'shadow_offset' => 1,
+    'legend' => get_string('allparticipants')
+);
+$line->y_data['allusers'] = quiz_report_grade_bands($bandwidth, $bands, $quizid, $groupusers);
 
+$line->y_order = array('allusers');
 
+$ymax = max($line->y_data['allusers']);
 $line->parameter['y_min_left'] = 0;  // start at 0
-$line->parameter['y_max_left'] = max($line->y_data['allusers']); 
+$line->parameter['y_max_left'] = $ymax;
 $line->parameter['y_decimal_left'] = 0; // 2 decimal places for y axis.
 
-
 //pick a sensible number of gridlines depending on max value on graph.
-$gridlines = max($line->y_data['allusers']);
-while ($gridlines >= 10){
-    if ($gridlines >= 50){
-        $gridlines = $gridlines /5;
+$gridlines = $ymax;
+while ($gridlines >= 10) {
+    if ($gridlines >= 50) {
+        $gridlines /= 5;
     } else {
-        $gridlines = $gridlines /2;
+        $gridlines /= 2;
     }
 }
 
-$line->parameter['y_axis_gridlines'] = $gridlines+1; 
+$line->parameter['y_axis_gridlines'] = $gridlines + 1;
 $line->draw();
-
-?>
