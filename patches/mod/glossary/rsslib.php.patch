diff --git a/mod/glossary/rsslib.php b/mod/glossary/rsslib.php
index 73bccb1..b4c4fb7 100644
--- a/mod/glossary/rsslib.php
+++ b/mod/glossary/rsslib.php
@@ -1,112 +1,81 @@
-<?php  // $Id$
+<?php
     //This file adds support to rss feeds generation
 
     //This function is the main entry point to glossary
-    //rss feeds generation. Foreach site glossary with rss enabled
-    //build one XML rss structure.
-    function glossary_rss_feeds() {
-
-        global $CFG;
+    //rss feeds generation.
+    function glossary_rss_get_feed($context, $args) {
+        global $CFG, $DB, $COURSE, $USER;
 
         $status = true;
 
-        //Check CFG->enablerssfeeds
-        if (empty($CFG->enablerssfeeds)) {
-            debugging("DISABLED (admin variables)");
-        //Check CFG->glossary_enablerssfeeds
-        } else if (empty($CFG->glossary_enablerssfeeds)) {
+        if (empty($CFG->glossary_enablerssfeeds)) {
             debugging("DISABLED (module configuration)");
-        //It's working so we start...
-        } else {
-            //Iterate over all glossaries
-            if ($glossaries = get_records("glossary")) {
-                foreach ($glossaries as $glossary) {
-                    if (!empty($glossary->rsstype) && !empty($glossary->rssarticles) && $status) {
-
-                        $filename = rss_file_name('glossary', $glossary);  // RSS file
+            return null;
+        }
 
-                        //First let's make sure there is work to do by checking existing files
-                        if (file_exists($filename)) {
-                            if ($lastmodified = filemtime($filename)) {
-                                if (!glossary_rss_newstuff($glossary, $lastmodified)) {
-                                    continue;
+        $glossaryid  = clean_param($args[3], PARAM_INT);
+        $cm = get_coursemodule_from_instance('glossary', $glossaryid, 0, false, MUST_EXIST);
+        if ($cm) {
+            $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
+            if ($COURSE->id == $cm->course) {
+                $course = $COURSE;
+            } else {
+                $course = $DB->get_record('course', array('id'=>$cm->course), '*', MUST_EXIST);
                                 }
+            $coursecontext = get_context_instance(CONTEXT_COURSE, $course->id, MUST_EXIST);
+            //context id from db should match the submitted one
+            //no specific capability required to view glossary entries so just check user is enrolled
+            if ($context->id != $modcontext->id || !can_access_course($coursecontext, $USER)) {
+                return null;
                             }
                         }
 
-                        //Ignore hidden forums
-                        if (!instance_is_visible('glossary',$glossary)) {
-                            if (file_exists($filename)) {
-                                @unlink($filename);
-                            }
-                            continue;
+        $glossary = $DB->get_record('glossary', array('id' => $glossaryid), '*', MUST_EXIST);
+        if (!rss_enabled_for_mod('glossary', $glossary)) {
+            return null;
                         }
 
-                        mtrace("Updating RSS feed for ".format_string($glossary->name,true).", ID: $glossary->id");
+        $sql = glossary_rss_get_sql($glossary);
 
-                        //Get the XML contents
-                        $result = glossary_rss_feed($glossary);
-                        //Save the XML contents to file
-                        if (!empty($result)) {
-                            $status = rss_save_file("glossary",$glossary,$result);
-                        }
-                        //Some debug...
-                        if (debugging()) {
-                            if (empty($result)) {
-                                echo "ID: $glossary->id-> (empty) ";
-                            } else {
-                                if (!empty($status)) {
-                                    echo "ID: $glossary->id-> OK ";
-                                } else {
-                                    echo "ID: $glossary->id-> FAIL ";
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
-        return $status;
-    }
+        //get the cache file info
+        $filename = rss_get_file_name($glossary, $sql);
+        $cachedfilepath = rss_get_file_full_name('mod_glossary', $filename);
 
-    function glossary_rss_newstuff($glossary, $time) {
-    // If there is new stuff in the glossary since $time then this returns
-    // true.  Otherwise it returns false.
-        if ($glossary->rsstype == 1) {
-            $items = glossary_rss_feed_withauthor($glossary, $time);
-        } else {
-            $items = glossary_rss_feed_withoutauthor($glossary, $time);
+        //Is the cache out of date?
+        $cachedfilelastmodified = 0;
+        if (file_exists($cachedfilepath)) {
+            $cachedfilelastmodified = filemtime($cachedfilepath);
         }
-        return (!empty($items));
+        //if the cache is more than 60 seconds old and there's new stuff
+        $dontrecheckcutoff = time()-60;
+        if ( $dontrecheckcutoff > $cachedfilelastmodified && glossary_rss_newstuff($glossary, $cachedfilelastmodified)) {
+            if (!$recs = $DB->get_records_sql($sql, array(), 0, $glossary->rssarticles)) {
+                return null;
     }
 
-    //This function return the XML rss contents about the glossary record passed as parameter
-    //It returns false if something is wrong
-    function glossary_rss_feed($glossary) {
+            $items = array();
 
-        global $CFG;
+            $formatoptions = new stdClass();
+            $formatoptions->trusttext = true;
 
-        $status = true;
+            foreach ($recs as $rec) {
+                $item = new stdClass();
+                $user = new stdClass();
+                $item->title = $rec->entryconcept;
 
-        //Check CFG->enablerssfeeds
-        if (empty($CFG->enablerssfeeds)) {
-            debugging("DISABLED (admin variables)");
-        //Check CFG->glossary_enablerssfeeds
-        } else if (empty($CFG->glossary_enablerssfeeds)) {
-            debugging("DISABLED (module configuration)");
-        //It's working so we start...
-        } else {
-            //Check the glossary has rss activated
-            if (!empty($glossary->rsstype) && !empty($glossary->rssarticles)) {
-                //Depending of the glossary->rsstype, we are going to execute, different sqls
-                if ($glossary->rsstype == 1) {    //With author RSS
-                    $items = glossary_rss_feed_withauthor($glossary);
-                } else {                //Without author RSS
-                    $items = glossary_rss_feed_withoutauthor($glossary);
+                if ($glossary->rsstype == 1) {//With author
+                    $user->firstname = $rec->userfirstname;
+                    $user->lastname = $rec->userlastname;
 
+                    $item->author = fullname($user);
+                }
+
+                $item->pubdate = $rec->entrytimecreated;
+                $item->link = $CFG->wwwroot."/mod/glossary/showentry.php?courseid=".$glossary->course."&eid=".$rec->entryid;
+                $item->description = format_text($rec->entrydefinition,$rec->entryformat,$formatoptions,$glossary->course);
+                $items[] = $item;
                 }
-                //Now, if items, we begin building the structure
-                if (!empty($items)) {
+
                     //First all rss feeds common headers
                     $header = rss_standard_header(format_string($glossary->name,true),
                                                   $CFG->wwwroot."/mod/glossary/view.php?g=".$glossary->id,
@@ -121,139 +90,78 @@
                     }
                     //Now, if everything is ok, concatenate it
                     if (!empty($header) && !empty($articles) && !empty($footer)) {
-                        $status = $header.$articles.$footer;
-                    } else {
-                        $status = false;
-                    }
-                } else {
-                    $status = false;
-                }
-            }
+                $rss = $header.$articles.$footer;
+
+                //Save the XML contents to file.
+                $status = rss_save_file('mod_glossary', $filename, $rss);
         }
-        return $status;
     }
 
-    //This function returns "items" record array to be used to build the rss feed
-    //for a Type=with author glossary
-    function glossary_rss_feed_withauthor($glossary, $newsince=0) {
-
-        global $CFG;
+        if (!$status) {
+            $cachedfilepath = null;
+        }
 
-        $items = array();
+        return $cachedfilepath;
+    }
 
-        if ($newsince) {
-            $newsince = " AND e.timecreated > '$newsince'";
+    function glossary_rss_get_sql($glossary, $time=0) {
+        //do we only want new items?
+        if ($time) {
+            $time = "AND e.timecreated > $time";
         } else {
-            $newsince = "";
+            $time = "";
         }
 
-        if ($recs = get_records_sql ("SELECT e.id AS entryid, 
+        if ($glossary->rsstype == 1) {//With author
+            $sql = "SELECT e.id AS entryid,
                                              e.concept AS entryconcept, 
                                              e.definition AS entrydefinition, 
-                                             e.format AS entryformat, 
+                      e.definitionformat AS entryformat,
+                      e.definitiontrust AS entrytrust,
                                              e.timecreated AS entrytimecreated, 
                                              u.id AS userid, 
                                              u.firstname AS userfirstname,
                                              u.lastname AS userlastname
-                                      FROM {$CFG->prefix}glossary_entries e,
-                                           {$CFG->prefix}user u
-                                      WHERE e.glossaryid = '$glossary->id' AND
+                 FROM {glossary_entries} e,
+                      {user} u
+                WHERE e.glossaryid = {$glossary->id} AND
                                             u.id = e.userid AND
-                                            e.approved = 1 $newsince
-                                      ORDER BY e.timecreated desc")) {
-
-            //Are we just looking for new ones?  If so, then return now.
-            if ($newsince) {
-                return true;
-            }
-            //Iterate over each entry to get glossary->rssarticles records
-            $articlesleft = $glossary->rssarticles;
-            $item = NULL;
-            $user = NULL;
-
-            $formatoptions = new object;
-            $formatoptions->trusttext = true;
-
-            foreach ($recs as $rec) {
-                unset($item);
-                unset($user);
-                $item->title = $rec->entryconcept;
-                $user->firstname = $rec->userfirstname;
-                $user->lastname = $rec->userlastname;
-                $item->author = fullname($user);
-                $item->pubdate = $rec->entrytimecreated;
-                $item->link = $CFG->wwwroot."/mod/glossary/showentry.php?courseid=".$glossary->course."&eid=".$rec->entryid;
-                $item->description = format_text($rec->entrydefinition,$rec->entryformat,$formatoptions,$glossary->course);
-                $items[] = $item;
-                $articlesleft--;
-                if ($articlesleft < 1) {
-                    break;
-                }
-            }
-        }
-        return $items;
-    }
-
-    //This function returns "items" record array to be used to build the rss feed
-    //for a Type=without author glossary
-    function glossary_rss_feed_withoutauthor($glossary, $newsince=0) {
-
-        global $CFG;
-
-        $items = array();
-
-        if ($newsince) {
-            $newsince = " AND e.timecreated > '$newsince'";
-        } else {
-            $newsince = "";
-        }
-
-        if ($recs = get_records_sql ("SELECT e.id AS entryid,
+                      e.approved = 1 $time
+             ORDER BY e.timecreated desc";
+        } else {//Without author
+            $sql = "SELECT e.id AS entryid,
                                              e.concept AS entryconcept,
                                              e.definition AS entrydefinition,
-                                             e.format AS entryformat,
+                      e.definitionformat AS entryformat,
+                      e.definitiontrust AS entrytrust,
                                              e.timecreated AS entrytimecreated,
-                                             u.id AS userid,
-                                             u.firstname AS userfirstname,
-                                             u.lastname AS userlastname
-                                      FROM {$CFG->prefix}glossary_entries e,
-                                           {$CFG->prefix}user u
-                                      WHERE e.glossaryid = '$glossary->id' AND
+                      u.id AS userid
+                 FROM {glossary_entries} e,
+                      {user} u
+                WHERE e.glossaryid = {$glossary->id} AND
                                             u.id = e.userid AND
-                                            e.approved = 1 $newsince
-                                      ORDER BY e.timecreated desc")) {
+                      e.approved = 1 $time
+             ORDER BY e.timecreated desc";
+        }
 
-            //Are we just looking for new ones?  If so, then return now.
-            if ($newsince) {
-                return true;
+        return $sql;
             }
 
-            //Iterate over each entry to get glossary->rssarticles records
-            $articlesleft = $glossary->rssarticles;
-            $item = NULL;
-            $user = NULL;
+    /**
+     * If there is new stuff in since $time this returns true
+     * Otherwise it returns false.
+     *
+     * @param object $glossary the glossary activity object
+     * @param int $time timestamp
+     * @return bool
+     */
+    function glossary_rss_newstuff($glossary, $time) {
+        global $DB;
 
-            $formatoptions = new object;
-            $formatoptions->trusttext = true;
+        $sql = glossary_rss_get_sql($glossary, $time);
 
-            foreach ($recs as $rec) {
-                unset($item);
-                unset($user);
-                $item->title = $rec->entryconcept;
-                $user->firstname = $rec->userfirstname;
-                $user->lastname = $rec->userlastname;
-                //$item->author = fullname($user);
-                $item->pubdate = $rec->entrytimecreated;
-                $item->link = $CFG->wwwroot."/mod/glossary/showentry.php?courseid=".$glossary->course."&eid=".$rec->entryid;
-                $item->description = format_text($rec->entrydefinition,$rec->entryformat,$formatoptions,$glossary->course);
-                $items[] = $item;
-                $articlesleft--;
-                if ($articlesleft < 1) {
-                    break;
-                }
-            }
-        }
-        return $items;
+        $recs = $DB->get_records_sql($sql, null, 0, 1);//limit of 1. If we get even 1 back we have new stuff
+        return ($recs && !empty($recs));
     }
 
-?>
+
