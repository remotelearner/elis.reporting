diff --git a/mod/glossary/filter.php b/mod/glossary/filter.php
index 13ad616..85090f4 100644
--- a/mod/glossary/filter.php
+++ b/mod/glossary/filter.php
@@ -1,12 +1,21 @@
-<?php // $Id$
-
+<?php
+
+/**
+ *
+ * @global moodle_database $DB
+ * @global moodle_page $PAGE
+ * @param int $courseid
+ * @param string $text
+ * @return string
+ */
 function glossary_filter($courseid, $text) {
-    global $CFG;
+    global $CFG, $DB, $GLOSSARY_EXCLUDECONCEPTS, $PAGE;
 
     // Trivial-cache - keyed on $cachedcourseid
     static $nothingtodo;
     static $conceptlist;
     static $cachedcourseid;
+    static $jsinitialised;
 
     if (empty($courseid)) {
         $courseid = SITEID;
@@ -28,46 +37,40 @@ function glossary_filter($courseid, $text) {
     if (empty($conceptlist)) {
 
     /// Find all the glossaries we need to examine
-        if (!$glossaries = get_records_sql_menu ('SELECT g.id, g.name
-                                                    FROM '.$CFG->prefix.'glossary g,
-                                                         '.$CFG->prefix.'course_modules cm,
-                                                         '.$CFG->prefix.'modules m
+        if (!$glossaries = $DB->get_records_sql_menu('SELECT g.id, g.name
+                                                    FROM {glossary} g, {course_modules} cm, {modules} m
                                                     WHERE m.name = \'glossary\' AND
                                                           cm.module = m.id AND
                                                           cm.visible = 1 AND
                                                           g.id = cm.instance AND
-                                                          g.usedynalink != 0 AND
-                                                          (g.course = \''.$courseid.'\' OR g.globalglossary = 1)
-                                                    ORDER BY g.globalglossary, g.id')) {
+                                                          g.usedynalink <> 0 AND
+                                                          (g.course = ? OR g.globalglossary = 1)
+                                                    ORDER BY g.globalglossary, g.id', array($courseid))) {
             $nothingtodo = true;
             return $text;
         }
 
     /// Make a list of glossary IDs for searching
-        $glossarylist = '';
-        foreach ($glossaries as $glossaryid => $glossaryname) {
-            $glossarylist .= $glossaryid.',';
-        }
-        $glossarylist = substr($glossarylist,0,-1);
+        $glossarylist = implode(',', array_keys($glossaries));
    
 
     /// Pull out all the raw data from the database for entries, categories and aliases
-        $entries = get_records_select('glossary_entries',
-                                      'glossaryid IN ('.$glossarylist.') AND usedynalink != 0 AND approved != 0 ', '',
+        $entries = $DB->get_records_select('glossary_entries',
+                                           'glossaryid IN ('.$glossarylist.') AND usedynalink != 0 AND approved != 0 ', null, '',
                                       'id,glossaryid, concept, casesensitive, 0 AS category, fullmatch');
 
-        $categories = get_records_select('glossary_categories',
-                                         'glossaryid IN ('.$glossarylist.') AND usedynalink != 0', '',
+        $categories = $DB->get_records_select('glossary_categories',
+                                              'glossaryid IN ('.$glossarylist.') AND usedynalink != 0', null, '',
                                          'id,glossaryid,name AS concept, 1 AS casesensitive, 1 AS category, 1 AS fullmatch');
 
-        $aliases = get_records_sql('SELECT ga.id, ge.glossaryid, ga.alias as concept, ge.concept as originalconcept,
+        $aliases = $DB->get_records_sql('SELECT ga.id, ge.id AS entryid, ge.glossaryid, ga.alias AS concept, ge.concept AS originalconcept,
                                            casesensitive, 0 AS category, fullmatch
-                                      FROM '.$CFG->prefix.'glossary_alias ga,
-                                           '.$CFG->prefix.'glossary_entries ge
+                                           FROM {glossary_alias} ga,
+                                                {glossary_entries} ge
                                      WHERE ga.entryid = ge.id
                                        AND ge.glossaryid IN ('.$glossarylist.')
                                        AND ge.usedynalink != 0
-                                       AND ge.approved != 0');
+                                                AND ge.approved != 0', null);
 
 
     /// Combine them into one big list
@@ -119,38 +122,53 @@ function glossary_filter($courseid, $text) {
 
         foreach ($concepts as $concept) {
 
-            $glossaryname = $glossaries[$concept->glossaryid];
+            $glossaryname = str_replace(':', '-', $glossaries[$concept->glossaryid]);
 
             if ($concept->category) {       // Link to a category
                 $title = strip_tags($glossaryname.': '.$strcategory.' '.$concept->concept);
                 $href_tag_begin = '<a class="glossary autolink glossaryid'.$concept->glossaryid.'" title="'.$title.'" '.
                                   'href="'.$CFG->wwwroot.'/mod/glossary/view.php?g='.$concept->glossaryid.
                                   '&amp;mode=cat&amp;hook='.$concept->id.'">';
-            } else {
-                if (!empty($concept->originalconcept)) {  // We are dealing with an alias (so show original)
-                    $encodedconcept = urlencode($concept->originalconcept);
+
+            } else { // Link to entry or alias
+                if (!empty($concept->originalconcept)) {  // We are dealing with an alias (so show and point to original)
                     $title = str_replace('"', "'", strip_tags($glossaryname.': '.$concept->originalconcept));
-                } else {
-                    $encodedconcept = urlencode($concept->concept);
+                    $concept->id = $concept->entryid;
+                } else { // This is an entry
                     $title = str_replace('"', "'", strip_tags($glossaryname.': '.$concept->concept));
                 }
-                $href_tag_begin = '<a class="glossary autolink glossaryid'.$concept->glossaryid.'" title="'.$title.'" '.
-                                  'href="'.$CFG->wwwroot.'/mod/glossary/showentry.php?courseid='.$courseid.
-                                  '&amp;concept='.$encodedconcept.'" '.
-                                  'onclick="return openpopup(\'/mod/glossary/showentry.php?courseid='.$courseid.
-                                  '\&amp;concept='.$encodedconcept.'\', \'entry\', '.
-                                  '\'menubar=0,location=0,scrollbars,resizable,width=600,height=450\', 0);">';
-            }
+                // hardcoding dictionary format in the URL rather than defaulting
+                // to the current glossary format which may not work in a popup.
+                // for example "entry list" means the popup would only contain
+                // a link that opens another popup.
+                $link = new moodle_url('/mod/glossary/showentry.php', array('courseid'=>$courseid, 'eid'=>$concept->id, 'displayformat'=>'dictionary'));
+                $attributes = array(
+                    'href' => $link,
+                    'title'=> $title,
+                    'class'=> 'glossary autolink glossaryid'.$concept->glossaryid);
 
+                // this flag is optionally set by resource_pluginfile()
+                // if processing an embedded file use target to prevent getting nested Moodles
+                if (isset($CFG->embeddedsoforcelinktarget) && $CFG->embeddedsoforcelinktarget) {
+                    $attributes['target'] = '_top';
+                }
 
+                $href_tag_begin = html_writer::start_tag('a', $attributes);
+            }
             $conceptlist[] = new filterobject($concept->concept, $href_tag_begin, '</a>', 
                                               $concept->casesensitive, $concept->fullmatch);
         }
 
         $conceptlist = filter_remove_duplicates($conceptlist);
+
+        if (empty($jsinitialised)) {
+            // Add a JavaScript event to open popup's here. This only ever need to be
+            // added once!
+            $PAGE->requires->yui_module('moodle-mod_glossary-autolinker', 'M.mod_glossary.init_filter_autolinking', array(array('courseid'=>$courseid)));
+            $jsinitialised = true;
+        }
     }
     
-    global $GLOSSARY_EXCLUDECONCEPTS;
     if(!empty($GLOSSARY_EXCLUDECONCEPTS)) {
         $reducedconceptlist=array();
         foreach($conceptlist as $concept) {
@@ -179,4 +197,4 @@ function glossary_sort_entries_by_length ($entry0, $entry1) {
 }
 
 
-?>
+
