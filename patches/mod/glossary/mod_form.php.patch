diff --git a/mod/glossary/mod_form.php b/mod/glossary/mod_form.php
index d5096c4..f5c21bd 100644
--- a/mod/glossary/mod_form.php
+++ b/mod/glossary/mod_form.php
@@ -1,11 +1,15 @@
 <?php
+if (!defined('MOODLE_INTERNAL')) {
+    die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
+}
+
 require_once ($CFG->dirroot.'/course/moodleform_mod.php');
 
 class mod_glossary_mod_form extends moodleform_mod {
 
     function definition() {
+        global $CFG, $COURSE, $DB;
 
-        global $CFG, $COURSE;
         $mform    =& $this->_form;
 
 //-------------------------------------------------------------------------------
@@ -15,14 +19,11 @@ class mod_glossary_mod_form extends moodleform_mod {
         if (!empty($CFG->formatstringstriptags)) {
             $mform->setType('name', PARAM_TEXT);
         } else {
-            $mform->setType('name', PARAM_CLEAN);
+            $mform->setType('name', PARAM_CLEANHTML);
         }
         $mform->addRule('name', null, 'required', null, 'client');
 
-        $mform->addElement('htmleditor', 'intro', get_string('description'));
-        $mform->setType('intro', PARAM_RAW);
-        $mform->addRule('intro', get_string('required'), 'required', null, 'client');
-        $mform->setHelpButton('intro', array('writing', 'questions', 'text'), false, 'editorhelpbutton');
+        $this->add_intro_editor(true);
 
         $mform->addElement('text', 'entbypage', get_string('entbypage', 'glossary'));
         $mform->setDefault('entbypage', 10);
@@ -31,7 +32,7 @@ class mod_glossary_mod_form extends moodleform_mod {
 
         if (has_capability('mod/glossary:manageentries', get_context_instance(CONTEXT_SYSTEM))) {
             $mform->addElement('checkbox', 'globalglossary', get_string('isglobal', 'glossary'));
-            $mform->setHelpButton('globalglossary', array('globalglossary', get_string('globalglossary', 'glossary'), 'glossary'));
+            $mform->addHelpButton('globalglossary', 'isglobal', 'glossary');
 
         }else{
             $mform->addElement('hidden', 'globalglossary');
@@ -40,28 +41,28 @@ class mod_glossary_mod_form extends moodleform_mod {
 
         $options = array(1=>get_string('mainglossary', 'glossary'), 0=>get_string('secondaryglossary', 'glossary'));
         $mform->addElement('select', 'mainglossary', get_string('glossarytype', 'glossary'), $options);
-        $mform->setHelpButton('mainglossary', array('mainglossary', get_string('mainglossary', 'glossary'), 'glossary'));
+        $mform->addHelpButton('mainglossary', 'glossarytype', 'glossary');
         $mform->setDefault('mainglossary', 0);
 
         $mform->addElement('selectyesno', 'allowduplicatedentries', get_string('allowduplicatedentries', 'glossary'));
         $mform->setDefault('allowduplicatedentries', $CFG->glossary_dupentries);
-        $mform->setHelpButton('allowduplicatedentries', array('allowduplicatedentries', get_string('allowduplicatedentries', 'glossary'), 'glossary'));
+        $mform->addHelpButton('allowduplicatedentries', 'allowduplicatedentries', 'glossary');
 
         $mform->addElement('selectyesno', 'allowcomments', get_string('allowcomments', 'glossary'));
         $mform->setDefault('allowcomments', $CFG->glossary_allowcomments);
-        $mform->setHelpButton('allowcomments', array('allowcomments', get_string('allowcomments', 'glossary'), 'glossary'));
+        $mform->addHelpButton('allowcomments', 'allowcomments', 'glossary');
 
         $mform->addElement('selectyesno', 'allowprintview', get_string('allowprintview', 'glossary'));
         $mform->setDefault('allowprintview', 1);
-        $mform->setHelpButton('allowprintview', array('allowprintview', get_string('allowprintview', 'glossary'), 'glossary'));
+        $mform->addHelpButton('allowprintview', 'allowprintview', 'glossary');
 
         $mform->addElement('selectyesno', 'usedynalink', get_string('usedynalink', 'glossary'));
         $mform->setDefault('usedynalink', $CFG->glossary_linkbydefault);
-        $mform->setHelpButton('usedynalink', array('usedynalink', get_string('usedynalink', 'glossary'), 'glossary'));
+        $mform->addHelpButton('usedynalink', 'usedynalink', 'glossary');
 
         $mform->addElement('selectyesno', 'defaultapproval', get_string('defaultapproval', 'glossary'));
         $mform->setDefault('defaultapproval', $CFG->glossary_defaultapproval);
-        $mform->setHelpButton('defaultapproval', array('defaultapproval', get_string('defaultapproval', 'glossary'), 'glossary'));
+        $mform->addHelpButton('defaultapproval', 'defaultapproval', 'glossary');
 
         //get and update available formats
         $recformats = glossary_get_available_formats();
@@ -76,23 +77,23 @@ class mod_glossary_mod_form extends moodleform_mod {
         asort($formats);
         $mform->addElement('select', 'displayformat', get_string('displayformat', 'glossary'), $formats);
         $mform->setDefault('displayformat', 'dictionary');
-        $mform->setHelpButton('displayformat', array('displayformat', get_string('displayformat', 'glossary'), 'glossary'));
+        $mform->addHelpButton('displayformat', 'displayformat', 'glossary');
 
         $mform->addElement('selectyesno', 'showspecial', get_string('showspecial', 'glossary'));
         $mform->setDefault('showspecial', 1);
-        $mform->setHelpButton('showspecial', array('shows', get_string('showspecial', 'glossary'), 'glossary'));
+        $mform->addHelpButton('showspecial', 'showspecial', 'glossary');
 
         $mform->addElement('selectyesno', 'showalphabet', get_string('showalphabet', 'glossary'));
         $mform->setDefault('showalphabet', 1);
-        $mform->setHelpButton('showalphabet', array('shows', get_string('showalphabet', 'glossary'), 'glossary'));
+        $mform->addHelpButton('showalphabet', 'showalphabet', 'glossary');
 
         $mform->addElement('selectyesno', 'showall', get_string('showall', 'glossary'));
         $mform->setDefault('showall', 1);
-        $mform->setHelpButton('showall', array('shows', get_string('showall', 'glossary'), 'glossary'));
+        $mform->addHelpButton('showall', 'showall', 'glossary');
 
         $mform->addElement('selectyesno', 'editalways', get_string('editalways', 'glossary'));
         $mform->setDefault('editalways', 0);
-        $mform->setHelpButton('editalways', array('editalways', get_string('editalways', 'glossary'), 'glossary'));
+        $mform->addHelpButton('editalways', 'editalways', 'glossary');
 
         if ($CFG->enablerssfeeds && isset($CFG->glossary_enablerssfeeds) && $CFG->glossary_enablerssfeeds) {
 //-------------------------------------------------------------------------------
@@ -102,7 +103,7 @@ class mod_glossary_mod_form extends moodleform_mod {
             $choices[1] = get_string('withauthor', 'glossary');
             $choices[2] = get_string('withoutauthor', 'glossary');
             $mform->addElement('select', 'rsstype', get_string('rsstype'), $choices);
-            $mform->setHelpButton('rsstype', array('rsstype', get_string('rsstype'), 'glossary'));
+            $mform->addHelpButton('rsstype', 'rsstype', 'glossary');
 
             $choices = array();
             $choices[0] = '0';
@@ -119,36 +120,15 @@ class mod_glossary_mod_form extends moodleform_mod {
             $choices[40] = '40';
             $choices[50] = '50';
             $mform->addElement('select', 'rssarticles', get_string('rssarticles'), $choices);
-            $mform->setHelpButton('rssarticles', array('rssarticles', get_string('rssarticles'), 'glossary'));
+            $mform->addHelpButton('rssarticles', 'rssarticles', 'glossary');
             $mform->disabledIf('rssarticles', 'rsstype', 'eq', 0);
         }
 
 //-------------------------------------------------------------------------------
-        $mform->addElement('header', '', get_string('grade'));
-        $mform->addElement('checkbox', 'userating', get_string('allowratings', 'glossary') , get_string('ratingsuse', 'glossary'));
-
-        $options=array();
-        $options[2] = get_string('ratingonlyteachers', 'glossary', moodle_strtolower($COURSE->teachers));
-        $options[1] = get_string('ratingeveryone', 'glossary');
-        $mform->addElement('select', 'assessed', get_string('users'), $options);
-        $mform->disabledIf('assessed', 'userating');
-
-        $mform->addElement('modgrade', 'scale', get_string('grade'), false);
-        $mform->disabledIf('scale', 'userating');
-
-        $mform->addElement('checkbox', 'ratingtime', get_string('ratingtime', 'glossary'));
-        $mform->disabledIf('ratingtime', 'userating');
 
-        $mform->addElement('date_time_selector', 'assesstimestart', get_string('from'));
-        $mform->disabledIf('assesstimestart', 'userating');
-        $mform->disabledIf('assesstimestart', 'ratingtime');
+        $this->standard_grading_coursemodule_elements();
 
-        $mform->addElement('date_time_selector', 'assesstimefinish', get_string('to'));
-        $mform->disabledIf('assesstimefinish', 'userating');
-        $mform->disabledIf('assesstimefinish', 'ratingtime');
-
-//-------------------------------------------------------------------------------
-        $this->standard_coursemodule_elements(array('groups'=>false, 'groupmembersonly'=>true));
+        $this->standard_coursemodule_elements();
 
 //-------------------------------------------------------------------------------
         // buttons
@@ -156,11 +136,12 @@ class mod_glossary_mod_form extends moodleform_mod {
     }
 
     function definition_after_data() {
+        global $COURSE, $DB;
+
         parent::definition_after_data();
-        global $COURSE;
         $mform    =& $this->_form;
         $mainglossaryel =& $mform->getElement('mainglossary');
-        $mainglossary = get_record('glossary', 'mainglossary', 1, 'course', $COURSE->id);
+        $mainglossary = $DB->get_record('glossary', array('mainglossary'=>1, 'course'=>$COURSE->id));
         if ($mainglossary && ($mainglossary->id != $mform->getElementValue('instance'))){
             //secondary glossary, a main one already exists in this course.
             $mainglossaryel->setValue(0);
@@ -174,19 +155,47 @@ class mod_glossary_mod_form extends moodleform_mod {
     }
 
     function data_preprocessing(&$default_values){
-        if (empty($default_values['scale'])){
-            $default_values['assessed'] = 0;
+        parent::data_preprocessing($default_values);
+
+        // Set up the completion checkboxes which aren't part of standard data.
+        // We also make the default value (if you turn on the checkbox) for those
+        // numbers to be 1, this will not apply unless checkbox is ticked.
+        $default_values['completionentriesenabled']=
+            !empty($default_values['completionentries']) ? 1 : 0;
+        if (empty($default_values['completionentries'])) {
+            $default_values['completionentries']=1;
+        }
         }        
 
-        if (empty($default_values['assessed'])){
-            $default_values['userating'] = 0;
-            $default_values['ratingtime'] = 0;
-        } else {
-            $default_values['userating'] = 1;
-            $default_values['ratingtime']=
-                ($default_values['assesstimestart'] && $default_values['assesstimefinish']) ? 1 : 0;
+    function add_completion_rules() {
+        $mform =& $this->_form;
+
+        $group=array();
+        $group[] =& $mform->createElement('checkbox', 'completionentriesenabled', '', get_string('completionentries','glossary'));
+        $group[] =& $mform->createElement('text', 'completionentries', '', array('size'=>3));
+        $mform->setType('completionentries', PARAM_INT);
+        $mform->addGroup($group, 'completionentriesgroup', get_string('completionentriesgroup','glossary'), array(' '), false);
+        $mform->disabledIf('completionentries','completionentriesenabled','notchecked');
+
+        return array('completionentriesgroup');
         }
+
+    function completion_rule_enabled($data) {
+        return (!empty($data['completionentriesenabled']) && $data['completionentries']!=0);
+    }
+
+    function get_data() {
+        $data = parent::get_data();
+        if (!$data) {
+            return false;
+        }
+        // Turn off completion settings if the checkboxes aren't ticked
+        $autocompletion = !empty($data->completion) && $data->completion==COMPLETION_TRACKING_AUTOMATIC;
+        if (empty($data->completionentriesenabled) || !$autocompletion) {
+            $data->completionentries = 0;
+        }
+        return $data;
     }
 
 }
-?>
+
