diff --git a/mod/scorm/mod_form.php b/mod/scorm/mod_form.php
index 90c3b01..57c187a 100644
--- a/mod/scorm/mod_form.php
+++ b/mod/scorm/mod_form.php
@@ -1,19 +1,21 @@
 <?php
+if (!defined('MOODLE_INTERNAL')) {
+    die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
+}
+
 require_once ($CFG->dirroot.'/course/moodleform_mod.php');
 require_once($CFG->dirroot.'/mod/scorm/locallib.php');
 
 class mod_scorm_mod_form extends moodleform_mod {
 
     function definition() {
+        global $CFG, $COURSE, $OUTPUT;
+        $cfg_scorm = get_config('scorm');
 
-        global $CFG, $COURSE;
-        $mform    =& $this->_form;
-        if (isset($CFG->slasharguments) && !$CFG->slasharguments) {
-            $mform->addElement('static', '', '',notify(get_string('slashargs', 'scorm'), 'notifyproblem', 'center', true));
-        }
-        $zlib = ini_get('zlib.output_compression'); //check for zlib compression - if used, throw error because of IE bug. - SEE MDL-16185
-        if (isset($zlib) && $zlib) {
-            $mform->addElement('static', '', '',notify(get_string('zlibwarning', 'scorm'), 'notifyproblem', 'center', true));
+        $mform = $this->_form;
+
+        if (!$CFG->slasharguments) {
+            $mform->addElement('static', '', '',$OUTPUT->notification(get_string('slashargs', 'scorm'), 'notifyproblem'));
         }
 //-------------------------------------------------------------------------------
         $mform->addElement('header', 'general', get_string('general', 'form'));
@@ -23,54 +25,108 @@ class mod_scorm_mod_form extends moodleform_mod {
         if (!empty($CFG->formatstringstriptags)) {
             $mform->setType('name', PARAM_TEXT);
         } else {
-            $mform->setType('name', PARAM_CLEAN);
+            $mform->setType('name', PARAM_CLEANHTML);
         }
         $mform->addRule('name', null, 'required', null, 'client');
 
 // Summary
-        $mform->addElement('htmleditor', 'summary', get_string('summary'));
-        $mform->setType('summary', PARAM_RAW);
-        $mform->addRule('summary', get_string('required'), 'required', null, 'client');
-        $mform->setHelpButton('summary', array('writing', 'questions', 'richtext'), false, 'editorhelpbutton');
+        $this->add_intro_editor(true);
+
+// Scorm types
+        $options = array(SCORM_TYPE_LOCAL => get_string('typelocal', 'scorm'));
+
+        if ($cfg_scorm->allowtypeexternal) {
+            $options[SCORM_TYPE_EXTERNAL] = get_string('typeexternal', 'scorm');
+        }
+
+        if ($cfg_scorm->allowtypelocalsync) {
+            $options[SCORM_TYPE_LOCALSYNC] = get_string('typelocalsync', 'scorm');
+        }
+
+        if (!empty($CFG->repositoryactivate) and $cfg_scorm->allowtypeimsrepository) {
+            $options[SCORM_TYPE_IMSREPOSITORY] = get_string('typeimsrepository', 'scorm');
+        }
 
 // Reference
-        $mform->addElement('choosecoursefileorimsrepo', 'reference', get_string('package','scorm'));
-        $mform->setType('reference', PARAM_RAW);  // We need to find a better PARAM
-        $mform->addRule('reference', get_string('required'), 'required');
-        $mform->setHelpButton('reference',array('package', get_string('package', 'scorm'), 'scorm'));
+        if (count($options) > 1) {
+            $mform->addElement('select', 'scormtype', get_string('scormtype', 'scorm'), $options);
+            $mform->addHelpButton('scormtype', 'scormtype', 'scorm');
+            $mform->addElement('text', 'packageurl', get_string('packageurl', 'scorm'), array('size'=>60));
+            $mform->setType('packageurl', PARAM_RAW);
+            $mform->addHelpButton('packageurl', 'packageurl', 'scorm');
+            $mform->disabledIf('packageurl', 'scormtype', 'eq', SCORM_TYPE_LOCAL);
+        } else {
+            $mform->addElement('hidden', 'scormtype', SCORM_TYPE_LOCAL);
+        }
+
+// New local package upload
+        $maxbytes = get_max_upload_file_size($CFG->maxbytes, $COURSE->maxbytes);
+        $mform->setMaxFileSize($maxbytes);
+        $mform->addElement('filepicker', 'packagefile', get_string('package','scorm'));
+        $mform->addHelpButton('packagefile', 'package', 'scorm');
+        $mform->disabledIf('packagefile', 'scormtype', 'noteq', SCORM_TYPE_LOCAL);
+
+//-------------------------------------------------------------------------------
+// Time restrictions
+        $mform->addElement('header', 'timerestricthdr', get_string('timerestrict', 'scorm'));
 
+        $mform->addElement('date_time_selector', 'timeopen', get_string("scormopen", "scorm"),array('optional' => true));
+        $mform->addElement('date_time_selector', 'timeclose', get_string("scormclose", "scorm"),array('optional' => true));
 //-------------------------------------------------------------------------------
 // Other Settings
         $mform->addElement('header', 'advanced', get_string('othersettings', 'form'));
 
 // Grade Method
         $mform->addElement('select', 'grademethod', get_string('grademethod', 'scorm'), scorm_get_grade_method_array());
-        $mform->setHelpButton('grademethod', array('grademethod',get_string('grademethod', 'scorm'),'scorm'));
-        $mform->setDefault('grademethod', $CFG->scorm_grademethod);
+        $mform->addHelpButton('grademethod', 'grademethod', 'scorm');
+        $mform->setDefault('grademethod', $cfg_scorm->grademethod);
 
 // Maximum Grade
         for ($i=0; $i<=100; $i++) {
           $grades[$i] = "$i";
         }
         $mform->addElement('select', 'maxgrade', get_string('maximumgrade'), $grades);
-        $mform->setDefault('maxgrade', $CFG->scorm_maxgrade);
-        $mform->disabledIf('maxgrade', 'grademethod','eq',GRADESCOES);
+        $mform->setDefault('maxgrade', $cfg_scorm->maxgrade);
+        $mform->disabledIf('maxgrade', 'grademethod','eq', GRADESCOES);
 
 // Attempts
         $mform->addElement('static', '', '' ,'<hr />');
 
 // Max Attempts
         $mform->addElement('select', 'maxattempt', get_string('maximumattempts', 'scorm'), scorm_get_attempts_array());
-        $mform->setHelpButton('maxattempt', array('maxattempt',get_string('maximumattempts', 'scorm'), 'scorm'));
-        $mform->setDefault('maxattempt', $CFG->scorm_maxattempts);
+        $mform->addHelpButton('maxattempt', 'maximumattempts', 'scorm');
+        $mform->setDefault('maxattempt', $cfg_scorm->maxattempts);
 
 // What Grade
         $mform->addElement('select', 'whatgrade', get_string('whatgrade', 'scorm'), scorm_get_what_grade_array());
         $mform->disabledIf('whatgrade', 'maxattempt','eq',1);
-        $mform->setHelpButton('whatgrade', array('whatgrade',get_string('whatgrade', 'scorm'), 'scorm'));
-        $mform->setDefault('whatgrade', $CFG->scorm_whatgrade);
+        $mform->addHelpButton('whatgrade', 'whatgrade', 'scorm');
+        $mform->setDefault('whatgrade', $cfg_scorm->whatgrade);
         $mform->setAdvanced('whatgrade');
 
+// Display attempt status
+        $mform->addElement('selectyesno', 'displayattemptstatus', get_string('displayattemptstatus', 'scorm'));
+        $mform->addHelpButton('displayattemptstatus', 'displayattemptstatus', 'scorm');
+        $mform->setDefault('displayattemptstatus', $cfg_scorm->displayattemptstatus);
+
+// Force completed
+        $mform->addElement('selectyesno', 'forcecompleted', get_string('forcecompleted', 'scorm'));
+        $mform->addHelpButton('forcecompleted', 'forcecompleted', 'scorm');
+        $mform->setDefault('forcecompleted', $cfg_scorm->forcecompleted);
+        $mform->setAdvanced('forcecompleted');
+
+// Force new attempt
+        $mform->addElement('selectyesno', 'forcenewattempt', get_string('forcenewattempt', 'scorm'));
+        $mform->addHelpButton('forcenewattempt', 'forcenewattempt', 'scorm');
+        $mform->setDefault('forcenewattempt', $cfg_scorm->forcenewattempt);
+        $mform->setAdvanced('forcenewattempt');
+
+// Last attempt lock - lock the enter button after the last available attempt has been made
+        $mform->addElement('selectyesno', 'lastattemptlock', get_string('lastattemptlock', 'scorm'));
+        $mform->addHelpButton('lastattemptlock', 'lastattemptlock', 'scorm');
+        $mform->setDefault('lastattemptlock', $cfg_scorm->lastattemptlock);
+        $mform->setAdvanced('lastattemptlock');
+
 // Activation period
 /*        $mform->addElement('static', '', '' ,'<hr />');
         $mform->addElement('static', 'activation', get_string('activation','scorm'));
@@ -90,24 +146,25 @@ class mod_scorm_mod_form extends moodleform_mod {
         $mform->setDefault('enddisabled', 1);
         $mform->disabledIf('dateendgrp', 'enddisabled', 'checked');
 */
-// Stage Size
-        $mform->addElement('static', '', '' ,'<hr />');
-        $mform->addElement('static', 'stagesize', get_string('stagesize','scorm'));
-        $mform->setHelpButton('stagesize', array('stagesize',get_string('stagesize', 'scorm'), 'scorm'));
+
+// Framed / Popup Window
+        $mform->addElement('select', 'popup', get_string('display', 'scorm'), scorm_get_popup_display_array());
+        $mform->setDefault('popup', $cfg_scorm->popup);
+        $mform->setAdvanced('popup');
+
 // Width
-        $mform->addElement('text', 'width', get_string('width','scorm'),'maxlength="5" size="5"');
-        $mform->setDefault('width', $CFG->scorm_framewidth);
+        $mform->addElement('text', 'width', get_string('width','scorm'), 'maxlength="5" size="5"');
+        $mform->setDefault('width', $cfg_scorm->framewidth);
         $mform->setType('width', PARAM_INT);
+        $mform->setAdvanced('width');
+        $mform->disabledIf('width', 'popup', 'eq', 0);
         
 // Height
-        $mform->addElement('text', 'height', get_string('height','scorm'),'maxlength="5" size="5"');
-        $mform->setDefault('height', $CFG->scorm_frameheight);
+        $mform->addElement('text', 'height', get_string('height','scorm'), 'maxlength="5" size="5"');
+        $mform->setDefault('height', $cfg_scorm->frameheight);
         $mform->setType('height', PARAM_INT);
-
-// Framed / Popup Window
-        $mform->addElement('select', 'popup', get_string('display','scorm'), scorm_get_popup_display_array());
-        $mform->setDefault('popup', $CFG->scorm_popup);
-        $mform->setAdvanced('popup');
+        $mform->setAdvanced('height');
+        $mform->disabledIf('height', 'popup', 'eq', 0);
 
 // Window Options
         $winoptgrp = array();
@@ -120,36 +177,44 @@ class mod_scorm_mod_form extends moodleform_mod {
         $mform->disabledIf('winoptgrp', 'popup', 'eq', 0);
 
 // Skip view page
-        $mform->addElement('select', 'skipview', get_string('skipview', 'scorm'), scorm_get_skip_view_array());
-        $mform->setHelpButton('skipview', array('skipview',get_string('skipview', 'scorm'), 'scorm'));
-        $mform->setDefault('skipview', $CFG->scorm_skipview);
+        $mform->addElement('select', 'skipview', get_string('skipview', 'scorm'),scorm_get_skip_view_array());
+        $mform->addHelpButton('skipview', 'skipview', 'scorm');
+        $mform->setDefault('skipview', $cfg_scorm->skipview);
         $mform->setAdvanced('skipview');
 
 // Hide Browse
         $mform->addElement('selectyesno', 'hidebrowse', get_string('hidebrowse', 'scorm'));
-        $mform->setHelpButton('hidebrowse', array('hidebrowse',get_string('hidebrowse', 'scorm'), 'scorm'));
-        $mform->setDefault('hidebrowse', $CFG->scorm_hidebrowse);
+        $mform->addHelpButton('hidebrowse', 'hidebrowse', 'scorm');
+        $mform->setDefault('hidebrowse', $cfg_scorm->hidebrowse);
         $mform->setAdvanced('hidebrowse');
 
+// Display course structure
+        $mform->addElement('selectyesno', 'displaycoursestructure', get_string('displaycoursestructure', 'scorm'));
+        $mform->addHelpButton('displaycoursestructure', 'displaycoursestructure', 'scorm');
+        $mform->setDefault('displaycoursestructure', $cfg_scorm->displaycoursestructure);
+        $mform->setAdvanced('displaycoursestructure');
+
 // Toc display
         $mform->addElement('select', 'hidetoc', get_string('hidetoc', 'scorm'), scorm_get_hidetoc_array());
-        $mform->setDefault('hidetoc', $CFG->scorm_hidetoc);
+        $mform->addHelpButton('hidetoc', 'hidetoc', 'scorm');
+        $mform->setDefault('hidetoc', $cfg_scorm->hidetoc);
         $mform->setAdvanced('hidetoc');
 
 // Hide Navigation panel
         $mform->addElement('selectyesno', 'hidenav', get_string('hidenav', 'scorm'));
-        $mform->setDefault('hidenav', $CFG->scorm_hidenav);
+        $mform->setDefault('hidenav', $cfg_scorm->hidenav);
         $mform->setAdvanced('hidenav');
+        $mform->disabledIf('hidenav', 'hidetoc', 'noteq', 0);
 
 // Autocontinue
         $mform->addElement('selectyesno', 'auto', get_string('autocontinue', 'scorm'));
-        $mform->setHelpButton('auto', array('autocontinue',get_string('autocontinue', 'scorm'), 'scorm'));
-        $mform->setDefault('auto', $CFG->scorm_auto);
+        $mform->addHelpButton('auto', 'autocontinue', 'scorm');
+        $mform->setDefault('auto', $cfg_scorm->auto);
         $mform->setAdvanced('auto');
 
 // Update packages timing
         $mform->addElement('select', 'updatefreq', get_string('updatefreq', 'scorm'), scorm_get_updatefreq_array());
-        $mform->setDefault('updatefreq', $CFG->scorm_updatefreq);
+        $mform->setDefault('updatefreq', $cfg_scorm->updatefreq);
         $mform->setAdvanced('updatefreq');
 
 //-------------------------------------------------------------------------------
@@ -167,11 +232,7 @@ class mod_scorm_mod_form extends moodleform_mod {
 
 
 //-------------------------------------------------------------------------------
-        $features = new stdClass;
-        $features->groups = false;
-        $features->groupings = true;
-        $features->groupmembersonly = true;
-        $this->standard_coursemodule_elements($features);
+        $this->standard_coursemodule_elements();
 //-------------------------------------------------------------------------------
         // buttons
         $this->add_action_buttons();
@@ -194,14 +255,19 @@ class mod_scorm_mod_form extends moodleform_mod {
         if (isset($default_values['grademethod'])) {
             $default_values['grademethod'] = intval($default_values['grademethod']);
         }
-        if (isset($default_value['width']) && (strpos($default_value['width'],'%') === false) && ($default_value['width'] <= 100)) {
-            $default_value['width'] .= '%';
+        if (isset($default_values['width']) && (strpos($default_values['width'],'%') === false) && ($default_values['width'] <= 100)) {
+            $default_values['width'] .= '%';
         }
-        if (isset($default_value['width']) && (strpos($default_value['height'],'%') === false) && ($default_value['height'] <= 100)) {
-            $default_value['height'] .= '%';
+        if (isset($default_values['width']) && (strpos($default_values['height'],'%') === false) && ($default_values['height'] <= 100)) {
+            $default_values['height'] .= '%';
         }
         $scorms = get_all_instances_in_course('scorm', $COURSE);
         $coursescorm = current($scorms);
+
+        $draftitemid = file_get_submitted_draft_itemid('packagefile');
+        file_prepare_draft_area($draftitemid, $this->context->id, 'mod_scorm', 'package', 0);
+        $default_values['packagefile'] = $draftitemid;
+
         if (($COURSE->format == 'scorm') && ((count($scorms) == 0) || ($default_values['instance'] == $coursescorm->id))) {
             $default_values['redirect'] = 'yes';
             $default_values['redirecturl'] = '../course/view.php?id='.$default_values['course'];    
@@ -215,35 +281,111 @@ class mod_scorm_mod_form extends moodleform_mod {
         if (isset($default_values['instance'])) {
             $default_values['datadir'] = $default_values['instance'];
         }
+        if (empty($default_values['timeopen'])) {
+            $default_values['timeopen'] = 0;
+        }
+        if (empty($default_values['timeclose'])) {
+            $default_values['timeclose'] = 0;
+        }
     }
 
     function validation($data, $files) {
+        global $CFG;
         $errors = parent::validation($data, $files);
 
-        $validate = scorm_validate($data);
+        $type = $data['scormtype'];
+
+        if ($type === SCORM_TYPE_LOCAL) {
+            if (!empty($data['update'])) {
+                //ok, not required
 
-        if (!$validate->result) {
-            $errors = $errors + $validate->errors;
+            } else if (empty($data['packagefile'])) {
+                $errors['packagefile'] = get_string('required');
+
+            } else {
+                $files = $this->get_draft_files('packagefile');
+                if (count($files)<1) {
+                    $errors['packagefile'] = get_string('required');
+                    return $errors;
+                }
+                $file = reset($files);
+                $filename = $CFG->dataroot.'/temp/scormimport/scrom_'.time();
+                make_upload_directory('temp/scormimport');
+                $file->copy_content_to($filename);
+
+                $packer = get_file_packer('application/zip');
+
+                $filelist = $packer->list_files($filename);
+                if (!is_array($filelist)) {
+                    $errors['packagefile'] = 'Incorrect file package - not an archive'; //TODO: localise
+                } else {
+                    $manifestpresent = false;
+                    $aiccfound       = false;
+                    foreach ($filelist as $info) {
+                        if ($info->pathname == 'imsmanifest.xml') {
+                            $manifestpresent = true;
+                            break;
+                        }
+                        if (preg_match('/\.cst$/', $info->pathname)) {
+                            $aiccfound = true;
+                            break;
+                        }
+                    }
+                    if (!$manifestpresent and !$aiccfound) {
+                        $errors['packagefile'] = 'Incorrect file package - missing imsmanifest.xml or AICC structure'; //TODO: localise
+                    }
+                }
+                unlink($filename);
+            }
+
+        } else if ($type === SCORM_TYPE_EXTERNAL) {
+            $reference = $data['packageurl'];
+            if (!preg_match('/(http:\/\/|https:\/\/|www).*\/imsmanifest.xml$/i', $reference)) {
+                $errors['packageurl'] = get_string('required'); // TODO: improve help
+            }
+
+        } else if ($type === 'packageurl') {
+            $reference = $data['reference'];
+            if (!preg_match('/(http:\/\/|https:\/\/|www).*(\.zip|\.pif)$/i', $reference)) {
+                $errors['packageurl'] = get_string('required'); // TODO: improve help
+            }
+
+        } else if ($type === SCORM_TYPE_IMSREPOSITORY) {
+            $reference = $data['packageurl'];
+            if (stripos($reference, '#') !== 0) {
+                $errors['packageurl'] = get_string('required');
+            }
         }
 
         return $errors;
     }
-    //need to translate the "options" field.
+
+    //need to translate the "options" and "reference" field.
     function set_data($default_values) {
-        if (is_object($default_values)) {
-            if (!empty($default_values->options)) {
-                $options = explode(',', $default_values->options);
+        $default_values = (array)$default_values;
+
+        if (isset($default_values['scormtype']) and isset($default_values['reference'])) {
+            switch ($default_values['scormtype']) {
+                case SCORM_TYPE_LOCALSYNC :
+                case SCORM_TYPE_EXTERNAL:
+                case SCORM_TYPE_IMSREPOSITORY:
+                    $default_values['packageurl'] = $default_values['reference'];
+            }
+        }
+        unset($default_values['reference']);
+
+        if (!empty($default_values['options'])) {
+            $options = explode(',', $default_values['options']);
                 foreach ($options as $option) {
                     $opt = explode('=', $option);
                     if (isset($opt[1])) {
-                        $default_values->$opt[0] = $opt[1];
+                    $default_values[$opt[0]] = $opt[1];
                     }
                 }
             }
-            $default_values = (array)$default_values;
-        }
+
         $this->data_preprocessing($default_values);
-        parent::set_data($default_values); //never slashed for moodleform_mod
+        parent::set_data($default_values);
     }
 }
-?>
\ No newline at end of file
+
