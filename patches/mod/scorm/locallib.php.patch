diff --git a/mod/scorm/locallib.php b/mod/scorm/locallib.php
old mode 100755
new mode 100644
index ff9e3de..9c5a7bc
--- a/mod/scorm/locallib.php
+++ b/mod/scorm/locallib.php
@@ -1,4 +1,7 @@
-<?php  // $Id$
+<?php
+
+require_once("$CFG->dirroot/mod/scorm/lib.php");
+require_once("$CFG->libdir/filelib.php");
 
 /// Constants and settings for module scorm
 define('UPDATE_NEVER', '0');
@@ -20,6 +23,31 @@ define('AVERAGEATTEMPT', '1');
 define('FIRSTATTEMPT', '2');
 define('LASTATTEMPT', '3');
 
+define('TOCJSLINK', 1);
+define('TOCFULLURL', 2);
+
+/// Local Library of functions for module scorm
+
+/**
+ * @package   mod-scorm
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scorm_package_file_info extends file_info_stored {
+    public function get_parent() {
+        if ($this->lf->get_filepath() === '/' and $this->lf->get_filename() === '.') {
+            return $this->browser->get_file_info($this->context);
+        }
+        return parent::get_parent();
+    }
+    public function get_visible_name() {
+        if ($this->lf->get_filepath() === '/' and $this->lf->get_filename() === '.') {
+            return $this->topvisiblename;
+        }
+        return parent::get_visible_name();
+    }
+}
+
 /**
  * Returns an array of the popup options for SCORM and each options default value
  *
@@ -27,16 +55,17 @@ define('LASTATTEMPT', '3');
  */
 function scorm_get_popup_options_array(){
     global $CFG;
-    return array('resizable'=> isset($CFG->scorm_resizable) ? $CFG->scorm_resizable : 0,
-                 'scrollbars'=> isset($CFG->scorm_scrollbars) ? $CFG->scorm_scrollbars : 0,
-                 'directories'=> isset($CFG->scorm_directories) ? $CFG->scorm_directories : 0,
-                 'location'=> isset($CFG->scorm_location) ? $CFG->scorm_location : 0,
-                 'menubar'=> isset($CFG->scorm_menubar) ? $CFG->scorm_menubar : 0,
-                 'toolbar'=> isset($CFG->scorm_toolbar) ? $CFG->scorm_toolbar : 0,
-                 'status'=> isset($CFG->scorm_status) ? $CFG->scorm_status : 0);
+    $cfg_scorm = get_config('scorm');
+
+    return array('resizable'=> isset($cfg_scorm->resizable) ? $cfg_scorm->resizable : 0,
+                 'scrollbars'=> isset($cfg_scorm->scrollbars) ? $cfg_scorm->scrollbars : 0,
+                 'directories'=> isset($cfg_scorm->directories) ? $cfg_scorm->directories : 0,
+                 'location'=> isset($cfg_scorm->location) ? $cfg_scorm->location : 0,
+                 'menubar'=> isset($cfg_scorm->menubar) ? $cfg_scorm->menubar : 0,
+                 'toolbar'=> isset($cfg_scorm->toolbar) ? $cfg_scorm->toolbar : 0,
+                 'status'=> isset($cfg_scorm->status) ? $cfg_scorm->status : 0);
 }
 
-/// Local Library of functions for module scorm
 /**
  * Returns an array of the array of what grade options
  *
@@ -77,10 +106,11 @@ function scorm_get_skip_view_array(){
  *
  * @return array an array of hide table of contents options
  */
-function scorm_get_hidetoc_array(){
-     return array(0 =>get_string('sided','scorm'),
-                  1 => get_string('hidden','scorm'),
-                  2 => get_string('popupmenu','scorm'));
+function scorm_get_hidetoc_array() {
+     return array(SCORM_TOC_SIDE => get_string('sided', 'scorm'),
+                  SCORM_TOC_HIDDEN => get_string('hidden', 'scorm'),
+                  SCORM_TOC_POPUP => get_string('popupmenu', 'scorm'),
+                  SCORM_TOC_DISABLED => get_string('disabled', 'scorm'));
 }
 
 /**
@@ -90,7 +120,7 @@ function scorm_get_hidetoc_array(){
  */
 function scorm_get_updatefreq_array(){
     return array(0 => get_string('never'),
-                 //1 => get_string('onchanges','scorm'),
+                 1 => get_string('onchanges','scorm'),
                  2 => get_string('everyday','scorm'),
                  3 => get_string('everytime','scorm'));
 }
@@ -101,7 +131,7 @@ function scorm_get_updatefreq_array(){
  * @return array an array of popup display options
  */
 function scorm_get_popup_display_array(){
-    return array(0 => get_string('iframe', 'scorm'),
+    return array(0 => get_string('currentwindow', 'scorm'),
                  1 => get_string('popup', 'scorm'));
 }
 
@@ -120,89 +150,121 @@ function scorm_get_attempts_array(){
 
     return $attempts;
 }
-
 /**
-* This function will permanently delete the given
-* directory and all files and subdirectories.
-*
-* @param string $directory The directory to remove
-* @return boolean
-*/
-function scorm_delete_files($directory) {
-    if (is_dir($directory)) {
-        $files=scorm_scandir($directory);
-        set_time_limit(0);
-        foreach($files as $file) {
-            if (($file != '.') && ($file != '..')) {
-                if (!is_dir($directory.'/'.$file)) {
-                    unlink($directory.'/'.$file);
+ * Extracts scrom package, sets up all variables.
+ * Called whenever scorm changes
+ * @param object $scorm instance - fields are updated and changes saved into database
+ * @param bool $full force full update if true
+ * @return void
+ */
+function scorm_parse($scorm, $full) {
+    global $CFG, $DB;
+    $cfg_scorm = get_config('scorm');
+
+    if (!isset($scorm->cmid)) {
+        $cm = get_coursemodule_from_instance('scorm', $scorm->id);
+        $scorm->cmid = $cm->id;
+    }
+    $context = get_context_instance(CONTEXT_MODULE, $scorm->cmid);
+    $newhash = $scorm->sha1hash;
+
+    if ($scorm->scormtype === SCORM_TYPE_LOCAL or $scorm->scormtype === SCORM_TYPE_LOCALSYNC) {
+
+        $fs = get_file_storage();
+        $packagefile = false;
+
+        if ($scorm->scormtype === SCORM_TYPE_LOCAL) {
+            if ($packagefile = $fs->get_file($context->id, 'mod_scorm', 'package', 0, '/', $scorm->reference)) {
+                $newhash = $packagefile->get_contenthash();
                 } else {
-                    scorm_delete_files($directory.'/'.$file);
+                $newhash = null;
                 }
+        } else {
+            if (!$cfg_scorm->allowtypelocalsync) {
+                // sorry - localsync disabled
+                return;
+            }
+            if ($scorm->reference !== '' and (!$full or $scorm->sha1hash !== sha1($scorm->reference))) {
+                $fs->delete_area_files($context->id, 'mod_scorm', 'package');
+                $file_record = array('contextid'=>$context->id, 'component'=>'mod_scorm', 'filearea'=>'package', 'itemid'=>0, 'filepath'=>'/');
+                if ($packagefile = $fs->create_file_from_url($file_record, $scorm->reference, array('calctimeout' => true))) {
+                    $newhash = sha1($scorm->reference);
+                } else {
+                    $newhash = null;
             }
         }
-        rmdir($directory);
-        return true;
     }
-    return false;
-}
 
-/**
-* Given a diretory path returns the file list
-*
-* @param string $directory
-* @return array
-*/
-function scorm_scandir($directory) {
-    if (version_compare(phpversion(),'5.0.0','>=')) {
-        return scandir($directory);
+        if ($packagefile) {
+            if (!$full and $packagefile and $scorm->sha1hash === $newhash) {
+                if (strpos($scorm->version, 'SCORM') !== false) {
+                    if ($fs->get_file($context->id, 'mod_scorm', 'content', 0, '/', 'imsmanifest.xml')) {
+                        // no need to update
+                        return;
+                    }
+                } else if (strpos($scorm->version, 'AICC') !== false) {
+                    // TODO: add more sanity checks - something really exists in scorm_content area
+                    return;
+                }
+            }
+
+            // now extract files
+            $fs->delete_area_files($context->id, 'mod_scorm', 'content');
+
+            $packer = get_file_packer('application/zip');
+            $packagefile->extract_to_storage($packer, $context->id, 'mod_scorm', 'content', 0, '/');
+
+        } else if (!$full) {
+            return;
+        }
+
+
+        if ($manifest = $fs->get_file($context->id, 'mod_scorm', 'content', 0, '/', 'imsmanifest.xml')) {
+            require_once("$CFG->dirroot/mod/scorm/datamodels/scormlib.php");
+            // SCORM
+            if (!scorm_parse_scorm($scorm, $manifest)) {
+                $scorm->version = 'ERROR';
+            }
     } else {
-        $files = array();
-        if ($dh = opendir($directory)) {
-            while (($file = readdir($dh)) !== false) {
-               $files[] = $file;
+            require_once("$CFG->dirroot/mod/scorm/datamodels/aicclib.php");
+            // AICC
+            if (!scorm_parse_aicc($scorm)) {
+                $scorm->version = 'ERROR';
             }
-            closedir($dh);
         }
-        return $files;
+
+    } else if ($scorm->scormtype === SCORM_TYPE_EXTERNAL and $cfg_scorm->allowtypeexternal) {
+        if (!$full and $scorm->sha1hash === sha1($scorm->reference)) {
+            return;
     }
-}
+        require_once("$CFG->dirroot/mod/scorm/datamodels/scormlib.php");
+        // SCORM only, AICC can not be external
+        if (!scorm_parse_scorm($scorm, $scorm->reference)) {
+            $scorm->version = 'ERROR';
+        }
+        $newhash = sha1($scorm->reference);
 
-/**
-* Create a new temporary subdirectory with a random name in the given path
-*
-* @param string $strpath The scorm data directory
-* @return string/boolean
-*/
-function scorm_tempdir($strPath)
-{
-    global $CFG;
+    } else if ($scorm->scormtype === SCORM_TYPE_IMSREPOSITORY and !empty($CFG->repositoryactivate) and $cfg_scorm->allowtypeimsrepository) {
+        if (!$full and $scorm->sha1hash === sha1($scorm->reference)) {
+            return;
+        }
+        require_once("$CFG->dirroot/mod/scorm/datamodels/scormlib.php");
+        if (!scorm_parse_scorm($scorm, $CFG->repository.substr($scorm->reference,1).'/imsmanifest.xml')) {
+            $scorm->version = 'ERROR';
+        }
+        $newhash = sha1($scorm->reference);
 
-    if (is_dir($strPath)) {
-        do {
-            // Create a random string of 8 chars
-            $randstring = NULL;
-            $lchar = '';
-            $len = 8;
-            for ($i=0; $i<$len; $i++) {
-                $char = chr(rand(48,122));
-                while (!ereg('[a-zA-Z0-9]', $char)){
-                    if ($char == $lchar) continue;
-                        $char = chr(rand(48,90));
-                    }
-                    $randstring .= $char;
-                    $lchar = $char;
-            }
-            $datadir='/'.$randstring;
-        } while (file_exists($strPath.$datadir));
-        mkdir($strPath.$datadir, $CFG->directorypermissions);
-        @chmod($strPath.$datadir, $CFG->directorypermissions);  // Just in case mkdir didn't do it
-        return $strPath.$datadir;
     } else {
-        return false;
+        // sorry, disabled type
+        return;
     }
+
+    $scorm->revision++;
+    $scorm->sha1hash = $newhash;
+    $DB->update_record('scorm', $scorm);
 }
 
+
 function scorm_array_search($item, $needle, $haystacks, $strict=false) {
     if (!empty($haystacks)) {
         foreach ($haystacks as $key => $element) {
@@ -253,13 +315,15 @@ function scorm_external_link($link) {
 */
 
 function scorm_get_sco($id,$what=SCO_ALL) {
-    if ($sco = get_record('scorm_scoes','id',$id)) {
+    global $DB;
+
+    if ($sco = $DB->get_record('scorm_scoes', array('id'=>$id))) {
         $sco = ($what == SCO_DATA) ? new stdClass() : $sco;
-        if (($what != SCO_ONLY) && ($scodatas = get_records('scorm_scoes_data','scoid',$id))) {
+        if (($what != SCO_ONLY) && ($scodatas = $DB->get_records('scorm_scoes_data', array('scoid'=>$id)))) {
             foreach ($scodatas as $scodata) {
                 $sco->{$scodata->name} = $scodata->value;
             }
-        } else if (($what != SCO_ONLY) && (!($scodatas = get_records('scorm_scoes_data','scoid',$id)))) {
+        } else if (($what != SCO_ONLY) && (!($scodatas = $DB->get_records('scorm_scoes_data', array('scoid'=>$id))))) {
             $sco->parameters = '';
         }
         return $sco;
@@ -277,17 +341,20 @@ function scorm_get_sco($id,$what=SCO_ALL) {
 */
 
 function scorm_get_scoes($id,$organisation=false) {
+    global $DB;
+
     $organizationsql = '';
+    $queryarray = array('scorm'=>$id);
     if (!empty($organisation)) {
-        $organizationsql = "AND organization='$organisation'";
+        $queryarray['organization'] = $organisation;
     }
-    if ($scoes = get_records_select('scorm_scoes',"scorm='$id' $organizationsql order by id ASC")) {
+    if ($scoes = $DB->get_records('scorm_scoes', $queryarray, 'id ASC')) {
         // drop keys so that it is a simple array as expected
         $scoes = array_values($scoes);
         foreach ($scoes as $sco) {
-            if ($scodatas = get_records('scorm_scoes_data','scoid',$sco->id)) {
+            if ($scodatas = $DB->get_records('scorm_scoes_data',array('scoid'=>$sco->id))) {
                 foreach ($scodatas as $scodata) {
-                    $sco->{$scodata->name} = stripslashes_safe($scodata->value);
+                    $sco->{$scodata->name} = $scodata->value;
                 }
             }
         }
@@ -297,14 +364,34 @@ function scorm_get_scoes($id,$organisation=false) {
     }
 }
 
-function scorm_insert_track($userid,$scormid,$scoid,$attempt,$element,$value) {
-    global $CFG;
+function scorm_insert_track($userid,$scormid,$scoid,$attempt,$element,$value,$forcecompleted=false) {
+    global $DB, $CFG;
+
     $id = null;
-    if ($track = get_record_select('scorm_scoes_track',"userid='$userid' AND scormid='$scormid' AND scoid='$scoid' AND attempt='$attempt' AND element='$element'")) {
+
+    if ($forcecompleted) {
+        //TODO - this could be broadened to encompass SCORM 2004 in future
+        if (($element == 'cmi.core.lesson_status') && ($value == 'incomplete')) {
+            if ($track = $DB->get_record_select('scorm_scoes_track','userid=? AND scormid=? AND scoid=? AND attempt=? AND element=\'cmi.core.score.raw\'', array($userid, $scormid, $scoid, $attempt))) {
+                $value = 'completed';
+            }
+        }
+        if ($element == 'cmi.core.score.raw') {
+            if ($tracktest = $DB->get_record_select('scorm_scoes_track','userid=? AND scormid=? AND scoid=? AND attempt=? AND element=\'cmi.core.lesson_status\'', array($userid, $scormid, $scoid, $attempt))) {
+                if ($tracktest->value == "incomplete") {
+                    $tracktest->value = "completed";
+                    $DB->update_record('scorm_scoes_track',$tracktest);
+                }
+            }
+        }
+    }
+
+    if ($track = $DB->get_record('scorm_scoes_track',array('userid'=>$userid, 'scormid'=>$scormid, 'scoid'=>$scoid, 'attempt'=>$attempt, 'element'=>$element))) {
         if ($element != 'x.start.time' ) { //don't update x.start.time - keep the original value.
-            $track->value = addslashes_js($value);
+            $track->value = $value;
             $track->timemodified = time();
-            $id = update_record('scorm_scoes_track',$track);
+            $DB->update_record('scorm_scoes_track',$track);
+            $id = $track->id;
         }
     } else {
         $track->userid = $userid;
@@ -312,14 +399,14 @@ function scorm_insert_track($userid,$scormid,$scoid,$attempt,$element,$value) {
         $track->scoid = $scoid;
         $track->attempt = $attempt;
         $track->element = $element;
-        $track->value = addslashes_js($value);
+        $track->value = $value;
         $track->timemodified = time();
-        $id = insert_record('scorm_scoes_track',$track);
+        $id = $DB->insert_record('scorm_scoes_track',$track);
     }
 
     if (strstr($element, '.score.raw') ||
         (($element == 'cmi.core.lesson_status' || $element == 'cmi.completion_status') && ($track->value == 'completed' || $track->value == 'passed'))) {
-        $scorm = get_record('scorm', 'id', $scormid);
+        $scorm = $DB->get_record('scorm', array('id' => $scormid));
         include_once($CFG->dirroot.'/mod/scorm/lib.php');
         scorm_update_grades($scorm, $userid);
     }
@@ -329,17 +416,17 @@ function scorm_insert_track($userid,$scormid,$scoid,$attempt,$element,$value) {
 
 function scorm_get_tracks($scoid,$userid,$attempt='') {
 /// Gets all tracks of specified sco and user
-    global $CFG;
+    global $CFG, $DB;
 
     if (empty($attempt)) {
-        if ($scormid = get_field('scorm_scoes','scorm','id',$scoid)) {
+        if ($scormid = $DB->get_field('scorm_scoes','scorm', array('id'=>$scoid))) {
             $attempt = scorm_get_last_attempt($scormid,$userid);
         } else {
             $attempt = 1;
         }
     }
-    $attemptsql = ' AND attempt=' . $attempt;
-    if ($tracks = get_records_select('scorm_scoes_track',"userid=$userid AND scoid=$scoid".$attemptsql,'element ASC')) {
+    if ($tracks = $DB->get_records('scorm_scoes_track', array('userid'=>$userid, 'scoid'=>$scoid, 'attempt'=>$attempt),'element ASC')) {
+        $usertrack = new stdClass();
         $usertrack->userid = $userid;
         $usertrack->scoid = $scoid;
         // Defined in order to unify scorm1.2 and scorm2004
@@ -350,7 +437,6 @@ function scorm_get_tracks($scoid,$userid,$attempt='') {
         $usertrack->timemodified = 0;
         foreach ($tracks as $track) {
             $element = $track->element;
-            $track->value = stripslashes_safe($track->value);
             $usertrack->{$element} = $track->value;
             switch ($element) {
                 case 'cmi.core.lesson_status':
@@ -386,6 +472,7 @@ function scorm_get_tracks($scoid,$userid,$attempt='') {
     }
 }
 
+
 /* Find the start and finsh time for a a given SCO attempt
  *
  * @param int $scormid SCORM Id
@@ -397,10 +484,11 @@ function scorm_get_tracks($scoid,$userid,$attempt='') {
  *
  */
 function scorm_get_sco_runtime($scormid, $scoid, $userid, $attempt=1) {
+    global $DB;
 
-    $timedata = new object();
+    $timedata = new stdClass();
     $sql = !empty($scoid) ? "userid=$userid AND scormid=$scormid AND scoid=$scoid AND attempt=$attempt" : "userid=$userid AND scormid=$scormid AND attempt=$attempt";
-    $tracks = get_records_select('scorm_scoes_track',"$sql ORDER BY timemodified ASC");
+    $tracks = $DB->get_records_select('scorm_scoes_track',"$sql ORDER BY timemodified ASC");
     if ($tracks) {
         $tracks = array_values($tracks);
     }
@@ -422,13 +510,15 @@ function scorm_get_sco_runtime($scormid, $scoid, $userid, $attempt=1) {
 
 
 function scorm_get_user_data($userid) {
+    global $DB;
 /// Gets user info required to display the table of scorm results
 /// for report.php
 
-    return get_record('user','id',$userid,'','','','','firstname, lastname, picture');
+    return $DB->get_record('user', array('id'=>$userid), user_picture::fields());
 }
 
-function scorm_grade_user_attempt($scorm, $userid, $attempt=1, $time=false) {
+function scorm_grade_user_attempt($scorm, $userid, $attempt=1) {
+    global $DB;
     $attemptscore = NULL;
     $attemptscore->scoes = 0;
     $attemptscore->values = 0;
@@ -436,12 +526,12 @@ function scorm_grade_user_attempt($scorm, $userid, $attempt=1, $time=false) {
     $attemptscore->sum = 0;
     $attemptscore->lastmodify = 0;
 
-    if (!$scoes = get_records('scorm_scoes','scorm',$scorm->id)) {
+    if (!$scoes = $DB->get_records('scorm_scoes', array('scorm'=>$scorm->id))) {
         return NULL;
     }
 
     foreach ($scoes as $sco) {
-        if ($userdata = scorm_get_tracks($sco->id, $userid, $attempt)) {
+        if ($userdata=scorm_get_tracks($sco->id, $userid,$attempt)) {
             if (($userdata->status == 'completed') || ($userdata->status == 'passed')) {
                 $attemptscore->scoes++;
             }
@@ -478,20 +568,12 @@ function scorm_grade_user_attempt($scorm, $userid, $attempt=1, $time=false) {
             $score = $attemptscore->max;   // Remote Learner GRADEHIGHEST is default
     }
 
-    if ($time) {
-        $result = new stdClass();
-        $result->score = $score;
-        $result->time = $attemptscore->lastmodify;
-    } else {
-        $result = $score;
-    }
-
-    return $result;
+    return $score;
 }
 
-function scorm_grade_user($scorm, $userid, $time=false) {
+function scorm_grade_user($scorm, $userid) {
 
-    // insure we dont grade user beyond $scorm->maxattempt settings
+    // ensure we dont grade user beyond $scorm->maxattempt settings
     $lastattempt = scorm_get_last_attempt($scorm->id, $userid);
     if($scorm->maxattempt != 0 && $lastattempt >= $scorm->maxattempt){
         $lastattempt = $scorm->maxattempt;
@@ -499,99 +581,85 @@ function scorm_grade_user($scorm, $userid, $time=false) {
 
     switch ($scorm->whatgrade) {
         case FIRSTATTEMPT:
-            return scorm_grade_user_attempt($scorm, $userid, 1, $time);
+            return scorm_grade_user_attempt($scorm, $userid, 1);
         break;
         case LASTATTEMPT:
-            return scorm_grade_user_attempt($scorm, $userid, scorm_get_last_completed_attempt($scorm->id, $userid), $time);
+            return scorm_grade_user_attempt($scorm, $userid, scorm_get_last_completed_attempt($scorm->id, $userid));
         break;
         case HIGHESTATTEMPT:
             $maxscore = 0;
-            $attempttime = 0;
             for ($attempt = 1; $attempt <= $lastattempt; $attempt++) {
-                $attemptscore = scorm_grade_user_attempt($scorm, $userid, $attempt, $time);
-                if ($time) {
-                    if ($attemptscore->score > $maxscore) {
-                        $maxscore = $attemptscore->score;
-                        $attempttime = $attemptscore->time;
-                    }
-                } else {
+                $attemptscore = scorm_grade_user_attempt($scorm, $userid, $attempt);
                     $maxscore = $attemptscore > $maxscore ? $attemptscore: $maxscore;
                 }
-            }
-            if ($time) {
-                $result = new stdClass();
-                $result->score = $maxscore;
-                $result->time = $attempttime;
-                return $result;
-            } else {
                return $maxscore;
-            }
+
         break;
         case AVERAGEATTEMPT:
+            $attemptcount = scorm_get_attempt_count($userid, $scorm, true);
+            if (empty($attemptcount)) {
+                return 0;
+            } else {
+                $attemptcount = count($attemptcount);
+            }
             $lastattempt = scorm_get_last_attempt($scorm->id, $userid);
             $sumscore = 0;
             for ($attempt = 1; $attempt <= $lastattempt; $attempt++) {
-                $attemptscore = scorm_grade_user_attempt($scorm, $userid, $attempt, $time);
-                if ($time) {
-                    $sumscore += $attemptscore->score;
-                } else {
+                $attemptscore = scorm_grade_user_attempt($scorm, $userid, $attempt);
                     $sumscore += $attemptscore;
                 }
-            }
-
-            if ($lastattempt > 0) {
-                $score = $sumscore / $lastattempt;
-            } else {
-                $score = 0;
-            }
 
-            if ($time) {
-                $result = new stdClass();
-                $result->score = $score;
-                $result->time = $attemptscore->time;
-                return $result;
-            } else {
-               return $score;
-            }
+            return round($sumscore / $attemptcount);
         break;
     }
 }
 
 function scorm_count_launchable($scormid,$organization='') {
-    $strorganization = '';
+    global $DB;
+
+    $sqlorganization = '';
+    $params = array($scormid);
     if (!empty($organization)) {
-        $strorganization = " AND organization='$organization'";
+        $sqlorganization = " AND organization=?";
+        $params[] = $organization;
     }
-    return count_records_select('scorm_scoes',"scorm=$scormid$strorganization AND launch<>'".sql_empty()."'");
+    return $DB->count_records_select('scorm_scoes',"scorm = ? $sqlorganization AND ".$DB->sql_isnotempty('scorm_scoes', 'launch', false, true), $params);
 }
 
 function scorm_get_last_attempt($scormid, $userid) {
+    global $DB;
+
 /// Find the last attempt number for the given user id and scorm id
-    if ($lastattempt = get_record('scorm_scoes_track', 'userid', $userid, 'scormid', $scormid, '', '', 'max(attempt) as a')) {
+    if ($lastattempt = $DB->get_record('scorm_scoes_track', array('userid'=>$userid, 'scormid'=>$scormid), 'max(attempt) as a')) {
         if (empty($lastattempt->a)) {
             return '1';
         } else {
             return $lastattempt->a;
         }
+    } else {
+        return false;
     }
 }
 
 function scorm_get_last_completed_attempt($scormid, $userid) {
+    global $DB;
+
 /// Find the last attempt number for the given user id and scorm id
-    if ($lastattempt = get_record('scorm_scoes_track', 'userid', $userid, 'scormid', $scormid, 'value', 'completed', 'max(attempt) as a')) {
+    if ($lastattempt = $DB->get_record_select('scorm_scoes_track', "userid = ? AND scormid = ? AND (value='completed' OR value='passed')", array($userid, $scormid), 'max(attempt) as a')) {
         if (empty($lastattempt->a)) {
             return '1';
         } else {
             return $lastattempt->a;
         }
+    } else {
+        return false;
     }
 }
 
 function scorm_course_format_display($user,$course) {
-    global $CFG;
+    global $CFG, $DB, $PAGE, $OUTPUT;
 
     $strupdate = get_string('update');
-    $strmodule = get_string('modulename','scorm');
     $context = get_context_instance(CONTEXT_COURSE,$course->id);
 
     echo '<div class="mod-scorm">';
@@ -599,73 +667,72 @@ function scorm_course_format_display($user,$course) {
         // The module SCORM activity with the least id is the course
         $scorm = current($scorms);
         if (! $cm = get_coursemodule_from_instance('scorm', $scorm->id, $course->id)) {
-            error('Course Module ID was incorrect');
+            print_error('invalidcoursemodule');
         }
         $colspan = '';
         $headertext = '<table width="100%"><tr><td class="title">'.get_string('name').': <b>'.format_string($scorm->name).'</b>';
         if (has_capability('moodle/course:manageactivities', $context)) {
-            if (isediting($course->id)) {
+            if ($PAGE->user_is_editing()) {
                 // Display update icon
                 $path = $CFG->wwwroot.'/course';
                 $headertext .= '<span class="commands">'.
                         '<a title="'.$strupdate.'" href="'.$path.'/mod.php?update='.$cm->id.'&amp;sesskey='.sesskey().'">'.
-                        '<img src="'.$CFG->pixpath.'/t/edit.gif" class="iconsmall" alt="'.$strupdate.'" /></a></span>';
+                        '<img src="'.$OUTPUT->pix_url('t/edit') . '" class="iconsmall" alt="'.$strupdate.'" /></a></span>';
             }
             $headertext .= '</td>';
             // Display report link
-            $trackedusers = get_record('scorm_scoes_track', 'scormid', $scorm->id, '', '', '', '', 'count(distinct(userid)) as c');
+            $trackedusers = $DB->get_record('scorm_scoes_track', array('scormid'=>$scorm->id), 'count(distinct(userid)) as c');
             if ($trackedusers->c > 0) {
                 $headertext .= '<td class="reportlink">'.
-                              '<a '.$CFG->frametarget.'" href="'.$CFG->wwwroot.'/mod/scorm/report.php?id='.$cm->id.'">'.
+                              '<a href="'.$CFG->wwwroot.'/mod/scorm/report.php?id='.$cm->id.'">'.
                                get_string('viewallreports','scorm',$trackedusers->c).'</a>';
             } else {
                 $headertext .= '<td class="reportlink">'.get_string('noreports','scorm');
             }
             $colspan = ' colspan="2"';
         }
-        $headertext .= '</td></tr><tr><td'.$colspan.'>'.format_text(get_string('summary').':<br />'.$scorm->summary).'</td></tr></table>';
-        print_simple_box($headertext,'','100%');
-        scorm_view_display($user, $scorm, 'view.php?id='.$course->id, $cm, '100%');
+        $headertext .= '</td></tr><tr><td'.$colspan.'>'.get_string('summary').':<br />'.format_module_intro('scorm', $scorm, $scorm->coursemodule).'</td></tr></table>';
+        echo $OUTPUT->box($headertext,'generalbox boxwidthwide');
+        scorm_view_display($user, $scorm, 'view.php?id='.$course->id, $cm);
     } else {
         if (has_capability('moodle/course:update', $context)) {
             // Create a new activity
-            redirect($CFG->wwwroot.'/course/mod.php?id='.$course->id.'&amp;section=0&sesskey='.sesskey().'&amp;add=scorm');
+            $url = new moodle_url('/course/mod.php', array('id'=>$course->id, 'section'=>'0', 'sesskey'=>sesskey(),'add'=>'scorm'));
+            redirect($url);
         } else {
-            notify('Could not find a scorm course here');
+            echo $OUTPUT->notification('Could not find a scorm course here');
         }
     }
     echo '</div>';
 }
 
-function scorm_view_display ($user, $scorm, $action, $cm, $boxwidth='') {
-    global $CFG;
-
-    if ($scorm->updatefreq == UPDATE_EVERYTIME){
-        require_once($CFG->dirroot.'/mod/scorm/lib.php');
+function scorm_view_display ($user, $scorm, $action, $cm) {
+    global $CFG, $DB, $PAGE, $OUTPUT;
 
-        $scorm->instance = $scorm->id;
-        scorm_update_instance($scorm);
+    if ($scorm->updatefreq == UPDATE_EVERYTIME) {
+        scorm_parse($scorm, false);
     }
 
     $organization = optional_param('organization', '', PARAM_INT);
 
-    print_simple_box_start('center',$boxwidth);
+    if($scorm->displaycoursestructure == 1) {
+        echo $OUTPUT->box_start('generalbox boxaligncenter toc');
 ?>
         <div class="structurehead"><?php print_string('contents','scorm') ?></div>
 <?php
+    }
     if (empty($organization)) {
         $organization = $scorm->launch;
     }
-    if ($orgs = get_records_select_menu('scorm_scoes',"scorm='$scorm->id' AND organization='' AND launch=''",'id','id,title')) {
+    if ($orgs = $DB->get_records_select_menu('scorm_scoes', 'scorm = ? AND '.
+                                         $DB->sql_isempty('scorm_scoes', 'launch', false, true).' AND '.
+                                         $DB->sql_isempty('scorm_scoes', 'organization', false, false),
+                                         array($scorm->id),'id','id,title')) {
         if (count($orgs) > 1) {
- ?>
-            <div class='scorm-center'>
-                <?php print_string('organizations','scorm') ?>
-                <form id='changeorg' method='post' action='<?php echo $action ?>'>
-                    <?php choose_from_menu($orgs, 'organization', "$organization", '','submit()') ?>
-                </form>
-            </div>
-<?php
+            $select = new single_select(new moodle_url($action), 'organization', $orgs, $organization, null);
+            $select->label = get_string('organizations','scorm');
+            $select->class = 'scorm-center';
+            echo $OUTPUT->render($select);
         }
     }
     $orgidentifier = '';
@@ -677,27 +744,26 @@ function scorm_view_display ($user, $scorm, $action, $cm, $boxwidth='') {
         }
     }
 
-/*
- $orgidentifier = '';
-    if ($org = get_record('scorm_scoes','id',$organization)) {
-        if (($org->organization == '') && ($org->launch == '')) {
-            $orgidentifier = $org->identifier;
-        } else {
-            $orgidentifier = $org->organization;
-        }
-    }*/
-
     $scorm->version = strtolower(clean_param($scorm->version, PARAM_SAFEDIR));   // Just to be safe
     if (!file_exists($CFG->dirroot.'/mod/scorm/datamodels/'.$scorm->version.'lib.php')) {
         $scorm->version = 'scorm_12';
     }
     require_once($CFG->dirroot.'/mod/scorm/datamodels/'.$scorm->version.'lib.php');
 
-    $result = scorm_get_toc($user,$scorm,'structlist',$orgidentifier);
+    $result = scorm_get_toc($user,$scorm,$cm->id,TOCFULLURL,$orgidentifier);
     $incomplete = $result->incomplete;
+
+    // do we want the TOC to be displayed?
+    if($scorm->displaycoursestructure == 1) {
     echo $result->toc;
-    print_simple_box_end();
+        echo $OUTPUT->box_end();
+    }
 
+    // is this the first attempt ?
+    $attemptcount = scorm_get_attempt_count($user->id, $scorm);
+
+    // do not give the player launch FORM if the SCORM object is locked after the final attempt
+    if ($scorm->lastattemptlock == 0 || $result->attemptleft > 0) {
 ?>
             <div class="scorm-center">
                <form id="theform" method="post" action="<?php echo $CFG->wwwroot ?>/mod/scorm/player.php">
@@ -709,7 +775,11 @@ function scorm_view_display ($user, $scorm, $action, $cm, $boxwidth='') {
                   } else {
                       echo '<input type="hidden" name="mode" value="normal" />'."\n";
                   }
-                  if (($incomplete === false) && (($result->attemptleft > 0)||($scorm->maxattempt == 0))) {
+                  if ($scorm->forcenewattempt == 1) {
+                      if ($incomplete === false) {
+                          echo '<input type="hidden" name="newattempt" value="on" />'."\n";
+                      }
+                  } elseif (!empty($attemptcount) && ($incomplete === false) && (($result->attemptleft > 0)||($scorm->maxattempt == 0))) {
 ?>
                   <br />
                   <input type="checkbox" id="a" name="newattempt" />
@@ -719,413 +789,81 @@ function scorm_view_display ($user, $scorm, $action, $cm, $boxwidth='') {
               ?>
               <br />
               <input type="hidden" name="scoid"/>
-              <input type="hidden" name="id" value="<?php echo $cm->id ?>"/>
+              <input type="hidden" name="cm" value="<?php echo $cm->id ?>"/>
               <input type="hidden" name="currentorg" value="<?php echo $orgidentifier ?>" />
               <input type="submit" value="<?php print_string('enter','scorm') ?>" />
               </form>
           </div>
 <?php
+    }
 }
-function scorm_simple_play($scorm,$user, $context) {
+
+function scorm_simple_play($scorm,$user, $context, $cmid) {
+    global $DB;
+
     $result = false;
 
     if ($scorm->updatefreq == UPDATE_EVERYTIME) {
-        if (strpos($scorm->version, 'AICC') !== false) {
-            $scorm->pkgtype = 'AICC';
-        } else {
-            $scorm->pkgtype = 'SCORM';
-        }
-        scorm_parse($scorm);
+        scorm_parse($scorm, false);
     }
     if (has_capability('mod/scorm:viewreport', $context)) { //if this user can view reports, don't skipview so they can see links to reports. 
         return $result;
     }
 
-    $scoes = get_records_select('scorm_scoes','scorm='.$scorm->id.' AND launch<>\''.sql_empty().'\'', 'id', 'id');
+    $scoes = $DB->get_records_select('scorm_scoes', 'scorm = ? AND '.$DB->sql_isnotempty('scorm_scoes', 'launch', false, true), array($scorm->id), 'id', 'id');
 
     if ($scoes) {
-        if ($scorm->skipview >= 1) {
-            $sco = current($scoes);
-            if (scorm_get_tracks($sco->id,$user->id) === false) {
-                header('Location: player.php?a='.$scorm->id.'&scoid='.$sco->id);
-                $result = true;
-            } else if ($scorm->skipview == 2) {
-                header('Location: player.php?a='.$scorm->id.'&scoid='.$sco->id);
-                $result = true;
-            }
-        }
-    }
-    return $result;
-}
-
-function scorm_parse($scorm) {
-    global $CFG;
-
-    if ($scorm->reference[0] == '#') {
-        if (isset($CFG->repositoryactivate) && $CFG->repositoryactivate) {
-            $referencedir = $CFG->repository.substr($scorm->reference,1);
-        }
-    } else {
-        if ((!scorm_external_link($scorm->reference)) && (basename($scorm->reference) == 'imsmanifest.xml')) {
-            $referencedir = $CFG->dataroot.'/'.$scorm->course.'/'.$scorm->datadir;
-        } else {
-            $referencedir = $CFG->dataroot.'/'.$scorm->course.'/moddata/scorm/'.$scorm->id;
-        }
-    }
-
-    // Parse scorm manifest
-    if ($scorm->pkgtype == 'AICC') {
-        require_once('datamodels/aicclib.php');
-        $scorm->launch = scorm_parse_aicc($referencedir, $scorm->id);
-    } else {
-        require_once('datamodels/scormlib.php');
-        $scorm->launch = scorm_parse_scorm($referencedir,$scorm->id);
-    }
-    return $scorm->launch;
-}
-
-/**
-* Given a manifest path, this function will check if the manifest is valid
-*
-* @param string $manifest The manifest file
-* @return object
-*/
-function scorm_validate_manifest($manifest) {
-    $validation = new stdClass();
-    if (is_file($manifest)) {
-        $validation->result = true;
-    } else {
-        $validation->result = false;
-        $validation->errors['reference'] = get_string('nomanifest','scorm');
-    }
-    return $validation;
-}
-
-/**
-* Given a aicc package directory, this function will check if the course structure is valid
-*
-* @param string $packagedir The aicc package directory path
-* @return object
-*/
-function scorm_validate_aicc($packagedir) {
-    $validation = new stdClass();
-    $validation->result = false;
-    if (is_dir($packagedir)) {
-        if ($handle = opendir($packagedir)) {
-            while (($file = readdir($handle)) !== false) {
-                $ext = substr($file,strrpos($file,'.'));
-                if (strtolower($ext) == '.cst') {
-                    $validation->result = true;
-                    break;
-                }
-            }
-            closedir($handle);
-        }
-    }
-    if ($validation->result == false) {
-        $validation->errors['reference'] = get_string('nomanifest','scorm');
-    }
-    return $validation;
-}
-
-
-function scorm_validate($data) {
-    global $CFG;
-
-    $validation = new stdClass();
-    $validation->errors = array();
-
-    if (!isset($data['course']) || empty($data['course'])) {
-        $validation->errors['reference'] = get_string('missingparam','scorm');
-        $validation->result = false;
-        return $validation;
-    }
-    $courseid = $data['course'];                  // Course Module ID
-
-    if (!isset($data['reference']) || empty($data['reference'])) {
-        $validation->errors['reference'] = get_string('packagefile','scorm');
-        $validation->result = false;
-        return $validation;
-    }
-    $reference = $data['reference'];              // Package/manifest path/location
-
-    $scormid = $data['instance'];                 // scorm ID
-    $scorm = new stdClass();
-    if (!empty($scormid)) {
-        if (!$scorm = get_record('scorm','id',$scormid)) {
-            $validation->errors['reference'] = get_string('missingparam','scorm');
-            $validation->result = false;
-            return $validation;
-        }
-    }
-
-    if ($reference[0] == '#') {
-        if (isset($CFG->repositoryactivate) && $CFG->repositoryactivate) {
-            $reference = $CFG->repository.substr($reference,1).'/imsmanifest.xml';
-        } else {
-            $validation->errors['reference'] = get_string('badpackage','scorm');
-            $validation->result = false;
-            return $validation;
-        }
-    } else if (!scorm_external_link($reference)) {
-        $reference = $CFG->dataroot.'/'.$courseid.'/'.$reference;
-    }
-
-    // Create a temporary directory to unzip package or copy manifest and validate package
-    $tempdir = '';
-    $scormdir = '';
-    if ($scormdir = make_upload_directory("$courseid/$CFG->moddata/scorm")) {
-        if ($tempdir = scorm_tempdir($scormdir)) {
-            $localreference = $tempdir.'/'.basename($reference);
-            copy ("$reference", $localreference);
-            if (!is_file($localreference)) {
-                $validation->errors['reference'] = get_string('badpackage','scorm');
-                $validation->result = false;
-            } else {
-                $ext = strtolower(substr(basename($localreference),strrpos(basename($localreference),'.')));
-                switch ($ext) {
-                    case '.pif':
-                    case '.zip':
-                        if (!unzip_file($localreference, $tempdir, false)) {
-                            $validation->errors['reference'] = get_string('unziperror','scorm');
-                            $validation->result = false;
-                        } else {
-                            unlink ($localreference);
-                            if (is_file($tempdir.'/imsmanifest.xml')) {
-                                $validation = scorm_validate_manifest($tempdir.'/imsmanifest.xml');
-                                $validation->pkgtype = 'SCORM';
-                            } else {
-                                $validation = scorm_validate_aicc($tempdir);
-                                if (($validation->result == 'regular') || ($validation->result == 'found')) {
-                                    $validation->pkgtype = 'AICC';
-                                } else {
-                                    $validation->errors['reference'] = get_string('nomanifest','scorm');
-                                    $validation->result = false;
-                                }
-                            }
-                        }
-                    break;
-                    case '.xml':
-                        if (basename($localreference) == 'imsmanifest.xml') {
-                            $validation = scorm_validate_manifest($localreference);
-                        } else {
-                            $validation->errors['reference'] = get_string('nomanifest','scorm');
-                            $validation->result = false;
-                        }
-                    break;
-                    default:
-                        $validation->errors['reference'] = get_string('badpackage','scorm');
-                        $validation->result = false;
-                    break;
-                }
-            }
-            if (is_dir($tempdir)) {
-            // Delete files and temporary directory
-                scorm_delete_files($tempdir);
-            }
-        } else {
-            $validation->errors['reference'] = get_string('packagedir','scorm');
-            $validation->result = false;
-        }
-    } else {
-        $validation->errors['reference'] = get_string('datadir','scorm');
-        $validation->result = false;
-    }
-    return $validation;
-}
-
-function scorm_check_package($data) {
-    global $CFG, $COURSE;
-
-    require_once($CFG->libdir.'/filelib.php');
-
-    $courseid = $data->course;                  // Course Module ID
-    $reference = $data->reference;              // Package path
-    $scormid = $data->instance;                 // scorm ID
-
-    $validation = new stdClass();
-
-    if (!empty($courseid) && !empty($reference)) {
-        $externalpackage = scorm_external_link($reference);
-
-        $validation->launch = 0;
-        $referencefield = $reference;
-        if (empty($reference)) {
-            $validation = null;
-        } else if ($reference[0] == '#') {
-            if (isset($CFG->repositoryactivate) && $CFG->repositoryactivate) {
-                $referencefield = $reference.'/imsmanifest.xml';
-                $reference = $CFG->repository.substr($reference,1).'/imsmanifest.xml';
+        $orgidentifier = '';
+        if ($sco = scorm_get_sco($scorm->launch, SCO_ONLY)) {
+            if (($sco->organization == '') && ($sco->launch == '')) {
+                $orgidentifier = $sco->identifier;
             } else {
-                $validation = null;
-            }
-        } else if (!$externalpackage) {
-            $reference = $CFG->dataroot.'/'.$courseid.'/'.$reference;
-        }
-
-        if (!empty($scormid)) {
-        //
-        // SCORM Update
-        //
-            if ((!empty($validation)) && (is_file($reference) || $externalpackage)){
-
-                if (!$externalpackage) {
-                    $mdcheck = md5_file($reference);
-                } else if ($externalpackage){
-                    if ($scormdir = make_upload_directory("$courseid/$CFG->moddata/scorm")) {
-                        if ($tempdir = scorm_tempdir($scormdir)) {
-                            $content = download_file_content($reference);
-                            $file = fopen($tempdir.'/'.basename($reference), 'x');
-                            fwrite($file, $content);
-                            fclose($file);
-                            $mdcheck = md5_file($tempdir.'/'.basename($reference));
-                            scorm_delete_files($tempdir);
-                        }
+                $orgidentifier = $sco->organization;
                     }
                 }
 
-                if ($scorm = get_record('scorm','id',$scormid)) {
-                    if ($scorm->reference[0] == '#') {
-                        if (isset($CFG->repositoryactivate) && $CFG->repositoryactivate) {
-                            $oldreference = $CFG->repository.substr($scorm->reference,1).'/imsmanifest.xml';
-                        } else {
-                            $oldreference = $scorm->reference;
-                        }
-                    } else if (!scorm_external_link($scorm->reference)) {
-                        $oldreference = $CFG->dataroot.'/'.$courseid.'/'.$scorm->reference;
-                    } else {
-                        $oldreference = $scorm->reference;
-                    }
-                    $validation->launch = $scorm->launch;
-                    if ((($oldreference == $reference) && ($mdcheck != $scorm->md5hash)) || ($oldreference != $reference)) {
-                        // This is a new or a modified package
-                        $validation->launch = 0;
-                    } else {
-                    // Old package already validated
-                        if (strpos($scorm->version,'AICC') !== false) {
-                            $validation->pkgtype = 'AICC';
-                        } else {
-                            $validation->pkgtype = 'SCORM';
-                        }
-                    }
-                } else {
-                    $validation = null;
-                }
-            } else {
-                $validation = null;
-            }
-        }
-        //$validation->launch = 0;
-        if (($validation != null) && ($validation->launch == 0)) {
-        //
-        // Package must be validated
-        //
-            $ext = strtolower(substr(basename($reference),strrpos(basename($reference),'.')));
-            $tempdir = '';
-            switch ($ext) {
-                case '.pif':
-                case '.zip':
-                // Create a temporary directory to unzip package and validate package
-                    $scormdir = '';
-                    if ($scormdir = make_upload_directory("$courseid/$CFG->moddata/scorm")) {
-                        if ($tempdir = scorm_tempdir($scormdir)) {
-                            if ($externalpackage){
-                                $content = download_file_content($reference);
-                                $file = fopen($tempdir.'/'.basename($reference), 'x');
-                                fwrite($file, $content);
-                                fclose($file);
-                            } else {
-                                copy ("$reference", $tempdir.'/'.basename($reference));
-                            }
-                            unzip_file($tempdir.'/'.basename($reference), $tempdir, false);
-                            if (!$externalpackage) {
-                                unlink ($tempdir.'/'.basename($reference));
-                            }
-                            if (is_file($tempdir.'/imsmanifest.xml')) {
-                                $validation = scorm_validate_manifest($tempdir.'/imsmanifest.xml');
-                                $validation->pkgtype = 'SCORM';
-                            } else {
-                                $validation = scorm_validate_aicc($tempdir);
-                                $validation->pkgtype = 'AICC';
-                            }
-                        } else {
-                            $validation = null;
-                        }
-                    } else {
-                        $validation = null;
-                    }
-                break;
-                case '.xml':
-                    if (basename($reference) == 'imsmanifest.xml') {
-                        if ($externalpackage) {
-                            if ($scormdir = make_upload_directory("$courseid/$CFG->moddata/scorm")) {
-                                if ($tempdir = scorm_tempdir($scormdir)) {
-                                    $content = download_file_content($reference);
-                                    $file = fopen($tempdir.'/'.basename($reference), 'x');
-                                    fwrite($file, $content);
-                                    fclose($file);
-                                    if (is_file($tempdir.'/'.basename($reference))) {
-                                        $validation = scorm_validate_manifest($tempdir.'/'.basename($reference));
-                                    } else {
-                                        $validation = null;
-                                    }
-                                }
-                            }
-                        } else {
-                            $validation = scorm_validate_manifest($reference);
-                        }
-                        $validation->pkgtype = 'SCORM';
-                    } else {
-                        $validation = null;
-                    }
-                break;
-                default:
-                    $validation = null;
-                break;
+        if ($scorm->skipview >= 1) {
+            $sco = current($scoes);
+            $url = new moodle_url('/mod/scorm/player.php', array('a' => $scorm->id,
+                                                                'currentorg'=>$orgidentifier,
+                                                                'scoid'=>$sco->id));
+            if ($scorm->skipview == 2 || scorm_get_tracks($sco->id, $user->id) === false) {
+                if (!empty($scorm->forcenewattempt)) {
+                    $result = scorm_get_toc($user, $scorm, $cmid, TOCFULLURL, $orgidentifier);
+                    if ($result->incomplete === false) {
+                        $url->param('newattempt','on');
             }
-            if ($validation == null) {
-                if (is_dir($tempdir)) {
-                // Delete files and temporary directory
-                    scorm_delete_files($tempdir);
                 }
-            } else {
-                if (($ext == '.xml') && (!$externalpackage)) {
-                    $validation->datadir = dirname($referencefield);
-                } else {
-                    $validation->datadir = substr($tempdir,strlen($scormdir));
+                redirect($url);
                 }
-                $validation->launch = 0;
             }
         }
-    } else {
-        $validation = null;
-    }
-    return $validation;
+    return $result;
 }
 
-
 function scorm_get_count_users($scormid, $groupingid=null) {
+    global $CFG, $DB;
 
-    global $CFG;
-
-    if (!empty($CFG->enablegroupings) && !empty($groupingid)) {
+    if (!empty($groupingid)) {
         $sql = "SELECT COUNT(DISTINCT st.userid)
-                FROM {$CFG->prefix}scorm_scoes_track st
-                    INNER JOIN {$CFG->prefix}groups_members gm ON st.userid = gm.userid
-                    INNER JOIN {$CFG->prefix}groupings_groups gg ON gm.groupid = gg.groupid
-                WHERE st.scormid = $scormid AND gg.groupingid = $groupingid
+                FROM {scorm_scoes_track} st
+                    INNER JOIN {groups_members} gm ON st.userid = gm.userid
+                    INNER JOIN {groupings_groups} gg ON gm.groupid = gg.groupid
+                WHERE st.scormid = ? AND gg.groupingid = ?
                 ";
+        $params = array($scormid, $groupingid);
     } else {
         $sql = "SELECT COUNT(DISTINCT st.userid)
-                FROM {$CFG->prefix}scorm_scoes_track st
-                WHERE st.scormid = $scormid
+                FROM {scorm_scoes_track} st
+                WHERE st.scormid = ?
                 ";
+        $params = array($scormid);
     }
 
-    return(count_records_sql($sql));
+    return ($DB->count_records_sql($sql, $params));
 }
 
- /**
+/**
 * Build up the JavaScript representation of an array element
 *
 * @param string $sversion SCORM API version
@@ -1268,14 +1006,153 @@ function scorm_element_cmp($a, $b) {
 }
 
 /**
+* Generate the user attempt status string
+*
+* @param object $user Current context user
+* @param object $scorm a moodle scrom object - mdl_scorm
+* @return string - Attempt status string
+*/
+function scorm_get_attempt_status($user, $scorm) {
+    global $DB;
+
+    $attempts = scorm_get_attempt_count($user->id, $scorm, true);
+    if(empty($attempts)) {
+        $attemptcount = 0;
+    } else {
+        $attemptcount = count($attempts);
+    }
+
+    $result = '<p>'.get_string('noattemptsallowed', 'scorm').': ';
+    if ($scorm->maxattempt > 0) {
+        $result .= $scorm->maxattempt . '<br />';
+    } else {
+        $result .= get_string('unlimited').'<br />';
+    }
+    $result .= get_string('noattemptsmade', 'scorm').': ' . $attemptcount . '<br />';
+
+    if ($scorm->maxattempt == 1) {
+        switch ($scorm->grademethod) {
+            case GRADEHIGHEST:
+                $grademethod = get_string('gradehighest', 'scorm');
+            break;
+            case GRADEAVERAGE:
+                $grademethod = get_string('gradeaverage', 'scorm');
+            break;
+            case GRADESUM:
+                $grademethod = get_string('gradesum', 'scorm');
+            break;
+            case GRADESCOES:
+                $grademethod = get_string('gradescoes', 'scorm');
+            break;
+        }
+     } else {
+         switch ($scorm->whatgrade) {
+            case HIGHESTATTEMPT:
+                $grademethod = get_string('highestattempt', 'scorm');
+            break;
+            case AVERAGEATTEMPT:
+                $grademethod = get_string('averageattempt', 'scorm');
+            break;
+            case FIRSTATTEMPT:
+                $grademethod = get_string('firstattempt', 'scorm');
+            break;
+            case LASTATTEMPT:
+                $grademethod = get_string('lastattempt', 'scorm');
+            break;
+        }
+     }
+
+    if(!empty($attempts)) {
+        $i = 1;
+        foreach($attempts as $attempt) {
+            $gradereported = scorm_grade_user_attempt($scorm, $user->id, $attempt->attemptnumber);
+            if ($scorm->grademethod !== GRADESCOES && !empty($scorm->maxgrade)) {
+                $gradereported = $gradereported/$scorm->maxgrade;
+                $gradereported = number_format($gradereported*100, 0) .'%';
+            }
+            $result .= get_string('gradeforattempt', 'scorm').' ' . $i . ': ' . $gradereported .'<br />';
+            $i++;
+        }
+    }
+    $calculatedgrade = scorm_grade_user($scorm, $user->id);
+    if ($scorm->grademethod !== GRADESCOES && !empty($scorm->maxgrade)) {
+        $calculatedgrade = $calculatedgrade/$scorm->maxgrade;
+        $calculatedgrade = number_format($calculatedgrade*100, 0) .'%';
+    }
+    $result .= get_string('grademethod', 'scorm'). ': ' . $grademethod;
+    if(empty($attempts)) {
+        $result .= '<br />' . get_string('gradereported','scorm') . ': ' . get_string('none') . '<br />';
+    } else {
+        $result .= '<br />' . get_string('gradereported','scorm') . ': ' . $calculatedgrade . '<br />';
+    }
+    $result .= '</p>';
+    if ($attemptcount >= $scorm->maxattempt and $scorm->maxattempt > 0) {
+        $result .= '<p><font color="#cc0000">'.get_string('exceededmaxattempts','scorm').'</font></p>';
+    }
+    return $result;
+}
+
+/**
+* Get SCORM attempt count
+*
+* @param object $user Current context user
+* @param object $scorm a moodle scrom object - mdl_scorm
+* @param bool $attempts return the list of attempts
+* @return int - no. of attempts so far
+*/
+function scorm_get_attempt_count($userid, $scorm, $attempts_only=false) {
+    global $DB;
+    $attemptcount = 0;
+    $element = 'cmi.core.score.raw';
+    if ($scorm->grademethod == GRADESCOES) {
+        $element = 'cmi.core.lesson_status';
+    }
+    if ($scorm->version == 'scorm_13' || $scorm->version == 'SCORM_1.3') {
+        $element = 'cmi.score.raw';
+    }
+    $attempts = $DB->get_records_select('scorm_scoes_track',"element=? AND userid=? AND scormid=?", array($element, $userid, $scorm->id),'attempt','DISTINCT attempt AS attemptnumber');
+    if ($attempts_only) {
+        return $attempts;
+    }
+    if(!empty($attempts)) {
+        $attemptcount = count($attempts);
+    }
+    return $attemptcount;
+}
+
+/**
+* Figure out with this is a debug situation
+*
+* @param object $scorm a moodle scrom object - mdl_scorm
+* @return boolean - debugging true/false
+*/
+function scorm_debugging($scorm) {
+    global $CFG, $USER;
+    $cfg_scorm = get_config('scorm');
+
+    if (!$cfg_scorm->allowapidebug) {
+        return false;
+    }
+    $identifier = $USER->username.':'.$scorm->name;
+    $test = $cfg_scorm->apidebugmask;
+    // check the regex is only a short list of safe characters
+    if (!preg_match('/^[\w\s\*\.\?\+\:\_\\\]+$/', $test)) {
+        return false;
+    }
+    $res = false;
+    eval('$res = preg_match(\'/^'.$test.'/\', $identifier) ? true : false;');
+    return $res;
+}
+
+/**
 * Delete Scorm tracks for selected users
 *
 * @param array $attemptids list of attempts that need to be deleted
-* @param int $scormid ID of Scorm
+* @param int $scorm instance
 *
 * return bool true deleted all responses, false failed deleting an attempt - stopped here
 */
-function scorm_delete_responses($attemptids, $scormid) {
+function scorm_delete_responses($attemptids, $scorm) {
     if(!is_array($attemptids) || empty($attemptids)) {
         return false;
     }
@@ -1291,7 +1168,7 @@ function scorm_delete_responses($attemptids, $scormid) {
         if (count($keys) == 2) {
             $userid = clean_param($keys[0], PARAM_INT);
             $attemptid = clean_param($keys[1], PARAM_INT);
-            if (!$userid || !$attemptid || !scorm_delete_attempt($userid, $scormid, $attemptid)) {
+            if (!$userid || !$attemptid || !scorm_delete_attempt($userid, $scorm, $attemptid)) {
                     return false;
             }
         } else {
@@ -1310,49 +1187,305 @@ function scorm_delete_responses($attemptids, $scormid) {
 *
 * return bool true suceeded
 */
-function scorm_delete_attempt($userid, $scormid, $attemptid) {
-    delete_records('scorm_scoes_track', 'userid', $userid, 'scormid', $scormid, 'attempt', $attemptid);
+function scorm_delete_attempt($userid, $scorm, $attemptid) {
+    global $DB;
+
+    $DB->delete_records('scorm_scoes_track', array('userid' => $userid, 'scormid' => $scorm->id, 'attempt' => $attemptid));
+    include_once('lib.php');
+    scorm_update_grades($scorm, $userid, true);
     return true;
 }
 
 /**
- * Converts SCORM date/time notation to human-readable format
+ * Converts SCORM duration notation to human-readable format
  * The function works with both SCORM 1.2 and SCORM 2004 time formats
- * @param $datetime string SCORM date/time
+ * @param $duration string SCORM duration
  * @return string human-readable date/time
  */
-function scorm_format_date_time($datetime) {
+function scorm_format_duration($duration) {
     // fetch date/time strings
-    $stryears = get_string('numyears');
+    $stryears = get_string('years');
     $strmonths = get_string('nummonths');
-    $strdays = get_string('numdays');
-    $strhours = get_string('numhours');
-    $strminutes = get_string('numminutes');
-    $strseconds = get_string('numseconds'); 
+    $strdays = get_string('days');
+    $strhours = get_string('hours');
+    $strminutes = get_string('minutes');
+    $strseconds = get_string('seconds');
     
-    if ($datetime[0] == 'P') {
+    if ($duration[0] == 'P') {
         // if timestamp starts with 'P' - it's a SCORM 2004 format
         // this regexp discards empty sections, takes Month/Minute ambiguity into consideration,
         // and outputs filled sections, discarding leading zeroes and any format literals
         // also saves the only zero before seconds decimals (if there are any) and discards decimals if they are zero
         $pattern = array( '#([A-Z])0+Y#', '#([A-Z])0+M#', '#([A-Z])0+D#', '#P(|\d+Y)0*(\d+)M#', '#0*(\d+)Y#', '#0*(\d+)D#', '#P#',
                           '#([A-Z])0+H#', '#([A-Z])[0.]+S#', '#\.0+S#', '#T(|\d+H)0*(\d+)M#', '#0*(\d+)H#', '#0+\.(\d+)S#', '#0*([\d.]+)S#', '#T#' );
-        $replace = array( '$1', '$1', '$1', '$1$2'.$strmonths.' ', '$1'.$stryears.' ', '$1'.$strdays.' ', '',
-                          '$1', '$1', 'S', '$1$2'.$strminutes.' ', '$1'.$strhours.' ', '0.$1'.$strseconds, '$1'.$strseconds, '');
+        $replace = array( '$1', '$1', '$1', '$1$2 '.$strmonths.' ', '$1 '.$stryears.' ', '$1 '.$strdays.' ', '',
+                          '$1', '$1', 'S', '$1$2 '.$strminutes.' ', '$1 '.$strhours.' ', '0.$1 '.$strseconds, '$1 '.$strseconds, '');
     } else {
         // else we have SCORM 1.2 format there
         // first convert the timestamp to some SCORM 2004-like format for conveniency
-        $datetime = preg_replace('#^(\d+):(\d+):([\d.]+)$#', 'T$1H$2M$3S', $datetime);
+        $duration = preg_replace('#^(\d+):(\d+):([\d.]+)$#', 'T$1H$2M$3S', $duration);
         // then convert in the same way as SCORM 2004
         $pattern = array( '#T0+H#', '#([A-Z])0+M#', '#([A-Z])[0.]+S#', '#\.0+S#', '#0*(\d+)H#', '#0*(\d+)M#', '#0+\.(\d+)S#', '#0*([\d.]+)S#', '#T#' );
-        $replace = array( 'T', '$1', '$1', 'S', '$1'.$strhours.' ', '$1'.$strminutes.' ', '0.$1'.$strseconds, '$1'.$strseconds, '' );
-        //$pattern = '##';
-        //$replace = '';
+        $replace = array( 'T', '$1', '$1', 'S', '$1 '.$strhours.' ', '$1 '.$strminutes.' ', '0.$1 '.$strseconds, '$1 '.$strseconds, '' );
     }
 
-    $result = preg_replace($pattern, $replace, $datetime);
+    $result = preg_replace($pattern, $replace, $duration);
 
     return $result;
 }
 
-?>
+function scorm_get_toc($user,$scorm,$cmid,$toclink=TOCJSLINK,$currentorg='',$scoid='',$mode='normal',$attempt='',$play=false, $tocheader=false) {
+    global $CFG, $DB, $PAGE, $OUTPUT;
+
+    $modestr = '';
+    if ($mode == 'browse') {
+        $modestr = '&amp;mode='.$mode;
+    }
+
+    $result = new stdClass();
+    if ($tocheader) {
+        $result->toc = '<div id="scorm_layout">';
+        $result->toc .= '<div id="scorm_toc">';
+        $result->toc .= '<div id="scorm_tree">';
+    }
+    $result->toc .= '<ul>';
+    $tocmenus = array();
+    $result->prerequisites = true;
+    $incomplete = false;
+
+    //
+    // Get the current organization infos
+    //
+    if (!empty($currentorg)) {
+        if (($organizationtitle = $DB->get_field('scorm_scoes','title', array('scorm'=>$scorm->id,'identifier'=>$currentorg))) != '') {
+            if ($play) {
+                $result->toctitle = "$organizationtitle";
+            }
+            else {
+                $result->toc .= "\t<li>$organizationtitle</li>\n";
+            }
+            $tocmenus[] = $organizationtitle;
+        }
+    }
+
+    //
+    // If not specified retrieve the last attempt number
+    //
+    if (empty($attempt)) {
+        $attempt = scorm_get_attempt_count($user->id, $scorm);
+    }
+    $result->attemptleft = $scorm->maxattempt == 0 ? 1 : $scorm->maxattempt - $attempt;
+    if ($scoes = scorm_get_scoes($scorm->id, $currentorg)){
+        //
+        // Retrieve user tracking data for each learning object
+        //
+        $usertracks = array();
+        foreach ($scoes as $sco) {
+            if (!empty($sco->launch)) {
+                if ($usertrack = scorm_get_tracks($sco->id,$user->id,$attempt)) {
+                    if ($usertrack->status == '') {
+                        $usertrack->status = 'notattempted';
+                    }
+                    $usertracks[$sco->identifier] = $usertrack;
+                }
+            }
+        }
+
+        $level=0;
+        $sublist=1;
+        $previd = 0;
+        $nextid = 0;
+        $findnext = false;
+        $parents[$level]='/';
+        foreach ($scoes as $pos => $sco) {
+            $isvisible = false;
+            $sco->title = $sco->title;
+            if (!isset($sco->isvisible) || (isset($sco->isvisible) && ($sco->isvisible == 'true'))) {
+                $isvisible = true;
+            }
+            if ($parents[$level] != $sco->parent) {
+                if ($newlevel = array_search($sco->parent,$parents)) {
+                    for ($i=0; $i<($level-$newlevel); $i++) {
+                        $result->toc .= "\t\t</li></ul></li>\n";
+                    }
+                    $level = $newlevel;
+                } else {
+                    $i = $level;
+                    $closelist = '';
+                    while (($i > 0) && ($parents[$level] != $sco->parent)) {
+                        if ($i === 1 && $level > 1) {
+                            $closelist .= "\t\t</ul></li>\n";
+                        } else {
+                            $closelist .= "\t</li></ul></li>\n";
+                        }
+                        $i--;
+                    }
+                    if (($i == 0) && ($sco->parent != $currentorg)) {
+                        $result->toc .= "\n\t<ul>\n";
+                        $level++;
+                    } else {
+                        $result->toc .= $closelist;
+                        $level = $i;
+                    }
+                    $parents[$level] = $sco->parent;
+                }
+            }
+            if ($isvisible) {
+                $result->toc .= "<li>";
+            }
+            if (isset($scoes[$pos+1])) {
+                $nextsco = $scoes[$pos+1];
+            } else {
+                $nextsco = false;
+            }
+            $nextisvisible = false;
+            if (($nextsco !== false) && (!isset($nextsco->isvisible) || (isset($nextsco->isvisible) && ($nextsco->isvisible == 'true')))) {
+                $nextisvisible = true;
+            }
+            if ($nextisvisible && ($nextsco !== false) && ($sco->parent != $nextsco->parent) &&
+               (($level==0) || (($level>0) && ($nextsco->parent == $sco->identifier)))) {
+                $sublist++;
+            }
+            if (empty($sco->title)) {
+                $sco->title = $sco->identifier;
+            }
+            if ($isvisible) {
+                if (!empty($sco->launch)) {
+                    $score = '';
+                    if (empty($scoid) && ($mode != 'normal')) {
+                        $scoid = $sco->id;
+                    }
+                    if (isset($usertracks[$sco->identifier])) {
+                        $usertrack = $usertracks[$sco->identifier];
+                        $strstatus = get_string($usertrack->status,'scorm');
+                        if ($sco->scormtype == 'sco') {
+                            $statusicon = '<img src="'.$OUTPUT->pix_url($usertrack->status, 'scorm').'" alt="'.$strstatus.'" title="'.$strstatus.'" />';
+                        } else {
+                            $statusicon = '<img src="'.$OUTPUT->pix_url('assetc', 'scorm').'" alt="'.get_string('assetlaunched','scorm').'" title="'.get_string('assetlaunched','scorm').'" />';
+                        }
+
+                        if (($usertrack->status == 'notattempted') || ($usertrack->status == 'incomplete') || ($usertrack->status == 'browsed')) {
+                            $incomplete = true;
+                            if ($play && empty($scoid)) {
+                                $scoid = $sco->id;
+                            }
+                        }
+                        if ($usertrack->score_raw != '' && has_capability('mod/scorm:viewscores', get_context_instance(CONTEXT_MODULE,$cmid))) {
+                            $score = '('.get_string('score','scorm').':&nbsp;'.$usertrack->score_raw.')';
+                        }
+                        $strsuspended = get_string('suspended','scorm');
+                        $exitvar = 'cmi.core.exit';
+                        if ($scorm->version == 'SCORM_1.3') {
+                            $exitvar = 'cmi.exit';
+                        }
+                        if ($incomplete && isset($usertrack->{$exitvar}) && ($usertrack->{$exitvar} == 'suspend')) {
+                            $statusicon = '<img src="'.$OUTPUT->pix_url('suspend', 'scorm').'" alt="'.$strstatus.' - '.$strsuspended.'" title="'.$strstatus.' - '.$strsuspended.'" />';
+                        }
+                    } else {
+                        if ($play && empty($scoid)) {
+                            $scoid = $sco->id;
+                        }
+                        $incomplete = true;
+                        if ($sco->scormtype == 'sco') {
+                            $statusicon = '<img src="'.$OUTPUT->pix_url('notattempted', 'scorm').'" alt="'.get_string('notattempted','scorm').'" title="'.get_string('notattempted','scorm').'" />';
+                        } else {
+                            $statusicon = '<img src="'.$OUTPUT->pix_url('asset', 'scorm').'" alt="'.get_string('asset','scorm').'" title="'.get_string('asset','scorm').'" />';
+                        }
+                    }
+                    if ($sco->id == $scoid) {
+                        $findnext = true;
+                    }
+
+                    if (($nextid == 0) && (scorm_count_launchable($scorm->id,$currentorg) > 1) && ($nextsco!==false) && (!$findnext)) {
+                        if (!empty($sco->launch)) {
+                            $previd = $sco->id;
+                        }
+                    }
+
+                    if ($scorm->version == 'SCORM_1.3') {
+                        require_once($CFG->dirroot.'/mod/scorm/datamodels/sequencinglib.php');
+                        $prereq = scorm_seq_evaluate($sco->id,$usertracks);
+                    } else {
+                        //TODO: split check for sco->prerequisites only for AICC as I think that's the only case it's set.
+                        $prereq = empty($sco->prerequisites) || scorm_eval_prerequisites($sco->prerequisites,$usertracks);
+                    }
+                    if ($prereq) {
+                        if ($sco->id == $scoid) {
+                            $result->prerequisites = true;
+                        }
+
+                        if ($toclink == TOCFULLURL) { //display toc with urls for structure page
+                            $url = $CFG->wwwroot.'/mod/scorm/player.php?a='.$scorm->id.'&amp;currentorg='.$currentorg.$modestr.'&amp;scoid='.$sco->id;
+                            $result->toc .= $statusicon.'&nbsp;<a href="'.$url.'">'.format_string($sco->title).'</a>'.$score."\n";
+                        } else { //display toc for inside scorm player
+                            if ($sco->launch) {
+                                $link = 'a='.$scorm->id.'&scoid='.$sco->id.'&currentorg='.$currentorg.$modestr.'&attempt='.$attempt;
+                                $result->toc .= '<a title="'.$link.'">'.$statusicon.'&nbsp;'.format_string($sco->title).'&nbsp;'.$score.'</a>';
+                            } else {
+                                $result->toc .= '<span>'.$statusicon.'&nbsp;'.format_string($sco->title).'</span>';
+                            }
+                        }
+                        $tocmenus[$sco->id] = scorm_repeater('&minus;',$level) . '&gt;' . format_string($sco->title);
+                    } else {
+                        if ($sco->id == $scoid) {
+                            $result->prerequisites = false;
+                        }
+                        if ($play) {
+                            // should be disabled
+                            $result->toc .= '<span>'.$statusicon.'&nbsp;'.format_string($sco->title).'</span>';
+                        } else {
+                            $result->toc .= $statusicon.'&nbsp;'.format_string($sco->title)."\n";
+                        }
+                    }
+                } else {
+                    $result->toc .= '&nbsp;'.format_string($sco->title);
+                }
+                if (($nextsco === false) || $nextsco->parent == $sco->parent) {
+                    $result->toc .= "</li>\n";
+                }
+            }
+            if (($nextsco !== false) && ($nextid == 0) && ($findnext)) {
+                if (!empty($nextsco->launch)) {
+                    $nextid = $nextsco->id;
+                }
+            }
+        }
+        for ($i=0;$i<$level;$i++) {
+            $result->toc .= "\t\t</ul></li>\n";
+        }
+
+        if ($play) {
+            // it is possible that $scoid is still not set, in this case we don't want an empty object
+            if ($scoid) {
+                $sco = scorm_get_sco($scoid);
+            }
+            $sco->previd = $previd;
+            $sco->nextid = $nextid;
+            $result->sco = $sco;
+            $result->incomplete = $incomplete;
+        } else {
+            $result->incomplete = $incomplete;
+        }
+    }
+    $result->toc .= '</ul>';
+
+    // NEW IMS TOC
+    if ($tocheader) {
+        $result->toc .= '</div></div></div>';
+        $result->toc .= '<div id="scorm_navpanel"></div>';
+    }
+
+
+    if ($scorm->hidetoc == 0) {
+        $PAGE->requires->data_for_js('scormdata', array(
+                'plusicon' => $OUTPUT->pix_url('plus', 'scorm'),
+                'minusicon' => $OUTPUT->pix_url('minus', 'scorm')));
+        $PAGE->requires->js('/lib/cookies.js');
+        $PAGE->requires->js('/mod/scorm/datamodels/scorm_datamodels.js');
+    }
+
+    $url = new moodle_url('/mod/scorm/player.php?a='.$scorm->id.'&currentorg='.$currentorg.$modestr);
+    $result->tocmenu = $OUTPUT->single_select($url, 'scoid', $tocmenus, $sco->id, null, "tocmenu");
+
+    return $result;
+}
