diff --git a/mod/chat/lib.php b/mod/chat/lib.php
index 1b0f6bd..a462b6e 100644
--- a/mod/chat/lib.php
+++ b/mod/chat/lib.php
@@ -1,12 +1,36 @@
-<?php  // $Id$
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
-/// Library of functions and constants for module chat
-require_once($CFG->libdir.'/pagelib.php');
+/**
+ * Library of functions and constants for module chat
+ *
+ * @package   mod-chat
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once($CFG->dirroot.'/calendar/lib.php');
 
 // The HTML head for the message window to start with (<!-- nix --> is used to get some browsers starting with output
+global $CHAT_HTMLHEAD;
 $CHAT_HTMLHEAD = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\"><html><head></head>\n<body>\n\n".padding(200);
 
 // The HTML head for the message window to start with (with js scrolling)
+global $CHAT_HTMLHEAD_JS;
 $CHAT_HTMLHEAD_JS = <<<EOD
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
 <html><head><script type="text/javascript">
@@ -23,20 +47,46 @@ move();
 </head>
 <body onBlur="scroll_active = true" onFocus="scroll_active = false">
 EOD;
+global $CHAT_HTMLHEAD_JS;
 $CHAT_HTMLHEAD_JS .= padding(200);
 
 // The HTML code for standard empty pages (e.g. if a user was kicked out)
+global $CHAT_HTMLHEAD_OUT;
 $CHAT_HTMLHEAD_OUT = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\"><html><head><title>You are out!</title></head><body></body></html>";
 
 // The HTML head for the message input page
+global $CHAT_HTMLHEAD_MSGINPUT;
 $CHAT_HTMLHEAD_MSGINPUT = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\"><html><head><title>Message Input</title></head><body>";
 
 // The HTML code for the message input page, with JavaScript
-$CHAT_HTMLHEAD_MSGINPUT_JS = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\"><html><head><title>Message Input</title>\n<script type=\"text/javascript\">\n//<![CDATA[\nscroll_active = true;\nfunction empty_field_and_submit()\n{\ndocument.fdummy.arsc_message.value=document.f.arsc_message.value;\ndocument.fdummy.submit();\ndocument.f.arsc_message.focus();\ndocument.f.arsc_message.select();\nreturn false;\n}\n//]]>\n</script>\n</head><body bgcolor=\"#FFFFFF\" OnLoad=\"document.f.arsc_message.focus();document.f.arsc_message.select();\">";
+global $CHAT_HTMLHEAD_MSGINPUT_JS;
+$CHAT_HTMLHEAD_MSGINPUT_JS = <<<EOD
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
+<html>
+    <head><title>Message Input</title>
+    <script type="text/javascript">
+    //<![CDATA[
+    scroll_active = true;
+    function empty_field_and_submit(){
+        document.fdummy.arsc_message.value=document.f.arsc_message.value;
+        document.fdummy.submit();
+        document.f.arsc_message.focus();
+        document.f.arsc_message.select();
+        return false;
+    }
+    //]]>
+    </script>
+    </head><body OnLoad="document.f.arsc_message.focus();document.f.arsc_message.select();">;
+EOD;
 
 // Dummy data that gets output to the browser as needed, in order to make it show output
+global $CHAT_DUMMY_DATA;
 $CHAT_DUMMY_DATA = padding(200);
 
+/**
+ * @param int $n
+ * @return string
+ */
 function padding($n){
     $str = '';
     for($i=0; $i<$n; $i++){
@@ -45,134 +95,173 @@ function padding($n){
     return $str;
 }
 
+/**
+ * Given an object containing all the necessary data,
+ * (defined by the form in mod_form.php) this function
+ * will create a new instance and return the id number
+ * of the new instance.
+ *
+ * @global object
+ * @param object $chat
+ * @return int
+ */
 function chat_add_instance($chat) {
-/// Given an object containing all the necessary data,
-/// (defined by the form in mod.html) this function
-/// will create a new instance and return the id number
-/// of the new instance.
+    global $DB;
 
     $chat->timemodified = time();
 
-    if ($returnid = insert_record("chat", $chat)) {
+    $returnid = $DB->insert_record("chat", $chat);
 
         $event = NULL;
         $event->name        = $chat->name;
-        $event->description = $chat->intro;
+    $event->description = format_module_intro('chat', $chat, $chat->coursemodule);
         $event->courseid    = $chat->course;
         $event->groupid     = 0;
         $event->userid      = 0;
         $event->modulename  = 'chat';
         $event->instance    = $returnid;
-        $event->eventtype   = $chat->schedule;
+    $event->eventtype   = 'chattime';
         $event->timestart   = $chat->chattime;
         $event->timeduration = 0;
 
-        add_event($event);
-    }
+    calendar_event::create($event);
 
     return $returnid;
 }
 
-
+/**
+ * Given an object containing all the necessary data,
+ * (defined by the form in mod_form.php) this function
+ * will update an existing instance with new data.
+ *
+ * @global object
+ * @param object $chat
+ * @return bool
+ */
 function chat_update_instance($chat) {
-/// Given an object containing all the necessary data,
-/// (defined by the form in mod.html) this function
-/// will update an existing instance with new data.
+    global $DB;
 
     $chat->timemodified = time();
     $chat->id = $chat->instance;
 
 
-    if ($returnid = update_record("chat", $chat)) {
+    $DB->update_record("chat", $chat);
 
-        $event = new object();
+    $event = new stdClass();
 
-        if ($event->id = get_field('event', 'id', 'modulename', 'chat', 'instance', $chat->id)) {
+    if ($event->id = $DB->get_field('event', 'id', array('modulename'=>'chat', 'instance'=>$chat->id))) {
 
             $event->name        = $chat->name;
-            $event->description = $chat->intro;
+        $event->description = format_module_intro('chat', $chat, $chat->coursemodule);
             $event->timestart   = $chat->chattime;
 
-            update_event($event);
-        }
+        $calendarevent = calendar_event::load($event->id);
+        $calendarevent->update($event);
     }
 
-    return $returnid;
+    return true;
 }
 
-
+/**
+ * Given an ID of an instance of this module,
+ * this function will permanently delete the instance
+ * and any data that depends on it.
+ *
+ * @global object
+ * @param int $id
+ * @return bool
+ */
 function chat_delete_instance($id) {
-/// Given an ID of an instance of this module,
-/// this function will permanently delete the instance
-/// and any data that depends on it.
+    global $DB;
+
 
-    if (! $chat = get_record('chat', 'id', $id)) {
+    if (! $chat = $DB->get_record('chat', array('id'=>$id))) {
         return false;
     }
 
     $result = true;
 
-    # Delete any dependent records here #
+    // Delete any dependent records here
 
-    if (! delete_records('chat', 'id', $chat->id)) {
+    if (! $DB->delete_records('chat', array('id'=>$chat->id))) {
         $result = false;
     }
-    if (! delete_records('chat_messages', 'chatid', $chat->id)) {
+    if (! $DB->delete_records('chat_messages', array('chatid'=>$chat->id))) {
         $result = false;
     }
-    if (! delete_records('chat_users', 'chatid', $chat->id)) {
+    if (! $DB->delete_records('chat_messages_current', array('chatid'=>$chat->id))) {
         $result = false;
     }
-
-    $pagetypes = page_import_types('mod/chat/');
-    foreach($pagetypes as $pagetype) {
-        if(!blocks_delete_all_on_page($pagetype, $chat->id)) {
+    if (! $DB->delete_records('chat_users', array('chatid'=>$chat->id))) {
             $result = false;
         }
-    }
 
-    if (! delete_records('event', 'modulename', 'chat', 'instance', $chat->id)) {
+    if (! $DB->delete_records('event', array('modulename'=>'chat', 'instance'=>$chat->id))) {
         $result = false;
     }
 
     return $result;
 }
 
+/**
+ * Return a small object with summary information about what a
+ * user has done with a given particular instance of this module
+ * Used for user activity reports.
+ * <code>
+ * $return->time = the time they did it
+ * $return->info = a short text description
+ * </code>
+ *
+ * @param object $course
+ * @param object $user
+ * @param object $mod
+ * @param object $chat
+ * @return void
+ */
 function chat_user_outline($course, $user, $mod, $chat) {
-/// Return a small object with summary information about what a
-/// user has done with a given particular instance of this module
-/// Used for user activity reports.
-/// $return->time = the time they did it
-/// $return->info = a short text description
-
-    $return = NULL;
-    return $return;
+    return NULL;
 }
 
+/**
+ * Print a detailed representation of what a  user has done with
+ * a given particular instance of this module, for user activity reports.
+ *
+ * @param object $course
+ * @param object $user
+ * @param object $mod
+ * @param object $chat
+ * @return bool
+ */
 function chat_user_complete($course, $user, $mod, $chat) {
-/// Print a detailed representation of what a  user has done with
-/// a given particular instance of this module, for user activity reports.
-
     return true;
 }
 
+/**
+ * Given a course and a date, prints a summary of all chat rooms past and present
+ * This function is called from course/lib.php: print_recent_activity()
+ *
+ * @global object
+ * @global object
+ * @global object
+ * @param object $course
+ * @param bool $viewfullnames
+ * @param int|string $timestart Timestamp
+ * @return bool
+ */
 function chat_print_recent_activity($course, $viewfullnames, $timestart) {
-/// Given a course and a date, prints a summary of all chat rooms past and present
-/// This function is called from course/lib.php: print_recent_activity()
-
-    global $CFG, $USER;
+    global $CFG, $USER, $DB, $OUTPUT;
 
     // this is approximate only, but it is really fast ;-)
     $timeout = $CFG->chat_old_ping * 10;
 
-    if (!$mcms = get_records_sql("SELECT cm.id, MAX(chm.timestamp) AS lasttime
-                                    FROM {$CFG->prefix}course_modules cm
-                                         JOIN {$CFG->prefix}modules md        ON md.id = cm.module
-                                         JOIN {$CFG->prefix}chat ch           ON ch.id = cm.instance
-                                         JOIN {$CFG->prefix}chat_messages chm ON chm.chatid = ch.id
-                                   WHERE chm.timestamp > $timestart AND ch.course = {$course->id} AND md.name = 'chat'
+    if (!$mcms = $DB->get_records_sql("SELECT cm.id, MAX(chm.timestamp) AS lasttime
+                                         FROM {course_modules} cm
+                                         JOIN {modules} md        ON md.id = cm.module
+                                         JOIN {chat} ch           ON ch.id = cm.instance
+                                         JOIN {chat_messages} chm ON chm.chatid = ch.id
+                                        WHERE chm.timestamp > ? AND ch.course = ? AND md.name = 'chat'
                                 GROUP BY cm.id
-                                ORDER BY lasttime ASC")) {
+                                     ORDER BY lasttime ASC", array($timestart, $course->id))) {
          return false;
     }
 
@@ -215,13 +304,13 @@ function chat_print_recent_activity($course, $viewfullnames, $timestart) {
         $mygroupids = implode(',', $mygroupids);
         $cm->mygroupids = $mygroupids;
 
-        if (!$mcm = get_record_sql("SELECT cm.id, MAX(chm.timestamp) AS lasttime
-                                      FROM {$CFG->prefix}course_modules cm
-                                           JOIN {$CFG->prefix}chat ch           ON ch.id = cm.instance
-                                           JOIN {$CFG->prefix}chat_messages chm ON chm.chatid = ch.id
-                                     WHERE chm.timestamp > $timestart AND cm.id = {$cm->id} AND
+        if (!$mcm = $DB->get_record_sql("SELECT cm.id, MAX(chm.timestamp) AS lasttime
+                                           FROM {course_modules} cm
+                                           JOIN {chat} ch           ON ch.id = cm.instance
+                                           JOIN {chat_messages_current} chm ON chm.chatid = ch.id
+                                          WHERE chm.timestamp > ? AND cm.id = ? AND
                                            (chm.groupid IN ($mygroupids) OR chm.groupid = 0)
-                                  GROUP BY cm.id")) {
+                                       GROUP BY cm.id", array($timestart, $cm->id))) {
              continue;
         }
 
@@ -240,7 +329,7 @@ function chat_print_recent_activity($course, $viewfullnames, $timestart) {
     $strftimerecent = get_string('strftimerecent');
 
     if ($past) {
-        print_headline(get_string('pastchats', 'chat').':');
+        echo $OUTPUT->heading(get_string("pastchats", 'chat').':');
 
         foreach ($past as $cm) {
             $link = $CFG->wwwroot.'/mod/chat/view.php?id='.$cm->id;
@@ -251,7 +340,7 @@ function chat_print_recent_activity($course, $viewfullnames, $timestart) {
     }
 
     if ($current) {
-        print_headline(get_string('currentchats', 'chat').':');
+        echo $OUTPUT->heading(get_string("currentchats", 'chat').':');
 
         $oldest = floor((time()-$CFG->chat_old_ping)/10)*10;  // better db caching
 
@@ -260,7 +349,9 @@ function chat_print_recent_activity($course, $viewfullnames, $timestart) {
         $timeoldext = time() - ($CFG->chat_old_ping*10); // JSless gui_basic needs much longer timeouts
         $timeoldext = floor($timeoldext/10)*10;  // better db caching
 
-        $timeout = "AND (chu.version<>'basic' AND chu.lastping>$timeold) OR (chu.version='basic' AND chu.lastping>$timeoldext)";
+        $params = array('timeold'=>$timeold, 'timeoldext'=>$timeoldext, 'cmid'=>$cm->id);
+
+        $timeout = "AND (chu.version<>'basic' AND chu.lastping>:timeold) OR (chu.version='basic' AND chu.lastping>:timeoldext)";
 
         foreach ($current as $cm) {
             //count users first
@@ -270,13 +361,13 @@ function chat_print_recent_activity($course, $viewfullnames, $timestart) {
                 $groupselect = "";
             }
 
-            if (!$users = get_records_sql("SELECT u.id, u.firstname, u.lastname, u.email, u.picture
-                                             FROM {$CFG->prefix}course_modules cm
-                                             JOIN {$CFG->prefix}chat ch        ON ch.id = cm.instance
-                                             JOIN {$CFG->prefix}chat_users chu ON chu.chatid = ch.id
-                                             JOIN {$CFG->prefix}user u         ON u.id = chu.userid
-                                            WHERE cm.id = {$cm->id} $timeout $groupselect
-                                         GROUP BY u.id, u.firstname, u.lastname, u.email, u.picture")) {
+            if (!$users = $DB->get_records_sql("SELECT u.id, u.firstname, u.lastname, u.email, u.picture
+                                                  FROM {course_modules} cm
+                                                  JOIN {chat} ch        ON ch.id = cm.instance
+                                                  JOIN {chat_users} chu ON chu.chatid = ch.id
+                                                  JOIN {user} u         ON u.id = chu.userid
+                                                 WHERE cm.id = :cmid $timeout $groupselect
+                                              GROUP BY u.id, u.firstname, u.lastname, u.email, u.picture", $params)) {
             }
 
             $link = $CFG->wwwroot.'/mod/chat/view.php?id='.$cm->id;
@@ -299,13 +390,16 @@ function chat_print_recent_activity($course, $viewfullnames, $timestart) {
     return true;
 }
 
-
+/**
+ * Function to be run periodically according to the moodle cron
+ * This function searches for things that need to be done, such
+ * as sending out mail, toggling flags etc ...
+ *
+ * @global object
+ * @return bool
+ */
 function chat_cron () {
-/// Function to be run periodically according to the moodle cron
-/// This function searches for things that need to be done, such
-/// as sending out mail, toggling flags etc ...
-
-    global $CFG;
+    global $DB;
 
     chat_update_chat_times();
 
@@ -314,79 +408,101 @@ function chat_cron () {
     /// Delete old messages with a
     /// single SQL query.
     $subselect = "SELECT c.keepdays
-                    FROM {$CFG->prefix}chat c
-                   WHERE c.id = {$CFG->prefix}chat_messages.chatid";
+                    FROM {chat} c
+                   WHERE c.id = {chat_messages}.chatid";
 
     $sql = "DELETE
-              FROM {$CFG->prefix}chat_messages
+              FROM {chat_messages}
              WHERE ($subselect) > 0 AND timestamp < ( ".time()." -($subselect) * 24 * 3600)"; 
 
-    execute_sql($sql, false);
+    $DB->execute($sql);
+
+    $sql = "DELETE
+              FROM {chat_messages_current}
+             WHERE timestamp < ( ".time()." - 8 * 3600)";
+
+    $DB->execute($sql);
 
     return true;
 }
 
+/**
+ * Returns the users with data in one chat
+ * (users with records in chat_messages, students)
+ *
+ * @todo: deprecated - to be deleted in 2.2
+ *
+ * @param int $chatid
+ * @param int $groupid
+ * @return array
+ */
 function chat_get_participants($chatid, $groupid=0) {
-//Returns the users with data in one chat
-//(users with records in chat_messages, students)
+    global $DB;
 
-    global $CFG;
+    $params = array('groupid'=>$groupid, 'chatid'=>$chatid);
 
     if ($groupid) {
-        $groupselect = " AND (c.groupid='$groupid' OR c.groupid='0')";
+        $groupselect = " AND (c.groupid=:groupid OR c.groupid='0')";
     } else {
         $groupselect = "";
     }
 
     //Get students
-    $students = get_records_sql("SELECT DISTINCT u.id, u.id
-                                 FROM {$CFG->prefix}user u,
-                                      {$CFG->prefix}chat_messages c
-                                 WHERE c.chatid = '$chatid' $groupselect
-                                   AND u.id = c.userid");
+    $students = $DB->get_records_sql("SELECT DISTINCT u.id, u.id
+                                        FROM {user} u, {chat_messages} c
+                                       WHERE c.chatid = :chatid $groupselect
+                                             AND u.id = c.userid", $params);
 
     //Return students array (it contains an array of unique users)
     return ($students);
 }
 
+/**
+ * This standard function will check all instances of this module
+ * and make sure there are up-to-date events created for each of them.
+ * If courseid = 0, then every chat event in the site is checked, else
+ * only chat events belonging to the course specified are checked.
+ * This function is used, in its new format, by restore_refresh_events()
+ *
+ * @global object
+ * @param int $courseid
+ * @return bool
+ */
 function chat_refresh_events($courseid = 0) {
-// This standard function will check all instances of this module
-// and make sure there are up-to-date events created for each of them.
-// If courseid = 0, then every chat event in the site is checked, else
-// only chat events belonging to the course specified are checked.
-// This function is used, in its new format, by restore_refresh_events()
+    global $DB;
 
     if ($courseid) {
-        if (! $chats = get_records("chat", "course", $courseid)) {
+        if (! $chats = $DB->get_records("chat", array("course"=>$courseid))) {
             return true;
         }
     } else {
-        if (! $chats = get_records("chat")) {
+        if (! $chats = $DB->get_records("chat")) {
             return true;
         }
     }
-    $moduleid = get_field('modules', 'id', 'name', 'chat');
+    $moduleid = $DB->get_field('modules', 'id', array('name'=>'chat'));
 
     foreach ($chats as $chat) {
-        $event = NULL;
-        $event->name        = addslashes($chat->name);
-        $event->description = addslashes($chat->intro);
+        $cm = get_coursemodule_from_id('chat', $chat->id);
+        $event = new stdClass();
+        $event->name        = $chat->name;
+        $event->description = format_module_intro('chat', $chat, $cm->id);
         $event->timestart   = $chat->chattime;
 
-        if ($event->id = get_field('event', 'id', 'modulename', 'chat', 'instance', $chat->id)) {
-            update_event($event);
-
+        if ($event->id = $DB->get_field('event', 'id', array('modulename'=>'chat', 'instance'=>$chat->id))) {
+            $calendarevent = calendar_event::load($event->id);
+            $calendarevent->update($event);
         } else {
             $event->courseid    = $chat->course;
             $event->groupid     = 0;
             $event->userid      = 0;
             $event->modulename  = 'chat';
             $event->instance    = $chat->id;
-            $event->eventtype   = $chat->schedule;
+            $event->eventtype   = 'chattime';
             $event->timeduration = 0;
-            $event->visible     = get_field('course_modules', 'visible', 'module', $moduleid, 'instance', $chat->id);
+            $event->visible     = $DB->get_field('course_modules', 'visible', array('module'=>$moduleid, 'instance'=>$chat->id));
 
-            add_event($event);
+            calendar_event::create($event);
         }
     }
     return true;
@@ -396,68 +512,85 @@ function chat_refresh_events($courseid = 0) {
 //////////////////////////////////////////////////////////////////////
 /// Functions that require some SQL
 
+/**
+ * @global object
+ * @param int $chatid
+ * @param int $groupid
+ * @param int $groupingid
+ * @return array
+ */
 function chat_get_users($chatid, $groupid=0, $groupingid=0) {
+    global $DB;
 
-    global $CFG;
+    $params = array('chatid'=>$chatid, 'groupid'=>$groupid, 'groupingid'=>$groupingid);
 
     if ($groupid) {
-        $groupselect = " AND (c.groupid='$groupid' OR c.groupid='0')";
+        $groupselect = " AND (c.groupid=:groupid OR c.groupid='0')";
     } else {
         $groupselect = "";
     }
     
-    if (!empty($CFG->enablegroupings) && !(empty($groupingid))) {
-        $groupingjoin = "INNER JOIN {$CFG->prefix}groups_members gm ON u.id = gm.userid
-                         INNER JOIN {$CFG->prefix}groupings_groups gg ON gm.groupid = gg.groupid AND gg.groupingid = $groupingid ";
+    if (!empty($groupingid)) {
+        $groupingjoin = "JOIN {groups_members} gm ON u.id = gm.userid
+                         JOIN {groupings_groups} gg ON gm.groupid = gg.groupid AND gg.groupingid = :groupingid ";
         
     } else {
         $groupingjoin = '';
     }
 
-    return get_records_sql("SELECT DISTINCT u.id, u.firstname, u.lastname, u.picture, c.lastmessageping, c.firstping, u.imagealt
-                              FROM {$CFG->prefix}chat_users c
-                                INNER JOIN {$CFG->prefix}user u ON u.id = c.userid
-                                $groupingjoin
-                             WHERE c.chatid = '$chatid'
-                                $groupselect
-                             ORDER BY c.firstping ASC");
+    $ufields = user_picture::fields('u');
+    return $DB->get_records_sql("SELECT DISTINCT $ufields, c.lastmessageping, c.firstping
+                                   FROM {chat_users} c
+                                   JOIN {user} u ON u.id = c.userid $groupingjoin
+                                  WHERE c.chatid = :chatid $groupselect
+                               ORDER BY c.firstping ASC", $params);
 }
 
+/**
+ * @global object
+ * @param int $chatid
+ * @param int $groupid
+ * @return array
+ */
 function chat_get_latest_message($chatid, $groupid=0) {
-/// Efficient way to extract just the latest message
-/// Uses ADOdb directly instead of get_record_sql()
-/// because the LIMIT command causes problems with
-/// the developer debugging in there.
+    global $DB;
 
-    global $db, $CFG;
+    $params = array('chatid'=>$chatid, 'groupid'=>$groupid);
 
     if ($groupid) {
-        $groupselect = " AND (groupid='$groupid' OR groupid='0')";
+        $groupselect = "AND (groupid=:groupid OR groupid=0)";
     } else {
         $groupselect = "";
     }
 
-    if (!$rs = $db->SelectLimit("SELECT *
-                                 FROM {$CFG->prefix}chat_messages
-                                 WHERE chatid = '$chatid' $groupselect
-                                 ORDER BY timestamp DESC", 1)) {
-        return false;
-    }
-
-    $result = rs_fetch_record($rs);
-    
-    rs_close($rs);
+    $sql = "SELECT *
+        FROM {chat_messages_current} WHERE chatid = :chatid $groupselect
+        ORDER BY timestamp DESC";
 
-    return $result;
+    // return the lastest one message
+    return $DB->get_record_sql($sql, $params, true);
 }
 
 
 //////////////////////////////////////////////////////////////////////
 // login if not already logged in
 
+/**
+ * login if not already logged in
+ *
+ * @global object
+ * @global object
+ * @param int $chatid
+ * @param string $version
+ * @param int $groupid
+ * @param object $course
+ * @return bool|int Returns the chat users sid or false
+ */
 function chat_login_user($chatid, $version, $groupid, $course) {
-    global $USER;
-    if (($version != 'sockets') and $chatuser = get_record_select('chat_users', "chatid='$chatid' AND userid='$USER->id' AND groupid='$groupid'")) {
+    global $USER, $DB;
+
+    if (($version != 'sockets') and $chatuser = $DB->get_record('chat_users', array('chatid'=>$chatid, 'userid'=>$USER->id, 'groupid'=>$groupid))) {
+        // this will update logged user information
         $chatuser->version  = $version;
         $chatuser->ip       = $USER->lastip;
         $chatuser->lastping = time();
@@ -468,20 +601,15 @@ function chat_login_user($chatid, $version, $groupid, $course) {
         // or provide a dummy value for the db
         if (empty($chatuser->ip)) {
             $chatuser->ip = getremoteaddr();
-            if (empty($chatuser->ip)) {
-                $chatuser->ip = '';
-            }
         }
 
-        if (($chatuser->course != $course->id)
-         or ($chatuser->userid != $USER->id)) {
-            return false;
-        }
-        if (!update_record('chat_users', $chatuser)) {
+        if (($chatuser->course != $course->id) or ($chatuser->userid != $USER->id)) {
             return false;
         }
+        $DB->update_record('chat_users', $chatuser);
+
     } else {
-        $chatuser = new object();
+        $chatuser = new stdClass();
         $chatuser->chatid   = $chatid;
         $chatuser->userid   = $USER->id;
         $chatuser->groupid  = $groupid;
@@ -497,20 +625,15 @@ function chat_login_user($chatid, $version, $groupid, $course) {
         // or provide a dummy value for the db
         if (empty($chatuser->ip)) {
             $chatuser->ip = getremoteaddr();
-            if (empty($chatuser->ip)) {
-                $chatuser->ip = '';
-            }
         }
 
 
-        if (!insert_record('chat_users', $chatuser)) {
-            return false;
-        }
+        $DB->insert_record('chat_users', $chatuser);
 
         if ($version == 'sockets') {
             // do not send 'enter' message, chatd will do it
         } else {
-            $message = new object();
+            $message = new stdClass();
             $message->chatid    = $chatuser->chatid;
             $message->userid    = $chatuser->userid;
             $message->groupid   = $groupid;
@@ -518,29 +641,34 @@ function chat_login_user($chatid, $version, $groupid, $course) {
             $message->system    = 1;
             $message->timestamp = time();
 
-            if (!insert_record('chat_messages', $message)) {
-                error('Could not insert a chat message!');
-            }
+            $DB->insert_record('chat_messages', $message);
+            $DB->insert_record('chat_messages_current', $message);
         }
     }
 
     return $chatuser->sid;
 }
 
+/**
+ * Delete the old and in the way
+ *
+ * @global object
+ * @global object
+ */
 function chat_delete_old_users() {
 // Delete the old and in the way
-
-    global $CFG;
+    global $CFG, $DB;
 
     $timeold = time() - $CFG->chat_old_ping;
     $timeoldext = time() - ($CFG->chat_old_ping*10); // JSless gui_basic needs much longer timeouts
 
-    $query = "(version<>'basic' AND lastping<'$timeold') OR (version='basic' AND lastping<'$timeoldext')";
+    $query = "(version<>'basic' AND lastping<?) OR (version='basic' AND lastping<?)";
+    $params = array($timeold, $timeoldext);
 
-    if ($oldusers = get_records_select('chat_users', $query) ) {
-        delete_records_select('chat_users', $query);
+    if ($oldusers = $DB->get_records_select('chat_users', $query, $params) ) {
+        $DB->delete_records_select('chat_users', $query, $params);
         foreach ($oldusers as $olduser) {
-            $message = new object();
+            $message = new stdClass();
             $message->chatid    = $olduser->chatid;
             $message->userid    = $olduser->userid;
             $message->groupid   = $olduser->groupid;
@@ -548,31 +676,38 @@ function chat_delete_old_users() {
             $message->system    = 1;
             $message->timestamp = time();
 
-            if (!insert_record('chat_messages', $message)) {
-                error('Could not insert a chat message!');
-            }
+            $DB->insert_record('chat_messages', $message);
+            $DB->insert_record('chat_messages_current', $message);
         }
     }
 }
 
-
+/**
+ * Updates chat records so that the next chat time is correct
+ *
+ * @global object
+ * @param int $chatid
+ * @return void
+ */
 function chat_update_chat_times($chatid=0) {
 /// Updates chat records so that the next chat time is correct
+    global $DB;
 
     $timenow = time();
+
+    $params = array('timenow'=>$timenow, 'chatid'=>$chatid);
+
     if ($chatid) {
-        if (!$chats[] = get_record_select("chat", "id = '$chatid' AND chattime <= '$timenow' AND schedule > '0'")) {
+        if (!$chats[] = $DB->get_record_select("chat", "id = :chatid AND chattime <= :timenow AND schedule > 0", $params)) {
             return;
         }
     } else {
-        if (!$chats = get_records_select("chat", "chattime <= '$timenow' AND schedule > '0'")) {
+        if (!$chats = $DB->get_records_select("chat", "chattime <= :timenow AND schedule > 0", $params)) {
             return;
         }
     }
 
     foreach ($chats as $chat) {
-        unset($chat->name);
-        unset($chat->intro);
         switch ($chat->schedule) {
             case 1: // Single event - turn off schedule and disable
                     $chat->chattime = 0;
@@ -589,23 +724,35 @@ function chat_update_chat_times($chatid=0) {
                     }
                     break;
         }
-        update_record("chat", $chat);
+        $DB->update_record("chat", $chat);
+
+        $event = new stdClass();           // Update calendar too
+
+        $cond = "modulename='chat' AND instance = :chatid AND timestart <> :chattime";
+        $params = array('chattime'=>$chat->chattime, 'chatid'=>$chatid);
 
-        $event = NULL;           // Update calendar too
-        $cond = "modulename='chat' AND instance = {$chat->id} 
-                 AND timestart != {$chat->chattime}";
-        if ($event->id = get_field_select('event', 'id', $cond)) {
+        if ($event->id = $DB->get_field_select('event', 'id', $cond, $params)) {
             $event->timestart   = $chat->chattime;
-            update_event($event);
+            $calendarevent = calendar_event::load($event->id);
+            $calendarevent->update($event, false);
         }
     }
 }
 
-
+/**
+ * @global object
+ * @global object
+ * @param object $message
+ * @param int $courseid
+ * @param object $sender
+ * @param object $currentuser
+ * @param string $chat_lastrow
+ * @return bool|string Returns HTML or false
+ */
 function chat_format_message_manually($message, $courseid, $sender, $currentuser, $chat_lastrow=NULL) {
-    global $CFG, $USER;
+    global $CFG, $USER, $OUTPUT;
 
-    $output = new object();
+    $output = new stdClass();
     $output->beep = false;       // by default
     $output->refreshusers = false; // by default
 
@@ -622,7 +769,8 @@ function chat_format_message_manually($message, $courseid, $sender, $currentuser
     $USER->timezone = $tz;
     $message->strtime = userdate($message->timestamp, get_string('strftimemessage', 'chat'), $tz);
 
-    $message->picture = print_user_picture($sender->id, 0, $sender->picture, false, true, false);
+    $message->picture = $OUTPUT->user_picture($sender, array('size'=>false, 'courseid'=>$courseid, 'link'=>false));
+
     if ($courseid) {
         $message->picture = "<a onclick=\"window.open('$CFG->wwwroot/user/view.php?id=$sender->id&amp;course=$courseid')\" href=\"$CFG->wwwroot/user/view.php?id=$sender->id&amp;course=$courseid\">$message->picture</a>";
     }
@@ -655,7 +803,7 @@ function chat_format_message_manually($message, $courseid, $sender, $currentuser
 
     /// Parse the text to clean and filter it
 
-    $options = new object();
+    $options = new stdClass();
     $options->para = false;
     $text = format_text($text, FORMAT_MOODLE, $options, $courseid);
 
@@ -682,11 +830,23 @@ function chat_format_message_manually($message, $courseid, $sender, $currentuser
             return false;
         }
     } else if (substr($text, 0, 1) == '/') {     /// It's a user command
-        if (trim(substr($text, 0, 4)) == '/me') {
+        // support some IRC commands
+        $pattern = '#(^\/)(\w+).*#';
+        preg_match($pattern, trim($text), $matches);
+        $command = $matches[2];
+        switch ($command){
+        case 'me':
             $special = true;
             $outinfo = $message->strtime;
-            $outmain = $sender->firstname.' '.substr($text, 4);
+            $outmain = '*** <b>'.$sender->firstname.' '.substr($text, 4).'</b>';
+            break;
         }
+    } elseif (substr($text, 0, 2) == 'To') {
+        $pattern = '#To[[:space:]](.*):(.*)#';
+        preg_match($pattern, trim($text), $matches);
+        $special = true;
+        $outinfo = $message->strtime;
+        $outmain = $sender->firstname.' '.get_string('saidto', 'chat').' <i>'.$matches[1].'</i>: '.$matches[2];
     }
 
     if(!$special) {
@@ -710,16 +870,25 @@ function chat_format_message_manually($message, $courseid, $sender, $currentuser
     return $output;
 }
 
+/**
+ * @global object
+ * @param object $message
+ * @param int $courseid
+ * @param object $currentuser
+ * @param string $chat_lastrow
+ * @return bool|string Returns HTML or false
+ */
 function chat_format_message($message, $courseid, $currentuser, $chat_lastrow=NULL) {
 /// Given a message object full of information, this function
 /// formats it appropriately into text and html, then
 /// returns the formatted data.
+    global $DB;
 
     static $users;     // Cache user lookups
 
     if (isset($users[$message->userid])) {
         $user = $users[$message->userid];
-    } else if ($user = get_record('user', 'id', $message->userid, '','','','','id,picture,firstname,lastname')) {
+    } else if ($user = $DB->get_record('user', array('id'=>$message->userid), user_picture::fields())) {
         $users[$message->userid] = $user;
     } else {
         return NULL;
@@ -727,14 +896,235 @@ function chat_format_message($message, $courseid, $currentuser, $chat_lastrow=NU
     return chat_format_message_manually($message, $courseid, $user, $currentuser, $chat_lastrow);
 }
 
+/**
+ * @global object
+ * @param object $message message to be displayed.
+ * @param mixed $chatuser user chat data
+ * @param object $currentuser current user for whom the message should be displayed.
+ * @param int $groupingid course module grouping id
+ * @param string $theme name of the chat theme.
+ * @return bool|string Returns HTML or false
+ */
+function chat_format_message_theme ($message, $chatuser, $currentuser, $groupingid, $theme = 'bubble') {
+    global $CFG, $USER, $OUTPUT, $COURSE, $DB;
+
+    static $users;     // Cache user lookups
+
+    $result = new stdClass();
+
+    if (file_exists($CFG->dirroot . '/mod/chat/gui_ajax/theme/'.$theme.'/config.php')) {
+        include($CFG->dirroot . '/mod/chat/gui_ajax/theme/'.$theme.'/config.php');
+    }
+
+    if (isset($users[$message->userid])) {
+        $sender = $users[$message->userid];
+    } else if ($sender = $DB->get_record('user', array('id'=>$message->userid), user_picture::fields())) {
+        $users[$message->userid] = $sender;
+    } else {
+        return NULL;
+    }
+
+    $USER->timezone = 99;
+    $tz = get_user_timezone($currentuser->timezone);
+    $USER->timezone = $tz;
+
+    if (empty($chatuser->course)) {
+        $courseid = $COURSE->id;
+    } else {
+        $courseid = $chatuser->course;
+    }
+
+    $message->strtime = userdate($message->timestamp, get_string('strftimemessage', 'chat'), $tz);
+    $message->picture = $OUTPUT->user_picture($sender, array('courseid'=>$courseid));
+
+    $message->picture = "<a target='_blank' href=\"$CFG->wwwroot/user/view.php?id=$sender->id&amp;course=$courseid\">$message->picture</a>";
+
+    // Start processing the message
+    if(!empty($message->system)) {
+        $result->type = 'system';
+
+        $userlink = new moodle_url('/user/view.php', array('id'=>$message->userid,'course'=>$courseid));
+
+        $patterns = array();
+        $replacements = array();
+        $patterns[] = '___senderprofile___';
+        $patterns[] = '___sender___';
+        $patterns[] = '___time___';
+        $patterns[] = '___event___';
+        $replacements[] = $CFG->wwwroot.'/user/view.php?id='.$sender->id.'&amp;course='.$courseid;
+        $replacements[] = fullname($sender);
+        $replacements[] = $message->strtime;
+        $replacements[] = get_string('message'.$message->message, 'chat', fullname($sender));
+        $result->html = str_replace($patterns, $replacements, $chattheme_cfg->event_message);
+        return $result;
+    }
+
+    // It's not a system event
+    $text = $message->message;
+
+    /// Parse the text to clean and filter it
+    $options = new stdClass();
+    $options->para = false;
+    $text = format_text($text, FORMAT_MOODLE, $options, $courseid);
+
+    // And now check for special cases
+    $special = false;
+    $outtime = $message->strtime;
+
+    //Initilise output variable.
+    $outmain = '';
+
+    if (substr($text, 0, 5) == 'beep ') {
+        $special = true;
+        /// It's a beep!
+        $result->type = 'beep';
+        $beepwho = trim(substr($text, 5));
+
+        if ($beepwho == 'all') {   // everyone
+            $outmain =  get_string('messagebeepseveryone', 'chat', fullname($sender));
+        } else if ($beepwho == $currentuser->id) {  // current user
+            $outmain = get_string('messagebeepsyou', 'chat', fullname($sender));
+        } else if ($sender->id == $currentuser->id) {  //something is not caught?
+            //allow beep for a active chat user only, else user can beep anyone and get fullname
+            if (!empty($chatuser) && is_numeric($beepwho)) {
+               $chatusers = chat_get_users($chatuser->chatid, $chatuser->groupid, $groupingid);
+               if (array_key_exists($beepwho, $chatusers)) {
+                   $outmain = get_string('messageyoubeep', 'chat', fullname($chatusers[$beepwho]));
+               } else {
+                   $outmain = get_string('messageyoubeep', 'chat', $beepwho);
+               }
+            } else {
+                $outmain = get_string('messageyoubeep', 'chat', $beepwho);
+            }
+        }
+    } else if (substr($text, 0, 1) == '/') {     /// It's a user command
+        $special = true;
+        $result->type = 'command';
+        // support some IRC commands
+        $pattern = '#(^\/)(\w+).*#';
+        preg_match($pattern, trim($text), $matches);
+        $command = $matches[2];
+        $special = true;
+        switch ($command){
+        case 'me':
+            $outmain = '*** <b>'.$sender->firstname.' '.substr($text, 4).'</b>';
+            break;
+        }
+    } elseif (substr($text, 0, 2) == 'To') {
+        $special = true;
+        $result->type = 'dialogue';
+        $pattern = '#To[[:space:]](.*):(.*)#';
+        preg_match($pattern, trim($text), $matches);
+        $special = true;
+        $outmain = $sender->firstname.' <b>'.get_string('saidto', 'chat').'</b> <i>'.$matches[1].'</i>: '.$matches[2];
+    }
+
+    if(!$special) {
+        $outmain = $text;
+    }
+
+    $result->text = strip_tags($outtime.': '.$outmain);
+
+    $ismymessage = '';
+    $rightalign = '';
+    if ($sender->id == $USER->id) {
+        $ismymessage = ' class="mymessage"';
+        $rightalign = ' align="right"';
+    }
+    $patterns = array();
+    $replacements = array();
+    $patterns[] = '___avatar___';
+    $patterns[] = '___sender___';
+    $patterns[] = '___senderprofile___';
+    $patterns[] = '___time___';
+    $patterns[] = '___message___';
+    $patterns[] = '___mymessageclass___';
+    $patterns[] = '___tablealign___';
+    $replacements[] = $message->picture;
+    $replacements[] = fullname($sender);
+    $replacements[] = $CFG->wwwroot.'/user/view.php?id='.$sender->id.'&amp;course='.$courseid;
+    $replacements[] = $outtime;
+    $replacements[] = $outmain;
+    $replacements[] = $ismymessage;
+    $replacements[] = $rightalign;
+    if (!empty($chattheme_cfg->avatar) and !empty($chattheme_cfg->align)) {
+        if (!empty($ismymessage)) {
+            $result->html = str_replace($patterns, $replacements, $chattheme_cfg->user_message_right);
+        } else {
+            $result->html = str_replace($patterns, $replacements, $chattheme_cfg->user_message_left);
+        }
+    } else {
+        $result->html = str_replace($patterns, $replacements, $chattheme_cfg->user_message);
+    }
+
+    //When user beeps other user, then don't show any timestamp to other users in chat.
+    if (('' === $outmain) && $special) {
+        return false;
+    } else {
+        return $result;
+    }
+}
+
+
+/**
+ * @global object $DB
+ * @global object $CFG
+ * @global object $COURSE
+ * @global object $OUTPUT
+ * @param object $users
+ * @param object $course
+ * @return array return formatted user list
+ */
+function chat_format_userlist($users, $course) {
+    global $CFG, $DB, $COURSE, $OUTPUT;
+    $result = array();
+    foreach($users as $user){
+        $item = array();
+        $item['name'] = fullname($user);
+        $item['url'] = $CFG->wwwroot.'/user/view.php?id='.$user->id.'&amp;course='.$course->id;
+        $item['picture'] = $OUTPUT->user_picture($user);
+        $item['id'] = $user->id;
+        $result[] = $item;
+    }
+    return $result;
+}
+
+/**
+ * Print json format error
+ * @param string $level
+ * @param string $msg
+ */
+function chat_print_error($level, $msg) {
+    header('Content-Length: ' . ob_get_length() );
+    $error = new stdClass();
+    $error->level = $level;
+    $error->msg   = $msg;
+    $response['error'] = $error;
+    echo json_encode($response);
+    ob_end_flush();
+    exit;
+}
+
+/**
+ * @return array
+ */
 function chat_get_view_actions() {
     return array('view','view all','report');
 }
 
+/**
+ * @return array
+ */
 function chat_get_post_actions() {
     return array('talk');
 }
 
+/**
+ * @global object
+ * @global object
+ * @param array $courses
+ * @param array $htmlarray Passed by reference
+ */
 function chat_print_overview($courses, &$htmlarray) {
     global $USER, $CFG;
 
@@ -770,7 +1160,8 @@ function chat_print_overview($courses, &$htmlarray) {
 /**
  * Implementation of the function for printing the form elements that control
  * whether the course reset functionality affects the chat.
- * @param $mform form passed by reference
+ *
+ * @param object $mform form passed by reference
  */
 function chat_reset_course_form_definition(&$mform) {
     $mform->addElement('header', 'chatheader', get_string('modulenameplural', 'chat'));
@@ -779,30 +1170,38 @@ function chat_reset_course_form_definition(&$mform) {
 
 /**
  * Course reset form defaults.
+ *
+ * @param object $course
+ * @return array
  */
 function chat_reset_course_form_defaults($course) {
     return array('reset_chat'=>1);
 }
 
 /**
- * Actual implementation of the rest coures functionality, delete all the
+ * Actual implementation of the reset course functionality, delete all the
  * chat messages for course $data->courseid.
- * @param $data the data submitted from the reset course.
+ *
+ * @global object
+ * @global object
+ * @param object $data the data submitted from the reset course.
  * @return array status array
  */
 function chat_reset_userdata($data) {
-    global $CFG;
+    global $CFG, $DB;
 
     $componentstr = get_string('modulenameplural', 'chat');
     $status = array();
 
     if (!empty($data->reset_chat)) {
         $chatessql = "SELECT ch.id
-                        FROM {$CFG->prefix}chat ch
-                       WHERE ch.course={$data->courseid}";
+                        FROM {chat} ch
+                       WHERE ch.course=?";
+        $params = array($data->courseid);
 
-        delete_records_select('chat_messages', "chatid IN ($chatessql)");
-        delete_records_select('chat_users', "chatid IN ($chatessql)");
+        $DB->delete_records_select('chat_messages', "chatid IN ($chatessql)", $params);
+        $DB->delete_records_select('chat_messages_current', "chatid IN ($chatessql)", $params);
+        $DB->delete_records_select('chat_users', "chatid IN ($chatessql)", $params);
         $status[] = array('component'=>$componentstr, 'item'=>get_string('removemessages', 'chat'), 'error'=>false);
     }
 
@@ -817,9 +1216,122 @@ function chat_reset_userdata($data) {
 
 /**
  * Returns all other caps used in module
+ *
+ * @return array
  */
 function chat_get_extra_capabilities() {
     return array('moodle/site:accessallgroups', 'moodle/site:viewfullnames');
 }
 
-?>
+
+/**
+ * @param string $feature FEATURE_xx constant for requested feature
+ * @return mixed True if module supports feature, null if doesn't know
+ */
+function chat_supports($feature) {
+    switch($feature) {
+        case FEATURE_GROUPS:                  return true;
+        case FEATURE_GROUPINGS:               return true;
+        case FEATURE_GROUPMEMBERSONLY:        return true;
+        case FEATURE_MOD_INTRO:               return true;
+        case FEATURE_BACKUP_MOODLE2:          return true;
+        case FEATURE_COMPLETION_TRACKS_VIEWS: return true;
+        case FEATURE_GRADE_HAS_GRADE:         return false;
+        case FEATURE_GRADE_OUTCOMES:          return true;
+
+        default: return null;
+    }
+}
+
+function chat_extend_navigation($navigation, $course, $module, $cm) {
+    global $CFG, $USER, $PAGE, $OUTPUT;
+
+    $currentgroup = groups_get_activity_group($cm, true);
+
+    if (has_capability('mod/chat:chat', get_context_instance(CONTEXT_MODULE, $cm->id))) {
+        $strenterchat    = get_string('enterchat', 'chat');
+
+        $target = $CFG->wwwroot.'/mod/chat/';
+        $params = array('id'=>$cm->instance);
+
+        if ($currentgroup) {
+            $params['groupid'] = $currentgroup;
+        }
+
+        $links = array();
+
+        // If user is using screenreader, display gui_basic gui link only
+        if (empty($USER->screenreader)) {
+            $url = new moodle_url($target.'gui_'.$CFG->chat_method.'/index.php', $params);
+            $action = new popup_action('click', $url, 'chat'.$course->id.$cm->instance.$currentgroup, array('height' => 500, 'width' => 700));
+            $links[] = new action_link($url, $strenterchat, $action);
+        }
+
+        $url = new moodle_url($target.'gui_basic/index.php', $params);
+        $action = new popup_action('click', $url, 'chat'.$course->id.$cm->instance.$currentgroup, array('height' => 500, 'width' => 700));
+        $links[] = new action_link($url, get_string('noframesjs', 'message'), $action);
+
+        foreach ($links as $link) {
+            $navigation->add($link->text, $link, navigation_node::TYPE_SETTING, null ,null, new pix_icon('c/group' , ''));
+        }
+    }
+
+    $chatusers = chat_get_users($cm->instance, $currentgroup, $cm->groupingid);
+    if (is_array($chatusers) && count($chatusers)>0) {
+        $users = $navigation->add(get_string('currentusers', 'chat'));
+        foreach ($chatusers as $chatuser) {
+            $userlink = new moodle_url('/user/view.php', array('id'=>$chatuser->id,'course'=>$course->id));
+            $users->add(fullname($chatuser).' '.format_time(time() - $chatuser->lastmessageping), $userlink, navigation_node::TYPE_USER, null, null, new pix_icon('c/user', ''));
+        }
+    }
+}
+
+/**
+ * Adds module specific settings to the settings block
+ *
+ * @param settings_navigation $settings The settings navigation object
+ * @param navigation_node $chatnode The node to add module settings to
+ */
+function chat_extend_settings_navigation(settings_navigation $settings, navigation_node $chatnode) {
+    global $DB, $PAGE, $USER;
+    $chat = $DB->get_record("chat", array("id" => $PAGE->cm->instance));
+
+    if ($chat->chattime && $chat->schedule) {
+        $nextsessionnode = $chatnode->add(get_string('nextsession', 'chat').': '.userdate($chat->chattime).' ('.usertimezone($USER->timezone));
+        $nextsessionnode->add_class('note');
+    }
+
+    $currentgroup = groups_get_activity_group($PAGE->cm, true);
+    if ($currentgroup) {
+        $groupselect = " AND groupid = '$currentgroup'";
+    } else {
+        $groupselect = '';
+    }
+
+    if ($chat->studentlogs || has_capability('mod/chat:readlog',$PAGE->cm->context)) {
+        if ($DB->get_records_select('chat_messages', "chatid = ? $groupselect", array($chat->id))) {
+            $chatnode->add(get_string('viewreport', 'chat'), new moodle_url('/mod/chat/report.php', array('id'=>$PAGE->cm->id)));
+        }
+    }
+}
+
+/**
+ * user logout event handler
+ *
+ * @param object $user full $USER object
+ */
+function chat_user_logout($user) {
+    global $DB;
+    $DB->delete_records('chat_users', array('userid'=>$user->id));
+}
+
+/**
+ * Return a list of page types
+ * @param string $pagetype current page type
+ * @param stdClass $parentcontext Block's parent context
+ * @param stdClass $currentcontext Current context of block
+ */
+function chat_page_type_list($pagetype, $parentcontext, $currentcontext) {
+    $module_pagetype = array('mod-chat-*'=>get_string('page-mod-chat-x', 'chat'));
+    return $module_pagetype;
+}
