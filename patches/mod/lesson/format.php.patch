diff --git a/mod/lesson/format.php b/mod/lesson/format.php
index cc9abe4..11fbd4a 100644
--- a/mod/lesson/format.php
+++ b/mod/lesson/format.php
@@ -1,55 +1,355 @@
-<?php  // $Id$ 
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
  * format.php  - Default format class for file imports/exports. Doesn't do 
  * everything on it's own -- it needs to be extended.
  *
- * @version $Id$
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package lesson
+ * Included by import.ph
+ *
+ * @package    mod
+ * @subpackage lesson
+ * @copyright  1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  **/
 
-// Included by import.php
+defined('MOODLE_INTERNAL') || die();
+
+/**#@+
+ * The core question types.
+ *
+ * These used to be in lib/questionlib.php, but are being deprecated. Copying them
+ * here to keep this code working for now.
+ */
+if (!defined('SHORTANSWER')) {
+    define("SHORTANSWER",   "shortanswer");
+    define("TRUEFALSE",     "truefalse");
+    define("MULTICHOICE",   "multichoice");
+    define("RANDOM",        "random");
+    define("MATCH",         "match");
+    define("RANDOMSAMATCH", "randomsamatch");
+    define("DESCRIPTION",   "description");
+    define("NUMERICAL",     "numerical");
+    define("MULTIANSWER",   "multianswer");
+    define("CALCULATED",    "calculated");
+    define("ESSAY",         "essay");
+}
+/**#@-*/
+
+/**
+ * Given some question info and some data about the the answers
+ * this function parses, organises and saves the question
+ *
+ * This is only used when IMPORTING questions and is only called
+ * from format.php
+ * Lifted from mod/quiz/lib.php -
+ *    1. all reference to oldanswers removed
+ *    2. all reference to quiz_multichoice table removed
+ *    3. In SHORTANSWER questions usecase is store in the qoption field
+ *    4. In NUMERIC questions store the range as two answers
+ *    5. TRUEFALSE options are ignored
+ *    6. For MULTICHOICE questions with more than one answer the qoption field is true
+ *
+ * @param opject $question Contains question data like question, type and answers.
+ * @return object Returns $result->error or $result->notice.
+ **/
+function lesson_save_question_options($question, $lesson) {
+    global $DB;
+
+    // These lines are required to ensure that all page types have
+    // been loaded for the following switch
+    if (!($lesson instanceof lesson)) {
+        $lesson = new lesson($lesson);
+    }
+    $manager = lesson_page_type_manager::get($lesson);
+
+    $timenow = time();
+    $result = new stdClass();
+    switch ($question->qtype) {
+        case LESSON_PAGE_SHORTANSWER:
+
+            $answers = array();
+            $maxfraction = -1;
+
+            // Insert all the new answers
+            foreach ($question->answer as $key => $dataanswer) {
+                if ($dataanswer != "") {
+                    $answer = new stdClass;
+                    $answer->lessonid   = $question->lessonid;
+                    $answer->pageid   = $question->id;
+                    if ($question->fraction[$key] >=0.5) {
+                        $answer->jumpto = LESSON_NEXTPAGE;
+                    }
+                    $answer->timecreated   = $timenow;
+                    $answer->grade = $question->fraction[$key] * 100;
+                    $answer->answer   = $dataanswer;
+                    $answer->response = $question->feedback[$key]['text'];
+                    $answer->responseformat = $question->feedback[$key]['format'];
+                    $answer->id = $DB->insert_record("lesson_answers", $answer);
+                    $answers[] = $answer->id;
+                    if ($question->fraction[$key] > $maxfraction) {
+                        $maxfraction = $question->fraction[$key];
+                    }
+                }
+            }
+
+
+            /// Perform sanity checks on fractional grades
+            if ($maxfraction != 1) {
+                $maxfraction = $maxfraction * 100;
+                $result->notice = get_string("fractionsnomax", "quiz", $maxfraction);
+                return $result;
+            }
+            break;
+
+        case LESSON_PAGE_NUMERICAL:   // Note similarities to SHORTANSWER
+
+            $answers = array();
+            $maxfraction = -1;
+
+
+            // for each answer store the pair of min and max values even if they are the same
+            foreach ($question->answer as $key => $dataanswer) {
+                if ($dataanswer != "") {
+                    $answer = new stdClass;
+                    $answer->lessonid   = $question->lessonid;
+                    $answer->pageid   = $question->id;
+                    $answer->jumpto = LESSON_NEXTPAGE;
+                    $answer->timecreated   = $timenow;
+                    $answer->grade = $question->fraction[$key] * 100;
+                    $min = $question->answer[$key] - $question->tolerance[$key];
+                    $max = $question->answer[$key] + $question->tolerance[$key];
+                    $answer->answer   = $min.":".$max;
+                    // $answer->answer   = $question->min[$key].":".$question->max[$key]; original line for min/max
+                    $answer->response = $question->feedback[$key]['text'];
+                    $answer->responseformat = $question->feedback[$key]['format'];
+                    $answer->id = $DB->insert_record("lesson_answers", $answer);
+
+                    $answers[] = $answer->id;
+                    if ($question->fraction[$key] > $maxfraction) {
+                        $maxfraction = $question->fraction[$key];
+                    }
+                }
+            }
+
+            /// Perform sanity checks on fractional grades
+            if ($maxfraction != 1) {
+                $maxfraction = $maxfraction * 100;
+                $result->notice = get_string("fractionsnomax", "quiz", $maxfraction);
+                return $result;
+            }
+        break;
+
+
+        case LESSON_PAGE_TRUEFALSE:
+
+            // the truth
+            $answer->lessonid   = $question->lessonid;
+            $answer->pageid = $question->id;
+            $answer->timecreated   = $timenow;
+            $answer->answer = get_string("true", "quiz");
+            $answer->grade = $question->correctanswer * 100;
+            if ($answer->grade > 50 ) {
+                $answer->jumpto = LESSON_NEXTPAGE;
+            }
+            if (isset($question->feedbacktrue)) {
+                $answer->response = $question->feedbacktrue['text'];
+                $answer->responseformat = $question->feedbacktrue['format'];
+            }
+            $DB->insert_record("lesson_answers", $answer);
+
+            // the lie
+            $answer = new stdClass;
+            $answer->lessonid   = $question->lessonid;
+            $answer->pageid = $question->id;
+            $answer->timecreated   = $timenow;
+            $answer->answer = get_string("false", "quiz");
+            $answer->grade = (1 - (int)$question->correctanswer) * 100;
+            if ($answer->grade > 50 ) {
+                $answer->jumpto = LESSON_NEXTPAGE;
+            }
+            if (isset($question->feedbackfalse)) {
+                $answer->response = $question->feedbackfalse['text'];
+                $answer->responseformat = $question->feedbackfalse['format'];
+            }
+            $DB->insert_record("lesson_answers", $answer);
+
+          break;
+
+        case LESSON_PAGE_MULTICHOICE:
+
+            $totalfraction = 0;
+            $maxfraction = -1;
+
+            $answers = array();
+
+            // Insert all the new answers
+            foreach ($question->answer as $key => $dataanswer) {
+                if ($dataanswer != "") {
+                    $answer = new stdClass;
+                    $answer->lessonid   = $question->lessonid;
+                    $answer->pageid   = $question->id;
+                    $answer->timecreated   = $timenow;
+                    $answer->grade = $question->fraction[$key] * 100;
+                    // changed some defaults
+                    /* Original Code
+                    if ($answer->grade > 50 ) {
+                        $answer->jumpto = LESSON_NEXTPAGE;
+                    }
+                    Replaced with:                    */
+                    if ($answer->grade > 50 ) {
+                        $answer->jumpto = LESSON_NEXTPAGE;
+                        $answer->score = 1;
+                    }
+                    // end Replace
+                    $answer->answer   = $dataanswer['text'];
+                    $answer->answerformat   = $dataanswer['format'];
+                    $answer->response = $question->feedback[$key]['text'];
+                    $answer->responseformat = $question->feedback[$key]['format'];
+                    $answer->id = $DB->insert_record("lesson_answers", $answer);
+                    // for Sanity checks
+                    if ($question->fraction[$key] > 0) {
+                        $totalfraction += $question->fraction[$key];
+                    }
+                    if ($question->fraction[$key] > $maxfraction) {
+                        $maxfraction = $question->fraction[$key];
+                    }
+                }
+            }
+
+            /// Perform sanity checks on fractional grades
+            if ($question->single) {
+                if ($maxfraction != 1) {
+                    $maxfraction = $maxfraction * 100;
+                    $result->notice = get_string("fractionsnomax", "quiz", $maxfraction);
+                    return $result;
+                }
+            } else {
+                $totalfraction = round($totalfraction,2);
+                if ($totalfraction != 1) {
+                    $totalfraction = $totalfraction * 100;
+                    $result->notice = get_string("fractionsaddwrong", "quiz", $totalfraction);
+                    return $result;
+                }
+            }
+        break;
+
+        case LESSON_PAGE_MATCHING:
+
+            $subquestions = array();
+
+            $defaultanswer = new stdClass;
+            $defaultanswer->lessonid   = $question->lessonid;
+            $defaultanswer->pageid   = $question->id;
+            $defaultanswer->timecreated   = $timenow;
+            $defaultanswer->grade = 0;
+
+            // The first answer should always be the correct answer
+            $correctanswer = clone($defaultanswer);
+            $correctanswer->answer = get_string('thatsthecorrectanswer', 'lesson');
+            $DB->insert_record("lesson_answers", $correctanswer);
+
+            // The second answer should always be the wrong answer
+            $wronganswer = clone($defaultanswer);
+            $wronganswer->answer = get_string('thatsthewronganswer', 'lesson');
+            $DB->insert_record("lesson_answers", $wronganswer);
+
+            $i = 0;
+            // Insert all the new question+answer pairs
+            foreach ($question->subquestions as $key => $questiontext) {
+                $answertext = $question->subanswers[$key];
+                if (!empty($questiontext) and !empty($answertext)) {
+                    $answer = clone($defaultanswer);
+                    $answer->answer = $questiontext['text'];
+                    $answer->answerformat   = $questiontext['format'];
+                    $answer->response   = $answertext;
+                    if ($i == 0) {
+                        // first answer contains the correct answer jump
+                        $answer->jumpto = LESSON_NEXTPAGE;
+                    }
+                    $subquestions[] = $DB->insert_record("lesson_answers", $answer);
+                    $i++;
+                }
+            }
+
+            if (count($subquestions) < 3) {
+                $result->notice = get_string("notenoughsubquestions", "quiz");
+                return $result;
+            }
+            break;
+        default:
+            $result->error = "Unsupported question type ($question->qtype)!";
+            return $result;
+    }
+    return true;
+}
+
 
 class qformat_default {
 
     var $displayerrors = true;
     var $category = NULL;
     var $questionids = array();
-    var $qtypeconvert = array(NUMERICAL   => LESSON_NUMERICAL,
-                              MULTICHOICE => LESSON_MULTICHOICE,
-                              TRUEFALSE   => LESSON_TRUEFALSE,
-                              SHORTANSWER => LESSON_SHORTANSWER,
-                              MATCH       => LESSON_MATCHING
+    var $qtypeconvert = array(NUMERICAL   => LESSON_PAGE_NUMERICAL,
+                              MULTICHOICE => LESSON_PAGE_MULTICHOICE,
+                              TRUEFALSE   => LESSON_PAGE_TRUEFALSE,
+                              SHORTANSWER => LESSON_PAGE_SHORTANSWER,
+                              MATCH       => LESSON_PAGE_MATCHING
                               );
 
-/// Importing functions
+    // Importing functions
+    function provide_import() {
+        return false;
+    }
 
     function importpreprocess() {
-    /// Does any pre-processing that may be desired
-
+        // Does any pre-processing that may be desired
         return true;
     }
 
     function importprocess($filename, $lesson, $pageid) {
+        global $DB, $OUTPUT;
+
     /// Processes a given file.  There's probably little need to change this
         $timenow = time();
 
         if (! $lines = $this->readdata($filename)) {
-            notify("File could not be read, or was empty");
+            echo $OUTPUT->notification("File could not be read, or was empty");
             return false;
         }
 
         if (! $questions = $this->readquestions($lines)) {   // Extract all the questions
-            notify("There are no questions in this file!");
+            echo $OUTPUT->notification("There are no questions in this file!");
             return false;
         }
         
-        notify(get_string('importcount', 'lesson', sizeof($questions)));
+        //Avoid category as question type
+        echo $OUTPUT->notification(get_string('importcount', 'lesson',
+                $this->count_questions($questions)), 'notifysuccess');
 
         $count = 0;
 
+        $unsupportedquestions = 0;
+
         foreach ($questions as $question) {   // Process and store each question
             switch ($question->qtype) {
+                //TODO: Bad way to bypass category in data... Quickfix for MDL-27964
+                case 'category':
+                    break;
                 // the good ones
                 case SHORTANSWER :
                 case NUMERICAL :
@@ -58,7 +358,9 @@ class qformat_default {
                 case MATCH :
                     $count++;
 
-                    echo "<hr><p><b>$count</b>. ".stripslashes($question->questiontext)."</p>";
+                    //Show nice formated question in one line.
+                    echo "<hr><p><b>$count</b>. ".$this->format_question_text($question)."</p>";
+
                     $newpage = new stdClass;
                     $newpage->lessonid = $lesson->id;
                     $newpage->qtype = $this->qtypeconvert[$question->qtype];
@@ -85,43 +387,32 @@ class qformat_default {
                     // set up page links
                     if ($pageid) {
                         // the new page follows on from this page
-                        if (!$page = get_record("lesson_pages", "id", $pageid)) {
-                            error ("Format: Page $pageid not found");
+                        if (!$page = $DB->get_record("lesson_pages", array("id" => $pageid))) {
+                            print_error('invalidpageid', 'lesson');
                         }
                         $newpage->prevpageid = $pageid;
                         $newpage->nextpageid = $page->nextpageid;
                         // insert the page and reset $pageid
-                        if (!$newpageid = insert_record("lesson_pages", $newpage)) {
-                            error("Format: Could not insert new page!");
-                        }
+                        $newpageid = $DB->insert_record("lesson_pages", $newpage);
                         // update the linked list
-                        if (!set_field("lesson_pages", "nextpageid", $newpageid, "id", $pageid)) {
-                            error("Format: unable to update link");
-                        }
+                        $DB->set_field("lesson_pages", "nextpageid", $newpageid, array("id" => $pageid));
 
                     } else {
                         // new page is the first page
                         // get the existing (first) page (if any)
-                        if (!$page = get_record_select("lesson_pages", "lessonid = $lesson->id AND prevpageid = 0")) {
+                        $params = array ("lessonid" => $lesson->id, "prevpageid" => 0);
+                        if (!$page = $DB->get_record_select("lesson_pages", "lessonid = :lessonid AND prevpageid = :prevpageid", $params)) {
                             // there are no existing pages
                             $newpage->prevpageid = 0; // this is a first page
                             $newpage->nextpageid = 0; // this is the only page
-                            $newpageid = insert_record("lesson_pages", $newpage);
-                            if (!$newpageid) {
-                                error("Insert page: new first page not inserted");
-                            }
+                            $newpageid = $DB->insert_record("lesson_pages", $newpage);
                         } else {
                             // there are existing pages put this at the start
                             $newpage->prevpageid = 0; // this is a first page
                             $newpage->nextpageid = $page->id;
-                            $newpageid = insert_record("lesson_pages", $newpage);
-                            if (!$newpageid) {
-                                error("Insert page: first page not inserted");
-                            }
+                            $newpageid = $DB->insert_record("lesson_pages", $newpage);
                             // update the linked list
-                            if (!set_field("lesson_pages", "prevpageid", $newpageid, "id", $page->id)) {
-                                error("Insert page: unable to update link");
-                            }
+                            $DB->set_field("lesson_pages", "prevpageid", $newpageid, array("id" => $page->id));
                         }
                     }
                     // reset $pageid and put the page ID in $question, used in save_question_option()
@@ -134,27 +425,52 @@ class qformat_default {
 
                     $question->lessonid = $lesson->id; // needed for foreign key
                     $question->qtype = $this->qtypeconvert[$question->qtype];
-                    $result = lesson_save_question_options($question);
+                    $result = lesson_save_question_options($question, $lesson);
 
                     if (!empty($result->error)) {
-                        notify($result->error);
+                        echo $OUTPUT->notification($result->error);
                         return false;
                     }
 
                     if (!empty($result->notice)) {
-                        notify($result->notice);
+                        echo $OUTPUT->notification($result->notice);
                         return true;
                     }
                     break;
             // the Bad ones
                 default :
-                    notify(get_string('unsupportedqtype', 'lesson', $question->qtype));
+                    $unsupportedquestions++;
+                    break;
             }
  
         }
+        if ($unsupportedquestions) {
+            echo $OUTPUT->notification(get_string('unknownqtypesnotimported', 'lesson', $unsupportedquestions));
+        }
         return true;
     }
 
+    /**
+     * Count all non-category questions in the questions array.
+     *
+     * @param array questions An array of question objects.
+     * @return int The count.
+     *
+     */
+    protected function count_questions($questions) {
+        $count = 0;
+        if (!is_array($questions)) {
+            return $count;
+        }
+        foreach ($questions as $question) {
+            if (!is_object($question) || !isset($question->qtype) ||
+                    ($question->qtype == 'category')) {
+                continue;
+            }
+            $count++;
+        }
+        return $count;
+    }
 
     function readdata($filename) {
     /// Returns complete file with an array, one item per line
@@ -163,7 +479,7 @@ class qformat_default {
             $filearray = file($filename);
 
             /// Check for Macintosh OS line returns (ie file on one line), and fix
-            if (ereg("\r", $filearray[0]) AND !ereg("\n", $filearray[0])) {
+            if (preg_match("/\r/", $filearray[0]) AND !preg_match("/\n/", $filearray[0])) {
                 return explode("\r", $filearray[0]);
             } else {
                 return $filearray;
@@ -172,7 +488,7 @@ class qformat_default {
         return false;
     }
 
-    function readquestions($lines) {
+    protected function readquestions($lines) {
     /// Parses an array of lines into an array of questions, 
     /// where each item is a question object as defined by 
     /// readquestion().   Questions are defined as anything 
@@ -223,8 +539,8 @@ class qformat_default {
         global $CFG;
 
         $question = new stdClass();
-        $question->shuffleanswers = $CFG->quiz_shuffleanswers;
-        $question->defaultgrade = 1;
+        $question->shuffleanswers = get_config('quiz', 'shuffleanswers');
+        $question->defaultmark = 1;
         $question->image = "";
         $question->usecase = 0;
         $question->multiplier = array();
@@ -238,6 +554,11 @@ class qformat_default {
         $question->qoption = 0;
         $question->layout = 1;
         
+        // this option in case the questiontypes class wants
+        // to know where the data came from
+        $question->export_process = true;
+        $question->import_process = true;
+
         return $question;
     }
 
@@ -245,10 +566,19 @@ class qformat_default {
     /// Does any post-processing that may be desired
     /// Argument is a simple array of question ids that 
     /// have just been added.
-
         return true;
     }
 
+    /**
+     * Convert the question text to plain text, so it can safely be displayed
+     * during import to let the user see roughly what is going on.
+     */
+    protected function format_question_text($question) {
+        $formatoptions = new stdClass();
+        $formatoptions->noclean = true;
+        return html_to_text(format_text($question->questiontext,
+                $question->questiontextformat, $formatoptions), 0, false);
+    }
 }
 
-?>
+
