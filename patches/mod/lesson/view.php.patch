diff --git a/mod/lesson/view.php b/mod/lesson/view.php
index 7b7e748..adf4ead 100644
--- a/mod/lesson/view.php
+++ b/mod/lesson/view.php
@@ -1,102 +1,112 @@
-<?php  // $Id$
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
  * This page prints a particular instance of lesson
  *
- * @version $Id$
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package lesson
+ * @package    mod
+ * @subpackage lesson
+ * @copyright  1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or late
  **/
 
-    require_once('../../config.php');
-    require_once($CFG->dirroot.'/mod/lesson/locallib.php');
-    require_once($CFG->dirroot.'/mod/lesson/lib.php');
-    require_once($CFG->dirroot.'/mod/lesson/pagelib.php');
-    require_once($CFG->libdir.'/blocklib.php');
+require_once(dirname(__FILE__) . '/../../config.php');
+require_once($CFG->dirroot.'/mod/lesson/locallib.php');
+require_once($CFG->dirroot.'/mod/lesson/view_form.php');
+require_once($CFG->libdir . '/completionlib.php');
+
+$id      = required_param('id', PARAM_INT);             // Course Module ID
+$pageid  = optional_param('pageid', NULL, PARAM_INT);   // Lesson Page ID
+$edit    = optional_param('edit', -1, PARAM_BOOL);
+$userpassword = optional_param('userpassword','',PARAM_RAW);
+$backtocourse = optional_param('backtocourse', false, PARAM_RAW);
+
+$cm = get_coursemodule_from_id('lesson', $id, 0, false, MUST_EXIST);;
+$course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$lesson = new lesson($DB->get_record('lesson', array('id' => $cm->instance), '*', MUST_EXIST));
+
+require_login($course, false, $cm);
 
-    $id      = required_param('id', PARAM_INT);             // Course Module ID
-    $pageid  = optional_param('pageid', NULL, PARAM_INT);   // Lesson Page ID
-    $edit    = optional_param('edit', -1, PARAM_BOOL);
-    $userpassword = optional_param('userpassword','',PARAM_CLEAN);
+if ($backtocourse) {
+    redirect(new moodle_url('/course/view.php', array('id'=>$course->id)));
+}
     
-    list($cm, $course, $lesson) = lesson_get_basics($id);
+// Mark as viewed
+$completion = new completion_info($course);
+$completion->set_module_viewed($cm);
 
-    require_login($course->id, false, $cm);
+$url = new moodle_url('/mod/lesson/view.php', array('id'=>$id));
+if ($pageid !== null) {
+    $url->param('pageid', $pageid);
+}
+$PAGE->set_url($url);
     
-    $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+$context = get_context_instance(CONTEXT_MODULE, $cm->id);
+$canmanage = has_capability('mod/lesson:manage', $context);
+
+$lessonoutput = $PAGE->get_renderer('mod_lesson');
+
+$reviewmode = false;
+$userhasgrade = $DB->count_records("lesson_grades", array("lessonid"=>$lesson->id, "userid"=>$USER->id));
+if ($userhasgrade && !$lesson->retake) {
+    $reviewmode = true;
+}
 
 /// Check these for students only TODO: Find a better method for doing this!
 ///     Check lesson availability
 ///     Check for password
 ///     Check dependencies
 ///     Check for high scores
-    if (!has_capability('mod/lesson:manage', $context)) {
-
-        if (($lesson->available != 0 and time() < $lesson->available) or
-            ($lesson->deadline != 0 and time() > $lesson->deadline)) {  // Deadline restrictions
-            if ($lesson->deadline != 0 and time() > $lesson->deadline) {
-                $message = get_string('lessonclosed', 'lesson', userdate($lesson->deadline));
+if (!$canmanage) {
+    if (!$lesson->is_accessible()) {  // Deadline restrictions
+        echo $lessonoutput->header($lesson, $cm);
+        if ($lesson->deadline != 0 && time() > $lesson->deadline) {
+            echo $lessonoutput->lesson_inaccessible(get_string('lessonclosed', 'lesson', userdate($lesson->deadline)));
             } else {
-                $message = get_string('lessonopen', 'lesson', userdate($lesson->available));
+            echo $lessonoutput->lesson_inaccessible(get_string('lessonopen', 'lesson', userdate($lesson->available)));
             }
-            
-            lesson_print_header($cm, $course, $lesson);
-            print_simple_box_start('center');
-            echo '<div style="text-align:center;">';
-            echo '<p>'.$message.'</p>';
-            echo '<div class="lessonbutton standardbutton" style="padding: 5px;"><a href="'.$CFG->wwwroot.'/course/view.php?id='. $course->id .'">'. get_string('returnto', 'lesson', format_string($course->fullname, true)) .'</a></div>';
-            echo '</div>';
-            print_simple_box_end();
-            print_footer($course);
+        echo $lessonoutput->footer();
             exit();
-        
-        } else if ($lesson->usepassword and empty($USER->lessonloggedin[$lesson->id])) { // Password protected lesson code
+    } else if ($lesson->usepassword && empty($USER->lessonloggedin[$lesson->id])) { // Password protected lesson code
             $correctpass = false;
-            if (!empty($userpassword)) {
+        if (!empty($userpassword) && (($lesson->password == md5(trim($userpassword))) || ($lesson->password == trim($userpassword)))) {
                 // with or without md5 for backward compatibility (MDL-11090)
-                if (($lesson->password == md5(trim($userpassword))) or ($lesson->password == trim($userpassword))) {
                     $USER->lessonloggedin[$lesson->id] = true;
-                    $correctpass = true;
                     if ($lesson->highscores) {
                         // Logged in - redirect so we go through all of these checks before starting the lesson.
                         redirect("$CFG->wwwroot/mod/lesson/view.php?id=$cm->id");
                     }
-                }
-            }
-
-            if (!$correctpass) {
-                lesson_print_header($cm, $course, $lesson);
-                echo "<div class=\"password-form\">\n";
-                print_simple_box_start('center');
-                echo '<form id="password" method="post" action="'.$CFG->wwwroot.'/mod/lesson/view.php" autocomplete="off">' . "\n";
-                echo '<fieldset class="invisiblefieldset">';
-                echo '<input type="hidden" name="id" value="'. $cm->id .'" />' . "\n";
-                if (optional_param('userpassword', 0, PARAM_CLEAN)) {
-                    notify(get_string('loginfail', 'lesson'));
-                }
-
-                echo get_string('passwordprotectedlesson', 'lesson', format_string($lesson->name))."<br /><br />\n".
-                     get_string('enterpassword', 'lesson')." <input type=\"password\" name=\"userpassword\" /><br /><br />\n<center>".
-                     '<span class="lessonbutton standardbutton"><a href="'.$CFG->wwwroot.'/course/view.php?id='. $course->id .'">'. get_string('cancel', 'lesson') .'</a></span> ';
-
-                lesson_print_submit_link(get_string('continue', 'lesson'), 'password', 'center', 'standardbutton submitbutton');
-                echo '</fieldset></form>';
-                print_simple_box_end();
-                echo "</div>\n";
-                print_footer($course);
+        } else {
+            echo $lessonoutput->header($lesson, $cm);
+            echo $lessonoutput->login_prompt($lesson, $userpassword !== '');
+            echo $lessonoutput->footer();
                 exit();
             }
-        
         } else if ($lesson->dependency) { // check for dependencies
-            if ($dependentlesson = get_record('lesson', 'id', $lesson->dependency)) {
+        if ($dependentlesson = $DB->get_record('lesson', array('id' => $lesson->dependency))) {
                 // lesson exists, so we can proceed            
                 $conditions = unserialize($lesson->conditions);
                 // assume false for all
-                $timespent = false;
-                $completed = false;
-                $gradebetterthan = false;
+            $errors = array();
+
                 // check for the timespent condition
                 if ($conditions->timespent) {
-                    if ($attempttimes = get_records_select('lesson_timer', "userid = $USER->id AND lessonid = $dependentlesson->id")) {
+                $timespent = false;
+                if ($attempttimes = $DB->get_records('lesson_timer', array("userid"=>$USER->id, "lessonid"=>$dependentlesson->id))) {
                         // go through all the times and test to see if any of them satisfy the condition
                         foreach($attempttimes as $attempttime) {
                             $duration = $attempttime->lessontime - $attempttime->starttime;
@@ -105,13 +115,15 @@
                             }
                         }
                     } 
-                } else {
-                    $timespent = true; // there isn't one set
+                if (!$timespent) {
+                    $errors[] = get_string('timespenterror', 'lesson', $conditions->timespent);
+                }
                 }
 
                 // check for the gradebetterthan condition
                 if($conditions->gradebetterthan) {
-                    if ($studentgrades = get_records_select('lesson_grades', "userid = $USER->id AND lessonid = $dependentlesson->id")) {
+                $gradebetterthan = false;
+                if ($studentgrades = $DB->get_records('lesson_grades', array("userid"=>$USER->id, "lessonid"=>$dependentlesson->id))) {
                         // go through all the grades and test to see if any of them satisfy the condition
                         foreach($studentgrades as $studentgrade) {
                             if ($studentgrade->grade >= $conditions->gradebetterthan) {
@@ -119,71 +131,50 @@
                             }
                         }
                     }
-                } else {
-                    $gradebetterthan = true; // there isn't one set
+                if (!$gradebetterthan) {
+                    $errors[] = get_string('gradebetterthanerror', 'lesson', $conditions->gradebetterthan);
+                }
                 }
 
                 // check for the completed condition
                 if ($conditions->completed) {
-                    if (count_records('lesson_grades', 'userid', $USER->id, 'lessonid', $dependentlesson->id)) {
-                        $completed = true;
-                    }
-                } else {
-                    $completed = true; // not set
-                }
-
-                $errors = array();
-                // collect all of our error statements
-                if (!$timespent) {
-                    $errors[] = get_string('timespenterror', 'lesson', $conditions->timespent);
-                }
-                if (!$completed) {
+                if (!$DB->count_records('lesson_grades', array('userid'=>$USER->id, 'lessonid'=>$dependentlesson->id))) {
                     $errors[] = get_string('completederror', 'lesson');
                 }
-                if (!$gradebetterthan) {
-                    $errors[] = get_string('gradebetterthanerror', 'lesson', $conditions->gradebetterthan);
                 }
+
                 if (!empty($errors)) {  // print out the errors if any
-                    lesson_print_header($cm, $course, $lesson);
-                    echo '<p>';
-                    print_simple_box_start('center');
-                    print_string('completethefollowingconditions', 'lesson', $dependentlesson->name);
-                    echo '<p style="text-align:center;">'.implode('<br />'.get_string('and', 'lesson').'<br />', $errors).'</p>';
-                    print_simple_box_end();
-                    echo '</p>';
-                    print_footer($course);
+                echo $lessonoutput->header($lesson, $cm);
+                echo $lessonoutput->dependancy_errors($dependentlesson, $errors);
+                echo $lessonoutput->footer();
                     exit();
                 } 
             }
-    
-        } else if ($lesson->highscores and !$lesson->practice and !optional_param('viewed', 0) and empty($pageid)) {
+    } else if ($lesson->highscores && !$lesson->practice && !optional_param('viewed', 0, PARAM_INT) && empty($pageid)) {
             // Display high scores before starting lesson
-            redirect("$CFG->wwwroot/mod/lesson/highscores.php?id=$cm->id");
+        redirect(new moodle_url('/mod/lesson/highscores.php', array("id"=>$cm->id)));
         }
-    }
-    
-    // set up some general variables
-    $path = $CFG->wwwroot .'/course';
+}
 
     // this is called if a student leaves during a lesson
-    if($pageid == LESSON_UNSEENBRANCHPAGE) {
-        $pageid = lesson_unseen_question_jump($lesson->id, $USER->id, $pageid);
-    }
-    
-    // display individual pages and their sets of answers
-    // if pageid is EOL then the end of the lesson has been reached
-           // for flow, changed to simple echo for flow styles, michaelp, moved lesson name and page title down
-   $attemptflag = false;
-    if (empty($pageid)) {
+if ($pageid == LESSON_UNSEENBRANCHPAGE) {
+    $pageid = lesson_unseen_question_jump($lesson, $USER->id, $pageid);
+}
+
+// display individual pages and their sets of answers
+// if pageid is EOL then the end of the lesson has been reached
+// for flow, changed to simple echo for flow styles, michaelp, moved lesson name and page title down
+$attemptflag = false;
+if (empty($pageid)) {
         // make sure there are pages to view
-        if (!get_field('lesson_pages', 'id', 'lessonid', $lesson->id, 'prevpageid', 0)) {
-            if (!has_capability('mod/lesson:manage', $context)) {
-                lesson_set_message(get_string('lessonnotready', 'lesson', $course->teacher)); // a nice message to the student
+    if (!$DB->get_field('lesson_pages', 'id', array('lessonid' => $lesson->id, 'prevpageid' => 0))) {
+        if (!$canmanage) {
+            $lesson->add_message(get_string('lessonnotready2', 'lesson')); // a nice message to the student
             } else {
-                if (!count_records('lesson_pages', 'lessonid', $lesson->id)) {
+            if (!$DB->count_records('lesson_pages', array('lessonid'=>$lesson->id))) {
                     redirect("$CFG->wwwroot/mod/lesson/edit.php?id=$cm->id"); // no pages - redirect to add pages
                 } else {
-                    lesson_set_message(get_string('lessonpagelinkingbroken', 'lesson'));  // ok, bad mojo
+                $lesson->add_message(get_string('lessonpagelinkingbroken', 'lesson'));  // ok, bad mojo
                 }
             }
         }
@@ -191,13 +182,8 @@
         add_to_log($course->id, 'lesson', 'start', 'view.php?id='. $cm->id, $lesson->id, $cm->id);
         
         // if no pageid given see if the lesson has been started
-        if ($grades = get_records_select('lesson_grades', 'lessonid = '. $lesson->id .' AND userid = '. $USER->id,
-                    'grade DESC')) {
-            $retries = count($grades);
-        } else {
-            $retries = 0;
-        }
-        if ($retries) {
+    $retries = $DB->count_records('lesson_grades', array("lessonid" => $lesson->id, "userid" => $USER->id));
+    if ($retries > 0) {
             $attemptflag = true;
         }
         
@@ -206,18 +192,15 @@
         }
         
         // if there are any questions have been answered correctly in this attempt
-        if ($attempts = get_records_select('lesson_attempts', 
-                    "lessonid = $lesson->id AND userid = $USER->id AND retry = $retries AND 
-                    correct = 1", 'timeseen DESC')) {
-            
-            foreach ($attempts as $attempt) {
-                $jumpto = get_field('lesson_answers', 'jumpto', 'id', $attempt->answerid);
+    $corrrectattempts = $lesson->get_attempts($retries, true);
+    if ($corrrectattempts>0) {
+        foreach ($corrrectattempts as $attempt) {
+            $jumpto = $DB->get_field('lesson_answers', 'jumpto', array('id' => $attempt->answerid));
                 // convert the jumpto to a proper page id
                 if ($jumpto == 0) { // unlikely value!
                     $lastpageseen = $attempt->pageid;
                 } elseif ($jumpto == LESSON_NEXTPAGE) {
-                    if (!$lastpageseen = get_field('lesson_pages', 'nextpageid', 'id', 
-                                $attempt->pageid)) {
+                if (!$lastpageseen = $DB->get_field('lesson_pages', 'nextpageid', array('id' => $attempt->pageid))) {
                         // no nextpage go to end of lesson
                         $lastpageseen = LESSON_EOL;
                     }
@@ -226,16 +209,13 @@
                 }
                 break; // only look at the latest correct attempt 
             }
-        } else {
-            $attempts = NULL;
         }
 
-        if ($branchtables = get_records_select('lesson_branch', 
-                            "lessonid = $lesson->id AND userid = $USER->id AND retry = $retries", 'timeseen DESC')) {
+    if ($branchtables = $DB->get_records('lesson_branch', array("lessonid"=>$lesson->id, "userid"=>$USER->id, "retry"=>$retries), 'timeseen DESC')) {
             // in here, user has viewed a branch table
             $lastbranchtable = current($branchtables);
-            if ($attempts != NULL) {
-                foreach($attempts as $attempt) {
+        if (count($corrrectattempts)>0) {
+            foreach($corrrectattempts as $attempt) {
                     if ($lastbranchtable->timeseen > $attempt->timeseen) {
                         // branch table was viewed later than the last attempt
                         $lastpageseen = $lastbranchtable->pageid;
@@ -247,627 +227,214 @@
                 $lastpageseen = $lastbranchtable->pageid;
             }
         }
-        //if ($lastpageseen != $firstpageid) {
-        if (isset($lastpageseen) and count_records('lesson_attempts', 'lessonid', $lesson->id, 'userid', $USER->id, 'retry', $retries) > 0) {
-            // get the first page
-            if (!$firstpageid = get_field('lesson_pages', 'id', 'lessonid', $lesson->id,
-                        'prevpageid', 0)) {
-                error('Navigation: first page not found');
-            }
-            lesson_print_header($cm, $course, $lesson);
+    if (isset($lastpageseen) && $DB->count_records('lesson_attempts', array('lessonid'=>$lesson->id, 'userid'=>$USER->id, 'retry'=>$retries)) > 0) {
+        echo $lessonoutput->header($lesson, $cm);
             if ($lesson->timed) {
                 if ($lesson->retake) {
-                    print_simple_box('<p style="text-align:center;">'. get_string('leftduringtimed', 'lesson') .'</p>', 'center');
-                    echo '<div style="text-align:center;" class="lessonbutton standardbutton">'.
-                              '<a href="view.php?id='.$cm->id.'&amp;pageid='.$firstpageid.'&amp;startlastseen=no">'.
-                                get_string('continue', 'lesson').'</a></div>';
+                $continuelink = new single_button(new moodle_url('/mod/lesson/view.php', array('id'=>$cm->id, 'pageid'=>$lesson->firstpageid, 'startlastseen'=>'no')), get_string('continue', 'lesson'), 'get');
+                echo '<div class="center leftduring">'.$lessonoutput->message(get_string('leftduringtimed', 'lesson'), $continuelink).'</div>';
                 } else {
-                    print_simple_box_start('center');
-                    echo '<div style="text-align:center;">';
-                    echo get_string('leftduringtimednoretake', 'lesson');
-                    echo '<br /><br /><div class="lessonbutton standardbutton"><a href="../../course/view.php?id='. $course->id .'">'. get_string('returntocourse', 'lesson') .'</a></div>';
-                    echo '</div>';
-                    print_simple_box_end();
+                $courselink = new single_button(new moodle_url('/course/view.php', array('id'=>$PAGE->course->id)), get_string('returntocourse', 'lesson'), 'get');
+                echo '<div class="center leftduring">'.$lessonoutput->message(get_string('leftduringtimednoretake', 'lesson'), $courselink).'</div>';
                 }
-                
             } else {
-                print_simple_box("<p style=\"text-align:center;\">".get_string('youhaveseen','lesson').'</p>',
-                        "center");
-                
-                echo '<div style="text-align:center;">';
-                echo '<span class="lessonbutton standardbutton">'.
-                        '<a href="view.php?id='.$cm->id.'&amp;pageid='.$lastpageseen.'&amp;startlastseen=yes">'.
-                        get_string('yes').'</a></span>&nbsp;&nbsp;&nbsp;';
-                echo '<span class="lessonbutton standardbutton">'.
-                        '<a href="view.php?id='.$cm->id.'&amp;pageid='.$firstpageid.'&amp;startlastseen=no">'.
-                        get_string('no').'</a></div>';
-                echo '</span>';
-            }
-            print_footer($course);
+            echo $lessonoutput->continue_links($lesson, $lastpageseen);
+        }
+        echo $lessonoutput->footer();
             exit();
         }
         
-        if ($grades) {
-            foreach ($grades as $grade) {
-                $bestgrade = $grade->grade;
-                break;
-            }
+    if ($attemptflag) {
             if (!$lesson->retake) {
-                lesson_print_header($cm, $course, $lesson, 'view');
-                print_simple_box_start('center');
-                echo "<div style=\"text-align:center;\">";
-                echo get_string("noretake", "lesson");
-                echo "<br /><br /><div class=\"lessonbutton standardbutton\"><a href=\"../../course/view.php?id=$course->id\">".get_string('returntocourse', 'lesson').'</a></div>';
-                echo "</div>";
-                print_simple_box_end();
-                print_footer($course);
+            echo $lessonoutput->header($lesson, $cm, 'view');
+            $courselink = new single_button(new moodle_url('/course/view.php', array('id'=>$PAGE->course->id)), get_string('returntocourse', 'lesson'), 'get');
+            echo $lessonoutput->message(get_string("noretake", "lesson"), $courselink);
+            echo $lessonoutput->footer();
                 exit();
-                  //redirect("../../course/view.php?id=$course->id", get_string("alreadytaken", "lesson"));
-            // allow student to retake course even if they have the maximum grade
-            // } elseif ($bestgrade == 100) {
-              //     redirect("../../course/view.php?id=$course->id", get_string("maximumgradeachieved",
-            //                 "lesson"));
             }
         }
         // start at the first page
-        if (!$pageid = get_field('lesson_pages', 'id', 'lessonid', $lesson->id, 'prevpageid', 0)) {
-                error('Navigation: first page not found');
+    if (!$pageid = $DB->get_field('lesson_pages', 'id', array('lessonid' => $lesson->id, 'prevpageid' => 0))) {
+            print_error('cannotfindfirstpage', 'lesson');
         }
         /// This is the code for starting a timed test
-        if(!isset($USER->startlesson[$lesson->id]) && !has_capability('mod/lesson:manage', $context)) {
-            $USER->startlesson[$lesson->id] = true;
-            $startlesson = new stdClass;
-            $startlesson->lessonid = $lesson->id;
-            $startlesson->userid = $USER->id;
-            $startlesson->starttime = time();
-            $startlesson->lessontime = time();
-            
-            if (!insert_record('lesson_timer', $startlesson)) {
-                error('Error: could not insert row into lesson_timer table');
-            }
-            if ($lesson->timed) {
-                lesson_set_message(get_string('maxtimewarning', 'lesson', $lesson->maxtime), 'center');
-            }
-        }
-    }
-    if ($pageid != LESSON_EOL) {
-        /// This is the code updates the lessontime for a timed test
-        if ($startlastseen = optional_param('startlastseen', '', PARAM_ALPHA)) {  /// this deletes old records  not totally sure if this is necessary anymore
-            if ($startlastseen == 'no') {
-                if ($grades = get_records_select('lesson_grades', "lessonid = $lesson->id AND userid = $USER->id",
-                            'grade DESC')) {
-                    $retries = count($grades);
-                } else {
-                    $retries = 0;
-                }
-                if (!delete_records('lesson_attempts', 'userid', $USER->id, 'lessonid', $lesson->id, 'retry', $retries)) {
-                    error('Error: could not delete old attempts');
-                }
-                if (!delete_records('lesson_branch', 'userid', $USER->id, 'lessonid', $lesson->id, 'retry', $retries)) {
-                    error('Error: could not delete old seen branches');
-                }
-            }
+    if(!isset($USER->startlesson[$lesson->id]) && !$canmanage) {
+        $lesson->start_timer();
         }
+}
         
-        add_to_log($course->id, 'lesson', 'view', 'view.php?id='. $cm->id, $pageid, $cm->id);
+$currenttab = 'view';
+$extraeditbuttons = false;
+$lessonpageid = null;
+$timer = null;
         
-        if (!$page = get_record('lesson_pages', 'id', $pageid)) {
-            error('Navigation: the page record not found');
+if ($pageid != LESSON_EOL) {
+    /// This is the code updates the lessontime for a timed test
+    $startlastseen = optional_param('startlastseen', '', PARAM_ALPHA);
+    if ($startlastseen == 'no') {
+        // this deletes old records  not totally sure if this is necessary anymore
+        $retries = $DB->count_records('lesson_grades', array('lessonid'=>$lesson->id, 'userid'=>$USER->id));
+        $DB->delete_records('lesson_attempts', array('userid' => $USER->id, 'lessonid' => $lesson->id, 'retry' => $retries));
+        $DB->delete_records('lesson_branch', array('userid' => $USER->id, 'lessonid' => $lesson->id, 'retry' => $retries));
         }
 
-        if ($page->qtype == LESSON_CLUSTER) {  //this only gets called when a user starts up a new lesson and the first page is a cluster page
-            if (!has_capability('mod/lesson:manage', $context)) {
-                // get new id
-                $pageid = lesson_cluster_jump($lesson->id, $USER->id, $pageid);
-                // get new page info
-                if (!$page = get_record('lesson_pages', 'id', $pageid)) {
-                    error('Navigation: the page record not found');
-                }
-                add_to_log($course->id, 'lesson', 'view', 'view.php?id='. $cm->id, $pageid, $cm->id);
-            } else {
-                // get the next page
-                $pageid = $page->nextpageid;
-                if (!$page = get_record('lesson_pages', 'id', $pageid)) {
-                    error('Navigation: the page record not found');
-                }
-            }
-        } elseif ($page->qtype == LESSON_ENDOFCLUSTER) { // Check for endofclusters
-            if ($page->nextpageid == 0) {
-                $nextpageid = LESSON_EOL;
-            } else {
-                $nextpageid = $page->nextpageid;
-            }
-            redirect("$CFG->wwwroot/mod/lesson/view.php?id=$cm->id&amp;pageid=$nextpageid");
-        } else if ($page->qtype == LESSON_ENDOFBRANCH) { // Check for endofbranches
-            if ($answers = get_records('lesson_answers', 'pageid', $page->id, 'id')) {
-                // print_heading(get_string('endofbranch', 'lesson'));
-                foreach ($answers as $answer) {
-                    // just need the first answer
-                    if ($answer->jumpto == LESSON_RANDOMBRANCH) {
-                        $answer->jumpto = lesson_unseen_branch_jump($lesson->id, $USER->id);
-                    } elseif ($answer->jumpto == LESSON_CLUSTERJUMP) {
-                        if (!has_capability('mod/lesson:manage', $context)) {
-                            $answer->jumpto = lesson_cluster_jump($lesson->id, $USER->id, $pageid);
-                        } else {
-                            if ($page->nextpageid == 0) {  
-                                $answer->jumpto = LESSON_EOL;
-                            } else {
-                                $answer->jumpto = $page->nextpageid;
-                            }
-                        }
-                    } else if ($answer->jumpto == LESSON_NEXTPAGE) {
-                        if ($page->nextpageid == 0) {  
-                            $answer->jumpto = LESSON_EOL;
-                        } else {
-                            $answer->jumpto = $page->nextpageid;
-                        }
-                    } else if ($answer->jumpto == 0) {
-                        $answer->jumpto = $page->id;
-                    } else if ($answer->jumpto == LESSON_PREVIOUSPAGE) {
-                        $answer->jumpto = $page->prevpageid;                            
-                    }
-                    redirect("$CFG->wwwroot/mod/lesson/view.php?id=$cm->id&amp;pageid=$answer->jumpto");
-                    break;
-                } 
-            } else {
-                error('Navigation: No answers on EOB');
-            }
+    $page = $lesson->load_page($pageid);
+    // Check if the page is of a special type and if so take any nessecary action
+    $newpageid = $page->callback_on_view($canmanage);
+    if (is_numeric($newpageid)) {
+        $page = $lesson->load_page($newpageid);
         }
         
-        // check to see if the user can see the left menu
-        if (!has_capability('mod/lesson:manage', $context)) {
-            $lesson->displayleft = lesson_displayleftif($lesson);
-        }
+    add_to_log($PAGE->course->id, 'lesson', 'view', 'view.php?id='. $PAGE->cm->id, $page->id, $PAGE->cm->id);
         
         // This is where several messages (usually warnings) are displayed
         // all of this is displayed above the actual page
         
-        // clock code
-        // get time information for this user
-        $timer = new stdClass;
-        if(!has_capability('mod/lesson:manage', $context)) {
-            if (!$timer = get_records_select('lesson_timer', "lessonid = $lesson->id AND userid = $USER->id", 'starttime')) {
-                error('Error: could not find records');
-            } else {
-                $timer = array_pop($timer); // this will get the latest start time record
-            }
-        }
+    // check to see if the user can see the left menu
+    if (!$canmanage) {
+        $lesson->displayleft = lesson_displayleftif($lesson);
 
-        $startlastseen = optional_param('startlastseen', '', PARAM_ALPHA);
-        if ($startlastseen == 'yes') {  // continue a previous test, need to update the clock  (think this option is disabled atm)
-            $timer->starttime = time() - ($timer->lessontime - $timer->starttime);
-            $timer->lessontime = time();
-        } else if ($startlastseen == 'no') {  // starting over
-            // starting over, so reset the clock
-            $timer->starttime = time();
-            $timer->lessontime = time();
-        }
+        $continue = ($startlastseen !== '');
+        $restart  = ($continue && $startlastseen == 'yes');
+        $timer = $lesson->update_timer($continue, $restart);
             
-        // for timed lessons, display clock
         if ($lesson->timed) {
-            if(has_capability('mod/lesson:manage', $context)) {
-                lesson_set_message(get_string('teachertimerwarning', 'lesson'));
-            } else {
                 $timeleft = ($timer->starttime + $lesson->maxtime * 60) - time();
-
                 if ($timeleft <= 0) {
                     // Out of time
-                    lesson_set_message(get_string('eolstudentoutoftime', 'lesson'));
-                    redirect("$CFG->wwwroot/mod/lesson/view.php?id=$cm->id&amp;pageid=".LESSON_EOL."&amp;outoftime=normal");
+                $lesson->add_message(get_string('eolstudentoutoftime', 'lesson'));
+                redirect(new moodle_url('/mod/lesson/view.php', array('id'=>$cm->id,'pageid'=>LESSON_EOL, 'outoftime'=>'normal')));
                     die; // Shouldn't be reached, but make sure
                 } else if ($timeleft < 60) {
                     // One minute warning
-                    lesson_set_message(get_string('studentoneminwarning', 'lesson'));
-                }
-            }
-        }
-
-        // update the clock
-        if (!has_capability('mod/lesson:manage', $context)) {
-            $timer->lessontime = time();
-            if (!update_record('lesson_timer', $timer)) {
-                error('Error: could not update lesson_timer table');
-            }
-        }
-
-         ///  This is the warning msg for teachers to inform them that cluster and unseen does not work while logged in as a teacher
-        if(has_capability('mod/lesson:manage', $context)) {
-            if (lesson_display_teacher_warning($lesson->id)) {
-                $warningvars->cluster = get_string('clusterjump', 'lesson');
-                $warningvars->unseen = get_string('unseenpageinbranch', 'lesson');
-                lesson_set_message(get_string('teacherjumpwarning', 'lesson', $warningvars));
+                $lesson->add_message(get_string('studentoneminwarning', 'lesson'));
             }
         }
         
-        if ($page->qtype == LESSON_BRANCHTABLE) {
-            if ($lesson->minquestions and !has_capability('mod/lesson:manage', $context)) {
+        if ($page->qtype == LESSON_PAGE_BRANCHTABLE && $lesson->minquestions) {
                 // tell student how many questions they have seen, how many are required and their grade
-                $ntries = count_records("lesson_grades", "lessonid", $lesson->id, "userid", $USER->id);
-                
+            $ntries = $DB->count_records("lesson_grades", array("lessonid"=>$lesson->id, "userid"=>$USER->id));
                 $gradeinfo = lesson_grade($lesson, $ntries);
-                
                 if ($gradeinfo->attempts) {
                     if ($gradeinfo->nquestions < $lesson->minquestions) {
                         $a = new stdClass;
                         $a->nquestions   = $gradeinfo->nquestions;
                         $a->minquestions = $lesson->minquestions;
-                        lesson_set_message(get_string('numberofpagesviewednotice', 'lesson', $a));
+                    $lesson->add_message(get_string('numberofpagesviewednotice', 'lesson', $a));
                     }
-                    lesson_set_message(get_string("numberofcorrectanswers", "lesson", $gradeinfo->earned), 'notify');
+
                     $a = new stdClass;
                     $a->grade = number_format($gradeinfo->grade * $lesson->grade / 100, 1);
                     $a->total = $lesson->grade;
-                    lesson_set_message(get_string('yourcurrentgradeisoutof', 'lesson', $a), 'notify');
+                if (!$reviewmode && !$lesson->retake){
+                    $lesson->add_message(get_string("numberofcorrectanswers", "lesson", $gradeinfo->earned), 'notify');
+                    $lesson->add_message(get_string('yourcurrentgradeisoutof', 'lesson', $a), 'notify');
                 }
             }
         }
-
-        $PAGE = page_create_instance($lesson->id);
-        $PAGE->set_lessonpageid($page->id);
-        $pageblocks = blocks_setup($PAGE);
-
-        $leftcolumnwidth  = bounded_number(180, blocks_preferred_width($pageblocks[BLOCK_POS_LEFT]), 210);
-        $rightcolumnwidth = bounded_number(180, blocks_preferred_width($pageblocks[BLOCK_POS_RIGHT]), 210);
-
-        if (($edit != -1) and $PAGE->user_allowed_editing()) {
-            $USER->editing = $edit;
+    } else {
+        $timer = null;
+        if ($lesson->timed) {
+            $lesson->add_message(get_string('teachertimerwarning', 'lesson'));
         }
-
-    /// Print the page header, heading and tabs
-        $PAGE->print_header();
-
-        if ($attemptflag) {
-            print_heading(get_string('attempt', 'lesson', $retries + 1));
+        if (lesson_display_teacher_warning($lesson)) {
+            // This is the warning msg for teachers to inform them that cluster
+            // and unseen does not work while logged in as a teacher
+            $warningvars->cluster = get_string('clusterjump', 'lesson');
+            $warningvars->unseen = get_string('unseenpageinbranch', 'lesson');
+            $lesson->add_message(get_string('teacherjumpwarning', 'lesson', $warningvars));
         }
-
-        /// This calculates and prints the ongoing score
-        if ($lesson->ongoing and !empty($pageid)) {
-            lesson_print_ongoing_score($lesson);
         }
 
-        require($CFG->dirroot.'/mod/lesson/viewstart.html');
-
-        // now starting to print the page's contents   
-        if ($page->qtype == LESSON_BRANCHTABLE) {
-            print_heading(format_string($page->title));
-        } else {
-            $lesson->slideshow = false; // turn off slide show for all pages other than LESSON_BRANTCHTABLE
-        }
+    $PAGE->set_url('/mod/lesson/view.php', array('id' => $cm->id, 'pageid' => $page->id));
+    $PAGE->set_subpage($page->id);
+    $currenttab = 'view';
+    $extraeditbuttons = true;
+    $lessonpageid = $page->id;
         
-        if (!$lesson->slideshow) {
-            $options = new stdClass;
-            $options->noclean = true;
-            print_simple_box('<div class="contents">'.
-                            format_text($page->contents, FORMAT_MOODLE, $options).
-                            '</div>', 'center');
+    if (($edit != -1) && $PAGE->user_allowed_editing()) {
+        $USER->editing = $edit;
         }
         
+    if (is_array($page->answers) && count($page->answers)>0) {
         // this is for modattempts option.  Find the users previous answer to this page,
         //   and then display it below in answer processing
         if (isset($USER->modattempts[$lesson->id])) {            
-            $retries = count_records('lesson_grades', "lessonid", $lesson->id, "userid", $USER->id);
-            $retries--;
-            if (! $attempts = get_records_select("lesson_attempts", "lessonid = $lesson->id AND userid = $USER->id AND pageid = $page->id AND retry = $retries", "timeseen")) {
-                error("Previous attempt record could not be found!");
+            $retries = $DB->count_records('lesson_grades', array("lessonid"=>$lesson->id, "userid"=>$USER->id));
+            if (!$attempts = $lesson->get_attempts($retries-1, false, $page->id)) {
+                print_error('cannotfindpreattempt', 'lesson');
             }
             $attempt = end($attempts);
-        }
-        
-        // get the answers in a set order, the id order
-        if ($answers = get_records("lesson_answers", "pageid", $page->id, "id")) {
-            if ($page->qtype != LESSON_BRANCHTABLE) {  // To fix XHTML problem (BT have their own forms)
-                echo "<form id=\"answerform\" method =\"post\" action=\"lesson.php\" autocomplete=\"off\">";
-                echo '<fieldset class="invisiblefieldset">';
-                echo "<input type=\"hidden\" name=\"id\" value=\"$cm->id\" />";
-                echo "<input type=\"hidden\" name=\"action\" value=\"continue\" />";
-                echo "<input type=\"hidden\" name=\"pageid\" value=\"$pageid\" />";
-                echo "<input type=\"hidden\" name=\"sesskey\" value=\"".sesskey()."\" />";
-                print_simple_box_start("center");
-                echo '<table>';
-            }
-            // default format text options
-            $options = new stdClass;
-            $options->para = false; // no <p></p>
-            $options->noclean = true;
-            // echo "qtype is $page->qtype"; // debug
-            switch ($page->qtype) {
-                case LESSON_SHORTANSWER :
-                case LESSON_NUMERICAL :
-                    if (isset($USER->modattempts[$lesson->id])) {     
-                        $value = 'value="'.s($attempt->useranswer).'"';
-                    } else {
-                        $value = "";
-                    }       
-                    echo '<tr><td style="text-align:center;"><label for="answer">'.get_string('youranswer', 'lesson').'</label>'.
-                        ": <input type=\"text\" id=\"answer\" name=\"answer\" size=\"50\" maxlength=\"200\" $value />\n";
-                    echo '</td></tr></table>';
-                    print_simple_box_end();
-                    lesson_print_submit_link(get_string('pleaseenteryouranswerinthebox', 'lesson'), 'answerform');
-                    break;
-                case LESSON_TRUEFALSE :
-                    shuffle($answers);
-                    $i = 0;
-                    foreach ($answers as $answer) {
-                        echo '<tr><td valign="top">';
-                        if (isset($USER->modattempts[$lesson->id]) && $answer->id == $attempt->answerid) {
-                            $checked = 'checked="checked"';
-                        } else {
-                            $checked = '';
-                        } 
-                        echo "<input type=\"radio\" id=\"answerid$i\" name=\"answerid\" value=\"{$answer->id}\" $checked />";
-                        echo "</td><td>";
-                        echo "<label for=\"answerid$i\">".format_text(trim($answer->answer), FORMAT_MOODLE, $options).'</label>';
-                        echo '</td></tr>';
-                        if ($answer != end($answers)) {
-                            echo "<tr><td><br /></td></tr>";                            
-                        }
-                        $i++;
-                    }
-                    echo '</table>';
-                    print_simple_box_end();
-                    lesson_print_submit_link(get_string('pleasecheckoneanswer', 'lesson'), 'answerform');
-                    break;
-                case LESSON_MULTICHOICE :
-                    $i = 0;
-                    shuffle($answers);
-
-                    foreach ($answers as $answer) {
-                        echo '<tr><td valign="top">';
-                        if ($page->qoption) {
-                            $checked = '';
-                            if (isset($USER->modattempts[$lesson->id])) {
-                                $answerids = explode(",", $attempt->useranswer);
-                                if (in_array($answer->id, $answerids)) {
-                                    $checked = ' checked="checked"';
+            $USER->modattempts[$lesson->id] = $attempt;
                                 } else {
-                                    $checked = '';
-                                }
+            $attempt = false;
                             }
-                            // more than one answer allowed 
-                            echo "<input type=\"checkbox\" id=\"answerid$i\" name=\"answer[$i]\" value=\"{$answer->id}\"$checked />";
+        $lessoncontent = $lessonoutput->display_page($lesson, $page, $attempt);
                         } else {
-                            if (isset($USER->modattempts[$lesson->id]) && $answer->id == $attempt->answerid) {
-                                $checked = ' checked="checked"';
-                            } else {
-                                $checked = '';
-                            } 
-                            // only one answer allowed
-                            echo "<input type=\"radio\" id=\"answerid$i\" name=\"answerid\" value=\"{$answer->id}\"$checked />";
-                        }
-                        echo '</td><td>';
-                        echo "<label for=\"answerid$i\" >".format_text(trim($answer->answer), FORMAT_MOODLE, $options).'</label>'; 
-                        echo '</td></tr>';
-                        if ($answer != end($answers)) {
-                            echo '<tr><td><br /></td></tr>';
-                        } 
-                        $i++;
-                    }
-                    echo '</table>';
-                    print_simple_box_end();
-                    if ($page->qoption) {
-                        $linkname = get_string('pleasecheckoneormoreanswers', 'lesson');
-                    } else {
-                        $linkname = get_string('pleasecheckoneanswer', 'lesson');
-                    }
-                    lesson_print_submit_link($linkname, 'answerform');
-                    break;
+        $data = new stdClass;
+        $data->id = $PAGE->cm->id;
+        $data->pageid = $page->id;
+        $data->newpageid = $lesson->get_next_page($page->nextpageid);
                     
-                case LESSON_MATCHING :
-                    // don't suffle answers (could be an option??)
-                    foreach ($answers as $answer) {
-                        // get all the response
-                        if ($answer->response != NULL) {
-                            $responses[] = trim($answer->response);
-                        }
-                    }
-                    
-                    $responseoptions = array();
-                    if (!empty($responses)) {
-                        shuffle($responses);
-                        $responses = array_unique($responses);                     
-                        foreach ($responses as $response) {
-                            $responseoptions[htmlspecialchars(trim($response))] = $response;
-                        }
-                    }
-                    if (isset($USER->modattempts[$lesson->id])) {
-                        $useranswers = explode(',', $attempt->useranswer);
-                        $t = 0;
-                    }
-                    foreach ($answers as $answer) {
-                        if ($answer->response != NULL) {
-                            echo '<tr><td align="right">';
-                            echo "<b><label for=\"menuresponse[$answer->id]\">".
-                                    format_text($answer->answer,FORMAT_MOODLE,$options).
-                                    '</label>: </b></td><td valign="bottom">';
-
-                            if (isset($USER->modattempts[$lesson->id])) {
-                                $selected = htmlspecialchars(trim($answers[$useranswers[$t]]->response));  // gets the user's previous answer
-                                choose_from_menu ($responseoptions, "response[$answer->id]", $selected);
-                                $t++;
-                            } else {
-                                choose_from_menu ($responseoptions, "response[$answer->id]");
-                            }
-                            echo '</td></tr>';
-                            if ($answer != end($answers)) {
-                                echo '<tr><td><br /></td></tr>';
+        $customdata = array(
+            'title'     => $page->title,
+            'contents'  => $page->get_contents()
+        );
+        $mform = new lesson_page_without_answers($CFG->wwwroot.'/mod/lesson/continue.php', $customdata);
+        $mform->set_data($data);
+        ob_start();
+        $mform->display();
+        $lessoncontent = ob_get_contents();
+        ob_end_clean();
                             } 
-                        }
-                    }
-                    echo '</table>';
-                    print_simple_box_end();
-                    lesson_print_submit_link(get_string('pleasematchtheabovepairs', 'lesson'), 'answerform');
-                    break;
-                case LESSON_BRANCHTABLE :                  
-                    $options = new stdClass;
-                    $options->para = false;
-                    $buttons = array();
-                    $i = 0;
-                    foreach ($answers as $answer) {
-                        // Each button must have its own form inorder for it to work with JavaScript turned off
-                        $button  = "<form id=\"answerform$i\" method=\"post\" action=\"$CFG->wwwroot/mod/lesson/lesson.php\">\n".
-                                   '<div>'.
-                                   "<input type=\"hidden\" name=\"id\" value=\"$cm->id\" />\n".
-                                   "<input type=\"hidden\" name=\"action\" value=\"continue\" />\n".
-                                   "<input type=\"hidden\" name=\"pageid\" value=\"$pageid\" />\n".
-                                   "<input type=\"hidden\" name=\"sesskey\" value=\"".sesskey()."\" />\n".
-                                   "<input type=\"hidden\" name=\"jumpto\" value=\"$answer->jumpto\" />\n".
-                                   lesson_print_submit_link(strip_tags(format_text($answer->answer, FORMAT_MOODLE, $options)), "answerform$i", '', '', '', '', true).
-                                   '</div>'.
-                                   '</form>';
                         
-                        $buttons[] = $button;
-                        $i++;
+    lesson_add_fake_blocks($PAGE, $cm, $lesson, $timer);
+    echo $lessonoutput->header($lesson, $cm, $currenttab, $extraeditbuttons, $lessonpageid);
+    if ($attemptflag) {
+        echo $OUTPUT->heading(get_string('attempt', 'lesson', $retries));
                     }
-                    
-                /// Set the orientation
-                    if ($page->layout) {
-                        $orientation = 'horizontal';
-                    } else {
-                        $orientation = 'vertical';
+    /// This calculates and prints the ongoing score
+    if ($lesson->ongoing && !empty($pageid) && !$reviewmode) {
+        echo $lessonoutput->ongoing_score($lesson);
                     }
-                    
-                    $fullbuttonhtml = "\n<div class=\"branchbuttoncontainer $orientation\">\n" .
-                                      implode("\n", $buttons).
-                                      "\n</div>\n";
-                
-                    if ($lesson->slideshow) {
-                        $options = new stdClass;
-                        $options->noclean = true;
-                        echo '<div class="contents">'.format_text($page->contents, FORMAT_MOODLE, $options)."</div>\n";
-                        echo '</div><!--end slideshow div-->';
-                        echo $fullbuttonhtml;
-                    } else {
-                        echo $fullbuttonhtml;
+    if ($lesson->displayleft) {
+        echo '<a name="maincontent" id="maincontent" title="' . get_string('anchortitle', 'lesson') . '"></a>';
                     }
+    echo $lessoncontent;
+    echo $lessonoutput->slideshow_end();
+    echo $lessonoutput->progress_bar($lesson);
+    echo $lessonoutput->footer();
                     
-                    break;
-                case LESSON_ESSAY :
-                    if (isset($USER->modattempts[$lesson->id])) {
-                        $essayinfo = unserialize($attempt->useranswer);
-                        $value = s(stripslashes_safe($essayinfo->answer));
-                    } else {
-                        $value = "";
-                    }
-                    echo '<tr><td style="text-align:center;" valign="top" nowrap="nowrap"><label for="answer">'.get_string("youranswer", "lesson").'</label>:</td><td>'.
-                         '<textarea id="answer" name="answer" rows="15" cols="60">'.$value."</textarea>\n";
-                    echo '</td></tr></table>';
-                    print_simple_box_end();
-                    lesson_print_submit_link(get_string('pleaseenteryouranswerinthebox', 'lesson'), 'answerform');
-                    break;
-                default: // close the tags MDL-7861
-                    echo ('</table>');
-                    print_simple_box_end();
-                break;
-            }
-            if ($page->qtype != LESSON_BRANCHTABLE) {  // To fix XHTML problem (BT have their own forms)
-                echo '</fieldset>';
-                echo "</form>\n"; 
-            }
-        } else {
-            // a page without answers - find the next (logical) page
-            echo "<form id=\"pageform\" method=\"post\" action=\"$CFG->wwwroot/mod/lesson/view.php\">\n";
-            echo '<div>';
-            echo "<input type=\"hidden\" name=\"id\" value=\"$cm->id\" />\n";
-            if ($lesson->nextpagedefault) {
-                // in Flash Card mode...
-                // ...first get number of retakes
-                $nretakes = count_records("lesson_grades", "lessonid", $lesson->id, "userid", $USER->id); 
-                // ...then get the page ids (lessonid the 5th param is needed to make get_records play)
-                $allpages = get_records("lesson_pages", "lessonid", $lesson->id, "id", "id,lessonid");
-                shuffle ($allpages);
-                $found = false;
-                if ($lesson->nextpagedefault == LESSON_UNSEENPAGE) {
-                    foreach ($allpages as $thispage) {
-                        if (!count_records("lesson_attempts", "pageid", $thispage->id, "userid", 
-                                    $USER->id, "retry", $nretakes)) {
-                            $found = true;
-                            break;
-                        }
-                    }
-                } elseif ($lesson->nextpagedefault == LESSON_UNANSWEREDPAGE) {
-                    foreach ($allpages as $thispage) {
-                        if (!count_records_select("lesson_attempts", "pageid = $thispage->id AND
-                                    userid = $USER->id AND correct = 1 AND retry = $nretakes")) {
-                            $found = true;
-                            break;
-                        }
-                    }
-                }
-                if ($found) {
-                    $newpageid = $thispage->id;
-                    if ($lesson->maxpages) {
-                        // check number of pages viewed (in the lesson)
-                        if (count_records("lesson_attempts", "lessonid", $lesson->id, "userid", $USER->id,
-                                "retry", $nretakes) >= $lesson->maxpages) {
-                            $newpageid = LESSON_EOL;
-                        }
-                    }
-                } else {
-                    $newpageid = LESSON_EOL;
-                }
-            } else {
-                // in normal lesson mode...
-                if (!$newpageid = get_field("lesson_pages", "nextpageid", "id", $pageid)) {
-                    // this is the last page - flag end of lesson
-                    $newpageid = LESSON_EOL;
-                }
-            }
-            echo "<input type=\"hidden\" name=\"pageid\" value=\"$newpageid\" />\n";
-            lesson_print_submit_link(get_string('continue', 'lesson'), 'pageform');
-            echo '</div>';
-            echo "</form>\n";
-        }
+} else {
         
-        // Finish of the page
-        lesson_print_progress_bar($lesson, $course);
-        require($CFG->dirroot.'/mod/lesson/viewend.html');
-    } else {
+    $lessoncontent = '';
         // end of lesson reached work out grade
-        
         // Used to check to see if the student ran out of time
         $outoftime = optional_param('outoftime', '', PARAM_ALPHA);
 
         // Update the clock / get time information for this user
-        if (!has_capability('mod/lesson:manage', $context)) {
-            unset($USER->startlesson[$lesson->id]);
-            if (!$timer = get_records_select('lesson_timer', "lessonid = $lesson->id AND userid = $USER->id", 'starttime')) {
-                error('Error: could not find records');
-            } else {
-                $timer = array_pop($timer); // this will get the latest start time record
-            }
-            $timer->lessontime = time();
-            
-            if (!update_record("lesson_timer", $timer)) {
-                error("Error: could not update lesson_timer table");
-            }
-        }
+    add_to_log($course->id, "lesson", "end", "view.php?id=".$PAGE->cm->id, "$lesson->id", $PAGE->cm->id);
         
-        add_to_log($course->id, "lesson", "end", "view.php?id=$cm->id", "$lesson->id", $cm->id);
-        
-        lesson_print_header($cm, $course, $lesson, 'view');
-        print_heading(get_string("congratulations", "lesson"));
-        print_simple_box_start("center");
-        $ntries = count_records("lesson_grades", "lessonid", $lesson->id, "userid", $USER->id);
+    $lessoncontent .= $OUTPUT->heading(get_string("congratulations", "lesson"));
+    $lessoncontent .= $OUTPUT->box_start('generalbox boxaligncenter');
+    $ntries = $DB->count_records("lesson_grades", array("lessonid"=>$lesson->id, "userid"=>$USER->id));
         if (isset($USER->modattempts[$lesson->id])) {
             $ntries--;  // need to look at the old attempts :)
         }
-        if (!has_capability('mod/lesson:manage', $context)) {
-            
+    if (!$canmanage) {
+        $lesson->stop_timer();
             $gradeinfo = lesson_grade($lesson, $ntries);
             
             if ($gradeinfo->attempts) {
                 if (!$lesson->custom) {
-                    echo "<p style=\"text-align:center;\">".get_string("numberofpagesviewed", "lesson", $gradeinfo->nquestions).
-                        "</p>\n";
+                $lessoncontent .= $lessonoutput->paragraph(get_string("numberofpagesviewed", "lesson", $gradeinfo->nquestions), 'center');
                     if ($lesson->minquestions) {
                         if ($gradeinfo->nquestions < $lesson->minquestions) {
                             // print a warning and set nviewed to minquestions
-                            echo "<p style=\"text-align:center;\">".get_string("youshouldview", "lesson", 
-                                    $lesson->minquestions)."</p>\n";
+                        $lessoncontent .= $lessonoutput->paragraph(get_string("youshouldview", "lesson", $lesson->minquestions), 'center');
                         }
                     }
-                    echo "<p style=\"text-align:center;\">".get_string("numberofcorrectanswers", "lesson", $gradeinfo->earned).
-                        "</p>\n";
+                $lessoncontent .= $lessonoutput->paragraph(get_string("numberofcorrectanswers", "lesson", $gradeinfo->earned), 'center');
                 }
                 $a = new stdClass;
                 $a->score = $gradeinfo->earned;
@@ -875,56 +442,49 @@
                 if ($gradeinfo->nmanual) {
                     $a->tempmaxgrade = $gradeinfo->total - $gradeinfo->manualpoints;
                     $a->essayquestions = $gradeinfo->nmanual;
-                    echo "<div style=\"text-align:center;\">".get_string("displayscorewithessays", "lesson", $a)."</div>";
+                $lessoncontent .= $OUTPUT->box(get_string("displayscorewithessays", "lesson", $a), 'center');
                 } else {
-                    echo "<div style=\"text-align:center;\">".get_string("displayscorewithoutessays", "lesson", $a)."</div>";                        
+                $lessoncontent .= $OUTPUT->box(get_string("displayscorewithoutessays", "lesson", $a), 'center');
                 }
                 $a = new stdClass;
                 $a->grade = number_format($gradeinfo->grade * $lesson->grade / 100, 1);
                 $a->total = $lesson->grade;
-                echo "<p style=\"text-align:center;\">".get_string('yourcurrentgradeisoutof', 'lesson', $a)."</p>\n";
+            $lessoncontent .= $lessonoutput->paragraph(get_string("yourcurrentgradeisoutof", "lesson", $a), 'center');
                     
+            $grade = new stdClass();
                 $grade->lessonid = $lesson->id;
                 $grade->userid = $USER->id;
                 $grade->grade = $gradeinfo->grade;
                 $grade->completed = time();
                 if (!$lesson->practice) {
                     if (isset($USER->modattempts[$lesson->id])) { // if reviewing, make sure update old grade record
-                        if (!$grades = get_records_select("lesson_grades", "lessonid = $lesson->id and userid = $USER->id", "completed")) {
-                            error("Could not find Grade Records");
+                    if (!$grades = $DB->get_records("lesson_grades", array("lessonid" => $lesson->id, "userid" => $USER->id), "completed DESC", '*', 0, 1)) {
+                        print_error('cannotfindgrade', 'lesson');
                         }
-                        $oldgrade = end($grades);
+                    $oldgrade = array_shift($grades);
                         $grade->id = $oldgrade->id;
-                        if (!$update = update_record("lesson_grades", $grade)) {
-                            error("Navigation: grade not updated");
-                        }
+                    $DB->update_record("lesson_grades", $grade);
                     } else {
-                        if (!$newgradeid = insert_record("lesson_grades", $grade)) {
-                            error("Navigation: grade not inserted");
-                        }
+                    $newgradeid = $DB->insert_record("lesson_grades", $grade);
                     }
                 } else {
-                    if (!delete_records("lesson_attempts", "lessonid", $lesson->id, "userid", $USER->id, "retry", $ntries)) {
-                        error("Could not delete lesson attempts");
-                    }
+                $DB->delete_records("lesson_attempts", array("lessonid" => $lesson->id, "userid" => $USER->id, "retry" => $ntries));
                 }
             } else {
                 if ($lesson->timed) {
                     if ($outoftime == 'normal') {
-                        $grade = new stdClass;
+                    $grade = new stdClass();;
                         $grade->lessonid = $lesson->id;
                         $grade->userid = $USER->id;
                         $grade->grade = 0;
                         $grade->completed = time();
                         if (!$lesson->practice) {
-                            if (!$newgradeid = insert_record("lesson_grades", $grade)) {
-                                error("Navigation: grade not inserted");
-                            }
+                        $newgradeid = $DB->insert_record("lesson_grades", $grade);
                         }
-                        echo get_string("eolstudentoutoftimenoanswers", "lesson");
+                    $lessoncontent .= get_string("eolstudentoutoftimenoanswers", "lesson");
                     }
                 } else {
-                    echo get_string("welldone", "lesson");
+                $lessoncontent .= get_string("welldone", "lesson");
                 }
             }
 
@@ -933,22 +493,22 @@
 
         } else { 
             // display for teacher
-            echo "<p style=\"text-align:center;\">".get_string("displayofgrade", "lesson")."</p>\n";
+        $lessoncontent .= $lessonoutput->paragraph(get_string("displayofgrade", "lesson"), 'center');
         }
-        print_simple_box_end(); //End of Lesson button to Continue.
+    $lessoncontent .= $OUTPUT->box_end(); //End of Lesson button to Continue.
 
         // after all the grade processing, check to see if "Show Grades" is off for the course
         // if yes, redirect to the course page
         if (!$course->showgrades) {
-            redirect($CFG->wwwroot.'/course/view.php?id='.$course->id);
+        redirect(new moodle_url('/course/view.php', array('id'=>$course->id)));
         }
 
         // high scores code
-        if ($lesson->highscores && !has_capability('mod/lesson:manage', $context) && !$lesson->practice) {
-            echo "<div style=\"text-align:center;\"><br />";
-            if ($grades = get_records_select("lesson_grades", "lessonid = $lesson->id", "completed")) {
+    if ($lesson->highscores && !$canmanage && !$lesson->practice) {
+        $lessoncontent .= $OUTPUT->box_start('center');
+        if ($grades = $DB->get_records("lesson_grades", array("lessonid" => $lesson->id), "completed")) {
                 $madeit = false;
-                if ($highscores = get_records_select("lesson_high_scores", "lessonid = $lesson->id")) {
+            if ($highscores = $DB->get_records("lesson_high_scores", array("lessonid" => $lesson->id))) {
                     // get all the high scores into an array
                     $topscores = array();
                     $uniquescores = array();
@@ -966,61 +526,53 @@
                     }
                 }
                 if (!$highscores or $madeit) {
-                    echo '<p>'.get_string("youmadehighscore", "lesson", $lesson->maxhighscores).
-                         '</p>
-                          <form method="post" id="highscores" action="'.$CFG->wwwroot.'/mod/lesson/highscores.php">
-                          <div>
-                          <input type="hidden" name="mode" value="add" />
-                          <input type="hidden" name="id" value="'.$cm->id.'" />
-                          <input type="hidden" name="sesskey" value="'.sesskey().'" />
-                          <p>';
-                          lesson_print_submit_link(get_string('clicktopost', 'lesson'), 'highscores');
-                    echo '</p>
-                          </div>
-                          </form>';
+                $lessoncontent .= $lessonoutput->paragraph(get_string("youmadehighscore", "lesson", $lesson->maxhighscores), 'center');
+                $aurl = new moodle_url('/mod/lesson/highscores.php', array('id'=>$PAGE->cm->id, 'sesskey'=>sesskey()));
+                $lessoncontent .= $OUTPUT->single_button($aurl, get_string('clicktopost', 'lesson'));
                 } else {
-                    echo get_string("nothighscore", "lesson", $lesson->maxhighscores)."<br />";
+                $lessoncontent .= get_string("nothighscore", "lesson", $lesson->maxhighscores)."<br />";
                 }
             }
-            echo "<br /><div style=\"padding: 5px;\" class=\"lessonbutton standardbutton\"><a href=\"$CFG->wwwroot/mod/lesson/highscores.php?id=$cm->id&amp;link=1\">".get_string("viewhighscores", "lesson").'</a></div>';
-            echo "</div>";                            
+        $url = new moodle_url('/mod/lesson/highscores.php', array('id'=>$PAGE->cm->id, 'link'=>'1'));
+        $lessoncontent .= html_writer::link($url, get_string('viewhighscores', 'lesson'), array('class'=>'centerpadded lessonbutton standardbutton'));
+        $lessoncontent .= $OUTPUT->box_end();
         }
 
-        if ($lesson->modattempts && !has_capability('mod/lesson:manage', $context)) {
+    if ($lesson->modattempts && !$canmanage) {
             // make sure if the student is reviewing, that he/she sees the same pages/page path that he/she saw the first time
             // look at the attempt records to find the first QUESTION page that the user answered, then use that page id
             // to pass to view again.  This is slick cause it wont call the empty($pageid) code
             // $ntries is decremented above
-            if (!$attempts = get_records_select("lesson_attempts", "lessonid = $lesson->id AND userid = $USER->id AND retry = $ntries", "timeseen")) {
+        if (!$attempts = $lesson->get_attempts($ntries)) {
                 $attempts = array();
-            }
+            $url = new moodle_url('/mod/lesson/view.php', array('id'=>$PAGE->cm->id));
+        } else {
             $firstattempt = current($attempts);
             $pageid = $firstattempt->pageid;
             // IF the student wishes to review, need to know the last question page that the student answered.  This will help to make
             // sure that the student can leave the lesson via pushing the continue button.
             $lastattempt = end($attempts);
             $USER->modattempts[$lesson->id] = $lastattempt->pageid;
-            echo "<div style=\"text-align:center; padding:5px;\" class=\"lessonbutton standardbutton\"><a href=\"view.php?id=$cm->id&amp;pageid=$pageid\">".get_string("reviewlesson", "lesson")."</a></div>\n"; 
-        } elseif ($lesson->modattempts && has_capability('mod/lesson:manage', $context)) {
-            echo "<p style=\"text-align:center;\">".get_string("modattemptsnoteacher", "lesson")."</p>";                
-        }
         
-        if ($lesson->activitylink) {
-            if ($module = get_record('course_modules', 'id', $lesson->activitylink)) {
-                if ($modname = get_field('modules', 'name', 'id', $module->module))
-                    if ($instance = get_record($modname, 'id', $module->instance)) {
-                        echo "<div style=\"text-align:center; padding:5px;\" class=\"lessonbutton standardbutton\">".
-                                "<a href=\"$CFG->wwwroot/mod/$modname/view.php?id=$lesson->activitylink\">".
-                                get_string('activitylinkname', 'lesson', $instance->name)."</a></div>\n";
-                    }
+            $url = new moodle_url('/mod/lesson/view.php', array('id'=>$PAGE->cm->id, 'pageid'=>$pageid));
             }
+        $lessoncontent .= html_writer::link($url, get_string('reviewlesson', 'lesson'), array('class' => 'centerpadded lessonbutton standardbutton'));
+    } elseif ($lesson->modattempts && $canmanage) {
+        $lessoncontent .= $lessonoutput->paragraph(get_string("modattemptsnoteacher", "lesson"), 'centerpadded');
         }
 
-        echo "<div style=\"text-align:center; padding:5px;\" class=\"lessonbutton standardbutton\"><a href=\"$CFG->wwwroot/course/view.php?id=$course->id\">".get_string('returnto', 'lesson', format_string($course->fullname, true))."</a></div>\n";
-        echo "<div style=\"text-align:center; padding:5px;\" class=\"lessonbutton standardbutton\"><a href=\"$CFG->wwwroot/grade/index.php?id=$course->id\">".get_string('viewgrades', 'lesson')."</a></div>\n";
+    if ($lesson->activitylink) {
+        $lessoncontent .= $lesson->link_for_activitylink();
     }
 
-/// Finish the page
-    print_footer($course);
+    $url = new moodle_url('/course/view.php', array('id'=>$course->id));
+    $lessoncontent .= html_writer::link($url, get_string('returnto', 'lesson', format_string($course->fullname, true)), array('class'=>'centerpadded lessonbutton standardbutton'));
+
+    $url = new moodle_url('/grade/index.php', array('id'=>$course->id));
+    $lessoncontent .= html_writer::link($url, get_string('viewgrades', 'lesson'), array('class'=>'centerpadded lessonbutton standardbutton'));
 
-?>
+    lesson_add_fake_blocks($PAGE, $cm, $lesson, $timer);
+    echo $lessonoutput->header($lesson, $cm, $currenttab, $extraeditbuttons, $lessonpageid);
+    echo $lessoncontent;
+    echo $lessonoutput->footer();
+}
