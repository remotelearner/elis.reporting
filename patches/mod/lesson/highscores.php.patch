diff --git a/mod/lesson/highscores.php b/mod/lesson/highscores.php
index 5a5ac50..c4e1666 100644
--- a/mod/lesson/highscores.php
+++ b/mod/lesson/highscores.php
@@ -1,32 +1,59 @@
-<?php  // $Id$
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
  * Provides the interface for viewing and adding high scores
  *
- * @version $Id$
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package lesson
+ * @package    mod
+ * @subpackage lesson
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  **/
 
-    require_once('../../config.php');
-    require_once('locallib.php');
-    require_once('lib.php');
+/** include required files */
+require_once('../../config.php');
+require_once($CFG->dirroot.'/mod/lesson/locallib.php');
 
-    $id      = required_param('id', PARAM_INT);             // Course Module ID
-    $mode    = optional_param('mode', '', PARAM_ALPHA);
-    $link = optional_param('link', 0, PARAM_INT);
+$id      = required_param('id', PARAM_INT);             // Course Module ID
+$mode    = optional_param('mode', '', PARAM_ALPHA);
+$link = optional_param('link', 0, PARAM_INT);
 
-    list($cm, $course, $lesson) = lesson_get_basics($id);
+$cm = get_coursemodule_from_id('lesson', $id, 0, false, MUST_EXIST);;
+$course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$lesson = new lesson($DB->get_record('lesson', array('id' => $cm->instance), '*', MUST_EXIST));
     
-    require_login($course->id, false, $cm);
+require_login($course, false, $cm);
     
-    $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+$url = new moodle_url('/mod/lesson/highscores.php', array('id'=>$id));
+if ($mode !== '') {
+    $url->param('mode', $mode);
+}
+if ($link !== 0) {
+    $url->param('link', $link);
+}
+$PAGE->set_url($url);
     
+$context = get_context_instance(CONTEXT_MODULE, $cm->id);
     
-    switch ($mode) {
+switch ($mode) {
         case 'add':
             // Ensure that we came from view.php
-            if (!confirm_sesskey() or !data_submitted("$CFG->wwwroot/mod/lesson/view.php")) {
-                error('Incorrect Form Data');
+        if (!confirm_sesskey() or !data_submitted()) {
+            print_error('invalidformdata');
             }
             break;
             
@@ -36,7 +63,7 @@
                 
                 // Make sure it is not empty
                 if (empty($name)) {
-                    lesson_set_message(get_string('missingname', 'lesson'));
+                $lesson->add_message(get_string('missingname', 'lesson'));
                     $mode = 'add';
                     break;
                 }     
@@ -44,7 +71,7 @@
                 $filterwords = explode(',', get_string('censorbadwords'));
                 foreach ($filterwords as $filterword) {
                     if (strstr($name, $filterword)) {
-                        lesson_set_message(get_string('namereject', 'lesson'));
+                    $lesson->add_message(get_string('namereject', 'lesson'));
                         $mode = 'add';
                         break;
                     }
@@ -53,29 +80,30 @@
                 if ($mode == 'add') {
                     break;
                 }
-                
-                if (!$grades = get_records_select('lesson_grades', "lessonid = $lesson->id", 'completed')) {
-                    error('Error: could not find grades');
+            $params = array ("lessonid" => $lesson->id, "userid" => $USER->id);
+            if (!$grades = $DB->get_records_select('lesson_grades', "lessonid = :lessonid", $params, 'completed')) {
+                print_error('cannotfindfirstgrade', 'lesson');
                 }
-                if (!$newgrade = get_record_sql("SELECT * 
-                                                   FROM {$CFG->prefix}lesson_grades 
-                                                  WHERE lessonid = $lesson->id
-                                                    AND userid = $USER->id 
-                                               ORDER BY completed DESC", true)) {
-                    error('Error: could not find newest grade');
+
+            if (!$newgrade = $DB->get_record_sql("SELECT *
+                                               FROM {lesson_grades}
+                                              WHERE lessonid = :lessonid
+                                                AND userid = :userid
+                                           ORDER BY completed DESC", $params, true)) {
+                print_error('cannotfindnewestgrade', 'lesson');
                 }
                 
                 // Check for multiple submissions
-                if (record_exists('lesson_high_scores', 'gradeid', $newgrade->id)) {
-                    error('Only one posting per grade');
+            if ($DB->record_exists('lesson_high_scores', array('gradeid' => $newgrade->id))) {
+                print_error('onpostperpage', 'lesson');
                 }
                 
                 // Find out if we need to delete any records
-                if ($highscores = get_records_sql("SELECT h.*, g.grade 
-                                                     FROM {$CFG->prefix}lesson_grades g, {$CFG->prefix}lesson_high_scores h 
+            if ($highscores = $DB->get_records_sql("SELECT h.*, g.grade
+                                                 FROM {lesson_grades} g, {lesson_high_scores} h
                                                     WHERE h.gradeid = g.id
-                                                    AND h.lessonid = $lesson->id
-                                                    ORDER BY g.grade DESC")) {
+                                                AND h.lessonid = :lessonid
+                                                ORDER BY g.grade DESC", $params)) {
                     // Only count unique scores in our total for max high scores
                     $uniquescores = array();
                     foreach ($highscores as $highscore) {
@@ -102,7 +130,7 @@
                             // Now, delete all high scores with the low score
                             foreach ($highscores as $highscore) {
                                 if ($highscore->grade == $lowscore) {
-                                    delete_records('lesson_high_scores', 'id', $highscore->id);
+                                $DB->delete_records('lesson_high_scores', array('id' => $highscore->id));
                                 }
                             }
                         }
@@ -115,49 +143,39 @@
                 $newhighscore->gradeid = $newgrade->id;
                 $newhighscore->nickname = $name;
 
-                if (!insert_record('lesson_high_scores', $newhighscore)) {
-                    error("Insert of new high score Failed!");
-                }
+            $DB->insert_record('lesson_high_scores', $newhighscore);
                 
                 // Log it
                 add_to_log($course->id, 'lesson', 'update highscores', "highscores.php?id=$cm->id", $name, $cm->id);
                 
-                lesson_set_message(get_string('postsuccess', 'lesson'), 'notifysuccess');
+            $lesson->add_message(get_string('postsuccess', 'lesson'), 'notifysuccess');
                 redirect("$CFG->wwwroot/mod/lesson/highscores.php?id=$cm->id&amp;link=1");
             } else {
-                error('Something is wrong with the form data');
+            print_error('invalidformdata');
             }
             break;
-    }
+}
 
-    // Log it
-    add_to_log($course->id, 'lesson', 'view highscores', "highscores.php?id=$cm->id", $lesson->name, $cm->id);
+// Log it
+add_to_log($course->id, 'lesson', 'view highscores', "highscores.php?id=$cm->id", $lesson->name, $cm->id);
 
-    lesson_print_header($cm, $course, $lesson, 'highscores');
+$lessonoutput = $PAGE->get_renderer('mod_lesson');
+echo $lessonoutput->header($lesson, $cm, 'highscores');
 
-    switch ($mode) {
+switch ($mode) {
         case 'add':
-            print_simple_box_start('center');
-            echo '<div class="mdl-align">
-                 <form id="nickname" method ="post" action="'.$CFG->wwwroot.'/mod/lesson/highscores.php" autocomplete="off">
-                 <input type="hidden" name="id" value="'.$cm->id.'" />
-                 <input type="hidden" name="mode" value="save" />
-                 <input type="hidden" name="sesskey" value="'.sesskey().'" />';
-
-            echo get_string("entername", "lesson").": <input type=\"text\" name=\"name\" size=\"7\" maxlength=\"5\" />\n<p>\n";
-            lesson_print_submit_link(get_string("submitname", "lesson"), 'nickname');
-            echo "</p>\n</form>\n</div>\n";
-            print_simple_box_end();
+        echo $lessonoutput->add_highscores_form($lesson);
             break;
         default:
-            if (!$grades = get_records_select("lesson_grades", "lessonid = $lesson->id", "completed")) {
+        $params = array ("lessonid" => $lesson->id);
+        if (!$grades = $DB->get_records_select("lesson_grades", "lessonid = :lessonid", $params, "completed")) {
                 $grades = array();
             }
         
-            print_heading(get_string("topscorestitle", "lesson", $lesson->maxhighscores), 'center', 4);
+        echo $OUTPUT->heading(get_string("topscorestitle", "lesson", $lesson->maxhighscores), 4);
 
-            if (!$highscores = get_records_select("lesson_high_scores", "lessonid = $lesson->id")) {
-                print_heading(get_string("nohighscores", "lesson"), 'center', 3);
+        if (!$highscores = $DB->get_records_select("lesson_high_scores", "lessonid = :lessonid", $params)) {
+            echo $OUTPUT->heading(get_string("nohighscores", "lesson"), 3);
             } else {
                 foreach ($highscores as $highscore) {
                     $grade = $grades[$highscore->gradeid]->grade;
@@ -165,14 +183,14 @@
                 }
                 krsort($topscores);
                        
-                $table = new stdClass;
+            $table = new html_table();
                 $table->align = array('center', 'left', 'right');
                 $table->wrap = array();
                 $table->width = "30%";
                 $table->cellspacing = '10px';
                 $table->size = array('*', '*', '*');
             
-                $table->head = array(get_string("rank", "lesson"), $course->students, get_string("scores", "lesson"));
+            $table->head = array(get_string("rank", "lesson"), get_string('name'), get_string("scores", "lesson"));
             
                 $printed = 0;
                 while (true) {
@@ -188,22 +206,22 @@
                         break;
                     }
                 }
-                print_table($table);
+            echo html_writer::table($table);
             }
         
             if (!has_capability('mod/lesson:manage', $context)) {  // teachers don't need the links
-                echo '<div style="text-align:center">';
+            echo $OUTPUT->box_start('mdl-align');
+            echo $OUTPUT->box_start('lessonbutton standardbutton');
                 if ($link) {
-                    echo "<br /><div class=\"lessonbutton standardbutton\"><a href=\"$CFG->wwwroot/course/view.php?id=$course->id\">".get_string("returntocourse", "lesson")."</a></div>";
+                echo html_writer::link(new moodle_url('/course/view.php', array('id'=>$course->id)), get_string("returntocourse", "lesson"));
                 } else {
-                    echo "<br /><span class=\"lessonbutton standardbutton\"><a href=\"$CFG->wwwroot/course/view.php?id=$course->id\">".get_string("cancel", "lesson").'</a></span> '.
-                        " <span class=\"lessonbutton standardbutton\"><a href=\"$CFG->wwwroot/mod/lesson/view.php?id=$cm->id&amp;viewed=1\">".get_string("startlesson", "lesson").'</a></span>';
+                echo html_writer::link(new moodle_url('/course/view.php', array('id'=>$course->id)), get_string("cancel", "lesson")). ' ';
+                echo html_writer::link(new moodle_url('/mod/lesson/view.php', array('id'=>$cm->id, 'viewed'=>'1')), get_string("startlesson", "lesson"));
                 }
-                echo "</div>";
+            echo $OUTPUT->box_end();
+            echo $OUTPUT->box_end();
             }
             break;
-    }
-    
-    print_footer($course);
+}
 
-?>
+echo $lessonoutput->footer();
\ No newline at end of file
