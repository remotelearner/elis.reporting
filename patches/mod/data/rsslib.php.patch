diff --git a/mod/data/rsslib.php b/mod/data/rsslib.php
index 675c7b4..25791df 100644
--- a/mod/data/rsslib.php
+++ b/mod/data/rsslib.php
@@ -2,67 +2,63 @@
     // This file adds support to rss feeds generation
 
     // This function is the main entry point to database module
-    // rss feeds generation. Foreach database with rss enabled
-    // build one XML rss structure.
+    // rss feeds generation.
+    function data_rss_get_feed($context, $args) {
+        global $CFG, $DB;
 
-
-    function data_rss_feeds() {
-        global $CFG;
-
-        $status = true;
-
-        // Check CFG->enablerssfeeds.
-        if (empty($CFG->enablerssfeeds)) {
-            debugging("DISABLED (admin variables)");
-        }
         // Check CFG->data_enablerssfeeds.
-        else if (empty($CFG->data_enablerssfeeds)) {
+        if (empty($CFG->data_enablerssfeeds)) {
             debugging("DISABLED (module configuration)");
+            return null;
         }
-        // It's working so we start...
-        else {
-            // Iterate over all data.
-            if ($datas = get_records('data')) {
-                foreach ($datas as $data) {
 
-                    if ($data->rssarticles > 0) {
+        $dataid = clean_param($args[3], PARAM_INT);
+        $cm = get_coursemodule_from_instance('data', $dataid, 0, false, MUST_EXIST);
+        if ($cm) {
+            $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
 
-                        // Get the first field in the list  (a hack for now until we have a selector)
+            //context id from db should match the submitted one
+            if ($context->id != $modcontext->id || !has_capability('mod/data:viewentry', $modcontext)) {
+                return null;
+            }
+        }
 
-                        if (!$firstfield = get_record_sql('SELECT id,name from '.$CFG->prefix.'data_fields WHERE dataid = '.$data->id.' ORDER by id', true)) {
-                            continue;
+        $data = $DB->get_record('data', array('id' => $dataid), '*', MUST_EXIST);
+        if (!rss_enabled_for_mod('data', $data, false, true)) {
+            return null;
                         }
 
+        $sql = data_rss_get_sql($data);
 
-                        // Get the data_records out.
-                        $approved = ($data->approval) ? ' AND dr.approved = 1 ' : ' ';
+        //get the cache file info
+        $filename = rss_get_file_name($data, $sql);
+        $cachedfilepath = rss_get_file_full_name('mod_data', $filename);
 
-                        $sql = 'SELECT dr.*, u.firstname, u.lastname ' .
-                                    "FROM {$CFG->prefix}data_records dr, {$CFG->prefix}user u " .
-                                    "WHERE dr.dataid = {$data->id} " .$approved.
-                                    '  AND dr.userid = u.id '.
-                                    'ORDER BY dr.timecreated DESC';
+        //Is the cache out of date?
+        $cachedfilelastmodified = 0;
+        if (file_exists($cachedfilepath)) {
+            $cachedfilelastmodified = filemtime($cachedfilepath);
+        }
+        //if the cache is more than 60 seconds old and there's new stuff
+        $dontrecheckcutoff = time()-60;
+        if ( $dontrecheckcutoff > $cachedfilelastmodified && data_rss_newstuff($data, $cachedfilelastmodified)) {
+            require_once($CFG->dirroot . '/mod/data/lib.php');
 
-                        if (!$records = get_records_sql($sql, 0, $data->rssarticles)) {
-                            continue;
+            // Get the first field in the list  (a hack for now until we have a selector)
+            if (!$firstfield = $DB->get_record_sql('SELECT id,name FROM {data_fields} WHERE dataid = ? ORDER by id', array($data->id), true)) {
+                return null;
+            }
+
+            if (!$records = $DB->get_records_sql($sql, array(), 0, $data->rssarticles)) {
+                return null;
                         }
 
                         $firstrecord = array_shift($records);  // Get the first and put it back
                         array_unshift($records, $firstrecord);
 
-                        $filename = rss_file_name('data', $data);
-                        if (file_exists($filename)) {
-                            if (filemtime($filename) >= $firstrecord->timemodified) {
-                                continue;
-                            }
-                        }
-
                         // Now create all the articles
-                        mtrace('Creating feed for '.$data->name);
-
                         $items = array();
                         foreach ($records as $record) {
-
                             $recordarray = array();
                             array_push($recordarray, $record);
 
@@ -72,8 +68,8 @@
                             if (!empty($data->rsstitletemplate)) {
                                 $item->title = data_print_template('rsstitletemplate', $recordarray, $data, '', 0, true);
                             } else { // else we guess
-                                $item->title   = strip_tags(get_field('data_content', 'content',
-                                                                  'fieldid', $firstfield->id, 'recordid', $record->id));
+                    $item->title   = strip_tags($DB->get_field('data_content', 'content',
+                                                      array('fieldid'=>$firstfield->id, 'recordid'=>$record->id)));
                             }
                             $item->description = data_print_template('rsstemplate', $recordarray, $data, '', 0, true);
                             $item->pubdate = $record->timecreated;
@@ -81,12 +77,14 @@
 
                             array_push($items, $item);
                         }
-                        $course = get_record('course', 'id', $data->course);
+            $course = $DB->get_record('course', array('id'=>$data->course));
+            $coursecontext = get_context_instance(CONTEXT_COURSE, $course->id);
+            $courseshortname = format_string($course->shortname, true, array('context' => $coursecontext));
 
                         // First all rss feeds common headers.
-                        $header = rss_standard_header($course->shortname.': '.format_string($data->name,true),
+            $header = rss_standard_header($courseshortname . ': ' . format_string($data->name, true, array('context' => $context)),
                                                       $CFG->wwwroot."/mod/data/view.php?d=".$data->id,
-                                                      format_string($data->intro,true));
+                                          format_text($data->intro, $data->introformat, array('context' => $context)));
 
                         if (!empty($header)) {
                             $articles = rss_add_items($items);
@@ -101,16 +99,46 @@
                             $rss = $header.$articles.$footer;
 
                             //Save the XML contents to file.
-                            $status = rss_save_file('data', $data, $rss);
-                        }
-                        else {
-                            $status = false;
+                $status = rss_save_file('mod_data', $filename, $rss);
                         }
                     }
+
+        return $cachedfilepath;
                 }
+
+    function data_rss_get_sql($data, $time=0) {
+        //do we only want new posts?
+        if ($time) {
+            $time = " AND dr.timemodified > '$time'";
+        } else {
+            $time = '';
             }
+
+        $approved = ($data->approval) ? ' AND dr.approved = 1 ' : ' ';
+
+        $sql = "SELECT dr.*, u.firstname, u.lastname
+                  FROM {data_records} dr, {user} u
+                 WHERE dr.dataid = {$data->id} $approved
+                       AND dr.userid = u.id $time
+              ORDER BY dr.timecreated DESC";
+
+        return $sql;
         }
-        return $status;
+
+    /**
+     * If there is new stuff in since $time this returns true
+     * Otherwise it returns false.
+     *
+     * @param object $data the data activity object
+     * @param int $time timestamp
+     * @return bool
+     */
+    function data_rss_newstuff($data, $time) {
+        global $DB;
+
+        $sql = data_rss_get_sql($data, $time);
+
+        $recs = $DB->get_records_sql($sql, null, 0, 1);//limit of 1. If we get even 1 back we have new stuff
+        return ($recs && !empty($recs));
     }
 
-?>
