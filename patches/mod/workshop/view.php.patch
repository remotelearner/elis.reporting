diff --git a/mod/workshop/view.php b/mod/workshop/view.php
index e62c563..999894dc 100644
--- a/mod/workshop/view.php
+++ b/mod/workshop/view.php
@@ -1,583 +1,554 @@
-<?php  // $Id$
-
-/*************************************************
-    ACTIONS handled are:
-
-    displayfinalgrade (for students)
-    notavailable (for students)
-    studentsview
-    submitexample
-    teachersview
-    showdescription
-    showallsubmissions
-
-************************************************/
-
-    require("../../config.php");
-    require("lib.php");
-    require("locallib.php");
-
-    $id     = required_param('id', PARAM_INT);    // Course Module ID
-    $action = optional_param('action', '', PARAM_ALPHA);
-    $sort   = optional_param('sort', 'lastname', PARAM_ALPHA);
-    $dir    = optional_param('dir', 'ASC', PARAM_ALPHA);
-
-    $timenow = time();
-
-    // get some useful stuff...
-    if (! $cm = get_coursemodule_from_id('workshop', $id)) {
-        error("Course Module ID was incorrect");
-    }
-    if (! $course = get_record("course", "id", $cm->course)) {
-        error("Course is misconfigured");
-    }
-    if (! $workshop = get_record("workshop", "id", $cm->instance)) {
-        error("Course module is incorrect");
-    }
-
-    require_login($course->id, false, $cm);
-    $context = get_context_instance(CONTEXT_MODULE, $cm->id);
-
-    $strworkshops = get_string("modulenameplural", "workshop");
-    $strworkshop  = get_string("modulename", "workshop");
-
-    // ...and if necessary set default action
-    if (workshop_is_teacher($workshop)) {
-        if (empty($action)) { // no action specified, either go straight to elements page else the admin page
-            // has the assignment any elements
-            if (count_records("workshop_elements", "workshopid", $workshop->id) >= $workshop->nelements) {
-                $action = "teachersview";
-            }
-            else {
-                redirect("assessments.php?action=editelements&id=$cm->id");
-            }
-        }
-    } else { // it's a student then
-        if (!$cm->visible) {
-            notice(get_string("activityiscurrentlyhidden"));
-        }
-        if ($timenow < $workshop->submissionstart) {
-            $action = 'notavailable';
-        } else if (!$action) {
-            if ($timenow < $workshop->assessmentend) {
-                $action = 'studentsview';
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Prints a particular instance of workshop
+ *
+ * You can have a rather longer description of the file as well,
+ * if you like, and it can span multiple lines.
+ *
+ * @package    mod
+ * @subpackage workshop
+ * @copyright  2009 David Mudrak <david.mudrak@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(dirname(dirname(__FILE__))).'/config.php');
+require_once(dirname(__FILE__).'/locallib.php');
+require_once($CFG->libdir.'/completionlib.php');
+
+$id         = optional_param('id', 0, PARAM_INT); // course_module ID, or
+$w          = optional_param('w', 0, PARAM_INT);  // workshop instance ID
+$editmode   = optional_param('editmode', null, PARAM_BOOL);
+
+if ($id) {
+    $cm         = get_coursemodule_from_id('workshop', $id, 0, false, MUST_EXIST);
+    $course     = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+    $workshop   = $DB->get_record('workshop', array('id' => $cm->instance), '*', MUST_EXIST);
+} else {
+    $workshop   = $DB->get_record('workshop', array('id' => $w), '*', MUST_EXIST);
+    $course     = $DB->get_record('course', array('id' => $workshop->course), '*', MUST_EXIST);
+    $cm         = get_coursemodule_from_instance('workshop', $workshop->id, $course->id, false, MUST_EXIST);
+}
+
+require_login($course, true, $cm);
+require_capability('mod/workshop:view', $PAGE->context);
+
+$workshop = new workshop($workshop, $cm, $course);
+$workshop->log('view');
+
+// Mark viewed
+$completion = new completion_info($course);
+$completion->set_module_viewed($cm);
+
+if (!is_null($editmode) && $PAGE->user_allowed_editing()) {
+    $USER->editing = $editmode;
+}
+
+$PAGE->set_url($workshop->view_url());
+$PAGE->set_title($workshop->name);
+$PAGE->set_heading($course->fullname);
+
+$output = $PAGE->get_renderer('mod_workshop');
+$userplan = new workshop_user_plan($workshop, $USER->id);
+
+/// Output starts here
+
+echo $output->header();
+echo $output->heading_with_help(format_string($workshop->name), 'userplan', 'workshop');
+echo $output->render($userplan);
+
+switch ($workshop->phase) {
+case workshop::PHASE_SETUP:
+    if (trim($workshop->intro)) {
+        print_collapsible_region_start('', 'workshop-viewlet-intro', get_string('introduction', 'workshop'));
+        echo $output->box(format_module_intro('workshop', $workshop, $workshop->cm->id), 'generalbox');
+        print_collapsible_region_end();
+    }
+    if ($workshop->useexamples and has_capability('mod/workshop:manageexamples', $PAGE->context)) {
+        print_collapsible_region_start('', 'workshop-viewlet-allexamples', get_string('examplesubmissions', 'workshop'));
+        echo $output->box_start('generalbox examples');
+        if ($workshop->grading_strategy_instance()->form_ready()) {
+            if (! $examples = $workshop->get_examples_for_manager()) {
+                echo $output->container(get_string('noexamples', 'workshop'), 'noexamples');
+            }
+            foreach ($examples as $example) {
+                $summary = $workshop->prepare_example_summary($example);
+                $summary->editable = true;
+                echo $output->render($summary);
+            }
+            $aurl = new moodle_url($workshop->exsubmission_url(0), array('edit' => 'on'));
+            echo $output->single_button($aurl, get_string('exampleadd', 'workshop'), 'get');
             } else {
-                $action = 'displayfinalgrade';
-            }
-        }
-    }
-
-    // ...display header...
-    $navigation = build_navigation($action, $cm);
-    print_header_simple(format_string($workshop->name), "", $navigation,
-                  "", "", true, update_module_button($cm->id, $course->id, $strworkshop), navmenu($course, $cm));
-
-
-    // ...log activity...
-    add_to_log($course->id, "workshop", "view", "view.php?id=$cm->id", $workshop->id, $cm->id);
-
-    if ($action == 'studentsview' and !workshop_is_student($workshop)) {
-        $action = 'showdescription';
+            echo $output->container(get_string('noexamplesformready', 'workshop'));
     }
-
-    /****************** display final grade (for students) ************************************/
-    if ($action == 'displayfinalgrade' ) {
-        require_capability('mod/workshop:participate', $context);
-
-        print_heading("<b><a href=\"view.php?id=$cm->id&amp;action=showdescription\">".
-                get_string("showdescription", 'workshop')."</a></b>");
-        // show the final grades as stored in the tables...
-        if ($submissions = workshop_get_user_submissions($workshop, $USER)) { // any submissions from user?
-            print_heading(get_string("displayoffinalgrades", "workshop"));
-            echo "<div class=\"boxaligncenter\"><table border=\"1\" width=\"90%\"><tr>";
-            echo "<td><b>".get_string("submissions", "workshop")."</b></td>";
-            if ($workshop->wtype) {
-                echo "<td align=\"center\"><b>".get_string("assessmentsdone", "workshop")."</b></td>";
-                echo "<td align=\"center\"><b>".get_string("gradeforassessments", "workshop")."</b></td>";
+        echo $output->box_end();
+        print_collapsible_region_end();
             }
-            echo "<td align=\"center\"><b>".get_string("teacherassessments", "workshop",
-                        $course->teacher)."</b></td>";
-            if ($workshop->wtype) {
-                echo "<td align=\"center\"><b>".get_string("studentassessments", "workshop",
-                        $course->student)."</b></td>";
-            }
-            echo "<td align=\"center\"><b>".get_string("gradeforsubmission", "workshop")."</b></td>";
-            echo "<td align=\"center\"><b>".get_string("overallgrade", "workshop")."</b></td></tr>\n";
-            foreach ($submissions as $submission) {
-                $grade = workshop_submission_grade($workshop, $submission);
-                if ($workshop->wtype) {
-                    $gradinggrade = workshop_gradinggrade($workshop, $USER);
-                } else { // ignore grading grades for simple assignments
-                    $gradinggrade = 0;
-                }
-                echo "<tr><td>".workshop_print_submission_title($workshop, $submission)."</td>\n";
-                if ($workshop->wtype) {
-                    echo "<td align=\"center\">".workshop_print_user_assessments($workshop, $USER, $gradinggrade)."</td>";
-                    echo "<td align=\"center\">$gradinggrade</td>";
-                }
-                echo "<td align=\"center\">".workshop_print_submission_assessments($workshop,
-                            $submission, "teacher")."</td>";
-                if ($workshop->wtype) {
-                    echo "<td align=\"center\">".workshop_print_submission_assessments($workshop,
-                            $submission, "student")."</td>";
-                }
-                echo "<td align=\"center\">$grade</td>";
-                echo "<td align=\"center\">".number_format($gradinggrade + $grade, 1)."</td></tr>\n";
-            }
-            echo "</table></div><br clear=\"all\" />\n";
-            workshop_print_key($workshop);
+    break;
+case workshop::PHASE_SUBMISSION:
+    if (trim($workshop->instructauthors)) {
+        $instructions = file_rewrite_pluginfile_urls($workshop->instructauthors, 'pluginfile.php', $PAGE->context->id,
+            'mod_workshop', 'instructauthors', 0, workshop::instruction_editors_options($PAGE->context));
+        print_collapsible_region_start('', 'workshop-viewlet-instructauthors', get_string('instructauthors', 'workshop'));
+        echo $output->box(format_text($instructions, $workshop->instructauthorsformat, array('overflowdiv'=>true)), array('generalbox', 'instructions'));
+        print_collapsible_region_end();
+    }
+
+    // does the user have to assess examples before submitting their own work?
+    $examplesmust = ($workshop->useexamples and $workshop->examplesmode == workshop::EXAMPLES_BEFORE_SUBMISSION);
+
+    // is the assessment of example submissions considered finished?
+    $examplesdone = has_capability('mod/workshop:manageexamples', $workshop->context);
+    if ($workshop->assessing_examples_allowed()
+            and has_capability('mod/workshop:submit', $workshop->context)
+                    and ! has_capability('mod/workshop:manageexamples', $workshop->context)) {
+        $examples = $userplan->get_examples();
+        $total = count($examples);
+        $left = 0;
+        // make sure the current user has all examples allocated
+        foreach ($examples as $exampleid => $example) {
+            if (is_null($example->assessmentid)) {
+                $examples[$exampleid]->assessmentid = $workshop->add_allocation($example, $USER->id, 0);
+            }
+            if (is_null($example->grade)) {
+                $left++;
+            }
+        }
+        if ($left > 0 and $workshop->examplesmode != workshop::EXAMPLES_VOLUNTARY) {
+            $examplesdone = false;
         } else {
-            print_heading(get_string('nowork', 'workshop'));
+            $examplesdone = true;
         }
-        if ($workshop->showleaguetable) {
-            workshop_print_league_table($workshop);
-        }
-    }
-
-
-    /****************** assignment not available (for students)***********************/
-    elseif ($action == 'notavailable') {
-        print_heading(get_string("notavailable", "workshop"));
-    }
-
-    /****************** student's view could be in 1 of 4 stages ***********************/
-    elseif ($action == 'studentsview') {
-        require_capability('mod/workshop:participate', $context);
-
-        // is a password needed?
-        if ($workshop->usepassword) {
-            $correctpass = false;
-            if (isset($_POST['userpassword'])) {
-                if ($workshop->password == md5(trim($_POST['userpassword']))) {
-                    $USER->workshoploggedin[$workshop->id] = true;
-                    $correctpass = true;
+        print_collapsible_region_start('', 'workshop-viewlet-examples', get_string('exampleassessments', 'workshop'), false, $examplesdone);
+        echo $output->box_start('generalbox exampleassessments');
+        if ($total == 0) {
+            echo $output->heading(get_string('noexamples', 'workshop'), 3);
+        } else {
+            foreach ($examples as $example) {
+                $summary = $workshop->prepare_example_summary($example);
+                echo $output->render($summary);
                 }
-            } elseif (isset($USER->workshoploggedin[$workshop->id])) {
-                $correctpass = true;
             }
-
-            if (!$correctpass) {
-                print_simple_box_start("center");
-                echo "<form id=\"password\" method=\"post\" action=\"view.php\">\n";
-                echo "<input type=\"hidden\" name=\"id\" value=\"$cm->id\" />\n";
-                echo "<table cellpadding=\"7px\">";
-                if (isset($_POST['userpassword'])) {
-                    echo "<tr align=\"center\" style='color:#DF041E;'><td>".get_string("wrongpassword", "workshop").
-                        "</td></tr>";
+        echo $output->box_end();
+        print_collapsible_region_end();
                 }
-                echo "<tr align=\"center\"><td>".get_string("passwordprotectedworkshop", "workshop", format_string($workshop->name)).
-                    "</td></tr>";
-                echo "<tr align=\"center\"><td>".get_string("enterpassword", "workshop").
-                    " <input type=\"password\" name=\"userpassword\" /></td></tr>";
 
-                echo "<tr align=\"center\"><td>";
-                echo "<input type=\"button\" value=\"".get_string("cancel").
-                    "\" onclick=\"parent.location='../../course/view.php?id=$course->id';\">  ";
-                echo "<input type=\"submit\" value=\"".get_string("continue")."\"/>";
-                echo "</td></tr></table></form>";
-                print_simple_box_end();
-                print_footer($course);
-                exit();
+    if (has_capability('mod/workshop:submit', $PAGE->context) and (!$examplesmust or $examplesdone)) {
+        print_collapsible_region_start('', 'workshop-viewlet-ownsubmission', get_string('yoursubmission', 'workshop'));
+        echo $output->box_start('generalbox ownsubmission');
+        if ($submission = $workshop->get_submission_by_author($USER->id)) {
+            echo $output->render($workshop->prepare_submission_summary($submission, true));
+            if ($workshop->modifying_submission_allowed($USER->id)) {
+                $btnurl = new moodle_url($workshop->submission_url(), array('edit' => 'on'));
+                $btntxt = get_string('editsubmission', 'workshop');
             }
-        }
-        workshop_print_assignment_info($workshop);
-
-        // if the student has not yet submitted show the full description
-        if (!record_exists('workshop_submissions', 'workshopid', $workshop->id, 'userid', $USER->id)) {
-            print_box(format_text($workshop->description, $workshop->format), 'generalbox', 'intro');
         } else {
-            print_heading("<b><a href=\"view.php?id=$cm->id&amp;action=showdescription\">".
-                get_string("showdescription", 'workshop')."</a></b>");
-        }
-
-        // in Stage 1? - are there any teacher's submissions? and...
-        // ...has student assessed the required number of the teacher's submissions
-        if ($workshop->ntassessments and (!workshop_test_user_assessments($workshop, $USER))) {
-            print_heading(get_string("pleaseassesstheseexamplesfromtheteacher", "workshop",
-                        $course->teacher));
-            workshop_list_teacher_submissions($workshop, $USER);
-        }
-        // in stage 2? - submit own first attempt
-        else {
-            if ($workshop->ntassessments) {
-                // show assessment of the teacher's examples, there may be feedback from teacher
-                print_heading(get_string("yourassessmentsofexamplesfromtheteacher", "workshop",
-                            $course->teacher));
-                workshop_list_teacher_submissions($workshop, $USER);
-            }
-            // has user submitted anything yet?
-            if (!workshop_get_user_submissions($workshop, $USER)) {
-                if ($timenow < $workshop->submissionend) {
-                    // print upload form
-                    print_heading(get_string("submitassignmentusingform", "workshop").":");
-                    workshop_print_upload_form($workshop);
-                } else {
-                    print_heading(get_string("submissionsnolongerallowed", "workshop"));
-                }
-            }
-            // in stage 3? - grade other student's submissions, resubmit and list all submissions
-            else {
-                // is self assessment used in this workshop?
-                if ($workshop->includeself) {
-                    // prints a table if there are any submissions which have not been self assessed yet
-                    workshop_list_self_assessments($workshop, $USER);
-                }
-                // if peer assessments are being done then show some  to assess...
-                if ($workshop->nsassessments and ($workshop->assessmentstart < $timenow and $workshop->assessmentend > $timenow)) {
-                    workshop_list_student_submissions($workshop, $USER);
-                }
-                // ..and any they have already done (and have gone cold)...
-                if (workshop_count_user_assessments($workshop, $USER, "student")) {
-                    print_heading(get_string("yourassessments", "workshop"));
-                    workshop_list_assessed_submissions($workshop, $USER);
-                }
-                // list any assessments by teachers
-                if (workshop_count_teacher_assessments_by_user($workshop, $USER) and ($timenow > $workshop->releasegrades)) {
-                    print_heading(get_string("assessmentsby", "workshop", $course->teachers));
-                    workshop_list_teacher_assessments_by_user($workshop, $USER);
-                }
-                // ... and show peer assessments
-                if (workshop_count_peer_assessments($workshop, $USER)) {
-                    print_heading(get_string("assessmentsby", "workshop", $course->students));
-                    workshop_list_peer_assessments($workshop, $USER);
-                }
-                // list previous submissions
-                print_heading(get_string("yoursubmissions", "workshop"));
-                workshop_list_user_submissions($workshop, $USER);
-
-                // are resubmissions allowed and the workshop is in submission/assessment phase?
-                if ($workshop->resubmit and ($timenow > $workshop->assessmentstart and $timenow < $workshop->submissionend)) {
-                    // see if there are any cold assessments of the last submission
-                    // if there are then print upload form
-                    if ($submissions = workshop_get_user_submissions($workshop, $USER)) {
-                        foreach ($submissions as $submission) {
-                            $lastsubmission = $submission;
-                            break;
-                        }
-                        $n = 0; // number of cold assessments (not include self assessments)
-                        if ($assessments = workshop_get_assessments($lastsubmission)) {
-                            foreach ($assessments as $assessment) {
-                                if ($assessment->userid <> $USER->id) {
-                                    $n++;
-                                }
-                            }
-                        }
-                        if ($n) {
-                            echo "<hr size=\"1\" noshade=\"noshade\" />";
-                            print_heading(get_string("submitrevisedassignment", "workshop").":");
-                            workshop_print_upload_form($workshop);
-                            echo "<hr size=\"1\" noshade=\"noshade\" />";
-                        }
-                    }
+            echo $output->container(get_string('noyoursubmission', 'workshop'));
+            if ($workshop->creating_submission_allowed($USER->id)) {
+                $btnurl = new moodle_url($workshop->submission_url(), array('edit' => 'on'));
+                $btntxt = get_string('createsubmission', 'workshop');
                 }
             }
+        if (!empty($btnurl)) {
+            echo $output->single_button($btnurl, $btntxt, 'get');
         }
+        echo $output->box_end();
+        print_collapsible_region_end();
     }
 
-
-    /****************** submission of example by teacher only***********************/
-    elseif ($action == 'submitexample') {
-
-        require_capability('mod/workshop:manage', $context);
-
-        // list previous submissions from teacher
-        workshop_list_user_submissions($workshop, $USER);
-
-        echo "<hr size=\"1\" noshade=\"noshade\" />";
-
-        // print upload form
-        print_heading(get_string("submitexampleassignment", "workshop").":");
-        workshop_print_upload_form($workshop);
-
-        print_heading("<a $CFG->frametarget href=\"view.php?id=$cm->id\">".get_string("cancel")."</a>");
-    }
-
-
-    /****************** teacher's view - display admin page  ************/
-    elseif ($action == 'teachersview') {
-
-        require_capability('mod/workshop:manage', $context);
-
-        // automatically grade assessments if workshop has examples and/or peer assessments
-        if ($workshop->gradingstrategy and ($workshop->ntassessments or $workshop->nsassessments)) {
-            workshop_grade_assessments($workshop);
+    if (has_capability('mod/workshop:viewallsubmissions', $PAGE->context)) {
+        $shownames = has_capability('mod/workshop:viewauthornames', $PAGE->context);
+        print_collapsible_region_start('', 'workshop-viewlet-allsubmissions', get_string('allsubmissions', 'workshop'));
+        echo $output->box_start('generalbox allsubmissions');
+        if (! $submissions = $workshop->get_submissions('all')) {
+            echo $output->container(get_string('nosubmissions', 'workshop'), 'nosubmissions');
         }
-
-        $context = get_context_instance(CONTEXT_MODULE, $cm->id);
-
-        /// find out current groups mode
-        $groupmode = groups_get_activity_groupmode($cm);
-        $currentgroup = groups_get_activity_group($cm, true);
-        groups_print_activity_menu($cm, $CFG->wwwroot . "/mod/workshop/view.php?id=$cm->id");
-
-        /// Print admin links
-        echo "<table width=\"100%\"><tr><td>";
-        echo "<a href=\"submissions.php?id=$cm->id&amp;action=adminlist\">".
-            get_string("administration")."</a>\n";
-
-        echo '</td></tr>';
-
-        echo '<tr><td>';
-        workshop_print_assignment_info($workshop);
-        print_heading("<a href=\"view.php?id=$cm->id&amp;action=showdescription\">".
-               get_string("showdescription", 'workshop')."</a>");
-        echo '</td></tr>';
-
-        /// Print grade tables /////////////////////////////////////////////////
-
-        // display the teacher's submissions
-        if ($workshop->ntassessments) {
-            $table->head = array(get_string("examplesubmissions", "workshop"),
-                get_string("assessmentsby", "workshop", $course->teachers),
-                get_string("assessmentsby", "workshop", $course->students));
-            $table->data = array();
-            if ($submissions = workshop_get_teacher_submissions($workshop)) {
                 foreach ($submissions as $submission) {
-                    $teacherassessments = workshop_print_submission_assessments($workshop, $submission, "teacher");
-                    // If not yet assessed, show assess link
-                    if ($teacherassessments == '&nbsp;') {
-                        $teacherassessments = '<a href="assess.php?id='.
-                            $cm->id.'&amp;sid='.$submission->id.'">'.get_string('assess', 'workshop').'</a>';
-                    }
-                    $title = workshop_print_submission_title($workshop, $submission).
-                        " <a href=\"submissions.php?action=editsubmission&amp;id=$cm->id&amp;sid=$submission->id\">".
-                        "<img src=\"$CFG->pixpath/t/edit.gif\" ".
-                        'class="iconsmall" alt="'.get_string('edit').'" /></a>'.
-                        " <a href=\"submissions.php?action=confirmdelete&amp;id=$cm->id&amp;sid=$submission->id\">".
-                        "<img src=\"$CFG->pixpath/t/delete.gif\" ".
-                        'class="iconsmall" alt="'.get_string('delete', 'workshop').'" /></a>';
-                    $table->data[] = array($title, $teacherassessments,
-                        workshop_print_submission_assessments($workshop, $submission, "student"));
+            echo $output->render($workshop->prepare_submission_summary($submission, $shownames));
                 }
-            }
-            // Put in a submission link
-            $table->data[] = array("<b><a href=\"view.php?id=$cm->id&amp;action=submitexample\">".
-                get_string("submitexampleassignment", "workshop")."</a></b>".
-                helpbutton("submissionofexamples", get_string("submitexampleassignment", "workshop"), "workshop", true, false, '', true),
-                '&nbsp;', '&nbsp;');
-            print_table($table);
-            workshop_print_key($workshop);
+        echo $output->box_end();
+        print_collapsible_region_end();
         }
 
-        // Get all the students
-        if (!$users = workshop_get_students($workshop)) {
-            echo ('</table>');
-            print_heading(get_string("nostudentsyet"));
-            print_footer($course);
-            exit;
-        }
+    break;
 
-        if (!empty($CFG->enablegroupings) && !empty($cm->groupingid) && !empty($users)) {
-            $groupingusers = groups_get_grouping_members($cm->groupingid, 'u.id', 'u.id');
-            foreach($users as $key => $user) {
-                if (!isset($groupingusers[$user->id])) {
-                    unset($users[$key]);
-                }
-            }
-        }
+case workshop::PHASE_ASSESSMENT:
 
-        /// Now prepare table with student assessments and submissions
-        $tablesort->data = array();
-        $tablesort->sortdata = array();
-        foreach ($users as $user) {
-            // skip if student not in group
-            if ($currentgroup) {
-                if (!groups_is_member($currentgroup, $user->id)) {
-                    continue;
+    $ownsubmissionexists = null;
+    if (has_capability('mod/workshop:submit', $PAGE->context)) {
+        if ($ownsubmission = $workshop->get_submission_by_author($USER->id)) {
+            print_collapsible_region_start('', 'workshop-viewlet-ownsubmission', get_string('yoursubmission', 'workshop'), false, true);
+            echo $output->box_start('generalbox ownsubmission');
+            echo $output->render($workshop->prepare_submission_summary($ownsubmission, true));
+            $ownsubmissionexists = true;
+        } else {
+            print_collapsible_region_start('', 'workshop-viewlet-ownsubmission', get_string('yoursubmission', 'workshop'));
+            echo $output->box_start('generalbox ownsubmission');
+            echo $output->container(get_string('noyoursubmission', 'workshop'));
+            $ownsubmissionexists = false;
+            if ($workshop->creating_submission_allowed($USER->id)) {
+                $btnurl = new moodle_url($workshop->submission_url(), array('edit' => 'on'));
+                $btntxt = get_string('createsubmission', 'workshop');
+            }
+        }
+        if (!empty($btnurl)) {
+            echo $output->single_button($btnurl, $btntxt, 'get');
+        }
+        echo $output->box_end();
+        print_collapsible_region_end();
+    }
+
+    if (has_capability('mod/workshop:viewallassessments', $PAGE->context)) {
+        $page       = optional_param('page', 0, PARAM_INT);
+        $sortby     = optional_param('sortby', 'lastname', PARAM_ALPHA);
+        $sorthow    = optional_param('sorthow', 'ASC', PARAM_ALPHA);
+        $perpage    = 10;           // todo let the user modify this
+        $groups     = '';           // todo let the user choose the group
+        $PAGE->set_url($PAGE->url, compact('sortby', 'sorthow', 'page')); // TODO: this is suspicious
+        $data = $workshop->prepare_grading_report_data($USER->id, $groups, $page, $perpage, $sortby, $sorthow);
+        if ($data) {
+            $showauthornames    = has_capability('mod/workshop:viewauthornames', $workshop->context);
+            $showreviewernames  = has_capability('mod/workshop:viewreviewernames', $workshop->context);
+
+            // prepare paging bar
+            $pagingbar              = new paging_bar($data->totalcount, $page, $perpage, $PAGE->url, 'page');
+
+            // grading report display options
+            $reportopts                         = new stdclass();
+            $reportopts->showauthornames        = $showauthornames;
+            $reportopts->showreviewernames      = $showreviewernames;
+            $reportopts->sortby                 = $sortby;
+            $reportopts->sorthow                = $sorthow;
+            $reportopts->showsubmissiongrade    = false;
+            $reportopts->showgradinggrade       = false;
+
+            echo $output->render($pagingbar);
+            echo $output->render(new workshop_grading_report($data, $reportopts));
+            echo $output->render($pagingbar);
+        }
+    }
+    if (trim($workshop->instructreviewers)) {
+        $instructions = file_rewrite_pluginfile_urls($workshop->instructreviewers, 'pluginfile.php', $PAGE->context->id,
+            'mod_workshop', 'instructreviewers', 0, workshop::instruction_editors_options($PAGE->context));
+        print_collapsible_region_start('', 'workshop-viewlet-instructreviewers', get_string('instructreviewers', 'workshop'));
+        echo $output->box(format_text($instructions, $workshop->instructreviewersformat, array('overflowdiv'=>true)), array('generalbox', 'instructions'));
+        print_collapsible_region_end();
+    }
+
+    // does the user have to assess examples before assessing other's work?
+    $examplesmust = ($workshop->useexamples and $workshop->examplesmode == workshop::EXAMPLES_BEFORE_ASSESSMENT);
+
+    // is the assessment of example submissions considered finished?
+    $examplesdone = has_capability('mod/workshop:manageexamples', $workshop->context);
+
+    // can the examples be assessed?
+    $examplesavailable = true;
+
+    if (!$examplesdone and $examplesmust and ($ownsubmissionexists === false)) {
+        print_collapsible_region_start('', 'workshop-viewlet-examplesfail', get_string('exampleassessments', 'workshop'));
+        echo $output->box(get_string('exampleneedsubmission', 'workshop'));
+        print_collapsible_region_end();
+        $examplesavailable = false;
+    }
+
+    if ($workshop->assessing_examples_allowed()
+            and has_capability('mod/workshop:submit', $workshop->context)
+                and ! has_capability('mod/workshop:manageexamples', $workshop->context)
+                    and $examplesavailable) {
+        $examples = $userplan->get_examples();
+        $total = count($examples);
+        $left = 0;
+        // make sure the current user has all examples allocated
+        foreach ($examples as $exampleid => $example) {
+            if (is_null($example->assessmentid)) {
+                $examples[$exampleid]->assessmentid = $workshop->add_allocation($example, $USER->id, 0);
+            }
+            if (is_null($example->grade)) {
+                $left++;
+            }
+        }
+        if ($left > 0 and $workshop->examplesmode != workshop::EXAMPLES_VOLUNTARY) {
+            $examplesdone = false;
+        } else {
+            $examplesdone = true;
                 }
+        print_collapsible_region_start('', 'workshop-viewlet-examples', get_string('exampleassessments', 'workshop'), false, $examplesdone);
+        echo $output->box_start('generalbox exampleassessments');
+        if ($total == 0) {
+            echo $output->heading(get_string('noexamples', 'workshop'), 3);
+        } else {
+            foreach ($examples as $example) {
+                $summary = $workshop->prepare_example_summary($example);
+                echo $output->render($summary);
             }
-            if ($submissions = workshop_get_user_submissions($workshop, $user)) {
-                foreach ($submissions as $submission) {
-                    $data = array();
-                    $sortdata = array();
-
-                    $data[] = "<a name=\"userid$user->id\" href=\"{$CFG->wwwroot}/user/view.php?id=$user->id&amp;course=$course->id\">".
-                        fullname($user).'</a>';
-                    $sortdata['firstname'] = $user->firstname;
-                    $sortdata['lastname'] = $user->lastname;
-
-                    if ($workshop->wtype) {
-                        $data[] = workshop_print_user_assessments($workshop, $user, $gradinggrade);
-
-                        $data[] = $gradinggrade;
-                        $sortdata['agrade'] = $gradinggrade;
                     }
-
-                    $data[] = workshop_print_submission_title($workshop, $submission).
-                        " <a href=\"submissions.php?action=adminamendtitle&amp;id=$cm->id&amp;sid=$submission->id\">".
-                        "<img src=\"$CFG->pixpath/t/edit.gif\" ".
-                        'class="iconsmall" alt="'.get_string('amendtitle', 'workshop').'" /></a>'.
-                        " <a href=\"submissions.php?action=confirmdelete&amp;id=$cm->id&amp;sid=$submission->id\">".
-                        "<img src=\"$CFG->pixpath/t/delete.gif\" ".
-                        'class="iconsmall" alt="'.get_string('delete', 'workshop').'" /></a>';
-                    $sortdata['title'] = $submission->title;
-
-                    $data[] = userdate($submission->timecreated, get_string('datestr', 'workshop'));
-                    $sortdata['date'] = $submission->timecreated;
-
-                    if (($tmp = workshop_print_submission_assessments($workshop, $submission, "teacher")) == '&nbsp;') {
-                        $data[] = '<a href="assess.php?id='.
-                            $cm->id.'&amp;sid='.$submission->id.'">'.get_string('assess', 'workshop').'</a>';
-                        $sortdata['tassmnt'] = -1;
+        echo $output->box_end();
+        print_collapsible_region_end();
+    }
+    if (!$examplesmust or $examplesdone) {
+        print_collapsible_region_start('', 'workshop-viewlet-assignedassessments', get_string('assignedassessments', 'workshop'));
+        if (! $assessments = $workshop->get_assessments_by_reviewer($USER->id)) {
+            echo $output->box_start('generalbox assessment-none');
+            echo $output->heading(get_string('assignedassessmentsnone', 'workshop'), 3);
+            echo $output->box_end();
                     } else {
-                        $data[] = $tmp;
-                        $sortdata['tassmnt'] = 1; // GWD still have to fix this
+            $shownames = has_capability('mod/workshop:viewauthornames', $PAGE->context);
+            foreach ($assessments as $assessment) {
+                $submission                     = new stdClass();
+                $submission->id                 = $assessment->submissionid;
+                $submission->title              = $assessment->submissiontitle;
+                $submission->timecreated        = $assessment->submissioncreated;
+                $submission->timemodified       = $assessment->submissionmodified;
+                $submission->authorid           = $assessment->authorid;
+                $submission->authorfirstname    = $assessment->authorfirstname;
+                $submission->authorlastname     = $assessment->authorlastname;
+                $submission->authorpicture      = $assessment->authorpicture;
+                $submission->authorimagealt     = $assessment->authorimagealt;
+                $submission->authoremail        = $assessment->authoremail;
+
+                // transform the submission object into renderable component
+                $submission = $workshop->prepare_submission_summary($submission, $shownames);
+
+                if (is_null($assessment->grade)) {
+                    $submission->status = 'notgraded';
+                    $class = ' notgraded';
+                    $buttontext = get_string('assess', 'workshop');
+                } else {
+                    $submission->status = 'graded';
+                    $class = ' graded';
+                    $buttontext = get_string('reassess', 'workshop');
                     }
 
-                    if ($workshop->wtype) {
-                        $data[] = workshop_print_submission_assessments($workshop, $submission, "student");
+                echo $output->box_start('generalbox assessment-summary' . $class);
+                echo $output->render($submission);
+                $aurl = $workshop->assess_url($assessment->id);
+                echo $output->single_button($aurl, $buttontext, 'get');
+                echo $output->box_end();
                     }
-
-                    $grade = workshop_submission_grade($workshop, $submission);
-                    $data[] = $grade;
-                    $sortdata['sgrade'] = $grade;
-
-                    if ($workshop->wtype) {
-                        $data[] = number_format($gradinggrade + $grade, 1);
-                        $sortdata['ograde'] = $gradinggrade + $grade;
                     }
-
-                    $tablesort->data[] = $data;
-                    $tablesort->sortdata[] = $sortdata;
+        print_collapsible_region_end();
                 }
+    break;
+case workshop::PHASE_EVALUATION:
+    if (has_capability('mod/workshop:viewallassessments', $PAGE->context)) {
+        $page       = optional_param('page', 0, PARAM_INT);
+        $sortby     = optional_param('sortby', 'lastname', PARAM_ALPHA);
+        $sorthow    = optional_param('sorthow', 'ASC', PARAM_ALPHA);
+        $perpage    = 10;           // todo let the user modify this
+        $groups     = '';           // todo let the user choose the group
+        $PAGE->set_url($PAGE->url, compact('sortby', 'sorthow', 'page')); // TODO: this is suspicious
+        $data = $workshop->prepare_grading_report_data($USER->id, $groups, $page, $perpage, $sortby, $sorthow);
+        if ($data) {
+            $showauthornames    = has_capability('mod/workshop:viewauthornames', $workshop->context);
+            $showreviewernames  = has_capability('mod/workshop:viewreviewernames', $workshop->context);
+
+            if (has_capability('mod/workshop:overridegrades', $PAGE->context)) {
+                // load the grading evaluator
+                $evaluator = $workshop->grading_evaluation_instance();
+                $form = $evaluator->get_settings_form(new moodle_url($workshop->aggregate_url(),
+                        compact('sortby', 'sorthow', 'page')));
+                $form->display();
+            }
+
+            // prepare paging bar
+            $pagingbar              = new paging_bar($data->totalcount, $page, $perpage, $PAGE->url, 'page');
+
+            // grading report display options
+            $reportopts                         = new stdclass();
+            $reportopts->showauthornames        = $showauthornames;
+            $reportopts->showreviewernames      = $showreviewernames;
+            $reportopts->sortby                 = $sortby;
+            $reportopts->sorthow                = $sorthow;
+            $reportopts->showsubmissiongrade    = true;
+            $reportopts->showgradinggrade       = true;
+
+            echo $output->render($pagingbar);
+            echo $output->render(new workshop_grading_report($data, $reportopts));
+            echo $output->render($pagingbar);
+        }
+    }
+    if (has_capability('mod/workshop:overridegrades', $workshop->context)) {
+        print_collapsible_region_start('', 'workshop-viewlet-cleargrades', get_string('toolbox', 'workshop'), false, true);
+        echo $output->box_start('generalbox toolbox');
+
+        // Clear aggregated grades
+        $url = new moodle_url($workshop->toolbox_url('clearaggregatedgrades'));
+        $btn = new single_button($url, get_string('clearaggregatedgrades', 'workshop'), 'post');
+        $btn->add_confirm_action(get_string('clearaggregatedgradesconfirm', 'workshop'));
+        echo $output->container_start('toolboxaction');
+        echo $output->render($btn);
+        echo $output->help_icon('clearaggregatedgrades', 'workshop');
+        echo $output->container_end();
+        // Clear assessments
+        $url = new moodle_url($workshop->toolbox_url('clearassessments'));
+        $btn = new single_button($url, get_string('clearassessments', 'workshop'), 'post');
+        $btn->add_confirm_action(get_string('clearassessmentsconfirm', 'workshop'));
+        echo $output->container_start('toolboxaction');
+        echo $output->render($btn);
+        echo $output->help_icon('clearassessments', 'workshop');
+        echo html_writer::empty_tag('img', array('src' => $output->pix_url('i/risk_dataloss'),
+                                                 'title' => get_string('riskdatalossshort', 'admin'),
+                                                 'alt' => get_string('riskdatalossshort', 'admin')));
+        echo $output->container_end();
+
+        echo $output->box_end();
+        print_collapsible_region_end();
+    }
+    if (has_capability('mod/workshop:submit', $PAGE->context)) {
+        print_collapsible_region_start('', 'workshop-viewlet-ownsubmission', get_string('yoursubmission', 'workshop'));
+        echo $output->box_start('generalbox ownsubmission');
+        if ($submission = $workshop->get_submission_by_author($USER->id)) {
+            echo $output->render($workshop->prepare_submission_summary($submission, true));
+        } else {
+            echo $output->container(get_string('noyoursubmission', 'workshop'));
             }
+        echo $output->box_end();
+        print_collapsible_region_end();
         }
-
-        function workshop_sortfunction($a, $b) {
-           global $sort, $dir;
-           if ($dir == 'ASC') {
-               return ($a[$sort] > $b[$sort]);
+    if ($assessments = $workshop->get_assessments_by_reviewer($USER->id)) {
+        print_collapsible_region_start('', 'workshop-viewlet-assignedassessments', get_string('assignedassessments', 'workshop'));
+        $shownames = has_capability('mod/workshop:viewauthornames', $PAGE->context);
+        foreach ($assessments as $assessment) {
+            $submission                     = new stdclass();
+            $submission->id                 = $assessment->submissionid;
+            $submission->title              = $assessment->submissiontitle;
+            $submission->timecreated        = $assessment->submissioncreated;
+            $submission->timemodified       = $assessment->submissionmodified;
+            $submission->authorid           = $assessment->authorid;
+            $submission->authorfirstname    = $assessment->authorfirstname;
+            $submission->authorlastname     = $assessment->authorlastname;
+            $submission->authorpicture      = $assessment->authorpicture;
+            $submission->authorimagealt     = $assessment->authorimagealt;
+            $submission->authoremail        = $assessment->authoremail;
+
+            if (is_null($assessment->grade)) {
+                $class = ' notgraded';
+                $submission->status = 'notgraded';
+                $buttontext = get_string('assess', 'workshop');
            } else {
-               return ($a[$sort] < $b[$sort]);
+                $class = ' graded';
+                $submission->status = 'graded';
+                $buttontext = get_string('reassess', 'workshop');
            }
+            echo $output->box_start('generalbox assessment-summary' . $class);
+            echo $output->render($workshop->prepare_submission_summary($submission, $shownames));
+            echo $output->box_end();
         }
-        uasort($tablesort->sortdata, 'workshop_sortfunction');
-        $table->data = array();
-        foreach($tablesort->sortdata as $key => $row) {
-            $table->data[] = $tablesort->data[$key];
+        print_collapsible_region_end();
         }
-
-        if ($workshop->wtype) {
-            $table->align = array ('left', 'center', 'center', 'left', 'center', 'center', 'center', 'center', 'center', 'center');
-            $columns = array('firstname', 'lastname', 'agrade', 'title', 'date', 'tassmnt', 'sgrade', 'ograde');
+    break;
+case workshop::PHASE_CLOSED:
+    if (has_capability('mod/workshop:viewallassessments', $PAGE->context)) {
+        $page       = optional_param('page', 0, PARAM_INT);
+        $sortby     = optional_param('sortby', 'lastname', PARAM_ALPHA);
+        $sorthow    = optional_param('sorthow', 'ASC', PARAM_ALPHA);
+        $perpage    = 10;           // todo let the user modify this
+        $groups     = '';           // todo let the user choose the group
+        $PAGE->set_url($PAGE->url, compact('sortby', 'sorthow', 'page')); // TODO: this is suspicious
+        $data = $workshop->prepare_grading_report_data($USER->id, $groups, $page, $perpage, $sortby, $sorthow);
+        if ($data) {
+            $showauthornames    = has_capability('mod/workshop:viewauthornames', $workshop->context);
+            $showreviewernames  = has_capability('mod/workshop:viewreviewernames', $workshop->context);
+
+            // prepare paging bar
+            $pagingbar = new paging_bar($data->totalcount, $page, $perpage, $PAGE->url, 'page');
+
+            // grading report display options
+            $reportopts                         = new stdclass();
+            $reportopts->showauthornames        = $showauthornames;
+            $reportopts->showreviewernames      = $showreviewernames;
+            $reportopts->sortby                 = $sortby;
+            $reportopts->sorthow                = $sorthow;
+            $reportopts->showsubmissiongrade    = true;
+            $reportopts->showgradinggrade       = true;
+
+            print_collapsible_region_start('', 'workshop-viewlet-gradereport', get_string('gradesreport', 'workshop'));
+            echo $output->render($pagingbar);
+            echo $output->render(new workshop_grading_report($data, $reportopts));
+            echo $output->render($pagingbar);
+            print_collapsible_region_end();
+        }
+    }
+    if (has_capability('mod/workshop:submit', $PAGE->context)) {
+        print_collapsible_region_start('', 'workshop-viewlet-ownsubmission', get_string('yoursubmission', 'workshop'));
+        echo $output->box_start('generalbox ownsubmission');
+        if ($submission = $workshop->get_submission_by_author($USER->id)) {
+            echo $output->render($workshop->prepare_submission_summary($submission, true));
         } else {
-            $table->align = array ('left', 'left', 'center', 'center', 'center', 'center');
-            $columns = array('firstname', 'lastname', 'title', 'date', 'tassmnt', 'ograde');
+            echo $output->container(get_string('noyoursubmission', 'workshop'));
         }
-        $table->width = "95%";
+        echo $output->box_end();
 
-        foreach ($columns as $column) {
-            $string[$column] = get_string("$column", 'workshop');
-            if ($sort != $column) {
-                $columnicon = '';
-                $columndir = 'ASC';
-            } else {
-                $columndir = $dir == 'ASC' ? 'DESC':'ASC';
-                if ($column == 'lastaccess') {
-                    $columnicon = $dir == 'ASC' ? 'up':'down';
-                } else {
-                    $columnicon = $dir == 'ASC' ? 'down':'up';
+        if (!empty($submission->gradeoverby) and strlen(trim($submission->feedbackauthor)) > 0) {
+            echo $output->render(new workshop_feedback_author($submission));
                 }
-                $columnicon = " <img src=\"$CFG->pixpath/t/$columnicon.gif\" alt=\"$columnicon\" />";
 
+        print_collapsible_region_end();
+    }
+    if (has_capability('mod/workshop:viewpublishedsubmissions', $workshop->context)) {
+        $shownames = has_capability('mod/workshop:viewauthorpublished', $workshop->context);
+        if ($submissions = $workshop->get_published_submissions()) {
+            print_collapsible_region_start('', 'workshop-viewlet-publicsubmissions', get_string('publishedsubmissions', 'workshop'));
+            foreach ($submissions as $submission) {
+                echo $output->box_start('generalbox submission-summary');
+                echo $output->render($workshop->prepare_submission_summary($submission, $shownames));
+                echo $output->box_end();
             }
-            $$column = "<a href=\"view.php?id=$id&amp;sort=$column&amp;dir=$columndir\">".$string[$column]."</a>$columnicon";
+            print_collapsible_region_end();
         }
-
-        if ($workshop->wtype) {
-            $table->head = array ("$firstname / $lastname", get_string("assmnts", "workshop"), $agrade,
-                $title, $date, $tassmnt, get_string('passmnts', 'workshop'), $sgrade, $ograde);
-        } else {
-            $table->head = array ("$firstname / $lastname", $title, $date, $tassmnt, $ograde);
-        }
-
-        echo '<tr><td>';
-        print_table($table);
-        echo '</td></tr>';
-        echo '<tr><td>';
-        workshop_print_key($workshop);
-        echo '</td></tr>';
-
-        // grading grade analysis
-        unset($table);
-        $table->head = array (get_string("count", "workshop"), get_string("mean", "workshop"),
-            get_string("standarddeviation", "workshop"), get_string("maximum", "workshop"),
-            get_string("minimum", "workshop"));
-        $table->align = array ("center", "center", "center", "center", "center");
-        $table->size = array ("*", "*", "*", "*", "*");
-        $table->cellpadding = 2;
-        $table->cellspacing = 0;
-        if ($currentgroup) {
-            $stats = get_record_sql("SELECT COUNT(*) as count, AVG(gradinggrade) AS mean,
-                    STDDEV(gradinggrade) AS stddev, MIN(gradinggrade) AS min, MAX(gradinggrade) AS max
-                    FROM {$CFG->prefix}groups_members g, {$CFG->prefix}workshop_assessments a
-                    WHERE g.groupid = $currentgroup AND a.userid = g.userid AND a.timegraded > 0
-                    AND a.workshopid = $workshop->id");
-        } elseif (!empty($cm->groupingid) && !empty($CFG->enablegroupings)) {
-            $stats = get_record_sql("SELECT COUNT(*) as count, AVG(gradinggrade) AS mean,
-                    STDDEV(gradinggrade) AS stddev, MIN(gradinggrade) AS min, MAX(gradinggrade) AS max
-                    FROM {$CFG->prefix}workshop_assessments a
-                    INNER JOIN {$CFG->prefix}groups_members g ON a.userid = g.userid
-                    INNER JOIN {$CFG->prefix}groupings_groups gg ON g.groupid = gg.groupid
-                    WHERE gg.groupingid = {$cm->groupingid} AND a.timegraded > 0
-                    AND a.workshopid = $workshop->id");
-        } else { // no group/all participants
-            $stats = get_record_sql("SELECT COUNT(*) as count, AVG(gradinggrade) AS mean,
-                    STDDEV(gradinggrade) AS stddev, MIN(gradinggrade) AS min, MAX(gradinggrade) AS max
-                    FROM {$CFG->prefix}workshop_assessments a
-                    WHERE a.timegraded > 0 AND a.workshopid = $workshop->id");
-        }
-        $table->data[] = array($stats->count, number_format($stats->mean * $workshop->gradinggrade / 100, 1),
-                number_format($stats->stddev * $workshop->gradinggrade /100, 1),
-                number_format($stats->max * $workshop->gradinggrade / 100, 1),
-                number_format($stats->min* $workshop->gradinggrade / 100, 1));
-        echo '<tr><td>';
-        print_heading(get_string("gradinggrade", "workshop")." ".get_string("analysis", "workshop"));
-        print_table($table);
-        echo '</td></tr>';
-
-        if ($workshop->showleaguetable and time() > $workshop->assessmentend) {
-            workshop_print_league_table($workshop);
-            if ($workshop->anonymous) {
-                echo "<p>".get_string("namesnotshowntostudents", "workshop", $course->students)."</p>\n";
-            }
-        }
-        echo '</table>';
-    }
-
-
-    /****************** show description  ************/
-    elseif ($action == 'showdescription') {
-        workshop_print_assignment_info($workshop);
-        print_box(format_text($workshop->description, $workshop->format), 'generalbox', 'intro');
-        if (isset($_SERVER["HTTP_REFERER"])) {
-            print_continue(htmlentities($_SERVER["HTTP_REFERER"]));
-        } else {
-            print_continue("$CFG->wwwroot/course/view.php?id=$cm->id");
         }
+    if ($assessments = $workshop->get_assessments_by_reviewer($USER->id)) {
+        print_collapsible_region_start('', 'workshop-viewlet-assignedassessments', get_string('assignedassessments', 'workshop'));
+        $shownames = has_capability('mod/workshop:viewauthornames', $PAGE->context);
+        foreach ($assessments as $assessment) {
+            $submission                     = new stdclass();
+            $submission->id                 = $assessment->submissionid;
+            $submission->title              = $assessment->submissiontitle;
+            $submission->timecreated        = $assessment->submissioncreated;
+            $submission->timemodified       = $assessment->submissionmodified;
+            $submission->authorid           = $assessment->authorid;
+            $submission->authorfirstname    = $assessment->authorfirstname;
+            $submission->authorlastname     = $assessment->authorlastname;
+            $submission->authorpicture      = $assessment->authorpicture;
+            $submission->authorimagealt     = $assessment->authorimagealt;
+            $submission->authoremail        = $assessment->authoremail;
+
+            if (is_null($assessment->grade)) {
+                $class = ' notgraded';
+                $submission->status = 'notgraded';
+                $buttontext = get_string('assess', 'workshop');
+            } else {
+                $class = ' graded';
+                $submission->status = 'graded';
+                $buttontext = get_string('reassess', 'workshop');
     }
+            echo $output->box_start('generalbox assessment-summary' . $class);
+            echo $output->render($workshop->prepare_submission_summary($submission, $shownames));
+            echo $output->box_end();
 
-
-    /****************** teacher's view - list all submissions  ************/
-    elseif ($action == 'allsubmissions') {
-        require_capability('mod/workshop:manage', $context);
-
-        if ($submissions = get_records('workshop_submissions', 'workshopid', $workshop->id)) {
-            foreach($submissions as $submission) {
-                $user = get_record('user', 'id', $submission->userid);
-                print_heading('"'.$submission->title.'" '.get_string('by', 'workshop').' '.fullname($user));
-                workshop_print_submission($workshop, $submission);
-            }
+            if (strlen(trim($assessment->feedbackreviewer)) > 0) {
+                echo $output->render(new workshop_feedback_reviewer($assessment));
         }
     }
-
-
-    /*************** no man's land **************************************/
-    else {
-        error("Fatal Error: Unknown Action: ".$action."\n");
+        print_collapsible_region_end();
     }
+    break;
+default:
+}
 
-
-    print_footer($course);
-
-?>
+echo $output->footer();
