diff --git a/mod/workshop/locallib.php b/mod/workshop/locallib.php
index 3645284..923b83c 100644
--- a/mod/workshop/locallib.php
+++ b/mod/workshop/locallib.php
@@ -1,3093 +1,3190 @@
-<?php  // $Id$
-
-/// Library of extra functions and module workshop 
-
-$WORKSHOP_TYPE = array (0 => get_string('notgraded', 'workshop'),
-                          1 => get_string('accumulative', 'workshop'),
-                          2 => get_string('errorbanded', 'workshop'),
-                          3 => get_string('criterion', 'workshop'),
-                          4 => get_string('rubric', 'workshop') );
-
-$WORKSHOP_SHOWGRADES = array (0 => get_string('dontshowgrades', 'workshop'),
-                          1 => get_string('showgrades', 'workshop') );
-
-$WORKSHOP_SCALES = array( 
-                    0 => array( 'name' => get_string('scaleyes', 'workshop'), 'type' => 'radio', 
-                        'size' => 2, 'start' => get_string('yes'), 'end' => get_string('no')),
-                    1 => array( 'name' => get_string('scalepresent', 'workshop'), 'type' => 'radio', 
-                        'size' => 2, 'start' => get_string('present', 'workshop'), 
-                        'end' => get_string('absent', 'workshop')),
-                    2 => array( 'name' => get_string('scalecorrect', 'workshop'), 'type' => 'radio', 
-                        'size' => 2, 'start' => get_string('correct', 'workshop'), 
-                        'end' => get_string('incorrect', 'workshop')), 
-                    3 => array( 'name' => get_string('scalegood3', 'workshop'), 'type' => 'radio', 
-                        'size' => 3, 'start' => get_string('good', 'workshop'), 
-                        'end' => get_string('poor', 'workshop')), 
-                    4 => array( 'name' => get_string('scaleexcellent4', 'workshop'), 'type' => 'radio', 
-                        'size' => 4, 'start' => get_string('excellent', 'workshop'), 
-                        'end' => get_string('verypoor', 'workshop')),
-                    5 => array( 'name' => get_string('scaleexcellent5', 'workshop'), 'type' => 'radio', 
-                        'size' => 5, 'start' => get_string('excellent', 'workshop'), 
-                        'end' => get_string('verypoor', 'workshop')),
-                    6 => array( 'name' => get_string('scaleexcellent7', 'workshop'), 'type' => 'radio', 
-                        'size' => 7, 'start' => get_string('excellent', 'workshop'), 
-                        'end' => get_string('verypoor', 'workshop')),
-                    7 => array( 'name' => get_string('scale10', 'workshop'), 'type' => 'selection', 
-                        'size' => 10),
-                    8 => array( 'name' => get_string('scale20', 'workshop'), 'type' => 'selection', 
-                            'size' => 20),
-                    9 => array( 'name' => get_string('scale100', 'workshop'), 'type' => 'selection', 
-                            'size' => 100)); 
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-
-/*** Functions for the workshop module ******
-
-workshop_choose_from_menu ($options, $name, $selected="", $nothing="choose", $script="", 
-    $nothingvalue="0", $return=false) {
-
-workshop_compare_assessments($workshop, $assessment1, $assessment2) { ---> in lib.php
-workshop_count_all_submissions_for_assessment($workshop, $user) {
-workshop_count_assessments($submission) { ---> in lib.php
-workshop_count_comments($assessment) {
-workshop_count_peer_assessments($workshop, $user) {
-workshop_count_self_assessments($workshop, $user) {
-workshop_count_student_submissions($workshop) {
-workshop_count_student_submissions_for_assessment($workshop, $user) {
-workshop_count_teacher_assessments($courseid, $submission) {
-workshop_count_teacher_assessments_by_user($workshop, $user) {
-workshop_count_teacher_submissions($workshop) {
-workshop_count_teacher_submissions_for_assessment($workshop, $user) {
-workshop_count_ungraded_assessments($workshop) { --->in lib.php
-workshop_count_ungraded_assessments_student($workshop) {
-workshop_count_ungraded_assessments_teacher($workshop) {
-workshop_count_user_assessments($worshop, $user, $type = "all") { $type is all, student or teacher
-workshop_count_user_submissions($workshop, $user) {
-
-workshop_delete_submitted_files($workshop, $submission) {
-workshop_delete_user_files($workshop, $user, $exception) {
-
-workshop_file_area($workshop, $submission) { ---> in lib.php
-workshop_file_area_name($workshop, $submission) { ---> in lib.php
-
-workshop_get_all_teacher_assessments($workshop) {
-workshop_get_assessments($submission, $all = '') { ---> in lib.php
-workshop_get_comments($assessment) {
-workshop_get_participants($workshopid) {
-workshop_get_student_assessments($workshop, $user) {
-workshop_get_student_submission($workshop, $user) { ---> in lib.php
-workshop_get_student_submission_assessments($workshop) {
-workshop_get_student_submissions($workshop) { ---> in lib.php
-workshop_get_submission_assessment($submission, $user) {
-workshop_get_teacher_assessments($courseid, $submission) {
-workshop_get_teacher_submission_assessments($workshop) {
-workshop_get_teacher_submissions($workshop) {
-workshop_get_ungraded_assessments($workshop) {
-workshop_get_unmailed_assessments($cutofftime) {
-workshop_get_unmailed_marked_assessments($cutofftime) {
-workshop_get_user_assessments($workshop, $user) { ---> in lib.php
-workshop_get_user_submissions($workshop, $user) { ---> in lib.php
-workshop_get_users_done($workshop) {
-
-workshop_grade_assessments($workshop) { ---> in lib.php
-
-workshop_list_all_submissions($workshop) {
-workshop_list_all_ungraded_assessments($workshop) {
-workshop_list_assessed_submissions($workshop, $user) {
-workshop_list_peer_assessments($workshop, $user) {
-workshop_list_student_submissions($workshop, $user) {
-workshop_list_submissions_for_admin($workshop, $order) {
-workshop_list_teacher_assessments_by_user($workshop, $user) {
-workshop_list_teacher_submissions($workshop) {
-workshop_list_unassessed_student_submissions($workshop, $user) {
-workshop_list_unassessed_teacher_submissions($workshop, $user) {
-workshop_list_ungraded_assessments($workshop, $stype) {
-workshop_list_user_submissions($workshop, $user) {
-
-workshop_calculate_phase($workshop, $style='') {
-
-workshop_print_assessment($workshop, $assessment, $allowchanges, $showcommentlinks, $returnto)
-workshop_print_assessments_by_user_for_admin($workshop, $user) {
-workshop_print_assessments_for_admin($workshop, $submission) {
-workshop_print_assignment_info($cm, $workshop) {
-workshop_print_difference($time) {
-workshop_print_feedback($course, $submission) {
-workshop_print_league_table($workshop) {
-workshop_print_submission_assessments($workshop, $submission, $type) {
-workshop_print_submission_title($workshop, $user) {
-workshop_print_time_to_deadline($time) {
-workshop_print_upload_form($workshop) {
-workshop_print_user_assessments($workshop, $user) {
-
-workshop_submission_grade($submission) { ---> in lib.php
-    
-workshop_test_user_assessments($workshop, $user) {
-***************************************/
-
-
-///////////////////////////////////////////////////////////////////////////////
-function workshop_choose_from_menu ($options, $name, $selected="", $nothing="choose", $script="", 
-        $nothingvalue="0", $return=false) {
-/// Given an array of value, creates a popup menu to be part of a form
-/// $options["value"]["label"]
-    
-    if ($nothing == "choose") {
-        $nothing = get_string("choose")."...";
-    }
-
-    if ($script) {
-        $javascript = "onChange=\"$script\"";
-    } else {
-        $javascript = "";
-    }
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Library of internal classes and functions for module workshop
+ *
+ * All the workshop specific functions, needed to implement the module
+ * logic, should go to here. Instead of having bunch of function named
+ * workshop_something() taking the workshop instance as the first
+ * parameter, we use a class workshop that provides all methods.
+ *
+ * @package    mod
+ * @subpackage workshop
+ * @copyright  2009 David Mudrak <david.mudrak@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 
-    $output = "<select name=\"$name\" $javascript>\n";
-    if ($nothing) {
-        $output .= "   <option value=\"$nothingvalue\"\n";
-        if ($nothingvalue == $selected) {
-            $output .= " selected=\"selected\"";
-        }
-        $output .= ">$nothing</option>\n";
-    }
-    if (!empty($options)) {
-        foreach ($options as $value => $label) {
-            $output .= "   <option value=\"$value\"";
-            if ($value == $selected) {
-                $output .= " selected=\"selected\"";
-            }
-            // stop zero label being replaced by array index value
-            // if ($label) {
-            //    $output .= ">$label</option>\n";
-            // } else {
-            //     $output .= ">$value</option>\n";
-            //  }
-            $output .= ">$label</option>\n";
+defined('MOODLE_INTERNAL') || die();
+
+require_once(dirname(__FILE__).'/lib.php');     // we extend this library here
+require_once($CFG->libdir . '/gradelib.php');   // we use some rounding and comparing routines here
+require_once($CFG->libdir . '/filelib.php');
             
-        }
-    }
-    $output .= "</select>\n";
+/**
+ * Full-featured workshop API
+ *
+ * This wraps the workshop database record with a set of methods that are called
+ * from the module itself. The class should be initialized right after you get
+ * $workshop, $cm and $course records at the begining of the script.
+ */
+class workshop {
 
-    if ($return) {
-        return $output;
-    } else {
-        echo $output;
-    }
-}   
+    /** return statuses of {@link add_allocation} to be passed to a workshop renderer method */
+    const ALLOCATION_EXISTS             = -9999;
+    const ALLOCATION_ERROR              = -9998;
 
+    /** the internal code of the workshop phases as are stored in the database */
+    const PHASE_SETUP                   = 10;
+    const PHASE_SUBMISSION              = 20;
+    const PHASE_ASSESSMENT              = 30;
+    const PHASE_EVALUATION              = 40;
+    const PHASE_CLOSED                  = 50;
 
-///////////////////////////////////////////////////////////////////////////////////////////////
-function workshop_copy_assessment($assessment, $submission, $withfeedback = false) {
-    // adds a copy of the given assessment for the submission specified to the workshop_assessments table. 
-    // The grades and optionally the comments are added to the workshop_grades table. Returns the new
-    // assessment object. The owner of the assessment is not changed.
+    /** the internal code of the examples modes as are stored in the database */
+    const EXAMPLES_VOLUNTARY            = 0;
+    const EXAMPLES_BEFORE_SUBMISSION    = 1;
+    const EXAMPLES_BEFORE_ASSESSMENT    = 2;
     
-    $yearfromnow = time() + 365 * 86400;
-    $newassessment->workshopid = $assessment->workshopid;
-    $newassessment->submissionid = $submission->id;
-    $newassessment->userid = $assessment->userid;
-    $newassessment->timecreated = $yearfromnow;
-    $newassessment->grade = $assessment->grade;
-    if ($withfeedback) {
-        $newassessment->generalcomment = addslashes($assessment->generalcomment);
-        $newassessment->teachercomment = addslashes($assessment->teachercomment);
-    }
-    if (!$newassessment->id = insert_record("workshop_assessments", $newassessment)) {
-        error("Copy Assessment: Could not insert workshop assessment!");
-    }
+    /** @var stdclass course module record */
+    public $cm;
+
+    /** @var stdclass course record */
+    public $course;
+
+    /** @var stdclass context object */
+    public $context;
+
+    /** @var int workshop instance identifier */
+    public $id;
+
+    /** @var string workshop activity name */
+    public $name;
+
+    /** @var string introduction or description of the activity */
+    public $intro;
+
+    /** @var int format of the {@link $intro} */
+    public $introformat;
+
+    /** @var string instructions for the submission phase */
+    public $instructauthors;
+
+    /** @var int format of the {@link $instructauthors} */
+    public $instructauthorsformat;
+
+    /** @var string instructions for the assessment phase */
+    public $instructreviewers;
+
+    /** @var int format of the {@link $instructreviewers} */
+    public $instructreviewersformat;
+
+    /** @var int timestamp of when the module was modified */
+    public $timemodified;
+
+    /** @var int current phase of workshop, for example {@link workshop::PHASE_SETUP} */
+    public $phase;
+
+    /** @var bool optional feature: students practise evaluating on example submissions from teacher */
+    public $useexamples;
+
+    /** @var bool optional feature: students perform peer assessment of others' work */
+    public $usepeerassessment;
+
+    /** @var bool optional feature: students perform self assessment of their own work */
+    public $useselfassessment;
+
+    /** @var float number (10, 5) unsigned, the maximum grade for submission */
+    public $grade;
+
+    /** @var float number (10, 5) unsigned, the maximum grade for assessment */
+    public $gradinggrade;
     
-    if ($grades = get_records("workshop_grades", "assessmentid", $assessment->id)) {
-        foreach ($grades as $grade) {
-            unset($grade->id); // clear id, insert record now seems to believe it!
-            if (!$withfeedback) {
-                $grade->feedback = '';
-            }
-            else {
-                $grade->feedback = addslashes($grade->feedback);
-            }
-            $grade->assessmentid = $newassessment->id;
-            if (!$grade->id = insert_record("workshop_grades", $grade)) {
-                error("Copy Assessment: Could not insert workshop grade!");
-            }
-        }
-    }
-    if ($withfeedback) {
-        // remove the slashes from comments as the new assessment record might be used, 
-        // currently this function is only called in upload which does not!
-        $newassessment->generalcomment = stripslashes($assessment->generalcomment);
-        $newassessment->teachercomment = stripslashes($assessment->teachercomment);
-    }
-    return $newassessment;
-}
+    /** @var string type of the current grading strategy used in this workshop, for example 'accumulative' */
+    public $strategy;
+
+    /** @var string the name of the evaluation plugin to use for grading grades calculation */
+    public $evaluation;
 
+    /** @var int number of digits that should be shown after the decimal point when displaying grades */
+    public $gradedecimals;
 
+    /** @var int number of allowed submission attachments and the files embedded into submission */
+    public $nattachments;
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_all_submissions_for_assessment($workshop, $user) {
-    // looks at all submissions and deducts the number which has been assessed by this user
-    $n = 0;
-    if ($submissions = get_records_select("workshop_submissions", "workshopid = $workshop->id AND 
-                timecreated > 0")) {
-        $n =count($submissions);
-        foreach ($submissions as $submission) {
-            $n -= count_records("workshop_assessments", "submissionid", $submission->id, "userid", $user->id);
-            }
-        }
-    return $n;
-    }
+    /** @var bool allow submitting the work after the deadline */
+    public $latesubmissions;
 
+    /** @var int maximum size of the one attached file in bytes */
+    public $maxbytes;
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_comments($assessment) {
-    // Return the number of comments for this assessment provided they are newer than the assessment, 
-   return count_records_select("workshop_comments", "(assessmentid = $assessment->id) AND 
-        timecreated > $assessment->timecreated");
-}
+    /** @var int mode of example submissions support, for example {@link workshop::EXAMPLES_VOLUNTARY} */
+    public $examplesmode;
 
+    /** @var int if greater than 0 then the submission is not allowed before this timestamp */
+    public $submissionstart;
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_peer_assessments($workshop, $user) {
-    // returns the number of assessments made by students on user's submissions
+    /** @var int if greater than 0 then the submission is not allowed after this timestamp */
+    public $submissionend;
     
-    $n = 0;
-    if ($submissions = workshop_get_user_submissions($workshop, $user)) {
-        foreach ($submissions as $submission) {
-            if ($assessments = workshop_get_assessments($submission)) {
-                foreach ($assessments as $assessment) {
-                    // ignore teacher assessments
-                    if (!workshop_is_teacher($workshop, $assessment->userid)) {
-                        $n++;
-                        }
-                    }
-                }
-            }
-        }
-    return $n;
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_self_assessments($workshop, $user) {
-    // returns the number of assessments made by user on their own submissions
-    
-    $n = 0;
-    if ($submissions = workshop_get_user_submissions($workshop, $user)) {
-        foreach ($submissions as $submission) {
-            if ($assessment = get_record_select("workshop_assessments", "userid = $user->id AND 
-                    submissionid = $submission->id")) {
-                $n++;
-                }
-            }
-        }
-    return $n;
-    }
+    /** @var int if greater than 0 then the peer assessment is not allowed before this timestamp */
+    public $assessmentstart;
 
+    /** @var int if greater than 0 then the peer assessment is not allowed after this timestamp */
+    public $assessmentend;
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_student_submissions($workshop) {
-    global $CFG;
+    /**
+     * @var workshop_strategy grading strategy instance
+     * Do not use directly, get the instance using {@link workshop::grading_strategy_instance()}
+     */
+    protected $strategyinstance = null;
 
-    // make sure it works on the site course
-    $select = "s.course = '$workshop->course' AND";
-    if ($workshop->course == SITEID) {
-        $select = '';
-    }
-    if (!$students = workshop_get_students($workshop)) {
-        return 0;
-    }
-    $list = "(";
-    foreach ($students as $student) {
-        $list .= "$student->id,";
-    }
-    $list = rtrim($list, ',').")";
+    /**
+     * @var workshop_evaluation grading evaluation instance
+     * Do not use directly, get the instance using {@link workshop::grading_evaluation_instance()}
+     */
+    protected $evaluationinstance = null;
 
-    return count_records_sql("SELECT count(*) FROM {$CFG->prefix}workshop_submissions s
-                              WHERE $select s.userid IN $list
-                                AND s.workshopid = $workshop->id
-                                AND timecreated > 0");
+    /**
+     * Initializes the workshop API instance using the data from DB
+     *
+     * Makes deep copy of all passed records properties. Replaces integer $course attribute
+     * with a full database record (course should not be stored in instances table anyway).
+     *
+     * @param stdClass $dbrecord Workshop instance data from {workshop} table
+     * @param stdClass $cm       Course module record as returned by {@link get_coursemodule_from_id()}
+     * @param stdClass $course   Course record from {course} table
+     * @param stdClass $context  The context of the workshop instance
+     */
+    public function __construct(stdclass $dbrecord, stdclass $cm, stdclass $course, stdclass $context=null) {
+        foreach ($dbrecord as $field => $value) {
+            if (property_exists('workshop', $field)) {
+                $this->{$field} = $value;
     }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_student_submissions_for_assessment($workshop, $user) {
-    global $CFG;
-
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
     }
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
-        }
-    
-    $timenow = time();
-    if (groupmode($course, $cm) == SEPARATEGROUPS) {
-        $groupid = get_current_group($course->id);
+        $this->cm           = $cm;
+        $this->course       = $course;
+        if (is_null($context)) {
+            $this->context = get_context_instance(CONTEXT_MODULE, $this->cm->id);
     } else {
-        $groupid = 0;
-    }
-    
-    $n = 0;
-    if ($submissions = workshop_get_student_submissions($workshop)) {
-        foreach ($submissions as $submission) {
-            // check group membership, if necessary
-            if ($groupid) {
-                // check user's group
-                if (!groups_is_member($groupid, $submission->userid)) {
-                    continue; // skip this user
-                }
-            }
-            // check if submission is cold
-            if (($submission->timecreated + $CFG->maxeditingtime) > $timenow) {
-                continue; // skip this submission
-            }
-            // has any teacher assessed this submission?
-            if (!workshop_count_teacher_assessments($course->id, $submission)) {
-                $n++;
-            }
-        }
-    }
-    return $n;
-}
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_teacher_assessments($courseid, $submission) {
-// Return count of (cold) teacher assessments of a submission
-    global $CFG;
-    
-    if (!$teachers = workshop_get_teachers($submission->workshopid)) {
-        return 0;
-    }
-    $list = "(";
-    foreach ($teachers as $teacher) {
-        $list .= "$teacher->id,";
-    }
-    $list = rtrim($list, ',').")";
-    $timenow = time();
-    return count_records_sql("SELECT count(*) FROM {$CFG->prefix}workshop_assessments a
-                              WHERE a.userid IN $list
-                                AND a.submissionid = $submission->id
-                                AND $timenow > (a.timecreated + $CFG->maxeditingtime)");
-}
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_teacher_assessments_by_user($workshop, $user) {
-    // returns the number of assessments made by teachers on user's submissions
-    
-    $n = 0;
-    if ($submissions = workshop_get_user_submissions($workshop, $user)) {
-        foreach ($submissions as $submission) {
-            if ($assessments = workshop_get_assessments($submission)) {
-                foreach ($assessments as $assessment) {
-                    // count only teacher assessments
-                    if (workshop_is_teacher($workshop, $assessment->userid)) {
-                        $n++;
-                        }
-                    }
-                }
-            }
-        }
-    return $n;
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_teacher_submissions($workshop) {
-    global $CFG;
-    if (!$teachers = workshop_get_teachers($workshop)) {
-        return 0;
-    }
-    $list = "(";
-    foreach ($teachers as $teacher) {
-        $list .= "$teacher->id,";
-    }
-    $list = rtrim($list, ',').")";
-    $timenow = time();
-    
-    return count_records_sql("SELECT count(*)
-                              FROM {$CFG->prefix}workshop_submissions s
-                              WHERE s.userid IN $list
-                                AND s.workshopid = $workshop->id");
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_teacher_submissions_for_assessment($workshop, $user) {
-
-    $n = 0;
-    if ($submissions = workshop_get_teacher_submissions($workshop)) {
-        $n =count($submissions);
-        foreach ($submissions as $submission) {
-            $n -= count_records("workshop_assessments", "submissionid", $submission->id, "userid", $user->id);
-            }
-        }
-    return $n;
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_ungraded_assessments_student($workshop) {
-    // function returns the number of ungraded assessments by students of STUDENT submissions
-    $n = 0;
-    if ($submissions = workshop_get_student_submissions($workshop)) {
-        foreach ($submissions as $submission) {
-            if ($assessments = workshop_get_assessments($submission)) {
-                foreach ($assessments as $assessment) {
-                    if ($assessment->timegraded == 0) {
-                        // ignore teacher assessments
-                        if (!workshop_is_teacher($workshop, $assessment->userid)) {
-                            $n++;
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    return $n;
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_ungraded_assessments_teacher($workshop) {
-    // function returns the number of ungraded assessments by students of TEACHER submissions
-    global $CFG;
-
-    $timenow = time();
-    $n = 0;
-    if ($submissions = workshop_get_teacher_submissions($workshop)) {
-        foreach ($submissions as $submission) {
-            if ($assessments = workshop_get_assessments($submission)) {
-                foreach ($assessments as $assessment) {
-                    if ($assessment->timegraded == 0) {
-                        // ignore teacher assessments
-                        if (!workshop_is_teacher($workshop, $assessment->userid)) {
-                            // must have created a little time ago
-                            if (($timenow - $assessment->timecreated) > $CFG->maxeditingtime) {
-                                $n++;
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    return $n;
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_user_assessments($workshop, $user, $stype = "all") {
-    // returns the number of assessments allocated/made by a user, all of them, or just those 
-    // for the student or teacher submissions. The student's self assessments are included in the count.
-    // The maxeditingtime is NOT taken into account here also, allocated assessments which have not yet
-    // been done are counted as well
-    
-    $n = 0;
-    if ($assessments = workshop_get_user_assessments($workshop, $user)) {
-         foreach ($assessments as $assessment) {
-            switch ($stype) {
-                case "all" :
-                    $n++;
-                    break;
-                case "student" :
-                     $submission = get_record("workshop_submissions", "id", $assessment->submissionid);
-                    if (workshop_is_student($workshop, $submission->userid)) {
-                        $n++;
-                        }
-                    break;
-                case "teacher" :
-                     $submission = get_record("workshop_submissions", "id", $assessment->submissionid);
-                    if (workshop_is_teacher($workshop, $submission->userid)) {
-                        $n++;
-                        }
-                    break;
-                }
-            }
-        }
-    return $n;
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_user_assessments_done($workshop, $user) {
-    // returns the number of assessments actually done by a user
-    // the student's self assessments are included in the count
-    // the maxeditingtime is NOT taken into account here 
-    
-    $n = 0;
-    $timenow = time();
-    if ($assessments = workshop_get_user_assessments($workshop, $user)) {
-         foreach ($assessments as $assessment) {
-            if ($assessment->timecreated < $timenow) {
-                $n++;
-                }
-            }
-        }
-    return $n;
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_count_user_submissions($workshop, $user) {
-    // returns the number of (real) submissions make by this user
-    return count_records_select("workshop_submissions", "workshopid = $workshop->id AND 
-        userid = $user->id AND timecreated > 0");
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_delete_submitted_files($workshop, $submission) {
-// Deletes the files in the workshop area for this submission
-
-    if ($basedir = workshop_file_area($workshop, $submission)) {
-        if ($files = get_directory_list($basedir)) {
-            foreach ($files as $file) {
-                if (unlink("$basedir/$file")) {
-                    notify("Existing file '$file' has been deleted!");
-                    }
-                else {
-                    notify("Attempt to delete file $basedir/$file has failed!");
-                    }
-                }
-            }
-        }
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_delete_user_files($workshop, $user, $exception) {
-// Deletes all the user files in the workshop area for a user
-// EXCEPT for any file named $exception
-
-    if (!$submissions = workshop_get_submissions($workshop, $user)) {
-        notify("No submissions!");
-        return;
-        }
-    foreach ($submissions as $submission) {
-        if ($basedir = workshop_file_area($workshop, $submission)) {
-            if ($files = get_directory_list($basedir)) {
-                foreach ($files as $file) {
-                    if ($file != $exception) {
-                        unlink("$basedir/$file");
-                        notify("Existing file '$file' has been deleted!");
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_all_teacher_assessments($workshop) {
-// Return all teacher assessments, ordered by timecreated, oldest first
+            $this->context = $context;
+        }
+        $this->evaluation   = 'best';   // todo make this configurable although we have no alternatives yet
+    }
+
+    ////////////////////////////////////////////////////////////////////////////////
+    // Static methods                                                             //
+    ////////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Return list of available allocation methods
+     *
+     * @return array Array ['string' => 'string'] of localized allocation method names
+     */
+    public static function installed_allocators() {
+        $installed = get_plugin_list('workshopallocation');
+        $forms = array();
+        foreach ($installed as $allocation => $allocationpath) {
+            if (file_exists($allocationpath . '/lib.php')) {
+                $forms[$allocation] = get_string('pluginname', 'workshopallocation_' . $allocation);
+            }
+        }
+        // usability - make sure that manual allocation appears the first
+        if (isset($forms['manual'])) {
+            $m = array('manual' => $forms['manual']);
+            unset($forms['manual']);
+            $forms = array_merge($m, $forms);
+        }
+        return $forms;
+    }
+
+    /**
+     * Returns an array of options for the editors that are used for submitting and assessing instructions
+     *
+     * @param stdClass $context
+     * @uses EDITOR_UNLIMITED_FILES hard-coded value for the 'maxfiles' option
+     * @return array
+     */
+    public static function instruction_editors_options(stdclass $context) {
+        return array('subdirs' => 1, 'maxbytes' => 0, 'maxfiles' => -1,
+                     'changeformat' => 1, 'context' => $context, 'noclean' => 1, 'trusttext' => 0);
+    }
+
+    /**
+     * Given the percent and the total, returns the number
+     *
+     * @param float $percent from 0 to 100
+     * @param float $total   the 100% value
+     * @return float
+     */
+    public static function percent_to_value($percent, $total) {
+        if ($percent < 0 or $percent > 100) {
+            throw new coding_exception('The percent can not be less than 0 or higher than 100');
+        }
+
+        return $total * $percent / 100;
+    }
+
+    /**
+     * Returns an array of numeric values that can be used as maximum grades
+     *
+     * @return array Array of integers
+     */
+    public static function available_maxgrades_list() {
+        $grades = array();
+        for ($i=100; $i>=0; $i--) {
+            $grades[$i] = $i;
+        }
+        return $grades;
+    }
+
+    /**
+     * Returns the localized list of supported examples modes
+     *
+     * @return array
+     */
+    public static function available_example_modes_list() {
+        $options = array();
+        $options[self::EXAMPLES_VOLUNTARY]         = get_string('examplesvoluntary', 'workshop');
+        $options[self::EXAMPLES_BEFORE_SUBMISSION] = get_string('examplesbeforesubmission', 'workshop');
+        $options[self::EXAMPLES_BEFORE_ASSESSMENT] = get_string('examplesbeforeassessment', 'workshop');
+        return $options;
+    }
+
+    /**
+     * Returns the list of available grading strategy methods
+     *
+     * @return array ['string' => 'string']
+     */
+    public static function available_strategies_list() {
+        $installed = get_plugin_list('workshopform');
+        $forms = array();
+        foreach ($installed as $strategy => $strategypath) {
+            if (file_exists($strategypath . '/lib.php')) {
+                $forms[$strategy] = get_string('pluginname', 'workshopform_' . $strategy);
+            }
+        }
+        return $forms;
+    }
+
+    /**
+     * Return an array of possible values of assessment dimension weight
+     *
+     * @return array of integers 0, 1, 2, ..., 16
+     */
+    public static function available_dimension_weights_list() {
+        $weights = array();
+        for ($i=16; $i>=0; $i--) {
+            $weights[$i] = $i;
+        }
+        return $weights;
+    }
+
+    /**
+     * Return an array of possible values of assessment weight
+     *
+     * Note there is no real reason why the maximum value here is 16. It used to be 10 in
+     * workshop 1.x and I just decided to use the same number as in the maximum weight of
+     * a single assessment dimension.
+     * The value looks reasonable, though. Teachers who would want to assign themselves
+     * higher weight probably do not want peer assessment really...
+     *
+     * @return array of integers 0, 1, 2, ..., 16
+     */
+    public static function available_assessment_weights_list() {
+        $weights = array();
+        for ($i=16; $i>=0; $i--) {
+            $weights[$i] = $i;
+        }
+        return $weights;
+    }
+
+    /**
+     * Helper function returning the greatest common divisor
+     *
+     * @param int $a
+     * @param int $b
+     * @return int
+     */
+    public static function gcd($a, $b) {
+        return ($b == 0) ? ($a):(self::gcd($b, $a % $b));
+    }
+
+    /**
+     * Helper function returning the least common multiple
+     *
+     * @param int $a
+     * @param int $b
+     * @return int
+     */
+    public static function lcm($a, $b) {
+        return ($a / self::gcd($a,$b)) * $b;
+    }
+
+    /**
+     * Returns an object suitable for strings containing dates/times
+     *
+     * The returned object contains properties date, datefullshort, datetime, ... containing the given
+     * timestamp formatted using strftimedate, strftimedatefullshort, strftimedatetime, ... from the
+     * current lang's langconfig.php
+     * This allows translators and administrators customize the date/time format.
+     *
+     * @param int $timestamp the timestamp in UTC
+     * @return stdclass
+     */
+    public static function timestamp_formats($timestamp) {
+        $formats = array('date', 'datefullshort', 'dateshort', 'datetime',
+                'datetimeshort', 'daydate', 'daydatetime', 'dayshort', 'daytime',
+                'monthyear', 'recent', 'recentfull', 'time');
+        $a = new stdclass();
+        foreach ($formats as $format) {
+            $a->{$format} = userdate($timestamp, get_string('strftime'.$format, 'langconfig'));
+        }
+        $day = userdate($timestamp, '%Y%m%d', 99, false);
+        $today = userdate(time(), '%Y%m%d', 99, false);
+        $tomorrow = userdate(time() + DAYSECS, '%Y%m%d', 99, false);
+        $yesterday = userdate(time() - DAYSECS, '%Y%m%d', 99, false);
+        $distance = (int)round(abs(time() - $timestamp) / DAYSECS);
+        if ($day == $today) {
+            $a->distanceday = get_string('daystoday', 'workshop');
+        } elseif ($day == $yesterday) {
+            $a->distanceday = get_string('daysyesterday', 'workshop');
+        } elseif ($day < $today) {
+            $a->distanceday = get_string('daysago', 'workshop', $distance);
+        } elseif ($day == $tomorrow) {
+            $a->distanceday = get_string('daystomorrow', 'workshop');
+        } elseif ($day > $today) {
+            $a->distanceday = get_string('daysleft', 'workshop', $distance);
+        }
+        return $a;
+    }
+
+    ////////////////////////////////////////////////////////////////////////////////
+    // Workshop API                                                               //
+    ////////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Fetches all users with the capability mod/workshop:submit in the current context
+     *
+     * The returned objects contain id, lastname and firstname properties and are ordered by lastname,firstname
+     *
+     * @todo handle with limits and groups
+     * @param bool $musthavesubmission If true, return only users who have already submitted. All possible authors otherwise.
+     * @return array array[userid] => stdclass{->id ->lastname ->firstname}
+     */
+    public function get_potential_authors($musthavesubmission=true) {
+        $users = get_users_by_capability($this->context, 'mod/workshop:submit',
+                    'u.id,u.lastname,u.firstname', 'u.lastname,u.firstname,u.id', '', '', '', '', false, false, true);
+        if ($musthavesubmission) {
+            $users = array_intersect_key($users, $this->users_with_submission(array_keys($users)));
+        }
+        return $users;
+    }
+
+    /**
+     * Fetches all users with the capability mod/workshop:peerassess in the current context
+     *
+     * The returned objects contain id, lastname and firstname properties and are ordered by lastname,firstname
+     *
+     * @todo handle with limits and groups
+     * @param bool $musthavesubmission If true, return only users who have already submitted. All possible users otherwise.
+     * @return array array[userid] => stdclass{->id ->lastname ->firstname}
+     */
+    public function get_potential_reviewers($musthavesubmission=false) {
+        $users = get_users_by_capability($this->context, 'mod/workshop:peerassess',
+                    'u.id, u.lastname, u.firstname', 'u.lastname,u.firstname,u.id', '', '', '', '', false, false, true);
+        if ($musthavesubmission) {
+            // users without their own submission can not be reviewers
+            $users = array_intersect_key($users, $this->users_with_submission(array_keys($users)));
+        }
+        return $users;
+    }
+
+    /**
+     * Groups the given users by the group membership
+     *
+     * This takes the module grouping settings into account. If "Available for group members only"
+     * is set, returns only groups withing the course module grouping. Always returns group [0] with
+     * all the given users.
+     *
+     * @param array $users array[userid] => stdclass{->id ->lastname ->firstname}
+     * @return array array[groupid][userid] => stdclass{->id ->lastname ->firstname}
+     */
+    public function get_grouped($users) {
+        global $DB;
     global $CFG;
-    if (!$teachers = workshop_get_teachers($workshop)) {
-        return false;
-    }
-    $list = "(";
-    foreach ($teachers as $teacher) {
-        $list .= "$teacher->id,";
-    }
-    $list = rtrim($list, ',').")";
-    
-    return get_records_sql("SELECT a.* FROM {$CFG->prefix}workshop_assessments a
-                            WHERE a.userid IN $list
-                              AND a.workshopid = $workshop->id 
-                            ORDER BY a.timecreated");
-}
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_comments($assessment) {
-    // Return all comments for this assessment provided they are newer than the assessment, 
-    // and ordered oldest first, newest last
-   return get_records_select("workshop_comments", "(assessmentid = $assessment->id) AND 
-        timecreated > $assessment->timecreated",
-        "timecreated DESC");
-}
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_student_assessments($workshop, $user) {
-// Return all assessments on the student submissions by a user, order by youngest first, oldest last
-    global $CFG;
-
-    if (!workshop_is_student($workshop, $user->id)) {
-        return false;
-    }
-
-    return get_records_sql("SELECT a.* FROM {$CFG->prefix}workshop_submissions s, {$CFG->prefix}workshop_assessments a
-                            WHERE s.workshopid = $workshop->id
-                              AND a.submissionid = s.id
-                              AND a.userid = $user->id
-                            ORDER BY a.timecreated DESC");
-}
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_student_submission_assessments($workshop) {
-// Return all assessments on the student submissions, order by youngest first, oldest last
-    global $CFG;
-
-
-    if (!$students = workshop_get_students($workshop)) {
-        return false;
-    }
-    $list = "(";
-    foreach ($students as $student) {
-        $list .= "$student->id,";
-    }
-    $list = rtrim($list, ',').")";
-
-    return get_records_sql("SELECT a.* FROM {$CFG->prefix}workshop_submissions s, {$CFG->prefix}workshop_assessments a
-                            WHERE s.userid IN $list
-                              AND s.workshopid = $workshop->id
-                              AND a.submissionid = s.id
-                              ORDER BY a.timecreated DESC");
-}
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_submission_assessment($submission, $user) {
-    // Return the user's assessment for this submission (cold or warm, not hot)
-    
-    $timenow = time();
-    return get_record_select("workshop_assessments", "submissionid = $submission->id AND 
-            userid = $user->id AND timecreated < $timenow");
-}
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_teacher_assessments($courseid, $submission) {
-// Return teacher assessments of a submission, ordered by timecreated, oldest first
-    global $CFG;
-    
-    if (!$teachers = workshop_get_teachers($submission->workshopid)) {
-        return false;
-    }
-    $list = "(";
-    foreach ($teachers as $teacher) {
-        $list .= "$teacher->id,";
-    }
-    $list = rtrim($list, ',').")";
-    return get_records_sql("SELECT a.* FROM {$CFG->prefix}workshop_assessments a
-                            WHERE a.userid IN $list
-                              AND a.submissionid = $submission->id 
-                            ORDER BY a.timecreated");
-}
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_teacher_submission_assessments($workshop) {
-// Return all assessments on the teacher submissions, order by youngest first, oldest last
-    global $CFG;
-    
-    if (!$teachers = workshop_get_teachers($workshop)) {
-        return false;
-    }
-    $list = "(";
-    foreach ($teachers as $teacher) {
-        $list .= "$teacher->id,";
-    }
-    $list = rtrim($list, ',').")";
-    return get_records_sql("SELECT a.* FROM {$CFG->prefix}workshop_submissions s, {$CFG->prefix}workshop_assessments a
-                            WHERE s.userid IN $list
-                              AND s.workshopid = $workshop->id
-                              AND a.submissionid = s.id
-                            ORDER BY a.timecreated DESC");
-}
-
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_teacher_submissions($workshop) {
-// Return all  teacher submissions, ordered by title
-    global $CFG;
-    
-    if (!$teachers = workshop_get_teachers($workshop)) {
+        $grouped = array();  // grouped users to be returned
+        if (empty($users)) {
+            return $grouped;
+        }
+        if (!empty($CFG->enablegroupmembersonly) and $this->cm->groupmembersonly) {
+            // Available for group members only - the workshop is available only
+            // to users assigned to groups within the selected grouping, or to
+            // any group if no grouping is selected.
+            $groupingid = $this->cm->groupingid;
+            // All users that are members of at least one group will be
+            // added into a virtual group id 0
+            $grouped[0] = array();
+        } else {
+            $groupingid = 0;
+            // there is no need to be member of a group so $grouped[0] will contain
+            // all users
+            $grouped[0] = $users;
+        }
+        $gmemberships = groups_get_all_groups($this->cm->course, array_keys($users), $groupingid,
+                            'gm.id,gm.groupid,gm.userid');
+        foreach ($gmemberships as $gmembership) {
+            if (!isset($grouped[$gmembership->groupid])) {
+                $grouped[$gmembership->groupid] = array();
+            }
+            $grouped[$gmembership->groupid][$gmembership->userid] = $users[$gmembership->userid];
+            $grouped[0][$gmembership->userid] = $users[$gmembership->userid];
+        }
+        return $grouped;
+    }
+
+    /**
+     * Returns the list of all allocations (i.e. assigned assessments) in the workshop
+     *
+     * Assessments of example submissions are ignored
+     *
+     * @return array
+     */
+    public function get_allocations() {
+        global $DB;
+
+        $sql = 'SELECT a.id, a.submissionid, a.reviewerid, s.authorid
+                  FROM {workshop_assessments} a
+            INNER JOIN {workshop_submissions} s ON (a.submissionid = s.id)
+                 WHERE s.example = 0 AND s.workshopid = :workshopid';
+        $params = array('workshopid' => $this->id);
+
+        return $DB->get_records_sql($sql, $params);
+    }
+
+    /**
+     * Returns submissions from this workshop
+     *
+     * Fetches data from {workshop_submissions} and adds some useful information from other
+     * tables. Does not return textual fields to prevent possible memory lack issues.
+     *
+     * @param mixed $authorid int|array|'all' If set to [array of] integer, return submission[s] of the given user[s] only
+     * @return array of records or an empty array
+     */
+    public function get_submissions($authorid='all') {
+        global $DB;
+
+        $authorfields      = user_picture::fields('u', null, 'authoridx', 'author');
+        $gradeoverbyfields = user_picture::fields('t', null, 'gradeoverbyx', 'over');
+        $sql = "SELECT s.id, s.workshopid, s.example, s.authorid, s.timecreated, s.timemodified,
+                       s.title, s.grade, s.gradeover, s.gradeoverby, s.published,
+                       $authorfields, $gradeoverbyfields
+                  FROM {workshop_submissions} s
+            INNER JOIN {user} u ON (s.authorid = u.id)
+             LEFT JOIN {user} t ON (s.gradeoverby = t.id)
+                 WHERE s.example = 0 AND s.workshopid = :workshopid";
+        $params = array('workshopid' => $this->id);
+
+        if ('all' === $authorid) {
+            // no additional conditions
+        } elseif (!empty($authorid)) {
+            list($usql, $uparams) = $DB->get_in_or_equal($authorid, SQL_PARAMS_NAMED);
+            $sql .= " AND authorid $usql";
+            $params = array_merge($params, $uparams);
+        } else {
+            // $authorid is empty
+            return array();
+        }
+        $sql .= " ORDER BY u.lastname, u.firstname";
+
+        return $DB->get_records_sql($sql, $params);
+    }
+
+    /**
+     * Returns a submission record with the author's data
+     *
+     * @param int $id submission id
+     * @return stdclass
+     */
+    public function get_submission_by_id($id) {
+        global $DB;
+
+        // we intentionally check the workshopid here, too, so the workshop can't touch submissions
+        // from other instances
+        $authorfields      = user_picture::fields('u', null, 'authoridx', 'author');
+        $gradeoverbyfields = user_picture::fields('g', null, 'gradeoverbyx', 'gradeoverby');
+        $sql = "SELECT s.*, $authorfields, $gradeoverbyfields
+                  FROM {workshop_submissions} s
+            INNER JOIN {user} u ON (s.authorid = u.id)
+             LEFT JOIN {user} g ON (s.gradeoverby = g.id)
+                 WHERE s.example = 0 AND s.workshopid = :workshopid AND s.id = :id";
+        $params = array('workshopid' => $this->id, 'id' => $id);
+        return $DB->get_record_sql($sql, $params, MUST_EXIST);
+    }
+
+    /**
+     * Returns a submission submitted by the given author
+     *
+     * @param int $id author id
+     * @return stdclass|false
+     */
+    public function get_submission_by_author($authorid) {
+        global $DB;
+
+        if (empty($authorid)) {
         return false;
     }
-    $list = "(";
-    foreach ($teachers as $teacher) {
-        $list .= "$teacher->id,";
-    }
-    $list = rtrim($list, ',').")";
-    return get_records_sql("SELECT s.* FROM {$CFG->prefix}workshop_submissions s
-                            WHERE s.userid IN $list
-                              AND s.workshopid = $workshop->id 
-                            ORDER BY s.title");
-}
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_ungraded_assessments($workshop) {
-    global $CFG;
-    // Return all assessments which have not been graded or just graded
-    $cutofftime = time() - $CFG->maxeditingtime;
-    return get_records_select("workshop_assessments", "workshopid = $workshop->id AND (timegraded = 0 OR 
-                timegraded > $cutofftime)", "timecreated"); 
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_ungraded_assessments_student($workshop) {
-    global $CFG;
-    // Return all assessments which have not been graded or just graded of student's submissions
-
-    $cutofftime = time() - $CFG->maxeditingtime;
-
-    if (!$students = workshop_get_students($workshop)) {
+        $authorfields      = user_picture::fields('u', null, 'authoridx', 'author');
+        $gradeoverbyfields = user_picture::fields('g', null, 'gradeoverbyx', 'gradeoverby');
+        $sql = "SELECT s.*, $authorfields, $gradeoverbyfields
+                  FROM {workshop_submissions} s
+            INNER JOIN {user} u ON (s.authorid = u.id)
+             LEFT JOIN {user} g ON (s.gradeoverby = g.id)
+                 WHERE s.example = 0 AND s.workshopid = :workshopid AND s.authorid = :authorid";
+        $params = array('workshopid' => $this->id, 'authorid' => $authorid);
+        return $DB->get_record_sql($sql, $params);
+    }
+
+    /**
+     * Returns published submissions with their authors data
+     *
+     * @return array of stdclass
+     */
+    public function get_published_submissions($orderby='finalgrade DESC') {
+        global $DB;
+
+        $authorfields = user_picture::fields('u', null, 'authoridx', 'author');
+        $sql = "SELECT s.id, s.authorid, s.timecreated, s.timemodified,
+                       s.title, s.grade, s.gradeover, COALESCE(s.gradeover,s.grade) AS finalgrade,
+                       $authorfields
+                  FROM {workshop_submissions} s
+            INNER JOIN {user} u ON (s.authorid = u.id)
+                 WHERE s.example = 0 AND s.workshopid = :workshopid AND s.published = 1
+              ORDER BY $orderby";
+        $params = array('workshopid' => $this->id);
+        return $DB->get_records_sql($sql, $params);
+    }
+
+    /**
+     * Returns full record of the given example submission
+     *
+     * @param int $id example submission od
+     * @return object
+     */
+    public function get_example_by_id($id) {
+        global $DB;
+        return $DB->get_record('workshop_submissions',
+                array('id' => $id, 'workshopid' => $this->id, 'example' => 1), '*', MUST_EXIST);
+    }
+
+    /**
+     * Returns the list of example submissions in this workshop with reference assessments attached
+     *
+     * @return array of objects or an empty array
+     * @see workshop::prepare_example_summary()
+     */
+    public function get_examples_for_manager() {
+        global $DB;
+
+        $sql = 'SELECT s.id, s.title,
+                       a.id AS assessmentid, a.grade, a.gradinggrade
+                  FROM {workshop_submissions} s
+             LEFT JOIN {workshop_assessments} a ON (a.submissionid = s.id AND a.weight = 1)
+                 WHERE s.example = 1 AND s.workshopid = :workshopid
+              ORDER BY s.title';
+        return $DB->get_records_sql($sql, array('workshopid' => $this->id));
+    }
+
+    /**
+     * Returns the list of all example submissions in this workshop with the information of assessments done by the given user
+     *
+     * @param int $reviewerid user id
+     * @return array of objects, indexed by example submission id
+     * @see workshop::prepare_example_summary()
+     */
+    public function get_examples_for_reviewer($reviewerid) {
+        global $DB;
+
+        if (empty($reviewerid)) {
         return false;
     }
-    $list = "(";
-    foreach ($students as $student) {
-        $list .= "$student->id,";
-    }
-    $list = rtrim($list, ',').")";
-    return get_records_sql("SELECT a.* FROM {$CFG->prefix}workshop_submissions s, {$CFG->prefix}workshop_assessments a
-                            WHERE s.userid IN $list
-                              AND s.workshopid = $workshop->id
-                              AND a.submissionid = s.id
-                              AND (a.timegraded = 0 OR a.timegraded > $cutofftime)
-                              AND a.timecreated < $cutofftime
-                              ORDER BY a.timecreated ASC"); 
+        $sql = 'SELECT s.id, s.title,
+                       a.id AS assessmentid, a.grade, a.gradinggrade
+                  FROM {workshop_submissions} s
+             LEFT JOIN {workshop_assessments} a ON (a.submissionid = s.id AND a.reviewerid = :reviewerid AND a.weight = 0)
+                 WHERE s.example = 1 AND s.workshopid = :workshopid
+              ORDER BY s.title';
+        return $DB->get_records_sql($sql, array('workshopid' => $this->id, 'reviewerid' => $reviewerid));
     }
 
+    /**
+     * Prepares renderable submission component
+     *
+     * @param stdClass $record required by {@see workshop_submission}
+     * @param bool $showauthor show the author-related information
+     * @return workshop_submission
+     */
+    public function prepare_submission(stdClass $record, $showauthor = false) {
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_ungraded_assessments_teacher($workshop) {
-    global $CFG;
-    // Return all assessments which have not been graded or just graded of teacher's submissions
+        $submission         = new workshop_submission($record, $showauthor);
+        $submission->url    = $this->submission_url($record->id);
     
-    $cutofftime =time() - $CFG->maxeditingtime;
-    if (!$teachers = workshop_get_teachers($workshop)) {
-        return false;
+        return $submission;
     }
-    $list = "(";
-    foreach ($teachers as $teacher) {
-        $list .= "$teacher->id,";
-    }
-    $list = rtrim($list, ',').")";
-    return get_records_sql("SELECT a.* FROM {$CFG->prefix}workshop_submissions s, {$CFG->prefix}workshop_assessments a
-                            WHERE s.userid IN $list
-                              AND s.workshopid = $workshop->id
-                              AND a.submissionid = s.id
-                              AND (a.timegraded = 0 OR a.timegraded > $cutofftime)
-                              AND a.timecreated < $cutofftime
-                              ORDER BY a.timecreated ASC"); 
-    }
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_user_assessments_done($workshop, $user) {
-// Return all the  user's assessments, oldest first, newest last (warm and cold ones only)
-// ignores maxeditingtime
-    $timenow = time();
-    return get_records_select("workshop_assessments", "workshopid = $workshop->id AND userid = $user->id
-                AND timecreated < $timenow", 
-                "timecreated ASC");
-}
 
+    /**
+     * Prepares renderable submission summary component
+     *
+     * @param stdClass $record required by {@see workshop_submission_summary}
+     * @param bool $showauthor show the author-related information
+     * @return workshop_submission_summary
+     */
+    public function prepare_submission_summary(stdClass $record, $showauthor = false) {
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_get_users_done($workshop) {
-    global $CFG;
+        $summary        = new workshop_submission_summary($record, $showauthor);
+        $summary->url   = $this->submission_url($record->id);
 
-    // make sure it works on the site course
-    $select = "s.course = '$workshop->course' AND";
-    if ($workshop->course == SITEID) {
-        $select = '';
-    }
-
-    if (!$students = workshop_get_students($workshop)) {
-        return false;
-    }
-    $list = "(";
-    foreach ($students as $student) {
-        $list .= "$student->id,";
-    }
-    $list = rtrim($list, ',').")";
-
-    return get_records_sql("SELECT u.* FROM {$CFG->prefix}user u, {$CFG->prefix}workshop_submissions a
-                            WHERE $select u.user IN $list
-                              AND u.id = a.user AND a.workshop = '$workshop->id'
-                            ORDER BY a.timemodified DESC");
-}
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_all_submissions($workshop, $user) {
-    // list the teacher sublmissions first
-    global $CFG;
-    
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
-    }
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
-        }
-    $table->head = array (get_string("title", "workshop"), get_string("action", "workshop"), 
-                        get_string("comment", "workshop"));
-    $table->align = array ("left", "left", "left");
-    $table->size = array ("*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
-
-    if ($submissions = workshop_get_teacher_submissions($workshop)) {
-        foreach ($submissions as $submission) {
-            if ($submission->userid == $user->id) {
-                $comment = get_string("ownwork", "workshop")."; ";
-                }
-            else {
-                $comment = "";
-                }
-            // has user already assessed this submission
-            if ($assessment = get_record_select("workshop_assessments", "submissionid = $submission->id
-                    AND userid = $user->id")) {
-                $curtime = time();
-                if (($curtime - $assessment->timecreated) > $CFG->maxeditingtime) {
-                    $action = "<a href=\"viewassessment.php?id=$cm->id&amp;aid=$assessment->id\">"
-                        .get_string("view", "workshop")."</a>";
-                    // has teacher graded user's assessment?
-                    if ($assessment->timegraded) {
-                        if (($curtime - $assessment->timegraded) > $CFG->maxeditingtime) {
-                            $comment .= get_string("gradedbyteacher", "workshop", $course->teacher);
-                            }
-                        }
-                    }
-                else { // there's still time left to edit...
-                    $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("edit", "workshop")."</a>";
-                    }
-                }
-            else { // user has not graded this submission
-                $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                    get_string("assess", "workshop")."</a>";
-                }
-            $table->data[] = array(workshop_print_submission_title($workshop, $submission), $action, 
-                                $comment);
-            }
-        print_table($table);
-        }
-
-    echo "<div style=\"text-align:center;\"><p><b>".get_string("studentsubmissions", "workshop", $course->student).
-        "</b></div><br />\n";
-    unset($table);
-    $table->head = array (get_string("title", "workshop"), get_string("action", "workshop"), 
-                        get_string("comment", "workshop"));
-    $table->align = array ("left", "left", "left");
-    $table->size = array ("*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
-
-    if ($submissions = workshop_get_student_submissions($workshop)) {
-        foreach ($submissions as $submission) {
-            if ($submission->userid == $user->id) {
-                $comment = get_string("ownwork", "workshop")."; ";
-                }
-            else {
-                $comment = "";
-                }
-            // has user already assessed this submission
-            if ($assessment = get_record_select("workshop_assessments", "submissionid = $submission->id
-                    AND userid = $user->id")) {
-                $curtime = time();
-                if (($curtime - $assessment->timecreated) > $CFG->maxeditingtime) {
-                    $action = "<a href=\"viewassessment.php?id=$cm->id&amp;aid=$assessment->id\">".
-                        get_string("view", "workshop")."</a>";
-                    // has teacher graded on user's assessment?
-                    if ($assessment->timegraded) {
-                        if (($curtime - $assessment->timegraded) > $CFG->maxeditingtime) {
-                            $comment .= get_string("gradedbyteacher", "workshop", $course->teacher)."; ";
-                            }
-                        }
-                    $otherassessments = workshop_get_assessments($submission);
-                    if (count($otherassessments) > 1) {
-                        $comment .= "<a href=\"assessments.php?action=viewallassessments&amp;id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("viewotherassessments", "workshop")."</a>";
-                        }
-                    }
-                else { // there's still time left to edit...
-                    $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("edit", "workshop")."</a>";
-                    }
-                }
-            else { // user has not assessed this submission
-                $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                    get_string("assess", "workshop")."</a>";
-                }
-            $table->data[] = array(workshop_print_submission_title($workshop, $submission), $action, 
-                                $comment);
-            }
-        print_table($table);
-        }
+        return $summary;
     }
 
+    /**
+     * Prepares renderable example submission component
+     *
+     * @param stdClass $record required by {@see workshop_example_submission}
+     * @return workshop_example_submission
+     */
+    public function prepare_example_submission(stdClass $record) {
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_all_ungraded_assessments($workshop) {
-    // lists all the assessments for comment by teacher
-    global $CFG;
+        $example = new workshop_example_submission($record);
 
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
+        return $example;
     }
     
-    $table->head = array (get_string("title", "workshop"), get_string("timeassessed", "workshop"), get_string("action", "workshop"));
-    $table->align = array ("left", "left", "left");
-    $table->size = array ("*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
-    $timenow = time();
-    
-    if ($assessments = workshop_get_ungraded_assessments($workshop)) {
-        foreach ($assessments as $assessment) {
-            if (!workshop_is_teacher($workshop, $assessment->userid)) {
-                if (($timenow - $assessment->timegraded) < $CFG->maxeditingtime) {
-                    $action = "<a href=\"viewassessment.php?&amp;id=$cm->id&amp;aid=$assessment->id\">".
-                        get_string("edit", "workshop")."</a>";
-                    }
-                else {
-                    $action = "<a href=\"viewassessment.php?&amp;id=$cm->id&amp;aid=$assessment->id\">".
-                        get_string("gradeassessment", "workshop")."</a>";
-                    }
-                $submission = get_record("workshop_submissions", "id", $assessment->submissionid);
-                $table->data[] = array(workshop_print_submission_title($workshop, $submission), 
-                    userdate($assessment->timecreated), $action);
-                }
-            }
-        if (isset($table->data)) {
-            print_table($table);
-            }
-        }
-    }
+    /**
+     * Prepares renderable example submission summary component
+     *
+     * If the example is editable, the caller must set the 'editable' flag explicitly.
+     *
+     * @param stdClass $example as returned by {@link workshop::get_examples_for_manager()} or {@link workshop::get_examples_for_reviewer()}
+     * @return workshop_example_submission_summary to be rendered
+     */
+    public function prepare_example_summary(stdClass $example) {
     
+        $summary = new workshop_example_submission_summary($example);
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_assessed_submissions($workshop, $user) {
-    // list the submissions that have been assessed by this user and are COLD
-    global $CFG, $USER;
-    
-    $timenow = time();
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
-    }
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
-        }
-    $table->head = array (get_string("title","workshop"), get_string("action","workshop"), 
-                    get_string("comment","workshop"));
-    $table->align = array ("left", "left", "left");
-    $table->size = array ("*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
-
-    if ($assessments = workshop_get_student_assessments($workshop, $user)) {
-        foreach ($assessments as $assessment) {
-            $comment = "";
-            $submission = get_record("workshop_submissions", "id", $assessment->submissionid);
-            // the assessment may be in three states: 
-            // 1. "hot", just created but not completed (timecreated is in the future)
-            // 2. "warm" just created and still capable of being edited, and 
-            // 3. "cold" after the editing time
-                
-            if ($assessment->timecreated < ($timenow - $CFG->maxeditingtime)) { // it's cold
-                if ($workshop->agreeassessments) {
-                    if (!$assessment->timeagreed) {
-                        $action = "<a href=\"viewassessment.php?id=$cm->id&amp;aid=$assessment->id&".
-                            "allowcomments=$workshop->agreeassessments\">".
-                            get_string("view", "workshop")."</a>";
-                        $action .= " | <a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                            get_string("reassess", "workshop")."</a>";
+        if (is_null($example->grade)) {
+            $summary->status = 'notgraded';
+            $summary->assesslabel = get_string('assess', 'workshop');
                     } else {
-                        $action = "<a href=\"viewassessment.php?id=$cm->id&amp;aid=$assessment->id&".
-                            "allowcomments=false\">".get_string("view", "workshop")."</a>";
-                    }
-                } else {
-                    // if it been graded allow student to re-assess, except if it's a self assessment
-                    if ($assessment->timegraded and !($USER->id == $assessment->userid)) {
-                        $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                            get_string("reassess", "workshop")."</a>";
-                    } else {
-                        $action = "<a href=\"viewassessment.php?id=$cm->id&amp;aid=$assessment->id\">".
-                            get_string("view", "workshop")."</a>";
-                    }
-                }          
-                if ($assessment->timecreated < $timenow) { // only show the date if it's in the past (future dates cause confusion)
-                    $comment = get_string("assessedon", "workshop", userdate($assessment->timecreated));
-                }
-                else {
-                    $comment = '';
+            $summary->status = 'graded';
+            $summary->assesslabel = get_string('reassess', 'workshop');
                 }
-                if ($submission->userid == $user->id) { // self assessment?
-                    $comment .= "; ".get_string("ownwork", "workshop"); // just in case they don't know!
-                }
-                // has assessment been graded?
-                if ($assessment->timegraded and ($timenow - $assessment->timegraded > $CFG->maxeditingtime)) {
-                    if ($workshop->gradingstrategy) { // supress grading grade if not graded
-                        $comment .= "; ".get_string("thegradeforthisassessmentis", "workshop", 
-                            number_format($assessment->gradinggrade * $workshop->gradinggrade / 100, 0)).
-                            " / $workshop->gradinggrade";
-                    }
-                }
-                // if peer agreements show whether agreement has been reached
-                if ($workshop->agreeassessments) {
-                    if ($assessment->timeagreed) {
-                        $comment .= "; ".get_string("assessmentwasagreedon", "workshop", 
-                                userdate($assessment->timeagreed));
-                    }
-                    else {
-                        $comment .= "; ".get_string("assessmentnotyetagreed", "workshop");
-                    }
-                }
-                $table->data[] = array(workshop_print_submission_title($workshop, $submission), $action, 
-                                    $comment);
-            }
-        }
-    }
-    if (isset($table->data)) {
-        print_table($table);
-    }
-    else {
-        echo "<div style=\"text-align:center;\">".get_string("noassessmentsdone", "workshop")."</div>\n";
-    }
-}
-
 
+        $summary->gradeinfo           = new stdclass();
+        $summary->gradeinfo->received = $this->real_grade($example->grade);
+        $summary->gradeinfo->max      = $this->real_grade(100);
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_peer_assessments($workshop, $user) {
-    global $CFG;
+        $summary->url       = new moodle_url($this->exsubmission_url($example->id));
+        $summary->editurl   = new moodle_url($this->exsubmission_url($example->id), array('edit' => 'on'));
+        $summary->assessurl = new moodle_url($this->exsubmission_url($example->id), array('assess' => 'on', 'sesskey' => sesskey()));
     
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
-    }
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
+        return $summary;
         }
-    $table->head = array (get_string("title", "workshop"), get_string("action", "workshop"), 
-                    get_string("comment", "workshop"));
-    $table->align = array ("left", "left", "left");
-    $table->size = array ("*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
 
-    // get user's submissions
-    if ($submissions = workshop_get_user_submissions($workshop, $user)) {
-        foreach ($submissions as $submission) {
-            // get the assessments
-            if ($assessments = workshop_get_assessments($submission)) {
-                foreach ($assessments as $assessment) {
-                    // assessments by students only and exclude any self assessments
-                    if (workshop_is_student($workshop, $assessment->userid) and 
-                            ($assessment->userid != $user->id)) { 
-                        $timenow = time();
-                        if (($timenow - $assessment->timecreated) > $CFG->maxeditingtime) {
-                            $action = "<a href=\"viewassessment.php?id=$cm->id&amp;aid=$assessment->id&".
-                                "allowcomments=$workshop->agreeassessments\">".
-                                get_string("view", "workshop")."</a>";
-                            $comment = get_string("assessedon", "workshop", userdate($assessment->timecreated));
-                            $grade = number_format($assessment->grade * $workshop->grade / 100, 1);
-                            if ($workshop->gradingstrategy) { // supress grade if not graded
-                                $comment .= "; ".get_string("gradeforsubmission", "workshop").
-                                    ": $grade / $workshop->grade"; 
-                            }
-                            if ($assessment->timegraded) {
-                                if (!$assessment->gradinggrade) {
-                                    // it's a bad assessment
-                                    $comment .= "; ".get_string("thisisadroppedassessment", "workshop");
-                                }
-                            }
-                            if (workshop_is_teacher($workshop, $assessment->userid) and $workshop->teacherweight) {
-                                $comment .= "; ".get_string("thisisadroppedassessment", "workshop");
-                            }
-                            // if peer agreements show whether agreement has been reached
-                            if ($workshop->agreeassessments) {
-                                if ($assessment->timeagreed) {
-                                    $comment .= "; ".get_string("assessmentwasagreedon", "workshop", 
-                                                        userdate($assessment->timeagreed));
-                                    }
-                                else {
-                                    $comment .= "; ".get_string("assessmentnotyetagreed", "workshop");
-                                    }
-                                }
-                            $table->data[] = array(workshop_print_submission_title($workshop, $submission), 
-                                                $action, $comment);
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    if (isset($table->data)) {
-        print_table($table);
-        }
-    else {
-        echo "<div style=\"text-align:center;\">".get_string("noassessmentsdone", "workshop")."</div>\n";
-        }
-    }
+    /**
+     * Prepares renderable assessment component
+     *
+     * The $options array supports the following keys:
+     * showauthor - should the author user info be available for the renderer
+     * showreviewer - should the reviewer user info be available for the renderer
+     * showform - show the assessment form if it is available
+     * showweight - should the assessment weight be available for the renderer
+     *
+     * @param stdClass $record as returned by eg {@link self::get_assessment_by_id()}
+     * @param workshop_assessment_form|null $form as returned by {@link workshop_strategy::get_assessment_form()}
+     * @param array $options
+     * @return workshop_assessment
+     */
+    public function prepare_assessment(stdClass $record, $form, array $options = array()) {
 
+        $assessment             = new workshop_assessment($record, $options);
+        $assessment->url        = $this->assess_url($record->id);
+        $assessment->maxgrade   = $this->real_grade(100);
 
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_self_assessments($workshop, $user) {
-    // list  user's submissions for the user to assess
-    global $CFG;
-    
-    $timenow = time();
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
-    }
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
+        if (!empty($options['showform']) and !($form instanceof workshop_assessment_form)) {
+            debugging('Not a valid instance of workshop_assessment_form supplied', DEBUG_DEVELOPER);
         }
-    $table->head = array (get_string("title", "workshop"), get_string("action", "workshop"), 
-                       get_string("comment", "workshop"));
-    $table->align = array ("left", "left", "left");
-    $table->size = array ("*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
 
-    // get the user's submissions 
-    if ($submissions = workshop_get_user_submissions($workshop, $user)) {
-        foreach ($submissions as $submission) {
-            $comment = get_string("ownwork", "workshop"); // just in case they don't know!
-            if (!$assessment = get_record_select("workshop_assessments", "submissionid = $submission->id AND
-                    userid = $user->id")) {
-                $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                    get_string("assess", "workshop")."</a>";
-                $table->data[] = array(workshop_print_submission_title($workshop, $submission), $action, $comment);
-            } else {
-                // may still be warm
-                if (($assessment->timecreated + $CFG->maxeditingtime) > $timenow) {
-                    $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("reassess", "workshop")."</a>";
-                    $table->data[] = array(workshop_print_submission_title($workshop, $submission), $action, $comment);
-                }
+        if (!empty($options['showform']) and ($form instanceof workshop_assessment_form)) {
+            $assessment->form = $form;
             }
         
+        if (empty($options['showweight'])) {
+            $assessment->weight = null;
         }
-    }
-    if (isset($table->data)) {
-        echo "<p><div style=\"text-align:center;\"><b>".get_string("pleaseassessyoursubmissions", "workshop", $course->student).
-            "</b></div><br />\n";
-        print_table($table);
-    }
-}
-
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_student_submissions($workshop, $user) {
-    // list available submissions for this user to assess, submissions with the least number 
-    // of assessments are show first
-    global $CFG;
-    
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
-    }
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
+        if (!is_null($record->grade)) {
+            $assessment->realgrade = $this->real_grade($record->grade);
         }
 
-    $timenow = time();
-
-    // set student's group if workshop is in SEPARATEGROUPS mode
-    if (groupmode($course, $cm) == SEPARATEGROUPS) {
-        $groupid = get_current_group($course->id);
-    } else {
-        $groupid = 0;
-    }
-    
-    $table->head = array (get_string("title", "workshop"), get_string("action", "workshop"), get_string("comment", "workshop"));
-    $table->align = array ("left", "left", "left");
-    $table->size = array ("*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
-
-    // get the number of assessments this user has done on student submission, deduct self assessments
-    $nassessed = workshop_count_user_assessments($workshop, $user, "student") - 
-        workshop_count_self_assessments($workshop, $user);
-    // user hasn't been allocated enough, try and get some more
-    if ($nassessed < $workshop->nsassessments) {
-        // count the number of assessments for each student submission
-        if ($submissions = workshop_get_student_submissions($workshop)) {
-            // srand ((float)microtime()*1000000); // now done automatically in PHP 4.2.0->
-            foreach ($submissions as $submission) {
-                // check group membership, if necessary
-                if ($groupid) {
-                    // check user's group
-                    if (!groups_is_member($groupid, $submission->userid)) {
-                        continue; // skip this submission
-                  }
-                }
-                // process only cold submissions
-                if (($submission->timecreated + $CFG->maxeditingtime) > $timenow) {
-                    continue;
-                }
-                $n = count_records("workshop_assessments", "submissionid", $submission->id);
-                // ...OK to have zero, we add a small random number to randomise things
-                $nassessments[$submission->id] = $n + rand(0, 98) / 100;
-                }
-                
-            if (isset($nassessments)) { // make sure we end up with something to play with
-                // put the submissions with the lowest number of assessments first
-                asort($nassessments);
-                reset($nassessments);
-                $nsassessments = $workshop->nsassessments;
-                foreach ($nassessments as $submissionid =>$n) {
-                    // only use those submissions which fall below the allocation threshold
-                    if ($n < ($workshop->nsassessments + $workshop->overallocation)) {
-                        $comment = "";
-                        $submission = get_record("workshop_submissions", "id", $submissionid);
-                        // skip submission if it belongs to this user
-                        if ($submission->userid != $user->id) {
-                            // add a "hot" assessment record if user has NOT already assessed this submission
-                            if (!get_record("workshop_assessments", "submissionid", $submission->id, "userid",
-                                        $user->id)) {
-                                $yearfromnow = time() + 365 * 86400;
-                                // ...create one and set timecreated way in the future, this is reset when record is updated
-                                unset($assessment); // clear previous version object (if any)
-                                $assessment->workshopid = $workshop->id;
-                                $assessment->submissionid = $submission->id;
-                                $assessment->userid = $user->id;
-                                $assessment->grade = -1; // set impossible grade
-                                $assessment->timecreated = $yearfromnow;
-                                $assessment->generalcomment = '';
-                                $assessment->teachercomment = '';
-                                if (!$assessment->id = insert_record("workshop_assessments", $assessment)) {
-                                    error("List Student submissions: Could not insert workshop assessment!");
-                                }
-                                $nassessed++;
-                                // is user up to quota?
-                                if ($nassessed == $nsassessments) {
-                                    break;
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    }
-    // now list the student submissions this user has been allocated, list only the hot and warm ones, 
-    // the cold ones are listed in the "your assessments list" (_list_assessed submissions)
-    if ($assessments = workshop_get_user_assessments($workshop, $user)) {
-        $timenow = time();
-        foreach ($assessments as $assessment) {
-            if (!$submission = get_record("workshop_submissions", "id", $assessment->submissionid)) {
-                error ("workshop_list_student_submissions: unable to get submission");
-                }
-            // submission from a student?
-            if (workshop_is_student($workshop, $submission->userid)) {
-                $comment = '';
-                // user assessment has three states: record created but not assessed (date created in the future) [hot]; 
-                // just assessed but still editable [warm]; and "static" (may or may not have been graded by teacher, that
-                // is shown in the comment) [cold] 
-                if ($assessment->timecreated > $timenow) { // user needs to assess this submission
-                    $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("assess", "workshop")."</a>";
-                    $table->data[] = array(workshop_print_submission_title($workshop, $submission), $action, $comment);
-                    }
-                elseif ($assessment->timecreated > ($timenow - $CFG->maxeditingtime)) { // there's still time left to edit...
-                    $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("edit", "workshop")."</a>";
-                    $table->data[] = array(workshop_print_submission_title($workshop, $submission), $action, $comment);
-                    }
-                }
-            }
+        return $assessment;
         }
     
-    if (isset($table->data)) {
-        echo "<p><div style=\"text-align:center;\"><b>".get_string("pleaseassessthesestudentsubmissions", "workshop", $course->student).
-            "</b></div><br />\n";
-        print_table($table);
-        }
-    else {
-        echo "<p><div style=\"text-align:center;\"><b>".get_string("nosubmissionsavailableforassessment", "workshop")."</b></div><br />\n";
-        }
-    }
+    /**
+     * Prepares renderable example submission's assessment component
+     *
+     * The $options array supports the following keys:
+     * showauthor - should the author user info be available for the renderer
+     * showreviewer - should the reviewer user info be available for the renderer
+     * showform - show the assessment form if it is available
+     *
+     * @param stdClass $record as returned by eg {@link self::get_assessment_by_id()}
+     * @param workshop_assessment_form|null $form as returned by {@link workshop_strategy::get_assessment_form()}
+     * @param array $options
+     * @return workshop_example_assessment
+     */
+    public function prepare_example_assessment(stdClass $record, $form = null, array $options = array()) {
 
+        $assessment             = new workshop_example_assessment($record, $options);
+        $assessment->url        = $this->exassess_url($record->id);
+        $assessment->maxgrade   = $this->real_grade(100);
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_submissions_for_admin($workshop, $order) {
-    // list the teacher sublmissions first
-    global $CFG, $USER;
-    
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
-    }
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
-        }
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $course->id)) {
-        error("Course Module ID was incorrect");
+        if (!empty($options['showform']) and !($form instanceof workshop_assessment_form)) {
+            debugging('Not a valid instance of workshop_assessment_form supplied', DEBUG_DEVELOPER);
     }
-    if (groupmode($course, $cm) == SEPARATEGROUPS) {
-        $groupid = get_current_group($course->id);
-    } else {
-        $groupid = 0;
-    }
-    
-    workshop_print_assignment_info($workshop);
 
-    if (workshop_is_teacheredit($workshop)) {
-        // list any teacher submissions
-        $table->head = array (get_string("title", "workshop"), get_string("submittedby", "workshop"), 
-                get_string("action", "workshop"));
-        $table->align = array ("left", "left", "left");
-        $table->size = array ("*", "*", "*");
-        $table->cellpadding = 2;
-        $table->cellspacing = 0;
-
-        if ($submissions = workshop_get_teacher_submissions($workshop)) {
-            foreach ($submissions as $submission) {
-                $action = "<a href=\"submissions.php?action=adminamendtitle&amp;id=$cm->id&amp;sid=$submission->id\">".
-                    get_string("amendtitle", "workshop")."</a>";
-                // has user already assessed this submission
-                if ($assessment = get_record_select("workshop_assessments", "submissionid = $submission->id
-                            AND userid = $USER->id")) {
-                    $curtime = time();
-                if ($assessment->timecreated > $curtime) { // it's a "hanging" assessment 
-                    $action .= " | <a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("assess", "workshop")."</a>";
-                }
-                elseif (($curtime - $assessment->timecreated) > $CFG->maxeditingtime) {
-                    $action .= " | <a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">"
-                        .get_string("reassess", "workshop")."</a>";
-                }
-                else { // there's still time left to edit...
-                    $action .= " | <a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("edit", "workshop")."</a>";
-                }
-            }
-                else { // user has not graded this submission
-                    $action .= " | <a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("assess", "workshop")."</a>";
-                }
-                if ($assessments = workshop_get_assessments($submission)) {
-                    $action .= " | <a href=\"assessments.php?action=adminlist&amp;id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("listassessments", "workshop")."</a>";
-                }
-                if (workshop_is_teacheredit($workshop)) {
-                    $action .= " | <a href=\"submissions.php?action=confirmdelete&amp;id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("delete", "workshop")."</a>";
-                }
-                $table->data[] = array("<a href=\"submissions.php?action=editsubmission&amp;id=$cm->id&amp;sid=$submission->id\">$submission->title</a>", $course->teacher, $action);
-            }
-            print_heading(get_string("studentsubmissions", "workshop", $course->teacher), "center");
-            print_table($table);
-        }
-    }
-
-    // list student assessments
-    // Get all the students...
-    if ($users = workshop_get_students($workshop, "u.lastname, u.firstname")) {
-        $timenow = time();
-        unset($table);
-        $table->head = array(get_string("name"), get_string("title", "workshop"), get_string("action", "workshop"));
-        $table->align = array ("left", "left", "left");
-        $table->size = array ("*", "*", "*");
-        $table->cellpadding = 2;
-        $table->cellspacing = 0;
-        $nassessments = 0;
-        foreach ($users as $user) {
-            // check group membership, if necessary
-            if ($groupid) {
-                // check user's group
-                if (!groups_is_member($groupid, $user->id)) {
-                    continue; // skip this user
-                }
-            }
-            // list the assessments which have been done (exclude the hot ones)
-            if ($assessments = workshop_get_user_assessments_done($workshop, $user)) {
-                $title ='';
-                foreach ($assessments as $assessment) {
-                    if (!$submission = get_record("workshop_submissions", "id", $assessment->submissionid)) {
-                        error("Workshop_list_submissions_for_admin: Submission $assessment->submissionid not found!");
-                    }
-                    $title .= $submission->title;
-                    if ($workshop->agreeassessments and !$assessment->timeagreed and 
-                            workshop_is_student($workshop, $submission->userid)) { // agreements for student work only
-                        $title .= " &lt;&lt;".number_format($assessment->grade * $workshop->grade / 100, 0)." (".
-                            number_format($assessment->gradinggrade * $workshop->gradinggrade / 100, 0).")&gt;&gt; ";
-                    } elseif ($assessment->timegraded) {
-                        if ($assessment->gradinggrade) {
-                            // a good assessment
-                            $title .= " {".number_format($assessment->grade * $workshop->grade / 100, 0)." (".
-                                number_format($assessment->gradinggrade * $workshop->gradinggrade / 100, 0).")} ";
-                        } else { 
-                            // a poor assessment
-                            $title .= " &lt;".number_format($assessment->grade * $workshop->grade / 100, 0)." (".
-                                number_format($assessment->gradinggrade * $workshop->gradinggrade / 100, 0).")&gt; ";
-                        }
-                    } else {
-                        // not yet graded
-                        $title .= " {".number_format($assessment->grade * $workshop->grade / 100, 0)." ((".
-                            number_format($assessment->gradinggrade * $workshop->gradinggrade / 100, 0)."))} ";
-                    }
-                    if ($realassessments = workshop_count_user_assessments_done($workshop, $user)) {
-                        $action = "<a href=\"assessments.php?action=adminlistbystudent&amp;id=$cm->id&amp;userid=$user->id\">".
-                            get_string("liststudentsassessments", "workshop")." ($realassessments)</a>";
-                    } else {
-                        $action ="";
-                    }
-                }
-                $nassessments++;
-                $table->data[] = array(fullname($user), $title, $action);
-            }
-        }
-        if (isset($table->data)) {
-            print_heading(get_string("studentassessments", "workshop", $course->student)." [$nassessments]");
-            print_table($table);
-            workshop_print_key($workshop);
-            // grading grade analysis
-            unset($table);
-            $table->head = array (get_string("count", "workshop"), get_string("mean", "workshop"),
-                get_string("standarddeviation", "workshop"), get_string("maximum", "workshop"), 
-                get_string("minimum", "workshop"));
-            $table->align = array ("center", "center", "center", "center", "center");
-            $table->size = array ("*", "*", "*", "*", "*");
-            $table->cellpadding = 2;
-            $table->cellspacing = 0;
-            if ($groupid) {
-                $stats = get_record_sql("SELECT COUNT(*) as count, AVG(gradinggrade) AS mean, 
-                        STDDEV(gradinggrade) AS stddev, MIN(gradinggrade) AS min, MAX(gradinggrade) AS max 
-                        FROM {$CFG->prefix}groups_members g, {$CFG->prefix}workshop_assessments a 
-                        WHERE g.groupid = $groupid AND a.userid = g.userid AND a.timegraded > 0 
-                        AND a.workshopid = $workshop->id");
-            } else { // no group/all participants
-                $stats = get_record_sql("SELECT COUNT(*) as count, AVG(gradinggrade) AS mean, 
-                        STDDEV(gradinggrade) AS stddev, MIN(gradinggrade) AS min, MAX(gradinggrade) AS max 
-                        FROM {$CFG->prefix}workshop_assessments a 
-                        WHERE a.timegraded > 0 AND a.workshopid = $workshop->id");
-            }   
-            $table->data[] = array($stats->count, number_format($stats->mean * $workshop->gradinggrade / 100, 1), 
-                    number_format($stats->stddev * $workshop->gradinggrade /100, 1), 
-                    number_format($stats->max * $workshop->gradinggrade / 100, 1), 
-                    number_format($stats->min* $workshop->gradinggrade / 100, 1));
-            print_heading(get_string("gradinggrade", "workshop")." ".get_string("analysis", "workshop"));
-            print_table($table);
-            echo "<p style=\"text-align:center\"><a href=\"assessments.php?id=$cm->id&amp;action=regradestudentassessments\">".
-                    get_string("regradestudentassessments", "workshop")."</a> ";
-            helpbutton("regrading", get_string("regradestudentassessments", "workshop"), "workshop");
-            echo "</p>\n";
-        }
-    }
-
-    // now the sudent submissions
-    unset($table);
-    switch ($order) {
-        case "title" :
-            $table->head = array("<a href=\"submissions.php?action=adminlist&amp;id=$cm->id&amp;order=name\">".
-                 get_string("submittedby", "workshop")."</a>", get_string("title", "workshop"), 
-                 get_string("submitted", "workshop"), get_string("action", "workshop"));
-            break;
-        case "name" :
-            $table->head = array (get_string("submittedby", "workshop"), 
-                "<a href=\"submissions.php?action=adminlist&amp;id=$cm->id&amp;order=title\">".
-                get_string("title", "workshop")."</a>", get_string("submitted", "workshop"), 
-                get_string("action", "workshop"));
-            break;
-    }
-    $table->align = array ("left", "left", "left", "left");
-    $table->size = array ("*", "*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
-    
-    $nsubmissions = 0;
-    if ($submissions = workshop_get_student_submissions($workshop, $order)) {
-        foreach ($submissions as $submission) {
-            if (!$user = get_record("user", "id", $submission->userid)) {
-                error("workshop_list_submissions_for_admin: failure to get user record");
-            }
-            // check group membership, if necessary
-            if ($groupid) {
-                // check user's group
-                if (!groups_is_member($groupid, $user->id)) {
-                    continue; // skip this user
-                }
-            }
-            $datesubmitted = userdate($submission->timecreated);
-            if ($submission->late) {
-                $datesubmitted = "<span class=\"redfont\">".$datesubmitted."</span>";
-            }
-            $action = "<a href=\"submissions.php?action=adminamendtitle&amp;id=$cm->id&amp;sid=$submission->id\">".
-                get_string("amendtitle", "workshop")."</a>";
-            // has teacher already assessed this submission
-            if ($assessment = get_record_select("workshop_assessments", "submissionid = $submission->id
-                    AND userid = $USER->id")) {
-                $curtime = time();
-                if (($curtime - $assessment->timecreated) > $CFG->maxeditingtime) {
-                    $action .= " | <a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("reassess", "workshop")."</a>";
-                }
-                else { // there's still time left to edit...
-                    $action .= " | <a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("edit", "workshop")."</a>";
-                }
-            }
-            else { // user has not assessed this submission
-                $action .= " | <a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                    get_string("assess", "workshop")."</a>";
-            }
-            if ($nassessments = workshop_count_assessments($submission)) {
-                $action .= " | <a href=\"assessments.php?action=adminlist&amp;id=$cm->id&amp;sid=$submission->id\">".
-                    get_string("listassessments", "workshop")." ($nassessments)</a>";
-            }
-            if ($submission->late) {
-                $action .= " | <a href=\"submissions.php?action=adminlateflag&amp;id=$cm->id&amp;sid=$submission->id\">".
-                    get_string("clearlateflag", "workshop")."</a>";
-            }
-            $action .= " | <a href=\"submissions.php?action=confirmdelete&amp;id=$cm->id&amp;sid=$submission->id\">".
-                get_string("delete", "workshop")."</a>";
-            $nsubmissions++;
-            $table->data[] = array("$user->firstname $user->lastname", $submission->title.
-                " (".get_string("grade").": ".workshop_submission_grade($workshop, $submission)." ".
-                workshop_print_submission_assessments($workshop, $submission, "teacher").
-                " ".workshop_print_submission_assessments($workshop, $submission, "student").")", $datesubmitted, 
-                $action);
-        }
-        print_heading(get_string("studentsubmissions", "workshop", $course->student)." [$nsubmissions]", "center");
-        print_table($table);
-        workshop_print_key($workshop);
-    }
-}
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_teacher_assessments_by_user($workshop, $user) {
-    global $CFG;
-    
-    $timenow = time();
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
-    }
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
-    }
-
-    $table->head = array (get_string("title", "workshop"), get_string("action", "workshop"), get_string("comment", "workshop"));
-    $table->align = array ("left", "left", "left");
-    $table->size = array ("*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
-
-    // get user's submissions
-    if ($submissions = workshop_get_user_submissions($workshop, $user)) {
-        foreach ($submissions as $submission) {
-            // get the assessments
-            if ($assessments = workshop_get_assessments($submission)) {
-                foreach ($assessments as $assessment) {
-                    if (workshop_is_teacher($workshop, $assessment->userid)) { // assessments by teachers only
-                        $action = "<a href=\"viewassessment.php?id=$cm->id&amp;aid=$assessment->id\">".
-                            get_string("view", "workshop")."</a>";
-                        // has teacher commented on teacher's assessment? shouldn't happen but leave test in
-                        if ($assessment->timegraded and ($timenow - $assessment->timegraded > $CFG->maxeditingtime)) {
-                            $comment = get_string("gradedbyteacher", "workshop", $course->teacher);
-                            }
-                        else {
-                            $comment = userdate($assessment->timecreated);
-                            }
-                        $table->data[] = array(workshop_print_submission_title($workshop, $submission), $action, $comment);
-                        }
-                    }
-                }
+        if (!empty($options['showform']) and ($form instanceof workshop_assessment_form)) {
+            $assessment->form = $form;
             }
-        }
-    if (isset($table->data)) {
-        print_table($table);
-        }
-    else {
-        echo "<div style=\"text-align:center;\">".get_string("noassessmentsdone", "workshop")."</div>\n";
-        }
-    }
-
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_teacher_submissions($workshop, $user) {
-    global $CFG;
-
-    // set threshold on re-assessments
-    $reassessthreshold = 80;
-    
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
-    }
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
-    }
-    $table->head = array (get_string("title", "workshop"), get_string("action", "workshop"), get_string("comment", "workshop"));
-    $table->align = array ("left", "left", "left");
-    $table->size = array ("*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
-
-    // get the number of assessments this user has done
-    $nassessed = count_records_select("workshop_assessments", "workshopid = $workshop->id
-                    AND userid = $user->id");
-    if ($nassessed < $workshop->ntassessments) { 
-        // if user has not assessed enough, set up "future" assessment records for this user for the teacher submissions...
-        // ... first count the number of assessments for each teacher submission...
-        if ($submissions = workshop_get_teacher_submissions($workshop)) {
-            srand ((float)microtime()*1000000); // initialise random number generator
-            foreach ($submissions as $submission) {
-                $n = count_records("workshop_assessments", "submissionid", $submission->id);
-                // ...OK to have zero, we add a small random number to randomise things...
-                $nassessments[$submission->id] = $n + rand(0, 99) / 100;
-            }
-            // ...put the submissions with the lowest number of assessments first...
-            asort($nassessments);
-            reset($nassessments);
-            foreach ($nassessments as $submissionid => $n) { // break out of loop when we allocated enough assessments...
-                $submission = get_record("workshop_submissions", "id", $submissionid);
-                // ... provided the user has NOT already assessed that submission...
-                if (!get_record("workshop_assessments", "submissionid", $submission->id, "userid",
-                                    $user->id)) {
-                    $yearfromnow = time() + 365 * 86400;
-                    // ...create one and set timecreated way in the future, this is reset when record is updated
-                    unset($assessment); // clear previous version of object (if any)
-                    $assessment->workshopid = $workshop->id;
-                    $assessment->submissionid = $submission->id;
-                    $assessment->userid = $user->id;
-                    $assessment->grade = -1; // set impossible grade
-                    $assessment->timecreated = $yearfromnow;
-                    $assessment->generalcomment = '';
-                    $assessment->teachercomment = '';
-                    if (!$assessment->id = insert_record("workshop_assessments", $assessment)) {
-                        error("Could not insert workshop assessment!");
-                    }
-                    $nassessed++;
-                    if ($nassessed >= $workshop->ntassessments) {
-                        break;
-                    }
-                }
-            }
-        }
-    }
-    // now list user's assessments (but only list those which come from teacher submissions)
-    if ($assessments = workshop_get_user_assessments($workshop, $user)) {
-        $timenow = time();
-        foreach ($assessments as $assessment) {
-            if (!$submission = get_record("workshop_submissions", "id", $assessment->submissionid)) {
-                error ("workshop_list_teacher_submissions: unable to get submission");
-            }
-            // submission from a teacher?
-            if (workshop_is_teacher($workshop, $submission->userid)) {
-                $comment = '';
-                // user assessment has two states: record created but not assessed (date created in the future); 
-                // assessed but always available for re-assessment 
-                if ($assessment->timecreated > $timenow) { // user needs to assess this submission
-                    $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("assess", "workshop")."</a>";
-                }
-                elseif ($assessment->timegraded and ($assessment->gradinggrade < $reassessthreshold)) { 
-                    // allow student to improve on their assessment once it's been graded and is below threshold
-                    $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("reassess", "workshop")."</a>";
-                } else {
-                    // allow student  just to see their assessment if it hasn't been graded (or above threshold)
-                    $action = "<a href=\"viewassessment.php?id=$cm->id&amp;aid=$assessment->id\">".
-                        get_string("view", "workshop")."</a>";
-                }
-                // see if the assessment is graded
-                if ($assessment->timegraded) {
-                    // show grading grade (supressed if workshop not graded)
-                    if ($workshop->gradingstrategy) {
-                        $comment = get_string("thegradeforthisassessmentis", "workshop", 
-                            number_format($assessment->gradinggrade * $workshop->gradinggrade / 100, 1))." / ".
-                            $workshop->gradinggrade;
-                    }
-                } elseif ($assessment->timecreated < $timenow) {
-                    $comment = get_string("awaitinggradingbyteacher", "workshop", $course->teacher);
-                }
-                $table->data[] = array(workshop_print_submission_title($workshop, $submission), $action, $comment);
-            }
-        }
-    }
-    print_table($table);
-}
 
+        if (!is_null($record->grade)) {
+            $assessment->realgrade = $this->real_grade($record->grade);
+        }
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_unassessed_student_submissions($workshop, $user) {
-    // list the student submissions not assessed by this user
-    global $CFG;
+        $assessment->weight = null;
     
-    $timenow = time();
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
+        return $assessment;
     }
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
+
+    /**
+     * Prepares renderable example submission's reference assessment component
+     *
+     * The $options array supports the following keys:
+     * showauthor - should the author user info be available for the renderer
+     * showreviewer - should the reviewer user info be available for the renderer
+     * showform - show the assessment form if it is available
+     *
+     * @param stdClass $record as returned by eg {@link self::get_assessment_by_id()}
+     * @param workshop_assessment_form|null $form as returned by {@link workshop_strategy::get_assessment_form()}
+     * @param array $options
+     * @return workshop_example_reference_assessment
+     */
+    public function prepare_example_reference_assessment(stdClass $record, $form = null, array $options = array()) {
+
+        $assessment             = new workshop_example_reference_assessment($record, $options);
+        $assessment->maxgrade   = $this->real_grade(100);
+
+        if (!empty($options['showform']) and !($form instanceof workshop_assessment_form)) {
+            debugging('Not a valid instance of workshop_assessment_form supplied', DEBUG_DEVELOPER);
+        }
+
+        if (!empty($options['showform']) and ($form instanceof workshop_assessment_form)) {
+            $assessment->form = $form;
+        }
+
+        if (!is_null($record->grade)) {
+            $assessment->realgrade = $this->real_grade($record->grade);
+        }
+
+        $assessment->weight = null;
+
+        return $assessment;
+    }
+
+    /**
+     * Removes the submission and all relevant data
+     *
+     * @param stdClass $submission record to delete
+     * @return void
+     */
+    public function delete_submission(stdclass $submission) {
+        global $DB;
+        $assessments = $DB->get_records('workshop_assessments', array('submissionid' => $submission->id), '', 'id');
+        $this->delete_assessment(array_keys($assessments));
+        $DB->delete_records('workshop_submissions', array('id' => $submission->id));
+    }
+
+    /**
+     * Returns the list of all assessments in the workshop with some data added
+     *
+     * Fetches data from {workshop_assessments} and adds some useful information from other
+     * tables. The returned object does not contain textual fields (i.e. comments) to prevent memory
+     * lack issues.
+     *
+     * @return array [assessmentid] => assessment stdclass
+     */
+    public function get_all_assessments() {
+        global $DB;
+
+        $reviewerfields = user_picture::fields('reviewer', null, 'revieweridx', 'reviewer');
+        $authorfields   = user_picture::fields('author', null, 'authorid', 'author');
+        $overbyfields   = user_picture::fields('overby', null, 'gradinggradeoverbyx', 'overby');
+        $sql = "SELECT a.id, a.submissionid, a.reviewerid, a.timecreated, a.timemodified,
+                       a.grade, a.gradinggrade, a.gradinggradeover, a.gradinggradeoverby,
+                       $reviewerfields, $authorfields, $overbyfields,
+                       s.title
+                  FROM {workshop_assessments} a
+            INNER JOIN {user} reviewer ON (a.reviewerid = reviewer.id)
+            INNER JOIN {workshop_submissions} s ON (a.submissionid = s.id)
+            INNER JOIN {user} author ON (s.authorid = author.id)
+             LEFT JOIN {user} overby ON (a.gradinggradeoverby = overby.id)
+                 WHERE s.workshopid = :workshopid AND s.example = 0
+              ORDER BY reviewer.lastname, reviewer.firstname";
+        $params = array('workshopid' => $this->id);
+
+        return $DB->get_records_sql($sql, $params);
+    }
+
+    /**
+     * Get the complete information about the given assessment
+     *
+     * @param int $id Assessment ID
+     * @return stdclass
+     */
+    public function get_assessment_by_id($id) {
+        global $DB;
+
+        $reviewerfields = user_picture::fields('reviewer', null, 'revieweridx', 'reviewer');
+        $authorfields   = user_picture::fields('author', null, 'authorid', 'author');
+        $overbyfields   = user_picture::fields('overby', null, 'gradinggradeoverbyx', 'overby');
+        $sql = "SELECT a.*, s.title, $reviewerfields, $authorfields, $overbyfields
+                  FROM {workshop_assessments} a
+            INNER JOIN {user} reviewer ON (a.reviewerid = reviewer.id)
+            INNER JOIN {workshop_submissions} s ON (a.submissionid = s.id)
+            INNER JOIN {user} author ON (s.authorid = author.id)
+             LEFT JOIN {user} overby ON (a.gradinggradeoverby = overby.id)
+                 WHERE a.id = :id AND s.workshopid = :workshopid";
+        $params = array('id' => $id, 'workshopid' => $this->id);
+
+        return $DB->get_record_sql($sql, $params, MUST_EXIST);
+    }
+
+    /**
+     * Get the complete information about the user's assessment of the given submission
+     *
+     * @param int $sid submission ID
+     * @param int $uid user ID of the reviewer
+     * @return false|stdclass false if not found, stdclass otherwise
+     */
+    public function get_assessment_of_submission_by_user($submissionid, $reviewerid) {
+        global $DB;
+
+        $reviewerfields = user_picture::fields('reviewer', null, 'revieweridx', 'reviewer');
+        $authorfields   = user_picture::fields('author', null, 'authorid', 'author');
+        $overbyfields   = user_picture::fields('overby', null, 'gradinggradeoverbyx', 'overby');
+        $sql = "SELECT a.*, s.title, $reviewerfields, $authorfields, $overbyfields
+                  FROM {workshop_assessments} a
+            INNER JOIN {user} reviewer ON (a.reviewerid = reviewer.id)
+            INNER JOIN {workshop_submissions} s ON (a.submissionid = s.id AND s.example = 0)
+            INNER JOIN {user} author ON (s.authorid = author.id)
+             LEFT JOIN {user} overby ON (a.gradinggradeoverby = overby.id)
+                 WHERE s.id = :sid AND reviewer.id = :rid AND s.workshopid = :workshopid";
+        $params = array('sid' => $submissionid, 'rid' => $reviewerid, 'workshopid' => $this->id);
+
+        return $DB->get_record_sql($sql, $params, IGNORE_MISSING);
+    }
+
+    /**
+     * Get the complete information about all assessments of the given submission
+     *
+     * @param int $submissionid
+     * @return array
+     */
+    public function get_assessments_of_submission($submissionid) {
+        global $DB;
+
+        $reviewerfields = user_picture::fields('reviewer', null, 'revieweridx', 'reviewer');
+        $overbyfields   = user_picture::fields('overby', null, 'gradinggradeoverbyx', 'overby');
+        $sql = "SELECT a.*, s.title, $reviewerfields, $overbyfields
+                  FROM {workshop_assessments} a
+            INNER JOIN {user} reviewer ON (a.reviewerid = reviewer.id)
+            INNER JOIN {workshop_submissions} s ON (a.submissionid = s.id)
+             LEFT JOIN {user} overby ON (a.gradinggradeoverby = overby.id)
+                 WHERE s.example = 0 AND s.id = :submissionid AND s.workshopid = :workshopid
+              ORDER BY reviewer.lastname, reviewer.firstname, reviewer.id";
+        $params = array('submissionid' => $submissionid, 'workshopid' => $this->id);
+
+        return $DB->get_records_sql($sql, $params);
+    }
+
+    /**
+     * Get the complete information about all assessments allocated to the given reviewer
+     *
+     * @param int $reviewerid
+     * @return array
+     */
+    public function get_assessments_by_reviewer($reviewerid) {
+        global $DB;
+
+        $reviewerfields = user_picture::fields('reviewer', null, 'revieweridx', 'reviewer');
+        $authorfields   = user_picture::fields('author', null, 'authorid', 'author');
+        $overbyfields   = user_picture::fields('overby', null, 'gradinggradeoverbyx', 'overby');
+        $sql = "SELECT a.*, $reviewerfields, $authorfields, $overbyfields,
+                       s.id AS submissionid, s.title AS submissiontitle, s.timecreated AS submissioncreated,
+                       s.timemodified AS submissionmodified
+                  FROM {workshop_assessments} a
+            INNER JOIN {user} reviewer ON (a.reviewerid = reviewer.id)
+            INNER JOIN {workshop_submissions} s ON (a.submissionid = s.id)
+            INNER JOIN {user} author ON (s.authorid = author.id)
+             LEFT JOIN {user} overby ON (a.gradinggradeoverby = overby.id)
+                 WHERE s.example = 0 AND reviewer.id = :reviewerid AND s.workshopid = :workshopid";
+        $params = array('reviewerid' => $reviewerid, 'workshopid' => $this->id);
+
+        return $DB->get_records_sql($sql, $params);
+    }
+
+    /**
+     * Allocate a submission to a user for review
+     *
+     * @param stdClass $submission Submission object with at least id property
+     * @param int $reviewerid User ID
+     * @param int $weight of the new assessment, from 0 to 16
+     * @param bool $bulk repeated inserts into DB expected
+     * @return int ID of the new assessment or an error code
+     */
+    public function add_allocation(stdclass $submission, $reviewerid, $weight=1, $bulk=false) {
+        global $DB;
+
+        if ($DB->record_exists('workshop_assessments', array('submissionid' => $submission->id, 'reviewerid' => $reviewerid))) {
+            return self::ALLOCATION_EXISTS;
+        }
+
+        $weight = (int)$weight;
+        if ($weight < 0) {
+            $weight = 0;
+        }
+        if ($weight > 16) {
+            $weight = 16;
+        }
+
+        $now = time();
+        $assessment = new stdclass();
+        $assessment->submissionid           = $submission->id;
+        $assessment->reviewerid             = $reviewerid;
+        $assessment->timecreated            = $now;         // do not set timemodified here
+        $assessment->weight                 = $weight;
+        $assessment->generalcommentformat   = editors_get_preferred_format();
+        $assessment->feedbackreviewerformat = editors_get_preferred_format();
+
+        return $DB->insert_record('workshop_assessments', $assessment, true, $bulk);
         }
 
-    if (groupmode($course, $cm) == SEPARATEGROUPS) {
-        $groupid = get_current_group($course->id);
+    /**
+     * Delete assessment record or records
+     *
+     * @param mixed $id int|array assessment id or array of assessments ids
+     * @return bool false if $id not a valid parameter, true otherwise
+     */
+    public function delete_assessment($id) {
+        global $DB;
+
+        // todo remove all given grades from workshop_grades;
+
+        if (is_array($id)) {
+            return $DB->delete_records_list('workshop_assessments', 'id', $id);
     } else {
-        $groupid = 0;
+            return $DB->delete_records('workshop_assessments', array('id' => $id));
+        }
     }
 
-    $table->head = array (get_string("title", "workshop"), get_string("submittedby", "workshop"),
-        get_string("submitted", "workshop"), get_string("action", "workshop"), get_string("comment", "workshop"));
-    $table->align = array ("left", "left", "left", "left", "left");
-    $table->size = array ("*", "*", "*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
+    /**
+     * Returns instance of grading strategy class
+     *
+     * @return stdclass Instance of a grading strategy
+     */
+    public function grading_strategy_instance() {
+        global $CFG;    // because we require other libs here
 
-    if ($submissions = workshop_get_student_submissions($workshop, 'time')) { // oldest first 
-        foreach ($submissions as $submission) {
-            // check group membership, if necessary
-            if ($groupid) {
-                // check user's group
-                if (!groups_is_member($groupid, $submission->userid)) {
-                    continue; // skip this user
-                }
+        if (is_null($this->strategyinstance)) {
+            $strategylib = dirname(__FILE__) . '/form/' . $this->strategy . '/lib.php';
+            if (is_readable($strategylib)) {
+                require_once($strategylib);
+            } else {
+                throw new coding_exception('the grading forms subplugin must contain library ' . $strategylib);
             }
-            // see if submission is cold
-            if (($submission->timecreated +$CFG->maxeditingtime) > $timenow) {
-                continue; // skip this submission
+            $classname = 'workshop_' . $this->strategy . '_strategy';
+            $this->strategyinstance = new $classname($this);
+            if (!in_array('workshop_strategy', class_implements($this->strategyinstance))) {
+                throw new coding_exception($classname . ' does not implement workshop_strategy interface');
             }
-            $comment = "";
-            $timegap = get_string("ago", "workshop", format_time($submission->timecreated - $timenow));
-            // see if user already graded this assessment
-            if ($assessment = get_record_select("workshop_assessments", "submissionid = $submission->id
-                    AND userid = $user->id")) {
-                if (($timenow - $assessment->timecreated < $CFG->maxeditingtime)) {
-                    // last chance salon
-                    $submissionowner = get_record("user", "id", $submission->userid);
-                    $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("edit", "workshop")."</a>";
-                    $table->data[] = array(workshop_print_submission_title($workshop, $submission), 
-                        fullname($submissionowner), $timegap, $action, $comment);
                     }
+        return $this->strategyinstance;
                 }
-            else { 
-                // no assessment by this user, if no other teacher has assessed submission then list it
-                if (!workshop_count_teacher_assessments($course->id, $submission)) {
-                    $submissionowner = get_record("user", "id", $submission->userid);
-                    $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("assess", "workshop")."</a>";
-                    $table->data[] = array(workshop_print_submission_title($workshop, $submission), 
-                        fullname($submissionowner), $timegap, $action, $comment);
+
+    /**
+     * Returns instance of grading evaluation class
+     *
+     * @return stdclass Instance of a grading evaluation
+     */
+    public function grading_evaluation_instance() {
+        global $CFG;    // because we require other libs here
+
+        if (is_null($this->evaluationinstance)) {
+            $evaluationlib = dirname(__FILE__) . '/eval/' . $this->evaluation . '/lib.php';
+            if (is_readable($evaluationlib)) {
+                require_once($evaluationlib);
+            } else {
+                throw new coding_exception('the grading evaluation subplugin must contain library ' . $evaluationlib);
                 }
+            $classname = 'workshop_' . $this->evaluation . '_evaluation';
+            $this->evaluationinstance = new $classname($this);
+            if (!in_array('workshop_evaluation', class_implements($this->evaluationinstance))) {
+                throw new coding_exception($classname . ' does not implement workshop_evaluation interface');
                 }
             }
-        if (isset($table->data)) {
-            print_table($table);
+        return $this->evaluationinstance;
             }
+
+    /**
+     * Returns instance of submissions allocator
+     *
+     * @param string $method The name of the allocation method, must be PARAM_ALPHA
+     * @return stdclass Instance of submissions allocator
+     */
+    public function allocator_instance($method) {
+        global $CFG;    // because we require other libs here
+
+        $allocationlib = dirname(__FILE__) . '/allocation/' . $method . '/lib.php';
+        if (is_readable($allocationlib)) {
+            require_once($allocationlib);
+        } else {
+            throw new coding_exception('Unable to find the allocation library ' . $allocationlib);
         }
+        $classname = 'workshop_' . $method . '_allocator';
+        return new $classname($this);
     }
 
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_unassessed_teacher_submissions($workshop, $user) {
-    // list the teacher submissions not assessed by this user
+    /**
+     * @return moodle_url of this workshop's view page
+     */
+    public function view_url() {
     global $CFG;
-    
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
+        return new moodle_url('/mod/workshop/view.php', array('id' => $this->cm->id));
     }
 
-    $table->head = array (get_string("title", "workshop"), get_string("action", "workshop"), 
-            get_string("comment", "workshop"));
-    $table->align = array ("left", "left", "left");
-    $table->size = array ("*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
-
-    if ($submissions = workshop_get_teacher_submissions($workshop)) {
-        foreach ($submissions as $submission) {
-            $comment = "";
-            // see if user already graded this assessment
-            if ($assessment = get_record_select("workshop_assessments", "submissionid = $submission->id
-                    AND userid = $user->id")) {
-                $timenow = time();
-                if (($timenow - $assessment->timecreated < $CFG->maxeditingtime)) {
-                    // last chance salon
-                    $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                        get_string("edit", "workshop")."</a>";
-                    $table->data[] = array(workshop_print_submission_title($workshop, $submission), $action, $comment);
-                    }
-                }
-            else { // no assessment
-                $action = "<a href=\"assess.php?id=$cm->id&amp;sid=$submission->id\">".
-                    get_string("assess", "workshop")."</a>";
-                $table->data[] = array(workshop_print_submission_title($workshop, $submission), $action, $comment);
-                }
-            }
-        if (isset($table->data)) {
-            print_table($table);
+    /**
+     * @return moodle_url of the page for editing this workshop's grading form
+     */
+    public function editform_url() {
+        global $CFG;
+        return new moodle_url('/mod/workshop/editform.php', array('cmid' => $this->cm->id));
             }
+
+    /**
+     * @return moodle_url of the page for previewing this workshop's grading form
+     */
+    public function previewform_url() {
+        global $CFG;
+        return new moodle_url('/mod/workshop/editformpreview.php', array('cmid' => $this->cm->id));
         }
+
+    /**
+     * @param int $assessmentid The ID of assessment record
+     * @return moodle_url of the assessment page
+     */
+    public function assess_url($assessmentid) {
+        global $CFG;
+        $assessmentid = clean_param($assessmentid, PARAM_INT);
+        return new moodle_url('/mod/workshop/assessment.php', array('asid' => $assessmentid));
     }
 
+    /**
+     * @param int $assessmentid The ID of assessment record
+     * @return moodle_url of the example assessment page
+     */
+    public function exassess_url($assessmentid) {
+        global $CFG;
+        $assessmentid = clean_param($assessmentid, PARAM_INT);
+        return new moodle_url('/mod/workshop/exassessment.php', array('asid' => $assessmentid));
+    }
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_ungraded_assessments($workshop, $stype) {
-    // lists all the assessments of student submissions for grading by teacher
+    /**
+     * @return moodle_url of the page to view a submission, defaults to the own one
+     */
+    public function submission_url($id=null) {
     global $CFG;
+        return new moodle_url('/mod/workshop/submission.php', array('cmid' => $this->cm->id, 'id' => $id));
+    }
     
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
+    /**
+     * @param int $id example submission id
+     * @return moodle_url of the page to view an example submission
+     */
+    public function exsubmission_url($id) {
+        global $CFG;
+        return new moodle_url('/mod/workshop/exsubmission.php', array('cmid' => $this->cm->id, 'id' => $id));
     }
 
-    $table->head = array (get_string("title", "workshop"), get_string("submittedby", "workshop"),
-    get_string("assessor", "workshop"), get_string("timeassessed", "workshop"), get_string("action", "workshop"));
-    $table->align = array ("left", "left", "left", "left");
-    $table->size = array ("*", "*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
-    $timenow = time();
+    /**
+     * @param int $sid submission id
+     * @param array $aid of int assessment ids
+     * @return moodle_url of the page to compare assessments of the given submission
+     */
+    public function compare_url($sid, array $aids) {
+        global $CFG;
     
-    switch ($stype) {
-        case "student" :
-            $assessments = workshop_get_ungraded_assessments_student($workshop);
-            break;
-        case "teacher" :
-            $assessments = workshop_get_ungraded_assessments_teacher($workshop);
-            break;
-        }
-    if ($assessments) {
-        foreach ($assessments as $assessment) {
-            if (!workshop_is_teacher($workshop, $assessment->userid)) { // don't let teacher grade their own assessments
-                if (($timenow - $assessment->timegraded) < $CFG->maxeditingtime) {
-                    $action = "<a href=\"viewassessment.php?&amp;id=$cm->id&amp;stype=$stype&amp;aid=$assessment->id\">".
-                        get_string("edit", "workshop")."</a>";
-                    }
-                else {
-                    $action = "<a href=\"viewassessment.php?&amp;id=$cm->id&amp;stype=$stype&amp;aid=$assessment->id\">".
-                        get_string("grade", "workshop")."</a>";
+        $url = new moodle_url('/mod/workshop/compare.php', array('cmid' => $this->cm->id, 'sid' => $sid));
+        $i = 0;
+        foreach ($aids as $aid) {
+            $url->param("aid{$i}", $aid);
+            $i++;
                     }
-                $submission = get_record("workshop_submissions", "id", $assessment->submissionid);
-                $submissionowner = get_record("user", "id", $submission->userid);
-                $assessor = get_record("user", "id", $assessment->userid);
-                $table->data[] = array(workshop_print_submission_title($workshop, $submission), 
-                    fullname($submissionowner), fullname($assessor), userdate($assessment->timecreated), $action);
+        return $url;
                 }
+
+    /**
+     * @param int $sid submission id
+     * @param int $aid assessment id
+     * @return moodle_url of the page to compare the reference assessments of the given example submission
+     */
+    public function excompare_url($sid, $aid) {
+        global $CFG;
+        return new moodle_url('/mod/workshop/excompare.php', array('cmid' => $this->cm->id, 'sid' => $sid, 'aid' => $aid));
             }
-        if (isset($table->data)) {
-            print_table($table);
+
+    /**
+     * @return moodle_url of the mod_edit form
+     */
+    public function updatemod_url() {
+        global $CFG;
+        return new moodle_url('/course/modedit.php', array('update' => $this->cm->id, 'return' => 1));
             }
+
+    /**
+     * @param string $method allocation method
+     * @return moodle_url to the allocation page
+     */
+    public function allocation_url($method=null) {
+        global $CFG;
+        $params = array('cmid' => $this->cm->id);
+        if (!empty($method)) {
+            $params['method'] = $method;
         }
+        return new moodle_url('/mod/workshop/allocation.php', $params);
     }
     
+    /**
+     * @param int $phasecode The internal phase code
+     * @return moodle_url of the script to change the current phase to $phasecode
+     */
+    public function switchphase_url($phasecode) {
+        global $CFG;
+        $phasecode = clean_param($phasecode, PARAM_INT);
+        return new moodle_url('/mod/workshop/switchphase.php', array('cmid' => $this->cm->id, 'phase' => $phasecode));
+    }
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_list_user_submissions($workshop, $user) {
+    /**
+     * @return moodle_url to the aggregation page
+     */
+    public function aggregate_url() {
     global $CFG;
+        return new moodle_url('/mod/workshop/aggregate.php', array('cmid' => $this->cm->id));
+    }
 
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
+    /**
+     * @return moodle_url of this workshop's toolbox page
+     */
+    public function toolbox_url($tool) {
+        global $CFG;
+        return new moodle_url('/mod/workshop/toolbox.php', array('id' => $this->cm->id, 'tool' => $tool));
     }
 
-    $timenow = time();
-    $table->head = array (get_string("title", "workshop"),  get_string("action", "workshop"),
-        get_string("submitted", "assignment"),  get_string("assessments", "workshop"));
-    $table->align = array ("left", "left", "left", "left");
-    $table->size = array ("*", "*", "*", "*");
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
+    /**
+     * Workshop wrapper around {@see add_to_log()}
+     *
+     * @param string $action to be logged
+     * @param moodle_url $url absolute url as returned by {@see workshop::submission_url()} and friends
+     * @param mixed $info additional info, usually id in a table
+     */
+    public function log($action, moodle_url $url = null, $info = null) {
 
-    if ($submissions = workshop_get_user_submissions($workshop, $user)) {
-        foreach ($submissions as $submission) {
-            // allow user to edit or delete a submission if it's warm OR if assessment period has not started
-            if (($submission->timecreated > ($timenow - $CFG->maxeditingtime)) or ($workshop->assessmentstart > time())) {
-                $action = "<a href=\"submissions.php?action=editsubmission&amp;id=$cm->id&amp;sid=$submission->id\">".
-                    get_string("edit", "workshop")."</a> | ".
-                    "<a href=\"submissions.php?action=confirmdelete&amp;id=$cm->id&amp;sid=$submission->id\">".
-                    get_string("delete", "workshop")."</a>";
-            }
-            else {
-                $action = '';
+        if (is_null($url)) {
+            $url = $this->view_url();
             }
-            $datesubmitted = userdate($submission->timecreated);
-            if ($submission->late) {
-                $datesubmitted = "<span class=\"redfont\">".$datesubmitted."</span>";
-            }
-            $n = count_records_select("workshop_assessments", "submissionid = $submission->id AND
-                    timecreated < ($timenow - $CFG->maxeditingtime)");
-            $table->data[] = array(workshop_print_submission_title($workshop, $submission), $action,
-                $datesubmitted, $n);
+
+        if (is_null($info)) {
+            $info = $this->id;
         }
-        print_table($table);
+
+        $logurl = $this->log_convert_url($url);
+        add_to_log($this->course->id, 'workshop', $action, $logurl, $info, $this->cm->id);
     }
-}
 
+    /**
+     * Is the given user allowed to create their submission?
+     *
+     * @param int $userid
+     * @return bool
+     */
+    public function creating_submission_allowed($userid) {
 
+        $now = time();
+        $ignoredeadlines = has_capability('mod/workshop:ignoredeadlines', $this->context, $userid);
 
-///////////////////////////////////////////////////////////////////////////////
-function workshop_phase($workshop, $style='') {
-    $time = time();
-    if ($time < $workshop->submissionstart) {
-        return get_string('phase1'.$style, 'workshop');
+        if ($this->latesubmissions) {
+            if ($this->phase != self::PHASE_SUBMISSION and $this->phase != self::PHASE_ASSESSMENT) {
+                // late submissions are allowed in the submission and assessment phase only
+                return false;
+            }
+            if (!$ignoredeadlines and !empty($this->submissionstart) and $this->submissionstart > $now) {
+                // late submissions are not allowed before the submission start
+                return false;
     } 
-    else if ($time < $workshop->submissionend) {
-        if ($time < $workshop->assessmentstart) {
-            return get_string('phase2'.$style, 'workshop');
+            return true;
+
         } else {
-            return get_string('phase3'.$style, 'workshop');
+            if ($this->phase != self::PHASE_SUBMISSION) {
+                // submissions are allowed during the submission phase only
+                return false;
         }
+            if (!$ignoredeadlines and !empty($this->submissionstart) and $this->submissionstart > $now) {
+                // if enabled, submitting is not allowed before the date/time defined in the mod_form
+                return false;
     } 
-    else if ($time < $workshop->assessmentstart) {
-        return  get_string('phase0'.$style, 'workshop');
+            if (!$ignoredeadlines and !empty($this->submissionend) and $now > $this->submissionend ) {
+                // if enabled, submitting is not allowed after the date/time defined in the mod_form unless late submission is allowed
+                return false;
     }
-    else if ($time < $workshop->assessmentend) {
-        return  get_string('phase4'.$style, 'workshop');
+            return true;
     }
-    else {
-        return  get_string('phase5'.$style, 'workshop');
     }    
-    error('Something is wrong with the workshop dates');
-}
 
+    /**
+     * Is the given user allowed to modify their existing submission?
+     *
+     * @param int $userid
+     * @return bool
+     */
+    public function modifying_submission_allowed($userid) {
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_print_assessment($workshop, $assessment = false, $allowchanges = false, 
-    $showcommentlinks = false, $returnto = '') {
-    // $allowchanges added 14/7/03. The form is inactive unless allowchanges = true
-    // $returnto added 28/8/03. The page to go to after the assessment has been submitted
-    global $CFG, $USER, $WORKSHOP_SCALES, $WORKSHOP_EWEIGHTS;
+        $now = time();
+        $ignoredeadlines = has_capability('mod/workshop:ignoredeadlines', $this->context, $userid);
     
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
+        if ($this->phase != self::PHASE_SUBMISSION) {
+            // submissions can be edited during the submission phase only
+            return false;
+        }
+        if (!$ignoredeadlines and !empty($this->submissionstart) and $this->submissionstart > $now) {
+            // if enabled, re-submitting is not allowed before the date/time defined in the mod_form
+            return false;
     }
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $course->id)) {
-        error("Course Module ID was incorrect");
+        if (!$ignoredeadlines and !empty($this->submissionend) and $now > $this->submissionend) {
+            // if enabled, re-submitting is not allowed after the date/time defined in the mod_form even if late submission is allowed
+            return false;
     }
-    if ($assessment) {
-        if (!$submission = get_record("workshop_submissions", "id", $assessment->submissionid)) {
-            error ("Workshop_print_assessment: Submission record not found");
+        return true;
         }
         
-        // removed target=\"submission\" as it does not validate
-        // MDL-7861
-        print_heading(get_string('assessmentof', 'workshop', 
-            "<a href=\"submissions.php?id=$cm->id&amp;action=showsubmission&amp;sid=$submission->id\" >".
-            $submission->title.'</a>'));
+    /**
+     * Is the given reviewer allowed to create/edit their assessments?
+     *
+     * @param int $userid
+     * @return bool
+     */
+    public function assessing_allowed($userid) {
+
+        if ($this->phase != self::PHASE_ASSESSMENT) {
+            // assessing is not allowed but in the assessment phase
+            return false;
     }
     
-    $timenow = time();
+        $now = time();
+        $ignoredeadlines = has_capability('mod/workshop:ignoredeadlines', $this->context, $userid);
 
-    // reset the internal flags
-    if ($assessment) {
-        $showgrades = false;
+        if (!$ignoredeadlines and !empty($this->assessmentstart) and $this->assessmentstart > $now) {
+            // if enabled, assessing is not allowed before the date/time defined in the mod_form
+            return false;
     }
-    else { // if no assessment, i.e. specimen grade form always show grading scales
-        $showgrades = true;
+        if (!$ignoredeadlines and !empty($this->assessmentend) and $now > $this->assessmentend) {
+            // if enabled, assessing is not allowed after the date/time defined in the mod_form
+            return false;
     }
-    
-    if ($assessment) {
-        // set the internal flag if necessary
-        if ($allowchanges or !$workshop->agreeassessments or !$workshop->hidegrades or 
-                $assessment->timeagreed) {
-            $showgrades = true;
+        // here we go, assessing is allowed
+        return true;
         }
         
-        echo "<div class=\"boxaligncenter\">\n";
-    
-        // see if this is a pre-filled assessment for a re-submission...
-        if ($assessment->resubmission) {
-            // ...and print an explaination
-            print_heading(get_string("assessmentofresubmission", "workshop"));
+    /**
+     * Are reviewers allowed to create/edit their assessments of the example submissions?
+     *
+     * Returns null if example submissions are not enabled in this workshop. Otherwise returns
+     * true or false. Note this does not check other conditions like the number of already
+     * assessed examples, examples mode etc.
+     *
+     * @return null|bool
+     */
+    public function assessing_examples_allowed() {
+        if (empty($this->useexamples)) {
+            return null;
         }
-        
-        // print agreement time if the workshop requires peer agreement
-        if ($workshop->agreeassessments and $assessment->timeagreed) {
-            echo "<p>".get_string("assessmentwasagreedon", "workshop", userdate($assessment->timeagreed));
+        if (self::EXAMPLES_VOLUNTARY == $this->examplesmode) {
+            return true;
         }
-
-        // first print any comments on this assessment
-        if ($comments = workshop_get_comments($assessment)) {
-            echo "<table cellpadding=\"2\" border=\"1\">\n";
-            $firstcomment = TRUE;
-            foreach ($comments as $comment) {
-                echo "<tr valign=\"top\"><td class=\"workshopassessmentheading\"><p><b>".
-                    get_string("commentby","workshop")." ";
-                if (workshop_is_teacher($workshop, $comment->userid)) {
-                    echo $course->teacher;
+        if (self::EXAMPLES_BEFORE_SUBMISSION == $this->examplesmode and self::PHASE_SUBMISSION == $this->phase) {
+            return true;
                 }
-                elseif ($assessment->userid == $comment->userid) {
-                    print_string("assessor", "workshop");
+        if (self::EXAMPLES_BEFORE_ASSESSMENT == $this->examplesmode and self::PHASE_ASSESSMENT == $this->phase) {
+            return true;
                 }
-                else {
-                    print_string("authorofsubmission", "workshop");
+        return false;
                 }
-                echo " ".get_string("on", "workshop", userdate($comment->timecreated))."</b></p></td></tr><tr><td>\n";
-                echo format_text($comment->comments)."&nbsp;\n";
-                // add the links if needed
-                if ($firstcomment and $showcommentlinks and !$assessment->timeagreed) {
-                    // show links depending on who doing the viewing
-                    $firstcomment = FALSE;
-                    if (workshop_is_teacher($workshop, $USER->id) and ($comment->userid != $USER->id)) {
-                        echo "<p style=\"text-align:right\"><a href=\"assessments.php?action=addcomment&amp;id=$cm->id&amp;aid=$assessment->id\">".
-                            get_string("reply", "workshop")."</a></p>\n";
+
+    /**
+     * Are the peer-reviews available to the authors?
+     *
+     * @return bool
+     */
+    public function assessments_available() {
+        return $this->phase == self::PHASE_CLOSED;
+    }
+
+    /**
+     * Switch to a new workshop phase
+     *
+     * Modifies the underlying database record. You should terminate the script shortly after calling this.
+     *
+     * @param int $newphase new phase code
+     * @return bool true if success, false otherwise
+     */
+    public function switch_phase($newphase) {
+        global $DB;
+
+        $known = $this->available_phases_list();
+        if (!isset($known[$newphase])) {
+            return false;
                     }
-                    elseif (($comment->userid ==$USER->id) and (($timenow - $comment->timecreated) < $CFG->maxeditingtime)) {
-                        echo "<p style=\"text-align:right\"><a href=\"assessments.php?action=editcomment&amp;id=$cm->id&amp;cid=$comment->id\">".
-                            get_string("edit", "workshop")."</a>\n";
-                        if ($USER->id == $submission->userid) {
-                            echo " | <a href=\"assessments.php?action=agreeassessment&amp;id=$cm->id&amp;aid=$assessment->id\">".
-                                get_string("agreetothisassessment", "workshop")."</a>\n";
+
+        if (self::PHASE_CLOSED == $newphase) {
+            // push the grades into the gradebook
+            $workshop = new stdclass();
+            foreach ($this as $property => $value) {
+                $workshop->{$property} = $value;
                         }
-                        echo '</p>';
+            $workshop->course     = $this->course->id;
+            $workshop->cmidnumber = $this->cm->id;
+            $workshop->modname    = 'workshop';
+            workshop_update_grades($workshop);
                     }
-                    elseif (($comment->userid != $USER->id) and (($USER->id == $assessment->userid) or 
-                        ($USER->id == $submission->userid))) {
-                        echo "<p style=\"text-align:right\"><a href=\"assessments.php?action=addcomment&amp;id=$cm->id&amp;aid=$assessment->id\">".
-                            get_string("reply", "workshop")."</a>\n";
-                        if ($USER->id == $submission->userid) {
-                            echo " | <a href=\"assessments.php?action=agreeassessment&amp;id=$cm->id&amp;aid=$assessment->id\">".
-                                get_string("agreetothisassessment", "workshop")."</a>\n";
+
+        $DB->set_field('workshop', 'phase', $newphase, array('id' => $this->id));
+        return true;
                         }
-                        echo '</p>';
+
+    /**
+     * Saves a raw grade for submission as calculated from the assessment form fields
+     *
+     * @param array $assessmentid assessment record id, must exists
+     * @param mixed $grade        raw percentual grade from 0.00000 to 100.00000
+     * @return false|float        the saved grade
+     */
+    public function set_peer_grade($assessmentid, $grade) {
+        global $DB;
+
+        if (is_null($grade)) {
+            return false;
                     }
+        $data = new stdclass();
+        $data->id = $assessmentid;
+        $data->grade = $grade;
+        $data->timemodified = time();
+        $DB->update_record('workshop_assessments', $data);
+        return $grade;
                 }
-                echo '</td></tr>';
+
+    /**
+     * Prepares data object with all workshop grades to be rendered
+     *
+     * @param int $userid the user we are preparing the report for
+     * @param mixed $groups single group or array of groups - only show users who are in one of these group(s). Defaults to all
+     * @param int $page the current page (for the pagination)
+     * @param int $perpage participants per page (for the pagination)
+     * @param string $sortby lastname|firstname|submissiontitle|submissiongrade|gradinggrade
+     * @param string $sorthow ASC|DESC
+     * @return stdclass data for the renderer
+     */
+    public function prepare_grading_report_data($userid, $groups, $page, $perpage, $sortby, $sorthow) {
+        global $DB;
+
+        $canviewall     = has_capability('mod/workshop:viewallassessments', $this->context, $userid);
+        $isparticipant  = has_any_capability(array('mod/workshop:submit', 'mod/workshop:peerassess'), $this->context, $userid);
+
+        if (!$canviewall and !$isparticipant) {
+            // who the hell is this?
+            return array();
             }
-            echo '</table>';
+
+        if (!in_array($sortby, array('lastname','firstname','submissiontitle','submissiongrade','gradinggrade'))) {
+            $sortby = 'lastname';
         }
-        echo '</div>';
+
+        if (!($sorthow === 'ASC' or $sorthow === 'DESC')) {
+            $sorthow = 'ASC';
     }
         
-    // now print the grading form with the grading grade if any
-    // FORM is needed for Mozilla browsers, else radio bttons are not checked
-        ?>
-    <form id="assessmentform" method="post" action="assessments.php">
-    <div>
-    <input type="hidden" name="id" value="<?php echo $cm->id ?>" />
-    <input type="hidden" name="aid" value="<?php echo @$assessment->id ?>" />
-    <input type="hidden" name="action" value="updateassessment" />
-    <input type="hidden" name="returnto" value="<?php echo $returnto ?>" />
-    <input type="hidden" name="elementno" value="" />
-    <input type="hidden" name="stockcommentid" value="" />
-    <div class="boxaligncenter">
-    <table cellpadding="2" border="1" class="boxaligncenter">
-    <?php
-    echo "<tr valign=\"top\">\n";
-    echo "  <td colspan=\"2\" class=\"workshopassessmentheading\"><div style=\"text-align:center;\"><b>";
-    if ($assessment and workshop_is_teacher($workshop)) {
-        $user = get_record('user', 'id', $assessment->userid);
-        print_string("assessmentby", "workshop", fullname($user));
+        // get the list of user ids to be displayed
+        if ($canviewall) {
+            // fetch the list of ids of all workshop participants - this may get really long so fetch just id
+            $participants = get_users_by_capability($this->context, array('mod/workshop:submit', 'mod/workshop:peerassess'),
+                    'u.id', '', '', '', $groups, '', false, false, true);
+        } else {
+            // this is an ordinary workshop participant (aka student) - display the report just for him/her
+            $participants = array($userid => (object)array('id' => $userid));
+        }
+
+        // we will need to know the number of all records later for the pagination purposes
+        $numofparticipants = count($participants);
+
+        if ($numofparticipants > 0) {
+            // load all fields which can be used for sorting and paginate the records
+            list($participantids, $params) = $DB->get_in_or_equal(array_keys($participants), SQL_PARAMS_NAMED);
+            $params['workshopid1'] = $this->id;
+            $params['workshopid2'] = $this->id;
+            $sqlsort = array();
+            $sqlsortfields = array($sortby => $sorthow) + array('lastname' => 'ASC', 'firstname' => 'ASC', 'u.id' => 'ASC');
+            foreach ($sqlsortfields as $sqlsortfieldname => $sqlsortfieldhow) {
+                $sqlsort[] = $sqlsortfieldname . ' ' . $sqlsortfieldhow;
+            }
+            $sqlsort = implode(',', $sqlsort);
+            $sql = "SELECT u.id AS userid,u.firstname,u.lastname,u.picture,u.imagealt,u.email,
+                           s.title AS submissiontitle, s.grade AS submissiongrade, ag.gradinggrade
+                      FROM {user} u
+                 LEFT JOIN {workshop_submissions} s ON (s.authorid = u.id AND s.workshopid = :workshopid1 AND s.example = 0)
+                 LEFT JOIN {workshop_aggregations} ag ON (ag.userid = u.id AND ag.workshopid = :workshopid2)
+                     WHERE u.id $participantids
+                  ORDER BY $sqlsort";
+            $participants = $DB->get_records_sql($sql, $params, $page * $perpage, $perpage);
     } else {
-        print_string('assessment', 'workshop');
+            $participants = array();
     }
-    echo '</b><br />'.userdate(@$assessment->timecreated)."</div></td>\n";
-    echo "</tr>\n";
     
-    // only show the grade if grading strategy > 0 and the grade is positive
-    if ($assessment and $showgrades and $workshop->gradingstrategy and $assessment->grade >= 0) { 
-        echo "<tr valign=\"top\">\n
-            <td colspan=\"2\" align=\"center\">
-            <b>".get_string("thegradeis", "workshop").": ".
-            number_format($assessment->grade * $workshop->grade / 100, 2)." (".
-            get_string("maximumgrade")." ".number_format($workshop->grade, 0).")</b>
-            </td></tr><tr><td colspan=\"2\" class=\"workshopassessmentheading\">&nbsp;</td></tr>\n";
-    }
+        // this will hold the information needed to display user names and pictures
+        $userinfo = array();
     
-    // get the assignment elements...
-    $elementsraw = get_records("workshop_elements", "workshopid", $workshop->id, "elementno ASC");
-    if (count($elementsraw) < $workshop->nelements) {
-        print_string("noteonassignmentelements", "workshop");
+        // get the user details for all participants to display
+        foreach ($participants as $participant) {
+            if (!isset($userinfo[$participant->userid])) {
+                $userinfo[$participant->userid]            = new stdclass();
+                $userinfo[$participant->userid]->id        = $participant->userid;
+                $userinfo[$participant->userid]->firstname = $participant->firstname;
+                $userinfo[$participant->userid]->lastname  = $participant->lastname;
+                $userinfo[$participant->userid]->picture   = $participant->picture;
+                $userinfo[$participant->userid]->imagealt  = $participant->imagealt;
+                $userinfo[$participant->userid]->email     = $participant->email;
     }
-    if ($elementsraw) {
-        foreach ($elementsraw as $element) {
-            $elements[] = $element;   // to renumber index 0,1,2...
         }
+
+        // load the submissions details
+        $submissions = $this->get_submissions(array_keys($participants));
+
+        // get the user details for all moderators (teachers) that have overridden a submission grade
+        foreach ($submissions as $submission) {
+            if (!isset($userinfo[$submission->gradeoverby])) {
+                $userinfo[$submission->gradeoverby]            = new stdclass();
+                $userinfo[$submission->gradeoverby]->id        = $submission->gradeoverby;
+                $userinfo[$submission->gradeoverby]->firstname = $submission->overfirstname;
+                $userinfo[$submission->gradeoverby]->lastname  = $submission->overlastname;
+                $userinfo[$submission->gradeoverby]->picture   = $submission->overpicture;
+                $userinfo[$submission->gradeoverby]->imagealt  = $submission->overimagealt;
+                $userinfo[$submission->gradeoverby]->email     = $submission->overemail;
+            }
+        }
+
+        // get the user details for all reviewers of the displayed participants
+        $reviewers = array();
+        if ($submissions) {
+            list($submissionids, $params) = $DB->get_in_or_equal(array_keys($submissions), SQL_PARAMS_NAMED);
+            $sql = "SELECT a.id AS assessmentid, a.submissionid, a.grade, a.gradinggrade, a.gradinggradeover, a.weight,
+                           r.id AS reviewerid, r.lastname, r.firstname, r.picture, r.imagealt, r.email,
+                           s.id AS submissionid, s.authorid
+                      FROM {workshop_assessments} a
+                      JOIN {user} r ON (a.reviewerid = r.id)
+                      JOIN {workshop_submissions} s ON (a.submissionid = s.id AND s.example = 0)
+                     WHERE a.submissionid $submissionids
+                  ORDER BY a.weight DESC, r.lastname, r.firstname";
+            $reviewers = $DB->get_records_sql($sql, $params);
+            foreach ($reviewers as $reviewer) {
+                if (!isset($userinfo[$reviewer->reviewerid])) {
+                    $userinfo[$reviewer->reviewerid]            = new stdclass();
+                    $userinfo[$reviewer->reviewerid]->id        = $reviewer->reviewerid;
+                    $userinfo[$reviewer->reviewerid]->firstname = $reviewer->firstname;
+                    $userinfo[$reviewer->reviewerid]->lastname  = $reviewer->lastname;
+                    $userinfo[$reviewer->reviewerid]->picture   = $reviewer->picture;
+                    $userinfo[$reviewer->reviewerid]->imagealt  = $reviewer->imagealt;
+                    $userinfo[$reviewer->reviewerid]->email     = $reviewer->email;
+                }
+            }
+        }
+
+        // get the user details for all reviewees of the displayed participants
+        $reviewees = array();
+        if ($participants) {
+            list($participantids, $params) = $DB->get_in_or_equal(array_keys($participants), SQL_PARAMS_NAMED);
+            $params['workshopid'] = $this->id;
+            $sql = "SELECT a.id AS assessmentid, a.submissionid, a.grade, a.gradinggrade, a.gradinggradeover, a.reviewerid, a.weight,
+                           s.id AS submissionid,
+                           e.id AS authorid, e.lastname, e.firstname, e.picture, e.imagealt, e.email
+                      FROM {user} u
+                      JOIN {workshop_assessments} a ON (a.reviewerid = u.id)
+                      JOIN {workshop_submissions} s ON (a.submissionid = s.id AND s.example = 0)
+                      JOIN {user} e ON (s.authorid = e.id)
+                     WHERE u.id $participantids AND s.workshopid = :workshopid
+                  ORDER BY a.weight DESC, e.lastname, e.firstname";
+            $reviewees = $DB->get_records_sql($sql, $params);
+            foreach ($reviewees as $reviewee) {
+                if (!isset($userinfo[$reviewee->authorid])) {
+                    $userinfo[$reviewee->authorid]            = new stdclass();
+                    $userinfo[$reviewee->authorid]->id        = $reviewee->authorid;
+                    $userinfo[$reviewee->authorid]->firstname = $reviewee->firstname;
+                    $userinfo[$reviewee->authorid]->lastname  = $reviewee->lastname;
+                    $userinfo[$reviewee->authorid]->picture   = $reviewee->picture;
+                    $userinfo[$reviewee->authorid]->imagealt  = $reviewee->imagealt;
+                    $userinfo[$reviewee->authorid]->email     = $reviewee->email;
+                }
+            }
+        }
+
+        // finally populate the object to be rendered
+        $grades = $participants;
+
+        foreach ($participants as $participant) {
+            // set up default (null) values
+            $grades[$participant->userid]->submissionid = null;
+            $grades[$participant->userid]->submissiontitle = null;
+            $grades[$participant->userid]->submissiongrade = null;
+            $grades[$participant->userid]->submissiongradeover = null;
+            $grades[$participant->userid]->submissiongradeoverby = null;
+            $grades[$participant->userid]->submissionpublished = null;
+            $grades[$participant->userid]->reviewedby = array();
+            $grades[$participant->userid]->reviewerof = array();
+        }
+        unset($participants);
+        unset($participant);
+
+        foreach ($submissions as $submission) {
+            $grades[$submission->authorid]->submissionid = $submission->id;
+            $grades[$submission->authorid]->submissiontitle = $submission->title;
+            $grades[$submission->authorid]->submissiongrade = $this->real_grade($submission->grade);
+            $grades[$submission->authorid]->submissiongradeover = $this->real_grade($submission->gradeover);
+            $grades[$submission->authorid]->submissiongradeoverby = $submission->gradeoverby;
+            $grades[$submission->authorid]->submissionpublished = $submission->published;
+        }
+        unset($submissions);
+        unset($submission);
+
+        foreach($reviewers as $reviewer) {
+            $info = new stdclass();
+            $info->userid = $reviewer->reviewerid;
+            $info->assessmentid = $reviewer->assessmentid;
+            $info->submissionid = $reviewer->submissionid;
+            $info->grade = $this->real_grade($reviewer->grade);
+            $info->gradinggrade = $this->real_grading_grade($reviewer->gradinggrade);
+            $info->gradinggradeover = $this->real_grading_grade($reviewer->gradinggradeover);
+            $info->weight = $reviewer->weight;
+            $grades[$reviewer->authorid]->reviewedby[$reviewer->reviewerid] = $info;
+        }
+        unset($reviewers);
+        unset($reviewer);
+
+        foreach($reviewees as $reviewee) {
+            $info = new stdclass();
+            $info->userid = $reviewee->authorid;
+            $info->assessmentid = $reviewee->assessmentid;
+            $info->submissionid = $reviewee->submissionid;
+            $info->grade = $this->real_grade($reviewee->grade);
+            $info->gradinggrade = $this->real_grading_grade($reviewee->gradinggrade);
+            $info->gradinggradeover = $this->real_grading_grade($reviewee->gradinggradeover);
+            $info->weight = $reviewee->weight;
+            $grades[$reviewee->reviewerid]->reviewerof[$reviewee->authorid] = $info;
+        }
+        unset($reviewees);
+        unset($reviewee);
+
+        foreach ($grades as $grade) {
+            $grade->gradinggrade = $this->real_grading_grade($grade->gradinggrade);
+        }
+
+        $data = new stdclass();
+        $data->grades = $grades;
+        $data->userinfo = $userinfo;
+        $data->totalcount = $numofparticipants;
+        $data->maxgrade = $this->real_grade(100);
+        $data->maxgradinggrade = $this->real_grading_grade(100);
+        return $data;
+    }
+
+    /**
+     * Calculates the real value of a grade
+     *
+     * @param float $value percentual value from 0 to 100
+     * @param float $max   the maximal grade
+     * @return string
+     */
+    public function real_grade_value($value, $max) {
+        $localized = true;
+        if (is_null($value) or $value === '') {
+            return null;
+        } elseif ($max == 0) {
+            return 0;
     } else {
-        $elements = null;
-    }
-
-    if ($assessment) {
-        // get any previous grades...
-        if ($gradesraw = get_records_select("workshop_grades", "assessmentid = $assessment->id", "elementno")) {
-            foreach ($gradesraw as $grade) {
-                $grades[] = $grade;   // to renumber index 0,1,2...
-                }
-            }
-        }
-    else {
-        // setup dummy grades array
-        for($i = 0; $i < count($elementsraw); $i++) { // gives a suitable sized loop
-            $grades[$i]->feedback = get_string("yourfeedbackgoeshere", "workshop");
-            $grades[$i]->grade = 0;
-            }
-        }
-                
-    // determine what sort of grading
-    switch ($workshop->gradingstrategy) {
-        case 0:  // no grading
-            // now print the form
-            for ($i=0; $i < count($elements); $i++) {
-                $iplus1 = $i+1;
-                echo "<tr valign=\"top\">\n";
-                echo "  <td align=\"right\"><p><b>". get_string("element","workshop")." $iplus1:</b></p></td>\n";
-                echo "  <td>".format_text($elements[$i]->description);
-                echo "</td></tr>\n";
-                echo "<tr valign=\"top\">\n";
-                echo "  <td align=\"right\"><p><b>". get_string("feedback").":</b></p></td>\n";
-                echo "  <td>\n";
-                if ($allowchanges) {
-                    echo "      <textarea name=\"feedback_$i\" rows=\"3\" cols=\"75\" >\n";
-                    if (isset($grades[$i]->feedback)) {
-                        echo $grades[$i]->feedback;
-                        }
-                    echo "</textarea>\n";
-                    }
-                else {
-                    echo format_text($grades[$i]->feedback);
-                    }
-                echo "  </td>\n";
-                echo "</tr>\n";
-
-                // if active and the teacher show stock comments...
-                if ($allowchanges and workshop_is_teacher($workshop, $USER->id)) {
-                    echo "<tr><td valign=\"top\" align=\"right\"><input type=\"button\" value=\"".
-                        get_string("addcomment", "workshop")."\" 
-                        onclick=\"getElementById('assessmentform').action.value='addstockcomment';
-                        getElementById('assessmentform').elementno.value=$i;getElementById('assessmentform').submit();\" /> \n";
-                    helpbutton("addcommenttobank", get_string("addcomment", "workshop"), "workshop");
-                    echo "</td><td>\n";
-                    if ($stockcomments = get_records_select("workshop_stockcomments", "workshopid = $workshop->id
-                            AND elementno = $i", "id")) { // show comments in fixed order (oldest first)
-                        foreach ($stockcomments as $stockcomment) {
-                            echo "<a onclick=\"getElementById('assessmentform').feedback_$i.value+=' '+'".
-                                addslashes($stockcomment->comments)."';\">&lt;&lt;$stockcomment->comments&gt;&gt;</a>\n";
-                            if (workshop_is_teacheredit($workshop, $USER->id)) {
-                                echo " <a onclick=\"getElementById('assessmentform').action.value='removestockcomment';getElementById('assessmentform').stockcommentid.value=$stockcomment->id;getElementById('assessmentform').submit();\"> <small><i>&lt;--".get_string("delete","workshop")."</i></small></a>\n";
-                            }
-                            echo "<br />\n";
-                        }
-                    } 
-                    echo "</td></tr>\n";
-                }
-
-                echo "<tr valign=\"top\">\n";
-                echo "  <td colspan=\"2\" class=\"workshopassessmentheading\">&nbsp;</td>\n";
-                echo "</tr>\n";
-                }
-            break;
-            
-        case 1: // accumulative grading
-            // now print the form
-            for ($i=0; $i < count($elements); $i++) {
-                $iplus1 = $i+1;
-                echo "<tr valign=\"top\">\n";
-                echo "  <td align=\"right\"><p><b>". get_string("element","workshop")." $iplus1:</b></p></td>\n";
-                echo "  <td>".format_text($elements[$i]->description);
-                echo "<p style=\"text-align:right\">".get_string("weight", "workshop").": ".
-                    number_format($WORKSHOP_EWEIGHTS[$elements[$i]->weight], 2)."</p>\n";
-                echo "</td></tr>\n";
-                if ($showgrades) {
-                    echo "<tr valign=\"top\">\n";
-                    echo "  <td align=\"right\"><p><b>". get_string("grade"). ":</b></p></td>\n";
-                    echo "  <td valign=\"top\">\n";
-                    
-                    // get the appropriate scale
-                    $scalenumber=$elements[$i]->scale;
-                    $SCALE = (object)$WORKSHOP_SCALES[$scalenumber];
-                    switch ($SCALE->type) {
-                        case 'radio' :
-                                // show selections highest first
-                                echo "<div class=\"boxaligncenter\"><b>$SCALE->start</b>&nbsp;&nbsp;&nbsp;";
-                                for ($j = $SCALE->size - 1; $j >= 0 ; $j--) {
-                                    $checked = false;
-                                    if (isset($grades[$i]->grade)) { 
-                                        if ($j == $grades[$i]->grade) {
-                                            $checked = true;
-                                            }
-                                        }
-                                    else { // there's no previous grade so check the lowest option
-                                        if ($j == 0) {
-                                            $checked = true;
-                                            }
-                                        }
-                                    if ($checked) {
-                                        echo " <input type=\"radio\" name=\"grade[$i]\" value=\"$j\" checked=\"checked\" alt=\"$j\" /> &nbsp;&nbsp;&nbsp;\n";
-                                        }
-                                    else {
-                                        echo " <input type=\"radio\" name=\"grade[$i]\" value=\"$j\" alt=\"$j\" /> &nbsp;&nbsp;&nbsp;\n";
-                                        }
-                                    }
-                                echo "&nbsp;&nbsp;&nbsp;<b>$SCALE->end</b></div>\n";
-                                break;
-                        case 'selection' :  
-                                unset($numbers);
-                                for ($j = $SCALE->size; $j >= 0; $j--) {
-                                    $numbers[$j] = $j;
-                                    }
-                                if (isset($grades[$i]->grade)) {
-                                    choose_from_menu($numbers, "grade[$i]", $grades[$i]->grade, "");
-                                    }
-                                else {
-                                    choose_from_menu($numbers, "grade[$i]", 0, "");
-                                    }
-                                break;
-                        }
-            
-                    echo "  </td>\n";
-                    echo "</tr>\n";
-                    }
-                echo "<tr valign=\"top\">\n";
-                echo "  <td align=\"right\"><p><b>". get_string("feedback").":</b></p></td>\n";
-                echo "  <td>\n";
-                if ($allowchanges) {
-                    echo "      <textarea name=\"feedback_$i\" rows=\"3\" cols=\"75\" >\n";
-                    if (isset($grades[$i]->feedback)) {
-                        echo $grades[$i]->feedback;
-                        }
-                    echo "</textarea>\n";
-                    }
-                else {
-                    echo format_text($grades[$i]->feedback);
-                    }
-                echo "  </td>\n";
-                echo "</tr>\n";
-                
-                // if active and the teacher show stock comments...
-                if ($allowchanges and workshop_is_teacher($workshop, $USER->id)) {
-                    echo "<tr><td valign=\"top\" align=\"right\"><input type=\"button\" value=\"".
-                        get_string("addcomment", "workshop")."\" 
-                        onclick=\"getElementById('assessmentform').action.value='addstockcomment';
-                        getElementById('assessmentform').elementno.value=$i;getElementById('assessmentform').submit();\" /> \n";
-                    helpbutton("addcommenttobank", get_string("addcomment", "workshop"), "workshop");
-                    echo "</td><td>\n";
-                    if ($stockcomments = get_records_select("workshop_stockcomments", "workshopid = $workshop->id
-                            AND elementno = $i", "id")) { // get comments in a fixed order - oldest first
-                        foreach ($stockcomments as $stockcomment) {
-                            echo "<a onclick=\"getElementById('assessmentform').feedback_$i.value+=' '+'".
-                                addslashes($stockcomment->comments).
-                                "';\">&lt;&lt;$stockcomment->comments&gt;&gt;</a>\n";
-                            if (workshop_is_teacheredit($workshop, $USER->id)) {
-                                echo " <a onclick=\"getElementById('assessmentform').action.value='removestockcomment';getElementById('assessmentform').stockcommentid.value=$stockcomment->id;getElementById('assessmentform').submit();\"> <small><i>&lt;--".get_string("delete","workshop")."</i></small></a>\n";
-                            }
-                            echo "<br />\n";
-                        }
-                    } 
-                    echo "</td></tr>\n";
-                }
-
-                echo "<tr valign=\"top\">\n";
-                echo "  <td colspan=\"2\" class=\"workshopassessmentheading\">&nbsp;</td>\n";
-                echo "</tr>\n";
-                }
-            break;
-            
-        case 2: // error banded grading
-            // now run through the elements
-            $negativecount = 0;
-            for ($i=0; $i < count($elements) - 1; $i++) {
-                $iplus1 = $i+1;
-                echo "<tr valign=\"top\">\n";
-                echo "  <td align=\"right\"><p><b>". get_string("element","workshop")." $iplus1:</b></p></td>\n";
-                echo "  <td>".format_text($elements[$i]->description);
-                echo "<p style=\"text-align:right\">".get_string("weight", "workshop").": ".
-                    number_format($WORKSHOP_EWEIGHTS[$elements[$i]->weight], 2)."\n";
-                echo "</td></tr>\n";
-                echo "<tr valign=\"top\">\n";
-                echo "  <td align=\"right\"><p><b>". get_string("grade"). ":</b></p></td>\n";
-                echo "  <td valign=\"top\">\n";
-                    
-                // get the appropriate scale - yes/no scale (0)
-                $SCALE = (object) $WORKSHOP_SCALES[0];
-                switch ($SCALE->type) {
-                    case 'radio' :
-                            // show selections highest first
-                            echo "<div class=\"boxaligncenter\"><b>$SCALE->start</b>&nbsp;&nbsp;&nbsp;";
-                            for ($j = $SCALE->size - 1; $j >= 0 ; $j--) {
-                                $checked = false;
-                                if (isset($grades[$i]->grade)) { 
-                                    if ($j == $grades[$i]->grade) {
-                                        $checked = true;
+            return format_float($max * $value / 100, $this->gradedecimals, $localized);
                                         }
                                     }
-                                else { // there's no previous grade so check the lowest option
-                                    if ($j == 0) {
-                                        $checked = true;
-                                        }
-                                    }
-                                if ($checked) {
-                                    echo " <input type=\"radio\" name=\"grade[$i]\" value=\"$j\" checked=\"checked\" alt=\"$j\" /> &nbsp;&nbsp;&nbsp;\n";
-                                    }
-                                else {
-                                    echo " <input type=\"radio\" name=\"grade[$i]\" value=\"$j\" alt=\"$j\" /> &nbsp;&nbsp;&nbsp;\n";
-                                    }
-                                }
-                            echo "&nbsp;&nbsp;&nbsp;<b>$SCALE->end</b></div>\n";
-                            break;
-                    case 'selection' :  
-                            unset($numbers);
-                            for ($j = $SCALE->size; $j >= 0; $j--) {
-                                $numbers[$j] = $j;
-                                }
-                            if (isset($grades[$i]->grade)) {
-                                choose_from_menu($numbers, "grade[$i]", $grades[$i]->grade, "");
-                                }
-                            else {
-                                choose_from_menu($numbers, "grade[$i]", 0, "");
-                                }
-                            break;
-                    }
-        
-                echo "  </td>\n";
-                echo "</tr>\n";
-                echo "<tr valign=\"top\">\n";
-                echo "  <td align=\"right\"><p><b>". get_string("feedback").":</b></p></td>\n";
-                echo "  <td>\n";
-                if ($allowchanges) {
-                    echo "      <textarea name=\"feedback_$i\" rows=\"3\" cols=\"75\" >\n";
-                    if (isset($grades[$i]->feedback)) {
-                        echo $grades[$i]->feedback;
-                        }
-                    echo "</textarea>\n";
-                    }
-                else {
-                    if (isset($grades[$i]->feedback)) {
-                        echo format_text($grades[$i]->feedback);
-                        }
-                    }
-                echo "&nbsp;</td>\n";
-                echo "</tr>\n";
-
-                // if active and the teacher show stock comments...
-                if ($allowchanges and workshop_is_teacher($workshop, $USER->id)) {
-                    echo "<tr><td valign=\"top\" align=\"right\"><input type=\"button\" value=\"".
-                        get_string("addcomment", "workshop")."\" 
-                        onclick=\"getElementById('assessmentform').action.value='addstockcomment';
-                        getElementById('assessmentform').elementno.value=$i;getElementById('assessmentform').submit();\" /> \n";
-                    helpbutton("addcommenttobank", get_string("addcomment", "workshop"), "workshop");
-                    echo "</td><td>\n";
-                    if ($stockcomments = get_records_select("workshop_stockcomments", "workshopid = $workshop->id
-                            AND elementno = $i", "id")) { // get comments in a fixed order - oldest first
-                        foreach ($stockcomments as $stockcomment) {
-                            echo "<a onclick=\"getElementById('assessmentform').feedback_$i.value+=' '+'".
-                                addslashes($stockcomment->comments).
-                                "';\">&lt;&lt;$stockcomment->comments&gt;&gt;</a>\n";
-                            if (workshop_is_teacheredit($workshop, $USER->id)) {
-                                echo " <a onclick=\"getElementById('assessmentform').action.value='removestockcomment';getElementById('assessmentform').stockcommentid.value=$stockcomment->id;getElementById('assessmentform').submit();\"> <small><i>&lt;--".get_string("delete","workshop")."</i></small></a>\n";
-                            }
-                            echo "<br />\n";
-                        }
-                    } 
-                    echo "</td></tr>\n";
-                }
-                echo "<tr valign=\"top\">\n";
-                echo "  <td colspan=\"2\" class=\"workshopassessmentheading\">&nbsp;</td>\n";
-                echo "</tr>\n";
-                if (empty($grades[$i]->grade)) {
-                    $negativecount++;
-                    }
-                }
-            // print the number of negative elements
-            // echo "<tr><td>".get_string("numberofnegativeitems", "workshop")."</td><td>$negativecount</td></tr>\n";
-            // echo "<tr valign=\"top\">\n";
-            // echo "   <td colspan=\"2\" class=\"workshopassessmentheading\">&nbsp;</td>\n";
-            echo "</table></div>\n";
-            // now print the grade table
-            echo "<p><div style=\"text-align:center;\"><b>".get_string("gradetable","workshop")."</b></div>\n";
-            echo "<div class=\"boxaligncenter\"><table cellpadding=\"5\" border=\"1\"><tr><td align=\"CENTER\">".
-                get_string("numberofnegativeresponses", "workshop");
-            echo "</td><td>". get_string("suggestedgrade", "workshop")."</td></tr>\n";
-            for ($j = 100; $j >= 0; $j--) {
-                $numbers[$j] = $j;
-                }
-            for ($i=0; $i<=$workshop->nelements; $i++) {
-                if ($i == $negativecount) {
-                    echo "<tr><td align=\"CENTER\"><img src=\"$CFG->pixpath/t/right.gif\" alt=\"\" /> $i</td><td align=\"center\">{$elements[$i]->maxscore}</td></tr>\n";
-                    }
-                else {
-                    echo "<tr><td align=\"CENTER\">$i</td><td align=\"CENTER\">{$elements[$i]->maxscore}</td></tr>\n";
-                    }
-                }
-            echo "</table></div>\n";
-            echo "<p><div class=\"boxaligncenter\"><table cellpadding=\"5\" border=\"1\"><tr><td><b>".get_string("optionaladjustment", 
-                    "workshop")."</b></td><td>\n";
-            unset($numbers);
-            for ($j = 20; $j >= -20; $j--) {
-                $numbers[$j] = $j;
-                }
-            if (isset($grades[$workshop->nelements]->grade)) {
-                choose_from_menu($numbers, "grade[$workshop->nelements]", $grades[$workshop->nelements]->grade, "");
-                }
-            else {
-                choose_from_menu($numbers, "grade[$workshop->nelements]", 0, "");
-                }
-            echo "</td></tr>\n";
-            break;
-            
-        case 3: // criteria grading
-            echo "<tr valign=\"top\">\n";
-            echo "  <td class=\"workshopassessmentheading\">&nbsp;</td>\n";
-            echo "  <td class=\"workshopassessmentheading\"><b>". get_string("criterion","workshop")."</b></td>\n";
-            echo "  <td class=\"workshopassessmentheading\"><b>".get_string("select", "workshop")."</b></td>\n";
-            echo "  <td class=\"workshopassessmentheading\"><b>".get_string("suggestedgrade", "workshop")."</b></td>\n";
-            // find which criteria has been selected (saved in the zero element), if any
-            if (isset($grades[0]->grade)) {
-                $selection = $grades[0]->grade;
-                }
-            else {
-                $selection = 0;
-                }
-            // now run through the elements
-            for ($i=0; $i < count($elements); $i++) {
-                $iplus1 = $i+1;
-                echo "<tr valign=\"top\">\n";
-                echo "  <td>$iplus1</td><td>".format_text($elements[$i]->description)."</td>\n";
-                if ($selection == $i) {
-                    echo "  <td align=\"center\"><input type=\"radio\" name=\"grade[0]\" value=\"$i\" checked=\"checked\" alt=\"$i\" /></td>\n";
-                    }
-                else {
-                    echo "  <td align=\"center\"><input type=\"radio\" name=\"grade[0]\" value=\"$i\" alt=\"$i\" /></td>\n";
-                    }
-                echo "<td align=\"center\">{$elements[$i]->maxscore}</td></tr>\n";
-                }
-            echo "</table></div>\n";
-            echo "<p><div class=\"boxaligncenter\"><table cellpadding=\"5\" border=\"1\"><tr><td><b>".get_string("optionaladjustment", 
-                    "workshop")."</b></td><td>\n";
-            unset($numbers);
-            for ($j = 20; $j >= -20; $j--) {
-                $numbers[$j] = $j;
-                }
-            if (isset($grades[1]->grade)) {
-                choose_from_menu($numbers, "grade[1]", $grades[1]->grade, "");
-                }
-            else {
-                choose_from_menu($numbers, "grade[1]", 0, "");
-                }
-            echo "</td></tr>\n";
-            break;
-            
-        case 4: // rubric grading
-            // now run through the elements...
-            for ($i=0; $i < count($elements); $i++) {
-                $iplus1 = $i+1;
-                echo "<tr valign=\"top\">\n";
-                echo "<td align=\"right\"><b>".get_string("element", "workshop")." $iplus1:</b></td>\n";
-                echo "<td>".format_text($elements[$i]->description).
-                     "<p style=\"text-align:right\">".get_string("weight", "workshop").": ".
-                    number_format($WORKSHOP_EWEIGHTS[$elements[$i]->weight], 2)."</td></tr>\n";
-                echo "<tr valign=\"top\">\n";
-                echo "  <td class=\"workshopassessmentheading\" align=\"center\"><b>".get_string("select", "workshop").
-                    "</b></td>\n";
-                echo "  <td class=\"workshopassessmentheading\"><b>". get_string("criterion","workshop").
-                    "</b></td></tr>\n";
-                if (isset($grades[$i])) {
-                    $selection = $grades[$i]->grade;
-                } else {
-                    $selection = 0;
-                }
-                // ...and the rubrics
-                if ($rubricsraw = get_records_select("workshop_rubrics", "workshopid = $workshop->id AND 
-                        elementno = $i", "rubricno ASC")) {
-                    unset($rubrics);
-                    foreach ($rubricsraw as $rubic) {
-                        $rubrics[] = $rubic;   // to renumber index 0,1,2...
-                    }
-                    for ($j=0; $j<5; $j++) {
-                        if (empty($rubrics[$j]->description)) {
-                            break; // out of inner for loop
-                        }
-                        echo "<tr valign=\"top\">\n";
-                        if ($selection == $j) {
-                            echo "  <td align=\"center\"><input type=\"radio\" name=\"grade[$i]\" value=\"$j\" 
-                                checked=\"checked\" alt=\"$j\" /></td>\n";
-                        } else {
-                            echo "  <td align=\"center\"><input type=\"radio\" name=\"grade[$i]\" value=\"$j\" 
-                                alt=\"$j\" /></td>\n";
+
+    /**
+     * Calculates the raw (percentual) value from a real grade
+     *
+     * This is used in cases when a user wants to give a grade such as 12 of 20 and we need to save
+     * this value in a raw percentual form into DB
+     * @param float $value given grade
+     * @param float $max   the maximal grade
+     * @return float       suitable to be stored as numeric(10,5)
+     */
+    public function raw_grade_value($value, $max) {
+        if (is_null($value) or $value === '') {
+            return null;
                         }
-                        echo "<td>".format_text($rubrics[$j]->description)."</td>\n";
+        if ($max == 0 or $value < 0) {
+            return 0;
                     }
-                    echo "<tr valign=\"top\">\n";
-                    echo "  <td align=\"right\"><p><b>". get_string("feedback").":</b></p></td>\n";
-                    echo "  <td>\n";
-                    if ($allowchanges) {
-                        echo "      <textarea name=\"feedback_$i\" rows=\"3\" cols=\"75\" >\n";
-                        if (isset($grades[$i]->feedback)) {
-                            echo $grades[$i]->feedback;
+        $p = $value / $max * 100;
+        if ($p > 100) {
+            return $max;
+        }
+        return grade_floatval($p);
+    }
+
+    /**
+     * Calculates the real value of grade for submission
+     *
+     * @param float $value percentual value from 0 to 100
+     * @return string
+     */
+    public function real_grade($value) {
+        return $this->real_grade_value($value, $this->grade);
+    }
+
+    /**
+     * Calculates the real value of grade for assessment
+     *
+     * @param float $value percentual value from 0 to 100
+     * @return string
+     */
+    public function real_grading_grade($value) {
+        return $this->real_grade_value($value, $this->gradinggrade);
+    }
+
+    /**
+     * Sets the given grades and received grading grades to null
+     *
+     * This does not clear the information about how the peers filled the assessment forms, but
+     * clears the calculated grades in workshop_assessments. Therefore reviewers have to re-assess
+     * the allocated submissions.
+     *
+     * @return void
+     */
+    public function clear_assessments() {
+        global $DB;
+
+        $submissions = $this->get_submissions();
+        if (empty($submissions)) {
+            // no money, no love
+            return;
                         }
-                        echo "</textarea>\n";
+        $submissions = array_keys($submissions);
+        list($sql, $params) = $DB->get_in_or_equal($submissions, SQL_PARAMS_NAMED);
+        $sql = "submissionid $sql";
+        $DB->set_field_select('workshop_assessments', 'grade', null, $sql, $params);
+        $DB->set_field_select('workshop_assessments', 'gradinggrade', null, $sql, $params);
+    }
+
+    /**
+     * Sets the grades for submission to null
+     *
+     * @param null|int|array $restrict If null, update all authors, otherwise update just grades for the given author(s)
+     * @return void
+     */
+    public function clear_submission_grades($restrict=null) {
+        global $DB;
+
+        $sql = "workshopid = :workshopid AND example = 0";
+        $params = array('workshopid' => $this->id);
+
+        if (is_null($restrict)) {
+            // update all users - no more conditions
+        } elseif (!empty($restrict)) {
+            list($usql, $uparams) = $DB->get_in_or_equal($restrict, SQL_PARAMS_NAMED);
+            $sql .= " AND authorid $usql";
+            $params = array_merge($params, $uparams);
                     } else {
-                        echo format_text($grades[$i]->feedback);
-                    }
-                    echo "  </td>\n";
-                    echo "</tr>\n";
-
-                    // if active and the teacher show stock comments...
-                    if ($allowchanges and workshop_is_teacher($workshop, $USER->id)) {
-                    echo "<tr><td valign=\"top\" align=\"right\"><input type=\"button\" value=\"".
-                        get_string("addcomment", "workshop")."\" 
-                        onclick=\"getElementById('assessmentform').action.value='addstockcomment';
-                        getElementById('assessmentform').elementno.value=$i;getElementById('assessmentform').submit();\" /> \n";
-                    helpbutton("addcommenttobank", get_string("addcomment", "workshop"), "workshop");
-                    echo "</td><td>\n";
-                        if ($stockcomments = get_records_select("workshop_stockcomments", "workshopid = $workshop->id
-                                    AND elementno = $i", "id")) { // show comments in fixed (creation) order
-                            foreach ($stockcomments as $stockcomment) {
-                                echo "<a onclick=\"getElementById('assessmentform').feedback_$i.value+=' '+'".
-                                    addslashes($stockcomment->comments).
-                                    "';\">&lt;&lt;$stockcomment->comments&gt;&gt;</a>\n";
-                                if (workshop_is_teacheredit($workshop, $USER->id)) {
-                                    echo " <a onclick=\"getElementById('assessmentform').action.value='removestockcomment';getElementById('assessmentform').stockcommentid.value=$stockcomment->id;getElementById('assessmentform').submit();\"> <small><i>&lt;--".get_string("delete","workshop")."</i></small></a>\n";
-                                }
-                                echo "<br />\n";
-                            }
-                        } 
-                        echo "</td></tr>\n";
-                    }
-
-                    echo "<tr valign=\"top\">\n";
-                    echo "  <td colspan=\"2\" class=\"workshopassessmentheading\">&nbsp;</td>\n";
-                    echo "</tr>\n";
-                }
-            }
-            break;
-        } // end of outer switch
-    
-        // now get the general comment (present in all types)
-        echo "<tr valign=\"top\">\n";
-        switch ($workshop->gradingstrategy) {
-            case 0:
-            case 1:
-            case 4 : // no grading, accumulative and rubic
-                echo "  <td align=\"right\"><p><b>". get_string("generalcomment", "workshop").":</b></p></td>\n";
-                break; 
-            default : 
-                echo "  <td align=\"right\"><p><b>".get_string("generalcomment", "workshop")."/<br />".
-                    get_string("reasonforadjustment", "workshop").":</b></p></td>\n";
-        }
-        echo "  <td>\n";
-        if ($allowchanges) {
-            echo "      <textarea name=\"generalcomment\" rows=\"5\" cols=\"75\" >\n";
-            if (isset($assessment->generalcomment)) {
-                echo $assessment->generalcomment;
-            }
-            echo "</textarea>\n";
+            throw new coding_exception('Empty value is not a valid parameter here');
+        }
+
+        $DB->set_field_select('workshop_submissions', 'grade', null, $sql, $params);
+    }
+
+    /**
+     * Calculates grades for submission for the given participant(s) and updates it in the database
+     *
+     * @param null|int|array $restrict If null, update all authors, otherwise update just grades for the given author(s)
+     * @return void
+     */
+    public function aggregate_submission_grades($restrict=null) {
+        global $DB;
+
+        // fetch a recordset with all assessments to process
+        $sql = 'SELECT s.id AS submissionid, s.grade AS submissiongrade,
+                       a.weight, a.grade
+                  FROM {workshop_submissions} s
+             LEFT JOIN {workshop_assessments} a ON (a.submissionid = s.id)
+                 WHERE s.example=0 AND s.workshopid=:workshopid'; // to be cont.
+        $params = array('workshopid' => $this->id);
+
+        if (is_null($restrict)) {
+            // update all users - no more conditions
+        } elseif (!empty($restrict)) {
+            list($usql, $uparams) = $DB->get_in_or_equal($restrict, SQL_PARAMS_NAMED);
+            $sql .= " AND s.authorid $usql";
+            $params = array_merge($params, $uparams);
         } else {
-        if ($assessment) {
-            if (isset($assessment->generalcomment)) {
-                echo format_text($assessment->generalcomment);
+            throw new coding_exception('Empty value is not a valid parameter here');
             }
-        } else {
-            print_string("yourfeedbackgoeshere", "workshop");
-        }
-    }
-    echo "&nbsp;</td>\n";
-    echo "</tr>\n";
-    // if active and the teacher show stock comments...
-    if ($allowchanges and workshop_is_teacher($workshop, $USER->id)) {
-        echo "<tr><td valign=\"top\" align=\"right\"><input type=\"button\" value=\"".
-            get_string("addcomment", "workshop")."\" 
-            onclick=\"getElementById('assessmentform').action.value='addstockcomment';
-        getElementById('assessmentform').elementno.value=99;getElementById('assessmentform').submit();\" /> \n";
-        helpbutton("addcommenttobank", get_string("addcomment", "workshop"), "workshop");
-        echo "</td><td>\n";
-        if ($stockcomments = get_records_select("workshop_stockcomments", "workshopid = $workshop->id
-                    AND elementno = 99", "id")) { // show in the same order (oldest at the top)
-            foreach ($stockcomments as $stockcomment) {
-                echo "<a onclick=\"getElementById('assessmentform').generalcomment.value+=' '+'".
-                    addslashes($stockcomment->comments)."';\">&lt;&lt;$stockcomment->comments&gt;&gt;</a>\n";
-                if (workshop_is_teacheredit($workshop, $USER->id)) {
-                    echo " <a onclick=\"getElementById('assessmentform').action.value='removestockcomment';getElementById('assessmentform').stockcommentid.value=$stockcomment->id;getElementById('assessmentform').submit();\"> <small><i>&lt;--".get_string("delete","workshop")."</i></small></a>\n";
-                }
-                echo "<br />\n";
-            }
-        } 
-        echo "</td></tr>\n";
-    }
-    
-    $timenow = time();
-    // now show the grading grade if available...
-    if ($assessment and $assessment->timegraded) {
-        echo "<tr valign=\"top\">\n";
-        echo "<td colspan=\"2\" class=\"workshopassessmentheading\" align=\"center\"><b>".
-            get_string('gradeforstudentsassessment', 'workshop')."</b></td>\n";
-        echo "</tr>\n";
-        
-        if ($assessment->teachercomment) {
-            echo "<tr valign=top>\n";
-            echo "  <td align=\"right\"><p><b>". get_string("teacherscomment", "workshop").":</b></p></td>\n";
-            echo "  <td>\n";
-            echo text_to_html($assessment->teachercomment);
-            echo "&nbsp;</td>\n";
-            echo "</tr>\n";
-        }
-
-        echo "<tr valign=\"top\">\n";
-        echo "  <td align=\"right\"><p><b>";
-        print_string('grade', 'workshop');
-        echo ":</b></p></td><td>\n";
-        echo number_format($assessment->gradinggrade * $workshop->gradinggrade / 100, 0);
-        echo "&nbsp;</td>\n";
-        echo "</tr>\n";
-    }
-    
-    echo "<tr valign=\"top\">\n";
-    echo "  <td colspan=\"2\" class=\"workshopassessmentheading\">&nbsp;</td>\n";
-    echo "</tr>\n";
-            
-    // ...and close the table, show submit button if needed...
-    echo "</table>\n";
-    if ($assessment) {
-        if ($allowchanges) {  
-            echo "<input type=\"submit\" value=\"".get_string("savemyassessment", "workshop")."\" />\n";
-        }
-        // ...if user is author, assessment not agreed, there's no comments, the showcommentlinks flag is set and 
-        // it's not self assessment then show some buttons!
-        if (($submission->userid == $USER->id) and !$assessment->timeagreed and !$comments and $showcommentlinks and 
-                $submission->userid != $assessment->userid) {
-            echo "<input type=\"button\" value=\"".get_string("agreetothisassessment", "workshop")."\" 
-                onclick=\"getElementById('assessmentform').action.value='agreeassessment';getElementById('assessmentform').submit();\" />\n";
-            echo "<input type=\"submit\" value=\"".get_string("disagreewiththisassessment", "workshop")."\"
-                onclick=\"getElementById('assessmentform').action.value='addcomment';getElementById('assessmentform').submit();\" />\n";
-        }
-    }
-    echo "</div>";
-    echo "</div></form>\n";
-}
 
+        $sql .= ' ORDER BY s.id'; // this is important for bulk processing
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_print_assessments_by_user_for_admin($workshop, $user) {
+        $rs         = $DB->get_recordset_sql($sql, $params);
+        $batch      = array();    // will contain a set of all assessments of a single submission
+        $previous   = null;       // a previous record in the recordset
 
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
+        foreach ($rs as $current) {
+            if (is_null($previous)) {
+                // we are processing the very first record in the recordset
+                $previous   = $current;
+            }
+            if ($current->submissionid == $previous->submissionid) {
+                // we are still processing the current submission
+                $batch[] = $current;
+            } else {
+                // process all the assessments of a sigle submission
+                $this->aggregate_submission_grades_process($batch);
+                // and then start to process another submission
+                $batch      = array($current);
+                $previous   = $current;
+            }
+        }
+        // do not forget to process the last batch!
+        $this->aggregate_submission_grades_process($batch);
+        $rs->close();
+    }
+
+    /**
+     * Sets the aggregated grades for assessment to null
+     *
+     * @param null|int|array $restrict If null, update all reviewers, otherwise update just grades for the given reviewer(s)
+     * @return void
+     */
+    public function clear_grading_grades($restrict=null) {
+        global $DB;
+
+        $sql = "workshopid = :workshopid";
+        $params = array('workshopid' => $this->id);
+
+        if (is_null($restrict)) {
+            // update all users - no more conditions
+        } elseif (!empty($restrict)) {
+            list($usql, $uparams) = $DB->get_in_or_equal($restrict, SQL_PARAMS_NAMED);
+            $sql .= " AND userid $usql";
+            $params = array_merge($params, $uparams);
+        } else {
+            throw new coding_exception('Empty value is not a valid parameter here');
+        }
+
+        $DB->set_field_select('workshop_aggregations', 'gradinggrade', null, $sql, $params);
+    }
+
+    /**
+     * Calculates grades for assessment for the given participant(s)
+     *
+     * Grade for assessment is calculated as a simple mean of all grading grades calculated by the grading evaluator.
+     * The assessment weight is not taken into account here.
+     *
+     * @param null|int|array $restrict If null, update all reviewers, otherwise update just grades for the given reviewer(s)
+     * @return void
+     */
+    public function aggregate_grading_grades($restrict=null) {
+        global $DB;
+
+        // fetch a recordset with all assessments to process
+        $sql = 'SELECT a.reviewerid, a.gradinggrade, a.gradinggradeover,
+                       ag.id AS aggregationid, ag.gradinggrade AS aggregatedgrade
+                  FROM {workshop_assessments} a
+            INNER JOIN {workshop_submissions} s ON (a.submissionid = s.id)
+             LEFT JOIN {workshop_aggregations} ag ON (ag.userid = a.reviewerid AND ag.workshopid = s.workshopid)
+                 WHERE s.example=0 AND s.workshopid=:workshopid'; // to be cont.
+        $params = array('workshopid' => $this->id);
+
+        if (is_null($restrict)) {
+            // update all users - no more conditions
+        } elseif (!empty($restrict)) {
+            list($usql, $uparams) = $DB->get_in_or_equal($restrict, SQL_PARAMS_NAMED);
+            $sql .= " AND a.reviewerid $usql";
+            $params = array_merge($params, $uparams);
+        } else {
+            throw new coding_exception('Empty value is not a valid parameter here');
     }
 
-    if ($assessments = workshop_get_user_assessments_done($workshop, $user)) {
-        foreach ($assessments as $assessment) {
-            workshop_print_assessment($workshop, $assessment);
-            echo "<p style=\"text-align:right\">".
-                '<a href="viewassessment.php?&amp;id='.$cm->id.'&amp;stype=student&amp;aid='.$assessment->id.'">'.
-                get_string('assessthisassessment', 'workshop').'</a> | '.
-                "<a href=\"assessments.php?action=confirmdelete&amp;id=$cm->id&amp;aid=$assessment->id\">".
-                get_string("delete", "workshop")."</a></p><hr />\n";
+        $sql .= ' ORDER BY a.reviewerid'; // this is important for bulk processing
+
+        $rs         = $DB->get_recordset_sql($sql, $params);
+        $batch      = array();    // will contain a set of all assessments of a single submission
+        $previous   = null;       // a previous record in the recordset
+
+        foreach ($rs as $current) {
+            if (is_null($previous)) {
+                // we are processing the very first record in the recordset
+                $previous   = $current;
             }
+            if ($current->reviewerid == $previous->reviewerid) {
+                // we are still processing the current reviewer
+                $batch[] = $current;
+            } else {
+                // process all the assessments of a sigle submission
+                $this->aggregate_grading_grades_process($batch);
+                // and then start to process another reviewer
+                $batch      = array($current);
+                $previous   = $current;
+            }
+        }
+        // do not forget to process the last batch!
+        $this->aggregate_grading_grades_process($batch);
+        $rs->close();
+    }
+
+    /**
+     * Returns the mform the teachers use to put a feedback for the reviewer
+     *
+     * @param moodle_url $actionurl
+     * @param stdClass $assessment
+     * @param array $options editable, editableweight, overridablegradinggrade
+     * @return workshop_feedbackreviewer_form
+     */
+    public function get_feedbackreviewer_form(moodle_url $actionurl, stdclass $assessment, $options=array()) {
+        global $CFG;
+        require_once(dirname(__FILE__) . '/feedbackreviewer_form.php');
+
+        $current = new stdclass();
+        $current->asid                      = $assessment->id;
+        $current->weight                    = $assessment->weight;
+        $current->gradinggrade              = $this->real_grading_grade($assessment->gradinggrade);
+        $current->gradinggradeover          = $this->real_grading_grade($assessment->gradinggradeover);
+        $current->feedbackreviewer          = $assessment->feedbackreviewer;
+        $current->feedbackreviewerformat    = $assessment->feedbackreviewerformat;
+        if (is_null($current->gradinggrade)) {
+            $current->gradinggrade = get_string('nullgrade', 'workshop');
+        }
+        if (!isset($options['editable'])) {
+            $editable = true;   // by default
+        } else {
+            $editable = (bool)$options['editable'];
         }
+
+        // prepare wysiwyg editor
+        $current = file_prepare_standard_editor($current, 'feedbackreviewer', array());
+
+        return new workshop_feedbackreviewer_form($actionurl,
+                array('workshop' => $this, 'current' => $current, 'editoropts' => array(), 'options' => $options),
+                'post', '', null, $editable);
     }
 
+    /**
+     * Returns the mform the teachers use to put a feedback for the author on their submission
+     *
+     * @param moodle_url $actionurl
+     * @param stdClass $submission
+     * @param array $options editable
+     * @return workshop_feedbackauthor_form
+     */
+    public function get_feedbackauthor_form(moodle_url $actionurl, stdclass $submission, $options=array()) {
+        global $CFG;
+        require_once(dirname(__FILE__) . '/feedbackauthor_form.php');
+
+        $current = new stdclass();
+        $current->submissionid          = $submission->id;
+        $current->published             = $submission->published;
+        $current->grade                 = $this->real_grade($submission->grade);
+        $current->gradeover             = $this->real_grade($submission->gradeover);
+        $current->feedbackauthor        = $submission->feedbackauthor;
+        $current->feedbackauthorformat  = $submission->feedbackauthorformat;
+        if (is_null($current->grade)) {
+            $current->grade = get_string('nullgrade', 'workshop');
+        }
+        if (!isset($options['editable'])) {
+            $editable = true;   // by default
+        } else {
+            $editable = (bool)$options['editable'];
+        }
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_print_assessments_for_admin($workshop, $submission) {
+        // prepare wysiwyg editor
+        $current = file_prepare_standard_editor($current, 'feedbackauthor', array());
 
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
+        return new workshop_feedbackauthor_form($actionurl,
+                array('workshop' => $this, 'current' => $current, 'editoropts' => array(), 'options' => $options),
+                'post', '', null, $editable);
     }
 
-    if ($assessments =workshop_get_assessments($submission)) {
+    ////////////////////////////////////////////////////////////////////////////////
+    // Internal methods (implementation details)                                  //
+    ////////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Given an array of all assessments of a single submission, calculates the final grade for this submission
+     *
+     * This calculates the weighted mean of the passed assessment grades. If, however, the submission grade
+     * was overridden by a teacher, the gradeover value is returned and the rest of grades are ignored.
+     *
+     * @param array $assessments of stdclass(->submissionid ->submissiongrade ->gradeover ->weight ->grade)
+     * @return void
+     */
+    protected function aggregate_submission_grades_process(array $assessments) {
+        global $DB;
+
+        $submissionid   = null; // the id of the submission being processed
+        $current        = null; // the grade currently saved in database
+        $finalgrade     = null; // the new grade to be calculated
+        $sumgrades      = 0;
+        $sumweights     = 0;
+
         foreach ($assessments as $assessment) {
-            if (!$user = get_record("user", "id", $assessment->userid)) {
-                error (" workshop_print_assessments_for_admin: unable to get user record");
+            if (is_null($submissionid)) {
+                // the id is the same in all records, fetch it during the first loop cycle
+                $submissionid = $assessment->submissionid;
                 }
-            echo "<p><div style=\"text-align:center;\"><b>".get_string("assessmentby", "workshop", fullname($user))."</b></div></p>\n";
-            workshop_print_assessment($workshop, $assessment);
-            echo "<p style=\"text-align:right\"><a href=\"assessments.php?action=confirmdelete&amp;id=$cm->id&amp;aid=$assessment->id\">".
-                get_string("delete", "workshop")."</a></p><hr />\n";
+            if (is_null($current)) {
+                // the currently saved grade is the same in all records, fetch it during the first loop cycle
+                $current = $assessment->submissiongrade;
             }
+            if (is_null($assessment->grade)) {
+                // this was not assessed yet
+                continue;
         }
+            if ($assessment->weight == 0) {
+                // this does not influence the calculation
+                continue;
     }
+            $sumgrades  += $assessment->grade * $assessment->weight;
+            $sumweights += $assessment->weight;
+        }
+        if ($sumweights > 0 and is_null($finalgrade)) {
+            $finalgrade = grade_floatval($sumgrades / $sumweights);
+        }
+        // check if the new final grade differs from the one stored in the database
+        if (grade_floats_different($finalgrade, $current)) {
+            // we need to save new calculation into the database
+            $record = new stdclass();
+            $record->id = $submissionid;
+            $record->grade = $finalgrade;
+            $record->timegraded = time();
+            $DB->update_record('workshop_submissions', $record);
+        }
+    }
+
+    /**
+     * Given an array of all assessments done by a single reviewer, calculates the final grading grade
+     *
+     * This calculates the simple mean of the passed grading grades. If, however, the grading grade
+     * was overridden by a teacher, the gradinggradeover value is returned and the rest of grades are ignored.
+     *
+     * @param array $assessments of stdclass(->reviewerid ->gradinggrade ->gradinggradeover ->aggregationid ->aggregatedgrade)
+     * @return void
+     */
+    protected function aggregate_grading_grades_process(array $assessments) {
+        global $DB;
+
+        $reviewerid = null; // the id of the reviewer being processed
+        $current    = null; // the gradinggrade currently saved in database
+        $finalgrade = null; // the new grade to be calculated
+        $agid       = null; // aggregation id
+        $sumgrades  = 0;
+        $count      = 0;
 
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_print_assignment_info($workshop) {
-    global $CFG;
-
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
+        foreach ($assessments as $assessment) {
+            if (is_null($reviewerid)) {
+                // the id is the same in all records, fetch it during the first loop cycle
+                $reviewerid = $assessment->reviewerid;
+            }
+            if (is_null($agid)) {
+                // the id is the same in all records, fetch it during the first loop cycle
+                $agid = $assessment->aggregationid;
+            }
+            if (is_null($current)) {
+                // the currently saved grade is the same in all records, fetch it during the first loop cycle
+                $current = $assessment->aggregatedgrade;
+            }
+            if (!is_null($assessment->gradinggradeover)) {
+                // the grading grade for this assessment is overridden by a teacher
+                $sumgrades += $assessment->gradinggradeover;
+                $count++;
+            } else {
+                if (!is_null($assessment->gradinggrade)) {
+                    $sumgrades += $assessment->gradinggrade;
+                    $count++;
+                }
+            }
+        }
+        if ($count > 0) {
+            $finalgrade = grade_floatval($sumgrades / $count);
+        }
+        // check if the new final grade differs from the one stored in the database
+        if (grade_floats_different($finalgrade, $current)) {
+            // we need to save new calculation into the database
+            if (is_null($agid)) {
+                // no aggregation record yet
+                $record = new stdclass();
+                $record->workshopid = $this->id;
+                $record->userid = $reviewerid;
+                $record->gradinggrade = $finalgrade;
+                $record->timegraded = time();
+                $DB->insert_record('workshop_aggregations', $record);
+            } else {
+                $record = new stdclass();
+                $record->id = $agid;
+                $record->gradinggrade = $finalgrade;
+                $record->timegraded = time();
+                $DB->update_record('workshop_aggregations', $record);
+            }
+        }
+    }
+
+    /**
+     * Given a list of user ids, returns the filtered one containing just ids of users with own submission
+     *
+     * Example submissions are ignored.
+     *
+     * @param array $userids
+     * @return array
+     */
+    protected function users_with_submission(array $userids) {
+        global $DB;
+
+        if (empty($userids)) {
+            return array();
+        }
+        $userswithsubmission = array();
+        list($usql, $uparams) = $DB->get_in_or_equal($userids, SQL_PARAMS_NAMED);
+        $sql = "SELECT id,authorid
+                  FROM {workshop_submissions}
+                 WHERE example = 0 AND workshopid = :workshopid AND authorid $usql";
+        $params = array('workshopid' => $this->id);
+        $params = array_merge($params, $uparams);
+        $submissions = $DB->get_records_sql($sql, $params);
+        foreach ($submissions as $submission) {
+            $userswithsubmission[$submission->authorid] = true;
     }
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $course->id)) {
-        error("Course Module ID was incorrect");
+
+        return $userswithsubmission;
     }
-    // print standard assignment heading
-    print_heading(format_string($workshop->name), "center");
-    print_simple_box_start("center");
 
-    // print phase and date info
-    $string = '<b>'.get_string('currentphase', 'workshop').'</b>: '.workshop_phase($workshop).'<br />';
-    $dates = array(
-        'submissionstart' => $workshop->submissionstart,
-        'submissionend' => $workshop->submissionend,
-        'assessmentstart' => $workshop->assessmentstart,
-        'assessmentend' => $workshop->assessmentend
+    /**
+     * @return array of available workshop phases
+     */
+    protected function available_phases_list() {
+        return array(
+            self::PHASE_SETUP       => true,
+            self::PHASE_SUBMISSION  => true,
+            self::PHASE_ASSESSMENT  => true,
+            self::PHASE_EVALUATION  => true,
+            self::PHASE_CLOSED      => true,
     );
-    foreach ($dates as $type => $date) {
-        if ($date) {
-            $strdifference = format_time($date - time());
-            if (($date - time()) < 0) {
-                $strdifference = "<span class=\"redfont\">$strdifference</span>";
-            }
-            $string .= '<b>'.get_string($type, 'workshop').'</b>: '.userdate($date)." ($strdifference)<br />";
-        }
-    }
-    echo $string;
-
-    $grade = $workshop->gradinggrade + $workshop->grade;
-    echo "<br /><b>".get_string("maximumgrade")."</b>: $grade  ";
-    // print link to specimen assessment form
-    echo "(<a href=\"assessments.php?id=$cm->id&amp;action=displaygradingform\">".
-        get_string("specimenassessmentform", "workshop")."</a>";
-    // print edit icon
-    if (workshop_is_teacheredit($workshop) and $workshop->nelements) {
-        echo " <a href=\"assessments.php?id=$cm->id&amp;action=editelements\">".
-             "<img src=\"$CFG->pixpath/t/edit.gif\" ".
-             'class="iconsmall" alt="'.get_string('amendassessmentelements', 'workshop').'" /></a>';
-    }
-    echo ")<br />";
-    print_simple_box_end();
-}
-
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_print_difference($time) {
-    if ($time < 0) {
-        $timetext = get_string("late", "assignment", format_time($time));
-        return " (<span class=\"redfont\">$timetext</span>)";
-    } else {
-        $timetext = get_string("early", "assignment", format_time($time));
-        return " ($timetext)";
     }
-}
 
+    /**
+     * Converts absolute URL to relative URL needed by {@see add_to_log()}
+     *
+     * @param moodle_url $url absolute URL
+     * @return string
+     */
+    protected function log_convert_url(moodle_url $fullurl) {
+        static $baseurl;
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_print_key($workshop) {
-    // print an explaination of the grades
+        if (!isset($baseurl)) {
+            $baseurl = new moodle_url('/mod/workshop/');
+            $baseurl = $baseurl->out();
+        }
     
-    if (!$course = get_record("course", "id", $workshop->course)) {
-        error("Print key: course not found");
+        return substr($fullurl->out(), strlen($baseurl));
     }
-    echo "<div class=\"workshopkey\">\n";
-    echo "<p><small>{} ".get_string("assessmentby", "workshop", $course->student).";&nbsp;&nbsp;\n";
-    echo "[] ".get_string("assessmentby", "workshop", $course->teacher).";&nbsp;&nbsp;\n";
-    echo "&lt;&gt; ".get_string("assessmentdropped", "workshop").";\n";
-    if ($workshop->agreeassessments) echo "&lt;&lt;&gt;&gt; ".get_string("assessmentnotyetagreed", "workshop").";\n";
-    echo "<br />() ".get_string("automaticgradeforassessment", "workshop").";&nbsp;&nbsp;\n";
-    echo "[] ".get_string("teachergradeforassessment", "workshop", $course->teacher).".\n";
-    echo "<br />".get_string("gradesforsubmissionsare", "workshop", $workshop->grade).";&nbsp;&nbsp;\n";
-    echo get_string("gradesforassessmentsare", "workshop", $workshop->gradinggrade).".</small></p>\n";
-    echo "</div>\n";
-    return;    
 }
     
-
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_print_league_table($workshop) {
-    // print an order table of (student) submissions showing teacher's and student's assessments
-    
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Print league table: Course is misconfigured");
-    }
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-            error("Course Module ID was incorrect");
-    }
-    // set $groupid if workshop is in SEPARATEGROUPS mode
-    if (groupmode($course, $cm) == SEPARATEGROUPS) {
-        $groupid = get_current_group($course->id);
+////////////////////////////////////////////////////////////////////////////////
+// Renderable components
+////////////////////////////////////////////////////////////////////////////////
+
+/**
+ * Represents the user planner tool
+ *
+ * Planner contains list of phases. Each phase contains list of tasks. Task is a simple object with
+ * title, link and completed (true/false/null logic).
+ */
+class workshop_user_plan implements renderable {
+
+    /** @var int id of the user this plan is for */
+    public $userid;
+    /** @var workshop */
+    public $workshop;
+    /** @var array of (stdclass)tasks */
+    public $phases = array();
+    /** @var null|array of example submissions to be assessed by the planner owner */
+    protected $examples = null;
+
+    /**
+     * Prepare an individual workshop plan for the given user.
+     *
+     * @param workshop $workshop instance
+     * @param int $userid whom the plan is prepared for
+     */
+    public function __construct(workshop $workshop, $userid) {
+        global $DB;
+
+        $this->workshop = $workshop;
+        $this->userid   = $userid;
+
+        //---------------------------------------------------------
+        // * SETUP | submission | assessment | evaluation | closed
+        //---------------------------------------------------------
+        $phase = new stdclass();
+        $phase->title = get_string('phasesetup', 'workshop');
+        $phase->tasks = array();
+        if (has_capability('moodle/course:manageactivities', $workshop->context, $userid)) {
+            $task = new stdclass();
+            $task->title = get_string('taskintro', 'workshop');
+            $task->link = $workshop->updatemod_url();
+            $task->completed = !(trim($workshop->intro) == '');
+            $phase->tasks['intro'] = $task;
+        }
+        if (has_capability('moodle/course:manageactivities', $workshop->context, $userid)) {
+            $task = new stdclass();
+            $task->title = get_string('taskinstructauthors', 'workshop');
+            $task->link = $workshop->updatemod_url();
+            $task->completed = !(trim($workshop->instructauthors) == '');
+            $phase->tasks['instructauthors'] = $task;
+        }
+        if (has_capability('mod/workshop:editdimensions', $workshop->context, $userid)) {
+            $task = new stdclass();
+            $task->title = get_string('editassessmentform', 'workshop');
+            $task->link = $workshop->editform_url();
+            if ($workshop->grading_strategy_instance()->form_ready()) {
+                $task->completed = true;
+            } elseif ($workshop->phase > workshop::PHASE_SETUP) {
+                $task->completed = false;
+            }
+            $phase->tasks['editform'] = $task;
+        }
+        if ($workshop->useexamples and has_capability('mod/workshop:manageexamples', $workshop->context, $userid)) {
+            $task = new stdclass();
+            $task->title = get_string('prepareexamples', 'workshop');
+            if ($DB->count_records('workshop_submissions', array('example' => 1, 'workshopid' => $workshop->id)) > 0) {
+                $task->completed = true;
+            } elseif ($workshop->phase > workshop::PHASE_SETUP) {
+                $task->completed = false;
+            }
+            $phase->tasks['prepareexamples'] = $task;
+        }
+        if (empty($phase->tasks) and $workshop->phase == workshop::PHASE_SETUP) {
+            // if we are in the setup phase and there is no task (typical for students), let us
+            // display some explanation what is going on
+            $task = new stdclass();
+            $task->title = get_string('undersetup', 'workshop');
+            $task->completed = 'info';
+            $phase->tasks['setupinfo'] = $task;
+        }
+        $this->phases[workshop::PHASE_SETUP] = $phase;
+
+        //---------------------------------------------------------
+        // setup | * SUBMISSION | assessment | evaluation | closed
+        //---------------------------------------------------------
+        $phase = new stdclass();
+        $phase->title = get_string('phasesubmission', 'workshop');
+        $phase->tasks = array();
+        if (($workshop->usepeerassessment or $workshop->useselfassessment)
+             and has_capability('moodle/course:manageactivities', $workshop->context, $userid)) {
+            $task = new stdclass();
+            $task->title = get_string('taskinstructreviewers', 'workshop');
+            $task->link = $workshop->updatemod_url();
+            if (trim($workshop->instructreviewers)) {
+                $task->completed = true;
+            } elseif ($workshop->phase >= workshop::PHASE_ASSESSMENT) {
+                $task->completed = false;
+            }
+            $phase->tasks['instructreviewers'] = $task;
+        }
+        if ($workshop->useexamples and $workshop->examplesmode == workshop::EXAMPLES_BEFORE_SUBMISSION
+                and has_capability('mod/workshop:submit', $workshop->context, $userid, false)
+                    and !has_capability('mod/workshop:manageexamples', $workshop->context, $userid)) {
+            $task = new stdclass();
+            $task->title = get_string('exampleassesstask', 'workshop');
+            $examples = $this->get_examples();
+            $a = new stdclass();
+            $a->expected = count($examples);
+            $a->assessed = 0;
+            foreach ($examples as $exampleid => $example) {
+                if (!is_null($example->grade)) {
+                    $a->assessed++;
+                }
+            }
+            $task->details = get_string('exampleassesstaskdetails', 'workshop', $a);
+            if ($a->assessed == $a->expected) {
+                $task->completed = true;
+            } elseif ($workshop->phase >= workshop::PHASE_ASSESSMENT) {
+                $task->completed = false;
+            }
+            $phase->tasks['examples'] = $task;
+        }
+        if (has_capability('mod/workshop:submit', $workshop->context, $userid, false)) {
+            $task = new stdclass();
+            $task->title = get_string('tasksubmit', 'workshop');
+            $task->link = $workshop->submission_url();
+            if ($DB->record_exists('workshop_submissions', array('workshopid'=>$workshop->id, 'example'=>0, 'authorid'=>$userid))) {
+                $task->completed = true;
+            } elseif ($workshop->phase >= workshop::PHASE_ASSESSMENT) {
+                $task->completed = false;
+            } else {
+                $task->completed = null;    // still has a chance to submit
+            }
+            $phase->tasks['submit'] = $task;
+        }
+        if (has_capability('mod/workshop:allocate', $workshop->context, $userid)) {
+            $task = new stdclass();
+            $task->title = get_string('allocate', 'workshop');
+            $task->link = $workshop->allocation_url();
+            $numofauthors = count(get_users_by_capability($workshop->context, 'mod/workshop:submit', 'u.id', '', '', '',
+                    '', '', false, true));
+            $numofsubmissions = $DB->count_records('workshop_submissions', array('workshopid'=>$workshop->id, 'example'=>0));
+            $sql = 'SELECT COUNT(s.id) AS nonallocated
+                      FROM {workshop_submissions} s
+                 LEFT JOIN {workshop_assessments} a ON (a.submissionid=s.id)
+                     WHERE s.workshopid = :workshopid AND s.example=0 AND a.submissionid IS NULL';
+            $params['workshopid'] = $workshop->id;
+            $numnonallocated = $DB->count_records_sql($sql, $params);
+            if ($numofsubmissions == 0) {
+                $task->completed = null;
+            } elseif ($numnonallocated == 0) {
+                $task->completed = true;
+            } elseif ($workshop->phase > workshop::PHASE_SUBMISSION) {
+                $task->completed = false;
     } else {
-        $groupid = 0;
+                $task->completed = null;    // still has a chance to allocate
+            }
+            $a = new stdclass();
+            $a->expected    = $numofauthors;
+            $a->submitted   = $numofsubmissions;
+            $a->allocate    = $numnonallocated;
+            $task->details  = get_string('allocatedetails', 'workshop', $a);
+            unset($a);
+            $phase->tasks['allocate'] = $task;
+
+            if ($numofsubmissions < $numofauthors and $workshop->phase >= workshop::PHASE_SUBMISSION) {
+                $task = new stdclass();
+                $task->title = get_string('someuserswosubmission', 'workshop');
+                $task->completed = 'info';
+                $phase->tasks['allocateinfo'] = $task;
+            }
+        }
+        if ($workshop->submissionstart) {
+            $task = new stdclass();
+            $task->title = get_string('submissionstartdatetime', 'workshop', workshop::timestamp_formats($workshop->submissionstart));
+            $task->completed = 'info';
+            $phase->tasks['submissionstartdatetime'] = $task;
+        }
+        if ($workshop->submissionend) {
+            $task = new stdclass();
+            $task->title = get_string('submissionenddatetime', 'workshop', workshop::timestamp_formats($workshop->submissionend));
+            $task->completed = 'info';
+            $phase->tasks['submissionenddatetime'] = $task;
+        }
+        if (($workshop->submissionstart < time()) and $workshop->latesubmissions) {
+            $task = new stdclass();
+            $task->title = get_string('latesubmissionsallowed', 'workshop');
+            $task->completed = 'info';
+            $phase->tasks['latesubmissionsallowed'] = $task;
+        }
+        if (isset($phase->tasks['submissionstartdatetime']) or isset($phase->tasks['submissionenddatetime'])) {
+            if (has_capability('mod/workshop:ignoredeadlines', $workshop->context, $userid)) {
+                $task = new stdclass();
+                $task->title = get_string('deadlinesignored', 'workshop');
+                $task->completed = 'info';
+                $phase->tasks['deadlinesignored'] = $task;
+            }
+        }
+        $this->phases[workshop::PHASE_SUBMISSION] = $phase;
+
+        //---------------------------------------------------------
+        // setup | submission | * ASSESSMENT | evaluation | closed
+        //---------------------------------------------------------
+        $phase = new stdclass();
+        $phase->title = get_string('phaseassessment', 'workshop');
+        $phase->tasks = array();
+        $phase->isreviewer = has_capability('mod/workshop:peerassess', $workshop->context, $userid);
+        if ($workshop->useexamples and $workshop->examplesmode == workshop::EXAMPLES_BEFORE_ASSESSMENT
+                and $phase->isreviewer and !has_capability('mod/workshop:manageexamples', $workshop->context, $userid)) {
+            $task = new stdclass();
+            $task->title = get_string('exampleassesstask', 'workshop');
+            $examples = $workshop->get_examples_for_reviewer($userid);
+            $a = new stdclass();
+            $a->expected = count($examples);
+            $a->assessed = 0;
+            foreach ($examples as $exampleid => $example) {
+                if (!is_null($example->grade)) {
+                    $a->assessed++;
+                }
+            }
+            $task->details = get_string('exampleassesstaskdetails', 'workshop', $a);
+            if ($a->assessed == $a->expected) {
+                $task->completed = true;
+            } elseif ($workshop->phase > workshop::PHASE_ASSESSMENT) {
+                $task->completed = false;
+            }
+            $phase->tasks['examples'] = $task;
+        }
+        if (empty($phase->tasks['examples']) or !empty($phase->tasks['examples']->completed)) {
+            $phase->assessments = $workshop->get_assessments_by_reviewer($userid);
+            $numofpeers     = 0;    // number of allocated peer-assessments
+            $numofpeerstodo = 0;    // number of peer-assessments to do
+            $numofself      = 0;    // number of allocated self-assessments - should be 0 or 1
+            $numofselftodo  = 0;    // number of self-assessments to do - should be 0 or 1
+            foreach ($phase->assessments as $a) {
+                if ($a->authorid == $userid) {
+                    $numofself++;
+                    if (is_null($a->grade)) {
+                        $numofselftodo++;
     }
- 
-    $nentries = $workshop->showleaguetable;
-    if ($workshop->anonymous and workshop_is_student($workshop)) {
-        $table->head = array (get_string("title", "workshop"), 
-            get_string("teacherassessments", "workshop", $course->teacher),  
-            get_string("studentassessments", "workshop",    $course->student), get_string("overallgrade", "workshop"));
-        $table->align = array ("left",  "center", "center", "center");
-        $table->size = array ("*", "*", "*", "*");
+                } else {
+                    $numofpeers++;
+                    if (is_null($a->grade)) {
+                        $numofpeerstodo++;
+                    }
+                }
+            }
+            unset($a);
+            if ($workshop->usepeerassessment and $numofpeers) {
+                $task = new stdclass();
+                if ($numofpeerstodo == 0) {
+                    $task->completed = true;
+                } elseif ($workshop->phase > workshop::PHASE_ASSESSMENT) {
+                    $task->completed = false;
+                }
+                $a = new stdclass();
+                $a->total = $numofpeers;
+                $a->todo  = $numofpeerstodo;
+                $task->title = get_string('taskassesspeers', 'workshop');
+                $task->details = get_string('taskassesspeersdetails', 'workshop', $a);
+                unset($a);
+                $phase->tasks['assesspeers'] = $task;
+            }
+            if ($workshop->useselfassessment and $numofself) {
+                $task = new stdclass();
+                if ($numofselftodo == 0) {
+                    $task->completed = true;
+                } elseif ($workshop->phase > workshop::PHASE_ASSESSMENT) {
+                    $task->completed = false;
+                }
+                $task->title = get_string('taskassessself', 'workshop');
+                $phase->tasks['assessself'] = $task;
+            }
+        }
+        if ($workshop->assessmentstart) {
+            $task = new stdclass();
+            $task->title = get_string('assessmentstartdatetime', 'workshop', workshop::timestamp_formats($workshop->assessmentstart));
+            $task->completed = 'info';
+            $phase->tasks['assessmentstartdatetime'] = $task;
+        }
+        if ($workshop->assessmentend) {
+            $task = new stdclass();
+            $task->title = get_string('assessmentenddatetime', 'workshop', workshop::timestamp_formats($workshop->assessmentend));
+            $task->completed = 'info';
+            $phase->tasks['assessmentenddatetime'] = $task;
+        }
+        if (isset($phase->tasks['assessmentstartdatetime']) or isset($phase->tasks['assessmentenddatetime'])) {
+            if (has_capability('mod/workshop:ignoredeadlines', $workshop->context, $userid)) {
+                $task = new stdclass();
+                $task->title = get_string('deadlinesignored', 'workshop');
+                $task->completed = 'info';
+                $phase->tasks['deadlinesignored'] = $task;
+            }
+        }
+        $this->phases[workshop::PHASE_ASSESSMENT] = $phase;
+
+        //---------------------------------------------------------
+        // setup | submission | assessment | * EVALUATION | closed
+        //---------------------------------------------------------
+        $phase = new stdclass();
+        $phase->title = get_string('phaseevaluation', 'workshop');
+        $phase->tasks = array();
+        if (has_capability('mod/workshop:overridegrades', $workshop->context)) {
+            $expected = count($workshop->get_potential_authors(false));
+            $calculated = $DB->count_records_select('workshop_submissions',
+                    'workshopid = ? AND (grade IS NOT NULL OR gradeover IS NOT NULL)', array($workshop->id));
+            $task = new stdclass();
+            $task->title = get_string('calculatesubmissiongrades', 'workshop');
+            $a = new stdclass();
+            $a->expected    = $expected;
+            $a->calculated  = $calculated;
+            $task->details  = get_string('calculatesubmissiongradesdetails', 'workshop', $a);
+            if ($calculated >= $expected) {
+                $task->completed = true;
+            } elseif ($workshop->phase > workshop::PHASE_EVALUATION) {
+                $task->completed = false;
+            }
+            $phase->tasks['calculatesubmissiongrade'] = $task;
+
+            $expected = count($workshop->get_potential_reviewers(false));
+            $calculated = $DB->count_records_select('workshop_aggregations',
+                    'workshopid = ? AND gradinggrade IS NOT NULL', array($workshop->id));
+            $task = new stdclass();
+            $task->title = get_string('calculategradinggrades', 'workshop');
+            $a = new stdclass();
+            $a->expected    = $expected;
+            $a->calculated  = $calculated;
+            $task->details  = get_string('calculategradinggradesdetails', 'workshop', $a);
+            if ($calculated >= $expected) {
+                $task->completed = true;
+            } elseif ($workshop->phase > workshop::PHASE_EVALUATION) {
+                $task->completed = false;
+            }
+            $phase->tasks['calculategradinggrade'] = $task;
+
+        } elseif ($workshop->phase == workshop::PHASE_EVALUATION) {
+            $task = new stdclass();
+            $task->title = get_string('evaluategradeswait', 'workshop');
+            $task->completed = 'info';
+            $phase->tasks['evaluateinfo'] = $task;
+        }
+        $this->phases[workshop::PHASE_EVALUATION] = $phase;
+
+        //---------------------------------------------------------
+        // setup | submission | assessment | evaluation | * CLOSED
+        //---------------------------------------------------------
+        $phase = new stdclass();
+        $phase->title = get_string('phaseclosed', 'workshop');
+        $phase->tasks = array();
+        $this->phases[workshop::PHASE_CLOSED] = $phase;
+
+        // Polish data, set default values if not done explicitly
+        foreach ($this->phases as $phasecode => $phase) {
+            $phase->title       = isset($phase->title)      ? $phase->title     : '';
+            $phase->tasks       = isset($phase->tasks)      ? $phase->tasks     : array();
+            if ($phasecode == $workshop->phase) {
+                $phase->active = true;
+            } else {
+                $phase->active = false;
     }
-    else { // show names
-        $table->head = array (get_string("title", "workshop"),  get_string("name"),
-            get_string("teacherassessments", "workshop", $course->teacher),  
-            get_string("studentassessments", "workshop",    $course->student), get_string("overallgrade", "workshop"));
-        $table->align = array ("left", "left", "center", "center", "center");
-        $table->size = array ("*", "*", "*", "*", "*");
+            if (!isset($phase->actions)) {
+                $phase->actions = array();
     }
-    $table->cellpadding = 2;
-    $table->cellspacing = 0;
 
-    if ($submissions = workshop_get_student_submissions($workshop)) {
-        foreach ($submissions as $submission) {
-            if ($groupid) {
-                // check submission's group
-                if (!groups_is_member($groupid, $submission->userid)) {
-                    continue; // skip this submission
+            foreach ($phase->tasks as $taskcode => $task) {
+                $task->title        = isset($task->title)       ? $task->title      : '';
+                $task->link         = isset($task->link)        ? $task->link       : null;
+                $task->details      = isset($task->details)     ? $task->details    : '';
+                $task->completed    = isset($task->completed)   ? $task->completed  : null;
                 }
             }
-            $grades[$submission->id] = workshop_submission_grade($workshop, $submission);
-        }
-        arsort($grades); // largest grade first
-        reset($grades);
-        $n = 1;
-        while (list($submissionid, $grade) = each($grades)) {
-            if (!$submission = get_record("workshop_submissions", "id", $submissionid)) {
-                error("Print league table: submission not found");
-            }
-            if (!$user = get_record("user", "id", $submission->userid)) {
-                error("Print league table: user not found");
+
+        // Add phase switching actions
+        if (has_capability('mod/workshop:switchphase', $workshop->context, $userid)) {
+            foreach ($this->phases as $phasecode => $phase) {
+                if (! $phase->active) {
+                    $action = new stdclass();
+                    $action->type = 'switchphase';
+                    $action->url  = $workshop->switchphase_url($phasecode);
+                    $phase->actions[] = $action;
             }
-            if ($workshop->anonymous and workshop_is_student($workshop)) {
-                $table->data[] = array(workshop_print_submission_title($workshop, $submission),
-                        workshop_print_submission_assessments($workshop, $submission, "teacher"),
-                        workshop_print_submission_assessments($workshop, $submission, "student"), $grade);
             }
-            else {
-                $table->data[] = array(workshop_print_submission_title($workshop, $submission), fullname($user),
-                        workshop_print_submission_assessments($workshop, $submission, "teacher"),
-                        workshop_print_submission_assessments($workshop, $submission, "student"), $grade);
             }
-            $n++;
-            if ($n > $nentries) {
-                break;
             }
+
+    /**
+     * Returns example submissions to be assessed by the owner of the planner
+     *
+     * This is here to cache the DB query because the same list is needed later in view.php
+     *
+     * @see workshop::get_examples_for_reviewer() for the format of returned value
+     * @return array
+     */
+    public function get_examples() {
+        if (is_null($this->examples)) {
+            $this->examples = $this->workshop->get_examples_for_reviewer($this->userid);
         }
-        print_heading(get_string("leaguetable", "workshop"));
-        print_table($table);
-        workshop_print_key($workshop);
+        return $this->examples;
     }
 }
     
+/**
+ * Common base class for submissions and example submissions rendering
+ *
+ * Subclasses of this class convert raw submission record from
+ * workshop_submissions table (as returned by {@see workshop::get_submission_by_id()}
+ * for example) into renderable objects.
+ */
+abstract class workshop_submission_base {
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_print_submission($workshop, $submission) {
-    // prints the submission with optional attachments
-    global $CFG;
+    /** @var bool is the submission anonymous (i.e. contains author information) */
+    protected $anonymous;
 
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-            error("Course Module ID was incorrect");
-    }
-    print_simple_box(format_text($submission->description), 'center');
-    if ($workshop->nattachments) {
-        $n = 1;
-        echo "<table align=\"center\">\n";
-        $filearea = workshop_file_area_name($workshop, $submission);
-        if ($basedir = workshop_file_area($workshop, $submission)) {
-            if ($files = get_directory_list($basedir)) {
-                require_once($CFG->libdir .'/filelib.php');
-                foreach ($files as $file) {
-                    $icon = mimeinfo("icon", $file);
-                    $ffurl = get_file_url("$filearea/$file");
-                    echo "<tr><td><b>".get_string("attachment", "workshop")." $n:</b> \n";
-                    // removed target=\"uploadedfile\" as it does not validate
-                    // MDL-7861
-                    echo "<img src=\"$CFG->pixpath/f/$icon\" class=\"icon\" alt=\"".get_string('file')."\" />".
-                        "&nbsp;<a href=\"$ffurl\">$file</a></td></tr>";
-                    $n++;
-                }
+    /* @var array of columns from workshop_submissions that are assigned as properties */
+    protected $fields = array();
+
+    /**
+     * Copies the properties of the given database record into properties of $this instance
+     *
+     * @param stdClass $submission full record
+     * @param bool $showauthor show the author-related information
+     * @param array $options additional properties
+     */
+    public function __construct(stdClass $submission, $showauthor = false) {
+
+        foreach ($this->fields as $field) {
+            if (!property_exists($submission, $field)) {
+                throw new coding_exception('Submission record must provide public property ' . $field);
             }
+            if (!property_exists($this, $field)) {
+                throw new coding_exception('Renderable component must accept public property ' . $field);
         }
-        echo "</table>\n";
+            $this->{$field} = $submission->{$field};
     }
-    return;
-}
-
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_print_submission_assessments($workshop, $submission, $type) {
-    global $USER, $CFG;
-    // Returns the teacher or peer grade and a hyperlinked list of grades for this submission
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-        error("Course Module ID was incorrect");
-    }
-    $str = '';
-    // get the assessments in grade order, highest first
-    if ($assessments = workshop_get_assessments($submission, "", "grade DESC")) {
-        if ($type == 'teacher' or $type == 'all') {
-            // students can see teacher assessments only if the release date has passed
-            $timenow = time();
-            if (workshop_is_teacher($workshop, $USER->id) or ($timenow > $workshop->releasegrades)) {
-                foreach ($assessments as $assessment) {
-                    if (workshop_is_teacher($workshop, $assessment->userid)) {
-                        if ($type == 'all') {
-                            $str .= workshop_fullname($assessment->userid, $workshop->course).': ';
+        if ($showauthor) {
+            $this->anonymous = false;
+        } else {
+            $this->anonymize();
                         }
-                        $str .= "<a href=\"viewassessment.php?aid=$assessment->id\">"
-                             . "[".number_format($assessment->grade *$workshop->grade / 100, 0)."]</a>";
-                        if (workshop_is_teacher($workshop, $USER->id)) {
-                            $str .= ' <a title="'.get_string('reassess', 'workshop').
-                                "\" href=\"assess.php?id=$cm->id&amp;sid=$submission->id\"><img src=\"$CFG->pixpath/t/edit.gif\" ".
-                                ' class="iconsmall" alt="'.get_string('reassess', 'workshop').'" /></a>';
-                            $str .= ' <a title="'.get_string('delete', 'workshop').
-                                "\" href=\"assessments.php?action=confirmdelete&amp;wid=$workshop->id&amp;aid=$assessment->id\"><img src=\"$CFG->pixpath/t/delete.gif\" ".
-                                ' class="iconsmall" alt="'.get_string('delete', 'workshop').'" /></a><br />';
                        }
+
+    /**
+     * Unsets all author-related properties so that the renderer does not have access to them
+     *
+     * Usually this is called by the contructor but can be called explicitely, too.
+     */
+    public function anonymize() {
+        foreach (array('authorid', 'authorfirstname', 'authorlastname',
+               'authorpicture', 'authorimagealt', 'authoremail') as $field) {
+            unset($this->{$field});
                     }
+        $this->anonymous = true;
                 }
+
+    /**
+     * Does the submission object contain author-related information?
+     *
+     * @return null|boolean
+     */
+    public function is_anonymous() {
+        return $this->anonymous;
             }
+}
+
+/**
+ * Renderable object containing a basic set of information needed to display the submission summary
+ *
+ * @see workshop_renderer::render_workshop_submission_summary
+ */
+class workshop_submission_summary extends workshop_submission_base implements renderable {
+
+    /** @var int */
+    public $id;
+    /** @var string */
+    public $title;
+    /** @var string graded|notgraded */
+    public $status;
+    /** @var int */
+    public $timecreated;
+    /** @var int */
+    public $timemodified;
+    /** @var int */
+    public $authorid;
+    /** @var string */
+    public $authorfirstname;
+    /** @var string */
+    public $authorlastname;
+    /** @var int */
+    public $authorpicture;
+    /** @var string */
+    public $authorimagealt;
+    /** @var string */
+    public $authoremail;
+    /** @var moodle_url to display submission */
+    public $url;
+
+    /**
+     * @var array of columns from workshop_submissions that are assigned as properties
+     * of instances of this class
+     */
+    protected $fields = array(
+        'id', 'title', 'timecreated', 'timemodified',
+        'authorid', 'authorfirstname', 'authorlastname', 'authorpicture',
+        'authorimagealt', 'authoremail');
+}
+
+/**
+ * Renderable object containing all the information needed to display the submission
+ *
+ * @see workshop_renderer::render_workshop_submission()
+ */
+class workshop_submission extends workshop_submission_summary implements renderable {
+
+    /** @var string */
+    public $content;
+    /** @var int */
+    public $contentformat;
+    /** @var bool */
+    public $contenttrust;
+    /** @var array */
+    public $attachment;
+
+    /**
+     * @var array of columns from workshop_submissions that are assigned as properties
+     * of instances of this class
+     */
+    protected $fields = array(
+        'id', 'title', 'timecreated', 'timemodified', 'content', 'contentformat', 'contenttrust',
+        'attachment', 'authorid', 'authorfirstname', 'authorlastname', 'authorpicture',
+        'authorimagealt', 'authoremail');
+}
+
+/**
+ * Renderable object containing a basic set of information needed to display the example submission summary
+ *
+ * @see workshop::prepare_example_summary()
+ * @see workshop_renderer::render_workshop_example_submission_summary()
+ */
+class workshop_example_submission_summary extends workshop_submission_base implements renderable {
+
+    /** @var int */
+    public $id;
+    /** @var string */
+    public $title;
+    /** @var string graded|notgraded */
+    public $status;
+    /** @var stdClass */
+    public $gradeinfo;
+    /** @var moodle_url */
+    public $url;
+    /** @var moodle_url */
+    public $editurl;
+    /** @var string */
+    public $assesslabel;
+    /** @var moodle_url */
+    public $assessurl;
+    /** @var bool must be set explicitly by the caller */
+    public $editable = false;
+
+    /**
+     * @var array of columns from workshop_submissions that are assigned as properties
+     * of instances of this class
+     */
+    protected $fields = array('id', 'title');
+
+    /**
+     * Example submissions are always anonymous
+     *
+     * @return true
+     */
+    public function is_anonymous() {
+        return true;
         }
-        if ($type == 'student' or $type == 'all') {
-            foreach ($assessments as $assessment) {
-                if (workshop_is_student($workshop, $assessment->userid)) {
-                    if ($type == 'all') {
-                        $str .= workshop_fullname($assessment->userid, $workshop->course).': ';
-                    }
-                    $str .= "<a href=\"viewassessment.php?aid=$assessment->id\">";
-                    if ($workshop->agreeassessments and !$assessment->timeagreed and 
-                            workshop_is_student($workshop, $submission->userid)) { // agreement on student work only
-                        $str .= "&lt;&lt;".number_format($assessment->grade * $workshop->grade / 100, 0)." (".
-                            number_format($assessment->gradinggrade * $workshop->gradinggrade / 100, 0).
-                            ")&gt;&gt;</a> ";
-                    } elseif ($assessment->timegraded) {
-                        if ($assessment->gradinggrade) {
-                            $str .= "{".number_format($assessment->grade * $workshop->grade / 100, 0);
-                            if ($assessment->teachergraded) {
-                                $str .= " [".number_format($assessment->gradinggrade * $workshop->gradinggrade / 100, 0).
-                                "]}</a> ";
-                            } else {
-                                $str .= " (".number_format($assessment->gradinggrade * $workshop->gradinggrade / 100, 0).
-                                ")}</a> ";
+}
+
+/**
+ * Renderable object containing all the information needed to display the example submission
+ *
+ * @see workshop_renderer::render_workshop_example_submission()
+ */
+class workshop_example_submission extends workshop_example_submission_summary implements renderable {
+
+    /** @var string */
+    public $content;
+    /** @var int */
+    public $contentformat;
+    /** @var bool */
+    public $contenttrust;
+    /** @var array */
+    public $attachment;
+
+    /**
+     * @var array of columns from workshop_submissions that are assigned as properties
+     * of instances of this class
+     */
+    protected $fields = array('id', 'title', 'content', 'contentformat', 'contenttrust', 'attachment');
+}
+
+
+/**
+ * Common base class for assessments rendering
+ *
+ * Subclasses of this class convert raw assessment record from
+ * workshop_assessments table (as returned by {@see workshop::get_assessment_by_id()}
+ * for example) into renderable objects.
+ */
+abstract class workshop_assessment_base {
+
+    /** @var string the optional title of the assessment */
+    public $title = '';
+
+    /** @var workshop_assessment_form $form as returned by {@link workshop_strategy::get_assessment_form()} */
+    public $form;
+
+    /** @var moodle_url */
+    public $url;
+
+    /** @var float|null the real received grade */
+    public $realgrade = null;
+
+    /** @var float the real maximum grade */
+    public $maxgrade;
+
+    /** @var stdClass|null reviewer user info */
+    public $reviewer = null;
+
+    /** @var stdClass|null assessed submission's author user info */
+    public $author = null;
+
+    /** @var array of actions */
+    public $actions = array();
+
+    /* @var array of columns that are assigned as properties */
+    protected $fields = array();
+
+    /**
+     * Copies the properties of the given database record into properties of $this instance
+     *
+     * The $options keys are: showreviewer, showauthor
+     * @param stdClass $assessment full record
+     * @param array $options additional properties
+     */
+    public function __construct(stdClass $record, array $options = array()) {
+
+        $this->validate_raw_record($record);
+
+        foreach ($this->fields as $field) {
+            if (!property_exists($record, $field)) {
+                throw new coding_exception('Assessment record must provide public property ' . $field);
                             }
-                        } else {
-                            $str .= "&lt;".number_format($assessment->grade * $workshop->grade / 100, 0).
-                                " (0)&gt;</a> ";
+            if (!property_exists($this, $field)) {
+                throw new coding_exception('Renderable component must accept public property ' . $field);
                         }
-                    } else {
-                        $str .= "{".number_format($assessment->grade * $workshop->grade / 100, 0)."}</a> ";
+            $this->{$field} = $record->{$field};
                     }
-                    $str .= '<br />';
+
+        if (!empty($options['showreviewer'])) {
+            $this->reviewer = user_picture::unalias($record, null, 'revieweridx', 'reviewer');
                 }
+
+        if (!empty($options['showauthor'])) {
+            $this->author = user_picture::unalias($record, null, 'authorid', 'author');
             }
         }
+
+    /**
+     * Adds a new action
+     *
+     * @param moodle_url $url action URL
+     * @param string $label action label
+     * @param string $method get|post
+     */
+    public function add_action(moodle_url $url, $label, $method = 'get') {
+
+        $action = new stdClass();
+        $action->url = $url;
+        $action->label = $label;
+        $action->method = $method;
+
+        $this->actions[] = $action;
     }
-    if (!$str) {
-        $str = "&nbsp;";   // be kind to Mozilla browsers!
+
+    /**
+     * Makes sure that we can cook the renderable component from the passed raw database record
+     *
+     * @param stdClass $assessment full assessment record
+     * @throws coding_exception if the caller passed unexpected data
+     */
+    protected function validate_raw_record(stdClass $record) {
+        // nothing to do here
     }
-    return $str;
 }
 
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_print_submission_title($workshop, $submission) {
-// Arguments are objects
+/**
+ * Represents a rendarable full assessment
+ */
+class workshop_assessment extends workshop_assessment_base implements renderable {
 
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-            error("Course Module ID was incorrect");
-    }
+    /** @var int */
+    public $id;
     
-    if (!$submission->timecreated) { // a "no submission"
-        return $submission->title;
-    }
-    return "<a name=\"sid_$submission->id\" href=\"submissions.php?id=$cm->id&amp;action=showsubmission&amp;sid=$submission->id\">$submission->title</a>";
+    /** @var int */
+    public $submissionid;
+
+    /** @var int */
+    public $weight;
+
+    /** @var int */
+    public $timecreated;
+
+    /** @var int */
+    public $timemodified;
+
+    /** @var float */
+    public $grade;
+
+    /** @var float */
+    public $gradinggrade;
+
+    /** @var float */
+    public $gradinggradeover;
+
+    /** @var array */
+    protected $fields = array('id', 'submissionid', 'weight', 'timecreated',
+        'timemodified', 'grade', 'gradinggrade', 'gradinggradeover');
 }
 
 
+/**
+ * Represents a renderable training assessment of an example submission
+ */
+class workshop_example_assessment extends workshop_assessment implements renderable {
 
-function workshop_print_time_to_deadline($time) {
-    if ($time < 0) {
-        $timetext = get_string("afterdeadline", "workshop", format_time($time));
-        return " (<span class=\"redfont\">$timetext</span>)";
-    } else {
-        $timetext = get_string("beforedeadline", "workshop", format_time($time));
-        return " ($timetext)";
+    /**
+     * @see parent::validate_raw_record()
+     */
+    protected function validate_raw_record(stdClass $record) {
+        if ($record->weight != 0) {
+            throw new coding_exception('Invalid weight of example submission assessment');
+        }
+        parent::validate_raw_record($record);
     }
 }
 
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_print_upload_form($workshop) {
-    global $CFG;
+/**
+ * Represents a renderable reference assessment of an example submission
+ */
+class workshop_example_reference_assessment extends workshop_assessment implements renderable {
 
-    if (! $course = get_record("course", "id", $workshop->course)) {
-        error("Course is misconfigured");
-    }
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $course->id)) {
-        error("Course Module ID was incorrect");
-    }
-    $usehtmleditor = can_use_html_editor();
-
-    echo "<div class=\"workshopuploadform\">";
-    echo "<form enctype=\"multipart/form-data\" method=\"POST\" action=\"upload.php\">";
-    echo "<fieldset class=\"invisiblefieldset\">";
-    echo " <input type=\"hidden\" name=\"id\" value=\"$cm->id\" />";
-    echo "<table celpadding=\"5\" border=\"1\" align=\"center\">\n";
-    // now get the submission
-    echo "<tr valign=\"top\"><td><b>". get_string("title", "workshop").":</b>\n";
-    echo "<input type=\"text\" name=\"title\" size=\"60\" maxlength=\"100\" value=\"\" />\n";
-    echo "</td></tr><tr><td><b>".get_string("submission", "workshop").":</b><br />\n";
-    print_textarea($usehtmleditor, 25,70, 630, 400, "description");
-    use_html_editor("description");
-    echo "</td></tr><tr><td>\n";
-    if ($workshop->nattachments) {
-        require_once($CFG->dirroot.'/lib/uploadlib.php');
-        for ($i=0; $i < $workshop->nattachments; $i++) {
-            $iplus1 = $i + 1;
-            $tag[$i] = get_string("attachment", "workshop")." $iplus1:";
-        }
-        upload_print_form_fragment($workshop->nattachments,null,$tag,false,null,$course->maxbytes,
-                $workshop->maxbytes,false);
-    }
-    echo "</td></tr></table>\n";
-    echo " <input type=\"submit\" name=\"save\" value=\"".get_string("submitassignment","workshop")."\" />";
-    echo "</fieldset></form>";
-    echo "</div>";
+    /**
+     * @see parent::validate_raw_record()
+     */
+    protected function validate_raw_record(stdClass $record) {
+        if ($record->weight != 1) {
+            throw new coding_exception('Invalid weight of the reference example submission assessment');
+        }
+        parent::validate_raw_record($record);
+    }
 }
 
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_print_user_assessments($workshop, $user, &$gradinggrade) {
-    // Returns the number of assessments and a hyperlinked list of grading grades for the assessments made by this user
+/**
+ * Renderable message to be displayed to the user
+ *
+ * Message can contain an optional action link with a label that is supposed to be rendered
+ * as a button or a link.
+ *
+ * @see workshop::renderer::render_workshop_message()
+ */
+class workshop_message implements renderable {
+
+    const TYPE_INFO     = 10;
+    const TYPE_OK       = 20;
+    const TYPE_ERROR    = 30;
+
+    /** @var string */
+    protected $text = '';
+    /** @var int */
+    protected $type = self::TYPE_INFO;
+    /** @var moodle_url */
+    protected $actionurl = null;
+    /** @var string */
+    protected $actionlabel = '';
+
+    /**
+     * @param string $text short text to be displayed
+     * @param string $type optional message type info|ok|error
+     */
+    public function __construct($text = null, $type = self::TYPE_INFO) {
+        $this->set_text($text);
+        $this->set_type($type);
+    }
+
+    /**
+     * Sets the message text
+     *
+     * @param string $text short text to be displayed
+     */
+    public function set_text($text) {
+        $this->text = $text;
+    }
+
+    /**
+     * Sets the message type
+     *
+     * @param int $type
+     */
+    public function set_type($type = self::TYPE_INFO) {
+        if (in_array($type, array(self::TYPE_OK, self::TYPE_ERROR, self::TYPE_INFO))) {
+            $this->type = $type;
+        } else {
+            throw new coding_exception('Unknown message type.');
+        }
+    }
 
-    if (! $cm = get_coursemodule_from_instance("workshop", $workshop->id, $workshop->course)) {
-            error("Course Module ID was incorrect");
+    /**
+     * Sets the optional message action
+     *
+     * @param moodle_url $url to follow on action
+     * @param string $label action label
+     */
+    public function set_action(moodle_url $url, $label) {
+        $this->actionurl    = $url;
+        $this->actionlabel  = $label;
     }
-    $gradinggrade = 0;
-    $n = 0;
-    $str = '';
-    if ($assessments = workshop_get_user_assessments_done($workshop, $user)) {
-        foreach ($assessments as $assessment) {
-            $gradinggrade += $assessment->gradinggrade;
-            $n++;
-            $str .= "<a href=\"viewassessment.php?aid=$assessment->id\">";
-            if ($assessment->timegraded) {
-                if ($assessment->gradinggrade) {
-                    $str .= "{".number_format($assessment->grade * $workshop->grade / 100, 0);
-                    if ($assessment->teachergraded) {
-                        $str .= " [".number_format($assessment->gradinggrade * $workshop->gradinggrade / 100)."]}</a> ";
-                    } else {
-                        $str .= " (".number_format($assessment->gradinggrade * $workshop->gradinggrade / 100).")}</a> ";
+
+    /**
+     * Returns message text with HTML tags quoted
+     *
+     * @return string
+     */
+    public function get_message() {
+        return s($this->text);
                     }
-                } else {
-                    $str .= "&lt;".number_format($assessment->grade * $workshop->grade / 100, 0)." (0)&gt;</a> ";
+
+    /**
+     * Returns message type
+     *
+     * @return int
+     */
+    public function get_type() {
+        return $this->type;
+    }
+
+    /**
+     * Returns action URL
+     *
+     * @return moodle_url|null
+     */
+    public function get_action_url() {
+        return $this->actionurl;
+    }
+
+    /**
+     * Returns action label
+     *
+     * @return string
+     */
+    public function get_action_label() {
+        return $this->actionlabel;
                 }
+}
+
+/**
+ * Renderable output of submissions allocation process
+ */
+class workshop_allocation_init_result implements renderable {
+
+    /** @var workshop_message */
+    protected $message;
+    /** @var array of steps */
+    protected $info = array();
+    /** @var moodle_url */
+    protected $continue;
+
+    /**
+     * Supplied argument can be either integer status code or an array of string messages. Messages
+     * in a array can have optional prefix or prefixes, using '::' as delimiter. Prefixes determine
+     * the type of the message and may influence its visualisation.
+     *
+     * @param mixed $result int|array returned by {@see workshop_allocator::init()}
+     * @param moodle_url to continue
+     */
+    public function __construct($result, moodle_url $continue) {
+
+        if ($result === workshop::ALLOCATION_ERROR) {
+            $this->message = new workshop_message(get_string('allocationerror', 'workshop'), workshop_message::TYPE_ERROR);
             } else {
-                $str .= "{".number_format($assessment->grade * $workshop->grade / 100, 0)." (-)}</a> ";
+            $this->message = new workshop_message(get_string('allocationdone', 'workshop'), workshop_message::TYPE_OK);
+            if (is_array($result)) {
+                $this->info = $result;
             }
-            $str .= '<br />';
         }
+
+        $this->continue = $continue;
     }
-    else {
-        $str ="0";
+
+    /**
+     * @return workshop_message instance to render
+     */
+    public function get_message() {
+        return $this->message;
     }
-    if ($n = max($n, $workshop->ntassessments + $workshop->nsassessments)) {
-        $gradinggrade = number_format($gradinggrade/$n * $workshop->gradinggrade / 100, 1);
+
+    /**
+     * @return array of strings with allocation process details
+     */
+    public function get_info() {
+        return $this->info;
     }
     
-    return $str;
+    /**
+     * @return moodle_url where the user shoudl continue
+     */
+    public function get_continue_url() {
+        return $this->continue;
+    }
 }
 
+/**
+ * Renderable component containing all the data needed to display the grading report
+ */
+class workshop_grading_report implements renderable {
+
+    /** @var stdClass returned by {@see workshop::prepare_grading_report_data()} */
+    protected $data;
+    /** @var stdClass rendering options */
+    protected $options;
+
+    /**
+     * Grades in $data must be already rounded to the set number of decimals or must be null
+     * (in which later case, the [mod_workshop,nullgrade] string shall be displayed)
+     *
+     * @param stdClass $data prepared by {@link workshop::prepare_grading_report_data()}
+     * @param stdClass $options display options (showauthornames, showreviewernames, sortby, sorthow, showsubmissiongrade, showgradinggrade)
+     */
+    public function __construct(stdClass $data, stdClass $options) {
+        $this->data     = $data;
+        $this->options  = $options;
+    }
+
+    /**
+     * @return stdClass grading report data
+     */
+    public function get_data() {
+        return $this->data;
+    }
+
+    /**
+     * @return stdClass rendering options
+     */
+    public function get_options() {
+        return $this->options;
+    }
+}
 
-//////////////////////////////////////////////////////////////////////////////////////
-function workshop_test_user_assessments($workshop, $user) {
-    // see if user has assessed required number of assessments of teachers submissions...
-    global $CFG;
     
-    $result = true;
-    $n = 0;
-    $timenow =time();
-    if ($submissions = workshop_get_teacher_submissions($workshop)) {
-        foreach ($submissions as $submission) {
-            if ($assessment = workshop_get_submission_assessment($submission, $user)) {
-                // ...the date stamp on the assessment should be in the past 
-                if ($assessment->timecreated < $timenow) {
-                    $n++;
+/**
+ * Base class for renderable feedback for author and feedback for reviewer
+ */
+abstract class workshop_feedback {
+
+    /** @var stdClass the user info */
+    protected $provider = null;
+
+    /** @var string the feedback text */
+    protected $content = null;
+
+    /** @var int format of the feedback text */
+    protected $format = null;
+
+    /**
+     * @return stdClass the user info
+     */
+    public function get_provider() {
+
+        if (is_null($this->provider)) {
+            throw new coding_exception('Feedback provider not set');
+        }
+
+        return $this->provider;
                 }
+
+    /**
+     * @return string the feedback text
+     */
+    public function get_content() {
+
+        if (is_null($this->content)) {
+            throw new coding_exception('Feedback content not set');
+        }
+
+        return $this->content;
             }
+
+    /**
+     * @return int format of the feedback text
+     */
+    public function get_format() {
+
+        if (is_null($this->format)) {
+            throw new coding_exception('Feedback text format not set');
         }
-        if ($n < min($workshop->ntassessments, workshop_count_teacher_submissions($workshop))) {
-            $result = false; 
+
+        return $this->format;
         }
+}
+
+
+/**
+ * Renderable feedback for the author of submission
+ */
+class workshop_feedback_author extends workshop_feedback implements renderable {
+
+    /**
+     * Extracts feedback from the given submission record
+     *
+     * @param stdClass $submission record as returned by {@see self::get_submission_by_id()}
+     */
+    public function __construct(stdClass $submission) {
+
+        $this->provider = user_picture::unalias($submission, null, 'gradeoverbyx', 'gradeoverby');
+        $this->content  = $submission->feedbackauthor;
+        $this->format   = $submission->feedbackauthorformat;
     }
-    return $result;
 }
     
 
-?>
+/**
+ * Renderable feedback for the reviewer
+ */
+class workshop_feedback_reviewer extends workshop_feedback implements renderable {
+
+    /**
+     * Extracts feedback from the given assessment record
+     *
+     * @param stdClass $assessment record as returned by eg {@see self::get_assessment_by_id()}
+     */
+    public function __construct(stdClass $assessment) {
+
+        $this->provider = user_picture::unalias($assessment, null, 'gradinggradeoverbyx', 'overby');
+        $this->content  = $assessment->feedbackreviewer;
+        $this->format   = $assessment->feedbackreviewerformat;
+    }
+}
