diff --git a/mod/choice/mod_form.php b/mod/choice/mod_form.php
index dc8212b..afacc4a 100644
--- a/mod/choice/mod_form.php
+++ b/mod/choice/mod_form.php
@@ -1,10 +1,14 @@
 <?php
+if (!defined('MOODLE_INTERNAL')) {
+    die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
+}
+
 require_once ($CFG->dirroot.'/course/moodleform_mod.php');
 
 class mod_choice_mod_form extends moodleform_mod {
 
     function definition() {
-        global $CFG, $CHOICE_SHOWRESULTS, $CHOICE_PUBLISH, $CHOICE_DISPLAY;
+        global $CFG, $CHOICE_SHOWRESULTS, $CHOICE_PUBLISH, $CHOICE_DISPLAY, $DB;
 
         $mform    =& $this->_form;
 
@@ -15,33 +19,28 @@ class mod_choice_mod_form extends moodleform_mod {
         if (!empty($CFG->formatstringstriptags)) {
             $mform->setType('name', PARAM_TEXT);
         } else {
-            $mform->setType('name', PARAM_CLEAN);
+            $mform->setType('name', PARAM_CLEANHTML);
         }
         $mform->addRule('name', null, 'required', null, 'client');
 
-        $mform->addElement('htmleditor', 'text', get_string('choicetext', 'choice'));
-        $mform->setType('text', PARAM_RAW);
-        $mform->addRule('text', null, 'required', null, 'client');
-        $mform->setHelpButton('text', array('writing', 'questions', 'richtext'), false, 'editorhelpbutton');
-
-        $mform->addElement('format', 'format', get_string('format'));
+        $this->add_intro_editor(true, get_string('chatintro', 'chat'));
 
 //-------------------------------------------------------------------------------
-        $repeatarray=array();
-        $repeatarray[] = &MoodleQuickForm::createElement('header', '', get_string('choice','choice').' {no}');
-        $repeatarray[] = &MoodleQuickForm::createElement('text', 'option', get_string('choice','choice'));
+        $repeatarray = array();
+        $repeatarray[] = &MoodleQuickForm::createElement('header', '', get_string('option','choice').' {no}');
+        $repeatarray[] = &MoodleQuickForm::createElement('text', 'option', get_string('option','choice'));
         $repeatarray[] = &MoodleQuickForm::createElement('text', 'limit', get_string('limit','choice'));
         $repeatarray[] = &MoodleQuickForm::createElement('hidden', 'optionid', 0);
 
-        $menuoptions=array();
+        $menuoptions = array();
         $menuoptions[0] = get_string('disable');
         $menuoptions[1] = get_string('enable');
         $mform->addElement('header', 'timerestricthdr', get_string('limit', 'choice'));
         $mform->addElement('select', 'limitanswers', get_string('limitanswers', 'choice'), $menuoptions);
-        $mform->setHelpButton('limitanswers', array('limit', get_string('limit', 'choice'), 'choice'));
+        $mform->addHelpButton('limitanswers', 'limitanswers', 'choice');
 
         if ($this->_instance){
-            $repeatno=count_records('choice_options', 'choiceid', $this->_instance);
+            $repeatno = $DB->count_records('choice_options', array('choiceid'=>$this->_instance));
             $repeatno += 2;
         } else {
             $repeatno = 5;
@@ -50,10 +49,10 @@ class mod_choice_mod_form extends moodleform_mod {
         $repeateloptions = array();
         $repeateloptions['limit']['default'] = 0;
         $repeateloptions['limit']['disabledif'] = array('limitanswers', 'eq', 0);
-        $mform->setType('limit', PARAM_INT);
+        $repeateloptions['limit']['rule'] = 'numeric';
 
-        $repeateloptions['option']['helpbutton'] = array('options', get_string('modulenameplural', 'choice'), 'choice');
-        $mform->setType('option', PARAM_CLEAN);
+        $repeateloptions['option']['helpbutton'] = array('choiceoptions', 'choice');
+        $mform->setType('option', PARAM_CLEANHTML);
 
         $mform->setType('optionid', PARAM_INT);
 
@@ -66,8 +65,6 @@ class mod_choice_mod_form extends moodleform_mod {
 //-------------------------------------------------------------------------------
         $mform->addElement('header', 'timerestricthdr', get_string('timerestrict', 'choice'));
         $mform->addElement('checkbox', 'timerestrict', get_string('timerestrict', 'choice'));
-        $mform->setHelpButton('timerestrict', array("timerestrict", get_string("timerestrict","choice"), "choice"));
-
 
         $mform->addElement('date_time_selector', 'timeopen', get_string("choiceopen", "choice"));
         $mform->disabledIf('timeopen', 'timerestrict');
@@ -91,19 +88,15 @@ class mod_choice_mod_form extends moodleform_mod {
 
 
 //-------------------------------------------------------------------------------
-        $features = new stdClass;
-        $features->groups = true;
-        $features->groupings = true;
-        $features->groupmembersonly = true;
-        $features->gradecat = false;
-        $this->standard_coursemodule_elements($features);
+        $this->standard_coursemodule_elements();
 //-------------------------------------------------------------------------------
         $this->add_action_buttons();
     }
 
     function data_preprocessing(&$default_values){
-        if (!empty($this->_instance) && ($options = get_records_menu('choice_options','choiceid', $this->_instance, 'id', 'id,text'))
-               && ($options2 = get_records_menu('choice_options','choiceid', $this->_instance, 'id', 'id,maxanswers')) ) {
+        global $DB;
+        if (!empty($this->_instance) && ($options = $DB->get_records_menu('choice_options',array('choiceid'=>$this->_instance), 'id', 'id,text'))
+               && ($options2 = $DB->get_records_menu('choice_options', array('choiceid'=>$this->_instance), 'id', 'id,maxanswers')) ) {
             $choiceids=array_keys($options);
             $options=array_values($options);
             $options2=array_values($options2);
@@ -134,15 +127,33 @@ class mod_choice_mod_form extends moodleform_mod {
         }
 
         if ($choices < 1) {
-           $errors['option[0]'] = get_string('fillinatleastoneoption', 'choice');
+           $errors['option[0]'] = get_string('atleastoneoption', 'choice');
         }
 
-        if ($choices < 2) {
-           $errors['option[1]'] = get_string('fillinatleastoneoption', 'choice');
+        return $errors;
         }
 
-        return $errors;
+    function get_data() {
+        $data = parent::get_data();
+        if (!$data) {
+            return false;
+        }
+        // Set up completion section even if checkbox is not ticked
+        if (empty($data->completionsection)) {
+            $data->completionsection=0;
     }
+        return $data;
+    }
+
+    function add_completion_rules() {
+        $mform =& $this->_form;
 
+        $mform->addElement('checkbox', 'completionsubmit', '', get_string('completionsubmit', 'choice'));
+        return array('completionsubmit');
+    }
+
+    function completion_rule_enabled($data) {
+        return !empty($data['completionsubmit']);
+    }
 }
-?>
+
