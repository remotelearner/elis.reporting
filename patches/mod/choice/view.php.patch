diff --git a/mod/choice/view.php b/mod/choice/view.php
index 767deb9..f631990 100644
--- a/mod/choice/view.php
+++ b/mod/choice/view.php
@@ -1,24 +1,31 @@
-<?php  // $Id$
+<?php
 
     require_once("../../config.php");
     require_once("lib.php");
+    require_once($CFG->libdir . '/completionlib.php');
 
     $id         = required_param('id', PARAM_INT);                 // Course Module ID
     $action     = optional_param('action', '', PARAM_ALPHA);
     $attemptids = optional_param('attemptid', array(), PARAM_INT); // array of attempt ids for delete action
     
+    $url = new moodle_url('/mod/choice/view.php', array('id'=>$id));
+    if ($action !== '') {
+        $url->param('action', $action);
+    }
+    $PAGE->set_url($url);
+
     if (! $cm = get_coursemodule_from_id('choice', $id)) {
-        error("Course Module ID was incorrect");
+        print_error('invalidcoursemodule');
     }
 
-    if (! $course = get_record("course", "id", $cm->course)) {
-        error("Course is misconfigured");
+    if (! $course = $DB->get_record("course", array("id" => $cm->course))) {
+        print_error('coursemisconf');
     }
 
     require_course_login($course, false, $cm);
 
     if (!$choice = choice_get_choice($cm->instance)) {
-        error("Course module is incorrect");
+        print_error('invalidcoursemodule');
     }
     
     $strchoice = get_string('modulename', 'choice');
@@ -28,22 +35,31 @@
         print_error('badcontext');
     }
 
-    if ($action == 'delchoice' and confirm_sesskey() and has_capability('mod/choice:choose', $context) and $choice->allowupdate) {
-        if ($answer = get_record('choice_answers', 'choiceid', $choice->id, 'userid', $USER->id)) {
-            //print_object($answer);
-            delete_records('choice_answers', 'id', $answer->id);
+    if ($action == 'delchoice' and confirm_sesskey() and is_enrolled($context, NULL, 'mod/choice:choose') and $choice->allowupdate) {
+        if ($answer = $DB->get_record('choice_answers', array('choiceid' => $choice->id, 'userid' => $USER->id))) {
+            $DB->delete_records('choice_answers', array('id' => $answer->id));
+
+            // Update completion state
+            $completion = new completion_info($course);
+            if ($completion->is_enabled($cm) && $choice->completionsubmit) {
+                $completion->update_state($cm, COMPLETION_INCOMPLETE);
         }
     }
-    $navigation = build_navigation('', $cm);
-    print_header_simple(format_string($choice->name), "", $navigation, "", "", true,
-                  update_module_button($cm->id, $course->id, $strchoice), navmenu($course, $cm));
+    }
+
+    $PAGE->set_title(format_string($choice->name));
+    $PAGE->set_heading($course->fullname);
+
+    // Mark viewed by user (if required)
+    $completion = new completion_info($course);
+    $completion->set_module_viewed($cm);
 
 /// Submit any new data if there is any
-    if ($form = data_submitted() && has_capability('mod/choice:choose', $context) && confirm_sesskey()) {
+    if (data_submitted() && is_enrolled($context, NULL, 'mod/choice:choose') && confirm_sesskey()) {
         $timenow = time();
         if (has_capability('mod/choice:deleteresponses', $context)) {
             if ($action == 'delete') { //some responses need to be deleted     
-                choice_delete_responses($attemptids, $choice->id); //delete responses.
+                choice_delete_responses($attemptids, $choice, $cm, $course); //delete responses.
                 redirect("view.php?id=$cm->id");
             }
         }
@@ -52,9 +68,12 @@
         if (empty($answer)) {
             redirect("view.php?id=$cm->id", get_string('mustchooseone', 'choice'));
         } else {
-            choice_user_submit_response($answer, $choice, $USER->id, $course->id, $cm);
+            choice_user_submit_response($answer, $choice, $USER->id, $course, $cm);
         }
-        notify(get_string('choicesaved','choice'),'notifysuccess');
+        echo $OUTPUT->header();
+        echo $OUTPUT->notification(get_string('choicesaved', 'choice'),'notifysuccess');
+    } else {
+        echo $OUTPUT->header();
     }
 
 
@@ -77,15 +96,15 @@
 
     echo '<div class="clearer"></div>';
 
-    if ($choice->text) {
-        print_box(format_text($choice->text, $choice->format), 'generalbox', 'intro');
+    if ($choice->intro) {
+        echo $OUTPUT->box(format_module_intro('choice', $choice, $cm->id), 'generalbox', 'intro');
     }
 
     $current = false;  // Initialise for later
     //if user has already made a selection, and they are not allowed to update it, show their selected answer.
-    if (!empty($USER->id) && ($current = get_record('choice_answers', 'choiceid', $choice->id, 'userid', $USER->id)) &&
+    if (isloggedin() && ($current = $DB->get_record('choice_answers', array('choiceid' => $choice->id, 'userid' => $USER->id))) &&
         empty($choice->allowupdate) ) {
-        print_simple_box(get_string("yourselection", "choice", userdate($choice->timeopen)).": ".format_string(choice_get_option_text($choice, $current->optionid)), "center");
+        echo $OUTPUT->box(get_string("yourselection", "choice", userdate($choice->timeopen)).": ".format_string(choice_get_option_text($choice, $current->optionid)), 'generalbox', 'yourselection');
     }
 
 /// Print the form
@@ -93,73 +112,66 @@
     $timenow = time();
     if ($choice->timeclose !=0) {
         if ($choice->timeopen > $timenow ) {
-            print_simple_box(get_string("notopenyet", "choice", userdate($choice->timeopen)), "center");
-            print_footer($course);
+            echo $OUTPUT->box(get_string("notopenyet", "choice", userdate($choice->timeopen)), "generalbox notopenyet");
+            echo $OUTPUT->footer();
             exit;
         } else if ($timenow > $choice->timeclose) {
-            print_simple_box(get_string("expired", "choice", userdate($choice->timeclose)), "center");
+            echo $OUTPUT->box(get_string("expired", "choice", userdate($choice->timeclose)), "generalbox expired");
             $choiceopen = false;
         }
     }
 
-    if ( (!$current or $choice->allowupdate) and $choiceopen and
-          has_capability('mod/choice:choose', $context) ) {
+    if ( (!$current or $choice->allowupdate) and $choiceopen and is_enrolled($context, NULL, 'mod/choice:choose')) {
     // They haven't made their choice yet or updates allowed and choice is open
 
-        echo '<form id="form" method="post" action="view.php">';        
-
-        choice_show_form($choice, $USER, $cm, $allresponses);
-
-        echo '</form>';
-
+        $options = choice_prepare_options($choice, $USER, $cm, $allresponses);
+        $renderer = $PAGE->get_renderer('mod_choice');
+        echo $renderer->display_options($options, $cm->id, $choice->display);
         $choiceformshown = true;
     } else {
         $choiceformshown = false;
     }
 
-
-
     if (!$choiceformshown) {
-
         $sitecontext = get_context_instance(CONTEXT_SYSTEM);
 
-        if (has_capability('moodle/legacy:guest', $sitecontext, NULL, false)) {      // Guest on whole site
-            $wwwroot = $CFG->wwwroot.'/login/index.php';
-            if (!empty($CFG->loginhttps)) {
-                $wwwroot = str_replace('http:','https:', $wwwroot);
-            }
-            notice_yesno(get_string('noguestchoose', 'choice').'<br /><br />'.get_string('liketologin'),
-                         $wwwroot, $_SERVER['HTTP_REFERER']);
-
-        } else if (has_capability('moodle/legacy:guest', $context, NULL, false)) {   // Guest in this course only
+        if (isguestuser()) {
+            // Guest account
+            echo $OUTPUT->confirm(get_string('noguestchoose', 'choice').'<br /><br />'.get_string('liketologin'),
+                         get_login_url(), new moodle_url('/course/view.php', array('id'=>$course->id)));
+        } else if (!is_enrolled($context)) {
+            // Only people enrolled can make a choice
             $SESSION->wantsurl = $FULLME;
-            $SESSION->enrolcancel = $_SERVER['HTTP_REFERER'];
+            $SESSION->enrolcancel = (!empty($_SERVER['HTTP_REFERER'])) ? $_SERVER['HTTP_REFERER'] : '';
+
+            $coursecontext = get_context_instance(CONTEXT_COURSE, $course->id);
+            $courseshortname = format_string($course->shortname, true, array('context' => $coursecontext));
 
-            print_simple_box_start('center', '60%', '', 5, 'generalbox', 'notice');
-            echo '<p align="center">'. get_string('noguestchoose', 'choice') .'</p>';
-            echo '<div class="continuebutton">';
-            print_single_button($CFG->wwwroot.'/course/enrol.php?id='.$course->id, NULL, 
-                                get_string('enrolme', '', format_string($course->shortname)), 'post', $CFG->framename);
-            echo '</div>'."\n";
-            print_simple_box_end();
+            echo $OUTPUT->box_start('generalbox', 'notice');
+            echo '<p align="center">'. get_string('notenrolledchoose', 'choice') .'</p>';
+            echo $OUTPUT->container_start('continuebutton');
+            echo $OUTPUT->single_button(new moodle_url('/enrol/index.php?', array('id'=>$course->id)), get_string('enrolme', 'core_enrol', $courseshortname));
+            echo $OUTPUT->container_end();
+            echo $OUTPUT->box_end();
 
         }
     }
 
     // print the results at the bottom of the screen
-
     if ( $choice->showresults == CHOICE_SHOWRESULTS_ALWAYS or
-        ($choice->showresults == CHOICE_SHOWRESULTS_AFTER_ANSWER and $current ) or
-        ($choice->showresults == CHOICE_SHOWRESULTS_AFTER_CLOSE and !$choiceopen ) )  {
+        ($choice->showresults == CHOICE_SHOWRESULTS_AFTER_ANSWER and $current) or
+        ($choice->showresults == CHOICE_SHOWRESULTS_AFTER_CLOSE and !$choiceopen)) {
 
-        choice_show_results($choice, $course, $cm, $allresponses); //show table with students responses.
+        if (!empty($choice->showunanswered)) {
+            $choice->option[0] = get_string('notanswered', 'choice');
+            $choice->maxanswers[0] = 0;
+        }
+        $results = prepare_choice_show_results($choice, $course, $cm, $allresponses);
+        $renderer = $PAGE->get_renderer('mod_choice');
+        echo $renderer->display_result($results);
 
     } else if (!$choiceformshown) {
-        print_simple_box(get_string('noresultsviewable', 'choice'), 'center');
+        echo $OUTPUT->box(get_string('noresultsviewable', 'choice'));
     } 
 
-
-    print_footer($course);
-
-
-?>
+    echo $OUTPUT->footer();
