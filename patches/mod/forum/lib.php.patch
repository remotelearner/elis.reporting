diff --git a/mod/forum/lib.php b/mod/forum/lib.php
index 64c56a2..2129110 100644
--- a/mod/forum/lib.php
+++ b/mod/forum/lib.php
@@ -1,6 +1,30 @@
-<?php  // $Id$
-
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package mod-forum
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+/** Include required files */
 require_once($CFG->libdir.'/filelib.php');
+require_once($CFG->libdir.'/eventslib.php');
+require_once($CFG->dirroot.'/user/selector/lib.php');
 
 /// CONSTANTS ///////////////////////////////////////////////////////////
 
@@ -9,6 +33,7 @@ define('FORUM_MODE_FLATNEWEST', -1);
 define('FORUM_MODE_THREADED', 2);
 define('FORUM_MODE_NESTED', 3);
 
+define('FORUM_CHOOSESUBSCRIBE', 0);
 define('FORUM_FORCESUBSCRIBE', 1);
 define('FORUM_INITIALSUBSCRIBE', 2);
 define('FORUM_DISALLOWSUBSCRIBE',3);
@@ -17,27 +42,21 @@ define('FORUM_TRACKING_OFF', 0);
 define('FORUM_TRACKING_OPTIONAL', 1);
 define('FORUM_TRACKING_ON', 2);
 
-define('FORUM_UNSET_POST_RATING', -999);
-
-define ('FORUM_AGGREGATE_NONE', 0); //no ratings
-define ('FORUM_AGGREGATE_AVG', 1);
-define ('FORUM_AGGREGATE_COUNT', 2);
-define ('FORUM_AGGREGATE_MAX', 3);
-define ('FORUM_AGGREGATE_MIN', 4);
-define ('FORUM_AGGREGATE_SUM', 5);
-
 /// STANDARD FUNCTIONS ///////////////////////////////////////////////////////////
 
 /**
  * Given an object containing all the necessary data,
- * (defined by the form in mod.html) this function
+ * (defined by the form in mod_form.php) this function
  * will create a new instance and return the id number
  * of the new instance.
+ *
+ * @global object
+ * @global object
  * @param object $forum add forum instance (with magic quotes)
  * @return int intance id
  */
-function forum_add_instance($forum) {
-    global $CFG;
+function forum_add_instance($forum, $mform) {
+    global $CFG, $DB;
 
     $forum->timemodified = time();
 
@@ -50,23 +69,32 @@ function forum_add_instance($forum) {
         $forum->assesstimefinish = 0;
     }
 
-    if (!$forum->id = insert_record('forum', $forum)) {
-        return false;
-    }
+    $forum->id = $DB->insert_record('forum', $forum);
+    $modcontext = get_context_instance(CONTEXT_MODULE, $forum->coursemodule);
 
     if ($forum->type == 'single') {  // Create related discussion.
-        $discussion = new object();
+        $discussion = new stdClass();
         $discussion->course   = $forum->course;
         $discussion->forum    = $forum->id;
         $discussion->name     = $forum->name;
-        $discussion->intro    = $forum->intro;
         $discussion->assessed = $forum->assessed;
-        $discussion->format   = $forum->type;
+        $discussion->message       = $forum->intro;
+        $discussion->messageformat = $forum->introformat;
+        $discussion->messagetrust  = trusttext_trusted(get_context_instance(CONTEXT_COURSE, $forum->course));
         $discussion->mailnow  = false;
         $discussion->groupid  = -1;
 
-        if (! forum_add_discussion($discussion, $discussion->intro)) {
-            error('Could not add the discussion for this forum');
+        $message = '';
+
+        $discussion->id = forum_add_discussion($discussion, null, $message);
+
+        if ($mform and $draftid = file_get_submitted_draft_itemid('introeditor')) {
+            // ugly hack - we need to copy the files somehow
+            $discussion = $DB->get_record('forum_discussions', array('id'=>$discussion->id), '*', MUST_EXIST);
+            $post = $DB->get_record('forum_posts', array('id'=>$discussion->firstpost), '*', MUST_EXIST);
+
+            $post->message = file_save_draft_area_files($draftid, $modcontext->id, 'mod_forum', 'post', $post->id, array('subdirs'=>true), $post->message);
+            $DB->set_field('forum_posts', 'message', $post->message, array('id'=>$post->id));
         }
     }
 
@@ -77,13 +105,12 @@ function forum_add_instance($forum) {
     /// stage. However, because the forum is brand new, we know that there are
     /// no role assignments or overrides in the forum context, so using the
     /// course context gives the same list of users.
-        $users = forum_get_potential_subscribers(get_context_instance(CONTEXT_COURSE, $forum->course), 0, 'u.id, u.email', '');
+        $users = forum_get_potential_subscribers($modcontext, 0, 'u.id, u.email', '');
         foreach ($users as $user) {
             forum_subscribe($user->id, $forum->id);
         }
     }
 
-    $forum = stripslashes_recursive($forum);
     forum_grade_item_update($forum);
 
     return $forum->id;
@@ -92,13 +119,15 @@ function forum_add_instance($forum) {
 
 /**
  * Given an object containing all the necessary data,
- * (defined by the form in mod.html) this function
+ * (defined by the form in mod_form.php) this function
  * will update an existing instance with new data.
+ *
+ * @global object
  * @param object $forum forum instance (with magic quotes)
  * @return bool success
  */
-function forum_update_instance($forum) {
-    global $USER;
+function forum_update_instance($forum, $mform) {
+    global $DB, $OUTPUT, $USER;
 
     $forum->timemodified = time();
     $forum->id           = $forum->instance;
@@ -112,7 +141,7 @@ function forum_update_instance($forum) {
         $forum->assesstimefinish = 0;
     }
 
-    $oldforum = get_record('forum', 'id', $forum->id);
+    $oldforum = $DB->get_record('forum', array('id'=>$forum->id));
 
     // MDL-3942 - if the aggregation type or scale (i.e. max grade) changes then recalculate the grades for the entire forum
     // if  scale changes - do we need to recheck the ratings, if ratings higher than scale how do we want to respond?
@@ -122,55 +151,62 @@ function forum_update_instance($forum) {
     }
 
     if ($forum->type == 'single') {  // Update related discussion and post.
-        if (! $discussion = get_record('forum_discussions', 'forum', $forum->id)) {
-            if ($discussions = get_records('forum_discussions', 'forum', $forum->id, 'timemodified ASC')) {
-                notify('Warning! There is more than one discussion in this forum - using the most recent');
+        $discussions = $DB->get_records('forum_discussions', array('forum'=>$forum->id), 'timemodified ASC');
+        if (!empty($discussions)) {
+            if (count($discussions) > 1) {
+                echo $OUTPUT->notification(get_string('warnformorepost', 'forum'));
+            }
                 $discussion = array_pop($discussions);
             } else {
                 // try to recover by creating initial discussion - MDL-16262
-                $discussion = new object();
+            $discussion = new stdClass();
                 $discussion->course   = $forum->course;
                 $discussion->forum    = $forum->id;
                 $discussion->name     = $forum->name;
-                $discussion->intro    = $forum->intro;
                 $discussion->assessed = $forum->assessed;
-                $discussion->format   = $forum->type;
+            $discussion->message         = $forum->intro;
+            $discussion->messageformat   = $forum->introformat;
+            $discussion->messagetrust    = true;
                 $discussion->mailnow  = false;
                 $discussion->groupid  = -1;
 
-                forum_add_discussion($discussion, $discussion->intro);
+            $message = '';
 
-                if (! $discussion = get_record('forum_discussions', 'forum', $forum->id)) {
-                    error('Could not add the discussion for this forum');
-                }
+            forum_add_discussion($discussion, null, $message);
 
+            if (! $discussion = $DB->get_record('forum_discussions', array('forum'=>$forum->id))) {
+                print_error('cannotadd', 'forum');
             }
         }
-        if (! $post = get_record('forum_posts', 'id', $discussion->firstpost)) {
-            error('Could not find the first post in this forum discussion');
+        if (! $post = $DB->get_record('forum_posts', array('id'=>$discussion->firstpost))) {
+            print_error('cannotfindfirstpost', 'forum');
+        }
+
+        $cm         = get_coursemodule_from_instance('forum', $forum->id);
+        $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id, MUST_EXIST);
+
+        if ($mform and $draftid = file_get_submitted_draft_itemid('introeditor')) {
+            // ugly hack - we need to copy the files somehow
+            $discussion = $DB->get_record('forum_discussions', array('id'=>$discussion->id), '*', MUST_EXIST);
+            $post = $DB->get_record('forum_posts', array('id'=>$discussion->firstpost), '*', MUST_EXIST);
+
+            $post->message = file_save_draft_area_files($draftid, $modcontext->id, 'mod_forum', 'post', $post->id, array('subdirs'=>true), $post->message);
         }
 
         $post->subject  = $forum->name;
         $post->message  = $forum->intro;
+        $post->messageformat = $forum->introformat;
+        $post->messagetrust  = trusttext_trusted($modcontext);
         $post->modified = $forum->timemodified;
         $post->userid   = $USER->id;    // MDL-18599, so that current teacher can take ownership of activities
 
-        if (! update_record('forum_posts', ($post))) {
-            error('Could not update the first post');
-        }
-
+        $DB->update_record('forum_posts', $post);
         $discussion->name = $forum->name;
-
-        if (! update_record('forum_discussions', ($discussion))) {
-            error('Could not update the discussion');
-        }
+        $DB->update_record('forum_discussions', $discussion);
     }
 
-    if (!update_record('forum', $forum)) {
-        error('Can not update forum');
-    }
+    $DB->update_record('forum', $forum);
 
-    $forum = stripslashes_recursive($forum);
     forum_grade_item_update($forum);
 
     return true;
@@ -181,32 +217,47 @@ function forum_update_instance($forum) {
  * Given an ID of an instance of this module,
  * this function will permanently delete the instance
  * and any data that depends on it.
- * @param int forum instance id
+ *
+ * @global object
+ * @param int $id forum instance id
  * @return bool success
  */
 function forum_delete_instance($id) {
+    global $DB;
 
-    if (!$forum = get_record('forum', 'id', $id)) {
+    if (!$forum = $DB->get_record('forum', array('id'=>$id))) {
         return false;
     }
+    if (!$cm = get_coursemodule_from_instance('forum', $forum->id)) {
+        return false;
+    }
+    if (!$course = $DB->get_record('course', array('id'=>$cm->course))) {
+        return false;
+    }
+
+    $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+
+    // now get rid of all files
+    $fs = get_file_storage();
+    $fs->delete_area_files($context->id);
 
     $result = true;
 
-    if ($discussions = get_records('forum_discussions', 'forum', $forum->id)) {
+    if ($discussions = $DB->get_records('forum_discussions', array('forum'=>$forum->id))) {
         foreach ($discussions as $discussion) {
-            if (!forum_delete_discussion($discussion, true)) {
+            if (!forum_delete_discussion($discussion, true, $course, $cm, $forum)) {
                 $result = false;
             }
         }
     }
 
-    if (!delete_records('forum_subscriptions', 'forum', $forum->id)) {
+    if (!$DB->delete_records('forum_subscriptions', array('forum'=>$forum->id))) {
         $result = false;
     }
 
     forum_tp_delete_read_records(-1, -1, -1, $forum->id);
 
-    if (!delete_records('forum', 'id', $forum->id)) {
+    if (!$DB->delete_records('forum', array('id'=>$forum->id))) {
         $result = false;
     }
 
@@ -217,15 +268,118 @@ function forum_delete_instance($id) {
 
 
 /**
+ * Indicates API features that the forum supports.
+ *
+ * @uses FEATURE_GROUPS
+ * @uses FEATURE_GROUPINGS
+ * @uses FEATURE_GROUPMEMBERSONLY
+ * @uses FEATURE_MOD_INTRO
+ * @uses FEATURE_COMPLETION_TRACKS_VIEWS
+ * @uses FEATURE_COMPLETION_HAS_RULES
+ * @uses FEATURE_GRADE_HAS_GRADE
+ * @uses FEATURE_GRADE_OUTCOMES
+ * @param string $feature
+ * @return mixed True if yes (some features may use other values)
+ */
+function forum_supports($feature) {
+    switch($feature) {
+        case FEATURE_GROUPS:                  return true;
+        case FEATURE_GROUPINGS:               return true;
+        case FEATURE_GROUPMEMBERSONLY:        return true;
+        case FEATURE_MOD_INTRO:               return true;
+        case FEATURE_COMPLETION_TRACKS_VIEWS: return true;
+        case FEATURE_COMPLETION_HAS_RULES:    return true;
+        case FEATURE_GRADE_HAS_GRADE:         return true;
+        case FEATURE_GRADE_OUTCOMES:          return true;
+        case FEATURE_RATE:                    return true;
+        case FEATURE_BACKUP_MOODLE2:          return true;
+
+        default: return null;
+    }
+}
+
+
+/**
+ * Obtains the automatic completion state for this forum based on any conditions
+ * in forum settings.
+ *
+ * @global object
+ * @global object
+ * @param object $course Course
+ * @param object $cm Course-module
+ * @param int $userid User ID
+ * @param bool $type Type of comparison (or/and; can be used as return value if no conditions)
+ * @return bool True if completed, false if not. (If no conditions, then return
+ *   value depends on comparison type)
+ */
+function forum_get_completion_state($course,$cm,$userid,$type) {
+    global $CFG,$DB;
+
+    // Get forum details
+    if (!($forum=$DB->get_record('forum',array('id'=>$cm->instance)))) {
+        throw new Exception("Can't find forum {$cm->instance}");
+    }
+
+    $result=$type; // Default return value
+
+    $postcountparams=array('userid'=>$userid,'forumid'=>$forum->id);
+    $postcountsql="
+SELECT
+    COUNT(1)
+FROM
+    {forum_posts} fp
+    INNER JOIN {forum_discussions} fd ON fp.discussion=fd.id
+WHERE
+    fp.userid=:userid AND fd.forum=:forumid";
+
+    if ($forum->completiondiscussions) {
+        $value = $forum->completiondiscussions <=
+                 $DB->count_records('forum_discussions',array('forum'=>$forum->id,'userid'=>$userid));
+        if ($type == COMPLETION_AND) {
+            $result = $result && $value;
+        } else {
+            $result = $result || $value;
+        }
+    }
+    if ($forum->completionreplies) {
+        $value = $forum->completionreplies <=
+                 $DB->get_field_sql( $postcountsql.' AND fp.parent<>0',$postcountparams);
+        if ($type==COMPLETION_AND) {
+            $result = $result && $value;
+        } else {
+            $result = $result || $value;
+        }
+    }
+    if ($forum->completionposts) {
+        $value = $forum->completionposts <= $DB->get_field_sql($postcountsql,$postcountparams);
+        if ($type == COMPLETION_AND) {
+            $result = $result && $value;
+        } else {
+            $result = $result || $value;
+        }
+    }
+
+    return $result;
+}
+
+
+/**
  * Function to be run periodically according to the moodle cron
  * Finds all posts that have yet to be mailed out, and mails them
  * out to all subscribers
+ *
+ * @global object
+ * @global object
+ * @global object
+ * @uses CONTEXT_MODULE
+ * @uses CONTEXT_COURSE
+ * @uses SITEID
+ * @uses FORMAT_PLAIN
  * @return void
  */
 function forum_cron() {
-    global $CFG, $USER;
+    global $CFG, $USER, $DB;
 
-    $cronuser = clone($USER);
     $site = get_site();
 
     // all users that are subscribed to any post that needs sending
@@ -266,7 +420,7 @@ function forum_cron() {
 
             $discussionid = $post->discussion;
             if (!isset($discussions[$discussionid])) {
-                if ($discussion = get_record('forum_discussions', 'id', $post->discussion)) {
+                if ($discussion = $DB->get_record('forum_discussions', array('id'=> $post->discussion))) {
                     $discussions[$discussionid] = $discussion;
                 } else {
                     mtrace('Could not find discussion '.$discussionid);
@@ -276,7 +430,7 @@ function forum_cron() {
             }
             $forumid = $discussions[$discussionid]->forum;
             if (!isset($forums[$forumid])) {
-                if ($forum = get_record('forum', 'id', $forumid)) {
+                if ($forum = $DB->get_record('forum', array('id' => $forumid))) {
                     $forums[$forumid] = $forum;
                 } else {
                     mtrace('Could not find forum '.$forumid);
@@ -286,7 +440,7 @@ function forum_cron() {
             }
             $courseid = $forums[$forumid]->course;
             if (!isset($courses[$courseid])) {
-                if ($course = get_record('course', 'id', $courseid)) {
+                if ($course = $DB->get_record('course', array('id' => $courseid))) {
                     $courses[$courseid] = $course;
                 } else {
                     mtrace('Could not find course '.$courseid);
@@ -298,7 +452,7 @@ function forum_cron() {
                 if ($cm = get_coursemodule_from_instance('forum', $forumid, $courseid)) {
                     $coursemodules[$forumid] = $cm;
                 } else {
-                    mtrace('Could not course module for forum '.$forumid);
+                    mtrace('Could not find course module for forum '.$forumid);
                     unset($posts[$pid]);
                     continue;
                 }
@@ -308,15 +462,9 @@ function forum_cron() {
             // caching subscribed users of each forum
             if (!isset($subscribedusers[$forumid])) {
                 $modcontext = get_context_instance(CONTEXT_MODULE, $coursemodules[$forumid]->id);
-                if ($subusers = forum_subscribed_users($courses[$courseid], $forums[$forumid], 0, $modcontext)) {
+                if ($subusers = forum_subscribed_users($courses[$courseid], $forums[$forumid], 0, $modcontext, "u.*")) {
                     foreach ($subusers as $postuser) {
-                        // do not try to mail users with stopped email
-                        if ($postuser->emailstop) {
-                            if (!empty($CFG->forum_logblocked)) {
-                                add_to_log(SITEID, 'forum', 'mail blocked', '', '', 0, $postuser->id);
-                            }
-                            continue;
-                        }
+                        unset($postuser->description); // not necessary
                         // this user is subscribed to this forum
                         $subscribedusers[$forumid][$postuser->id] = $postuser->id;
                         // this user is a user we have to process later
@@ -341,7 +489,7 @@ function forum_cron() {
             @set_time_limit(120); // terminate if processing of any account takes longer than 2 minutes
 
             // set this so that the capabilities are cached, and environment matches receiving user
-            $USER = $userto;
+            cron_setup_user($userto);
 
             mtrace('Processing user '.$userto->id);
 
@@ -349,11 +497,10 @@ function forum_cron() {
             $userto->viewfullnames = array();
             $userto->canpost       = array();
             $userto->markposts     = array();
-            $userto->enrolledin    = array();
 
             // reset the caches
             foreach ($coursemodules as $forumid=>$unused) {
-                $coursemodules[$forumid]->cache       = new object();
+                $coursemodules[$forumid]->cache       = new stdClass();
                 $coursemodules[$forumid]->cache->caps = array();
                 unset($coursemodules[$forumid]->uservisible);
             }
@@ -367,19 +514,11 @@ function forum_cron() {
                 $cm         =& $coursemodules[$forum->id];
 
                 // Do some checks  to see if we can bail out now
+                // Only active enrolled users are in the list of subscribers
                 if (!isset($subscribedusers[$forum->id][$userto->id])) {
                     continue; // user does not subscribe to this forum
                 }
 
-                // Verify user is enrollend in course - if not do not send any email
-                if (!isset($userto->enrolledin[$course->id])) {
-                    $userto->enrolledin[$course->id] = has_capability('moodle/course:view', get_context_instance(CONTEXT_COURSE, $course->id));
-                }
-                if (!$userto->enrolledin[$course->id]) {
-                    // oops - this user should not receive anything from this course
-                    continue;
-                }
-
                 // Don't send email if the forum is Q&A and the user has not posted
                 if ($forum->type == 'qanda' && !forum_get_user_posted_time($discussion->id, $userto->id)) {
                     mtrace('Did not email '.$userto->id.' because user has not posted in discussion');
@@ -389,15 +528,18 @@ function forum_cron() {
                 // Get info about the sending user
                 if (array_key_exists($post->userid, $users)) { // we might know him/her already
                     $userfrom = $users[$post->userid];
-                } else if ($userfrom = get_record('user', 'id', $post->userid)) {
+                } else if ($userfrom = $DB->get_record('user', array('id' => $post->userid))) {
+                    unset($userfrom->description); // not necessary
                     $users[$userfrom->id] = $userfrom; // fetch only once, we can add it to user list, it will be skipped anyway
                 } else {
                     mtrace('Could not find user '.$post->userid);
                     continue;
                 }
 
+                //if we want to check that userto and userfrom are not the same person this is probably the spot to do it
+
                 // setup global $COURSE properly - needed for roles and languages
-                course_setup($course);   // More environment
+                cron_setup_user($userto, $course);
 
                 // Fill caches
                 if (!isset($userto->viewfullnames[$forum->id])) {
@@ -440,14 +582,12 @@ function forum_cron() {
                 // Does the user want this post in a digest?  If so postpone it for now.
                 if ($userto->maildigest > 0) {
                     // This user wants the mails to be in digest form
-                    $queue = new object();
+                    $queue = new stdClass();
                     $queue->userid       = $userto->id;
                     $queue->discussionid = $discussion->id;
                     $queue->postid       = $post->id;
                     $queue->timemodified = $post->created;
-                    if (!insert_record('forum_queue', $queue)) {
-                        mtrace("Error: mod/forum/cron.php: Could not queue for digest mail for id $post->id to user $userto->id ($userto->email) .. not trying again.");
-                    }
+                    $DB->insert_record('forum_queue', $queue);
                     continue;
                 }
 
@@ -470,23 +610,44 @@ function forum_cron() {
                     $userfrom->customheaders[] = 'References: <moodlepost'.$post->parent.'@'.$hostname.'>';
                 }
 
-                $postsubject = "$course->shortname: ".format_string($post->subject,true);
-                $posttext = forum_make_mail_text($course, $forum, $discussion, $post, $userfrom, $userto);
-                $posthtml = forum_make_mail_html($course, $forum, $discussion, $post, $userfrom, $userto);
+                $shortname = format_string($course->shortname, true, array('context' => get_context_instance(CONTEXT_COURSE, $course->id)));
+
+                $postsubject = "$shortname: ".format_string($post->subject,true);
+                $posttext = forum_make_mail_text($course, $cm, $forum, $discussion, $post, $userfrom, $userto);
+                $posthtml = forum_make_mail_html($course, $cm, $forum, $discussion, $post, $userfrom, $userto);
 
                 // Send the post now!
 
                 mtrace('Sending ', '');
 
-                if (!$mailresult = email_to_user($userto, $userfrom, $postsubject, $posttext,
-                                                 $posthtml, '', '', $CFG->forum_replytouser)) {
-                    mtrace("Error: mod/forum/cron.php: Could not send out mail for id $post->id to user $userto->id".
+                $eventdata = new stdClass();
+                $eventdata->component        = 'mod_forum';
+                $eventdata->name             = 'posts';
+                $eventdata->userfrom         = $userfrom;
+                $eventdata->userto           = $userto;
+                $eventdata->subject          = $postsubject;
+                $eventdata->fullmessage      = $posttext;
+                $eventdata->fullmessageformat = FORMAT_PLAIN;
+                $eventdata->fullmessagehtml  = $posthtml;
+                $eventdata->notification = 1;
+
+                $smallmessagestrings = new stdClass();
+                $smallmessagestrings->user = fullname($userfrom);
+                $smallmessagestrings->forumname = "$shortname: ".format_string($forum->name,true).": ".$discussion->name;
+                $smallmessagestrings->message = $post->message;
+                //make sure strings are in message recipients language
+                $eventdata->smallmessage = get_string_manager()->get_string('smallmessage', 'forum', $smallmessagestrings, $userto->lang);
+
+                $eventdata->contexturl = "{$CFG->wwwroot}/mod/forum/discuss.php?d={$discussion->id}#p{$post->id}";
+                $eventdata->contexturlname = $discussion->name;
+
+                $mailresult = message_send($eventdata);
+                if (!$mailresult){
+                    mtrace("Error: mod/forum/lib.php forum_cron(): Could not send out mail for id $post->id to user $userto->id".
                          " ($userto->email) .. not trying again.");
                     add_to_log($course->id, 'forum', 'mail error', "discuss.php?d=$discussion->id#p$post->id",
                                substr(format_string($post->subject,true),0,30), $cm->id, $userto->id);
                     $errorcount[$post->id]++;
-                } else if ($mailresult === 'emailstop') {
-                    // should not be reached anymore - see check above
                 } else {
                     $mailcount[$post->id]++;
 
@@ -508,7 +669,7 @@ function forum_cron() {
         foreach ($posts as $post) {
             mtrace($mailcount[$post->id]." users were sent post $post->id, '$post->subject'");
             if ($errorcount[$post->id]) {
-                set_field("forum_posts", "mailed", "2", "id", "$post->id");
+                $DB->set_field("forum_posts", "mailed", "2", array("id" => "$post->id"));
             }
         }
     }
@@ -518,8 +679,7 @@ function forum_cron() {
     unset($mailcount);
     unset($errorcount);
 
-    $USER = clone($cronuser);
-    course_setup(SITEID);
+    cron_setup_user();
 
     $sitetimezone = $CFG->timezone;
 
@@ -538,16 +698,16 @@ function forum_cron() {
 
     // Delete any really old ones (normally there shouldn't be any)
     $weekago = $timenow - (7 * 24 * 3600);
-    delete_records_select('forum_queue', "timemodified < $weekago");
+    $DB->delete_records_select('forum_queue', "timemodified < ?", array($weekago));
     mtrace ('Cleaned old digest records');
 
     if ($CFG->digestmailtimelast < $digesttime and $timenow > $digesttime) {
 
         mtrace('Sending forum digests: '.userdate($timenow, '', $sitetimezone));
 
-        $digestposts_rs = get_recordset_select('forum_queue', "timemodified < $digesttime");
+        $digestposts_rs = $DB->get_recordset_select('forum_queue', "timemodified < ?", array($digesttime));
 
-        if (!rs_EOF($digestposts_rs)) {
+        if ($digestposts_rs->valid()) {
 
             // We have work to do
             $usermailcount = 0;
@@ -556,24 +716,18 @@ function forum_cron() {
             $discussionposts = array();
             $userdiscussions = array();
 
-            while ($digestpost = rs_fetch_next_record($digestposts_rs)) {
+            foreach ($digestposts_rs as $digestpost) {
                 if (!isset($users[$digestpost->userid])) {
-                    if ($user = get_record('user', 'id', $digestpost->userid)) {
+                    if ($user = $DB->get_record('user', array('id' => $digestpost->userid))) {
                         $users[$digestpost->userid] = $user;
                     } else {
                         continue;
                     }
                 }
                 $postuser = $users[$digestpost->userid];
-                if ($postuser->emailstop) {
-                    if (!empty($CFG->forum_logblocked)) {
-                        add_to_log(SITEID, 'forum', 'mail blocked', '', '', 0, $postuser->id);
-                    }
-                    continue;
-                }
 
                 if (!isset($posts[$digestpost->postid])) {
-                    if ($post = get_record('forum_posts', 'id', $digestpost->postid)) {
+                    if ($post = $DB->get_record('forum_posts', array('id' => $digestpost->postid))) {
                         $posts[$digestpost->postid] = $post;
                     } else {
                         continue;
@@ -581,7 +735,7 @@ function forum_cron() {
                 }
                 $discussionid = $digestpost->discussionid;
                 if (!isset($discussions[$discussionid])) {
-                    if ($discussion = get_record('forum_discussions', 'id', $discussionid)) {
+                    if ($discussion = $DB->get_record('forum_discussions', array('id' => $discussionid))) {
                         $discussions[$discussionid] = $discussion;
                     } else {
                         continue;
@@ -589,7 +743,7 @@ function forum_cron() {
                 }
                 $forumid = $discussions[$discussionid]->forum;
                 if (!isset($forums[$forumid])) {
-                    if ($forum = get_record('forum', 'id', $forumid)) {
+                    if ($forum = $DB->get_record('forum', array('id' => $forumid))) {
                         $forums[$forumid] = $forum;
                     } else {
                         continue;
@@ -598,7 +752,7 @@ function forum_cron() {
 
                 $courseid = $forums[$forumid]->course;
                 if (!isset($courses[$courseid])) {
-                    if ($course = get_record('course', 'id', $courseid)) {
+                    if ($course = $DB->get_record('course', array('id' => $courseid))) {
                         $courses[$courseid] = $course;
                     } else {
                         continue;
@@ -615,26 +769,24 @@ function forum_cron() {
                 $userdiscussions[$digestpost->userid][$digestpost->discussionid] = $digestpost->discussionid;
                 $discussionposts[$digestpost->discussionid][$digestpost->postid] = $digestpost->postid;
             }
-            rs_close($digestposts_rs); /// Finished iteration, let's close the resultset
+            $digestposts_rs->close(); /// Finished iteration, let's close the resultset
 
             // Data collected, start sending out emails to each user
             foreach ($userdiscussions as $userid => $thesediscussions) {
 
                 @set_time_limit(120); // terminate if processing of any account takes longer than 2 minutes
 
-                $USER = $cronuser;
-                course_setup(SITEID); // reset cron user language, theme and timezone settings
+                cron_setup_user();
 
                 mtrace(get_string('processingdigest', 'forum', $userid), '... ');
 
                 // First of all delete all the queue entries for this user
-                delete_records_select('forum_queue', "userid = $userid AND timemodified < $digesttime");
+                $DB->delete_records_select('forum_queue', "userid = ? AND timemodified < ?", array($userid, $digesttime));
                 $userto = $users[$userid];
 
                 // Override the language and timezone of the "current" user, so that
                 // mail is customised for the receiver.
-                $USER = $userto;
-                course_setup(SITEID);
+                cron_setup_user($userto);
 
                 // init caches
                 $userto->viewfullnames = array();
@@ -643,7 +795,7 @@ function forum_cron() {
 
                 $postsubject = get_string('digestmailsubject', 'forum', format_string($site->shortname, true));
 
-                $headerdata = new object();
+                $headerdata = new stdClass();
                 $headerdata->sitename = format_string($site->fullname, true);
                 $headerdata->userprefs = $CFG->wwwroot.'/user/edit.php?id='.$userid.'&amp;course='.$site->id;
 
@@ -651,9 +803,10 @@ function forum_cron() {
                 $headerdata->userprefs = '<a target="_blank" href="'.$headerdata->userprefs.'">'.get_string('digestmailprefs', 'forum').'</a>';
 
                 $posthtml = "<head>";
-                foreach ($CFG->stylesheets as $stylesheet) {
+/*                foreach ($CFG->stylesheets as $stylesheet) {
+                    //TODO: MDL-21120
                     $posthtml .= '<link rel="stylesheet" type="text/css" href="'.$stylesheet.'" />'."\n";
-                }
+                }*/
                 $posthtml .= "</head>\n<body id=\"email\">\n";
                 $posthtml .= '<p>'.get_string('digestmailheader', 'forum', $headerdata).'</p><br /><hr size="1" noshade="noshade" />';
 
@@ -667,7 +820,7 @@ function forum_cron() {
                     $cm         = $coursemodules[$forum->id];
 
                     //override language
-                    course_setup($course);
+                    cron_setup_user($userto, $course);
 
                     // Fill caches
                     if (!isset($userto->viewfullnames[$forum->id])) {
@@ -682,18 +835,19 @@ function forum_cron() {
                     $strforums      = get_string('forums', 'forum');
                     $canunsubscribe = ! forum_is_forcesubscribed($forum);
                     $canreply       = $userto->canpost[$discussion->id];
+                    $shortname = format_string($course->shortname, true, array('context' => get_context_instance(CONTEXT_COURSE, $course->id)));
 
                     $posttext .= "\n \n";
                     $posttext .= '=====================================================================';
                     $posttext .= "\n \n";
-                    $posttext .= "$course->shortname -> $strforums -> ".format_string($forum->name,true);
+                    $posttext .= "$shortname -> $strforums -> ".format_string($forum->name,true);
                     if ($discussion->name != $forum->name) {
                         $posttext  .= " -> ".format_string($discussion->name,true);
                     }
                     $posttext .= "\n";
 
                     $posthtml .= "<p><font face=\"sans-serif\">".
-                    "<a target=\"_blank\" href=\"$CFG->wwwroot/course/view.php?id=$course->id\">$course->shortname</a> -> ".
+                    "<a target=\"_blank\" href=\"$CFG->wwwroot/course/view.php?id=$course->id\">$shortname</a> -> ".
                     "<a target=\"_blank\" href=\"$CFG->wwwroot/mod/forum/index.php?id=$course->id\">$strforums</a> -> ".
                     "<a target=\"_blank\" href=\"$CFG->wwwroot/mod/forum/view.php?f=$forum->id\">".format_string($forum->name,true)."</a>";
                     if ($discussion->name == $forum->name) {
@@ -711,7 +865,7 @@ function forum_cron() {
 
                         if (array_key_exists($post->userid, $users)) { // we might know him/her already
                             $userfrom = $users[$post->userid];
-                        } else if ($userfrom = get_record('user', 'id', $post->userid)) {
+                        } else if ($userfrom = $DB->get_record('user', array('id' => $post->userid))) {
                             $users[$userfrom->id] = $userfrom; // fetch only once, we can add it to user list, it will be skipped anyway
                         } else {
                             mtrace('Could not find user '.$post->userid);
@@ -731,7 +885,7 @@ function forum_cron() {
 
                         if ($userto->maildigest == 2) {
                             // Subjects only
-                            $by = new object();
+                            $by = new stdClass();
                             $by->name = fullname($userfrom);
                             $by->date = userdate($post->modified);
                             $posttext .= "\n".format_string($post->subject,true).' '.get_string("bynameondate", "forum", $by);
@@ -742,8 +896,8 @@ function forum_cron() {
 
                         } else {
                             // The full treatment
-                            $posttext .= forum_make_mail_text($course, $forum, $discussion, $post, $userfrom, $userto, true);
-                            $posthtml .= forum_make_mail_post($course, $forum, $discussion, $post, $userfrom, $userto, false, $canreply, true, false);
+                            $posttext .= forum_make_mail_text($course, $cm, $forum, $discussion, $post, $userfrom, $userto, true);
+                            $posthtml .= forum_make_mail_post($course, $cm, $forum, $discussion, $post, $userfrom, $userto, false, $canreply, true, false);
 
                         // Create an array of postid's for this user to mark as read.
                             if (!$CFG->forum_usermarksread) {
@@ -760,18 +914,20 @@ function forum_cron() {
                 }
                 $posthtml .= '</body>';
 
-                if ($userto->mailformat != 1) {
+                if (empty($userto->mailformat) || $userto->mailformat != 1) {
                     // This user DOESN'T want to receive HTML
                     $posthtml = '';
                 }
 
-                if (!$mailresult =  email_to_user($userto, $site->shortname, $postsubject, $posttext, $posthtml,
-                                                  '', '', $CFG->forum_replytouser)) {
+                $attachment = $attachname='';
+                $usetrueaddress = true;
+                //directly email forum digests rather than sending them via messaging
+                $mailresult = email_to_user($userto, $site->shortname, $postsubject, $posttext, $posthtml, $attachment, $attachname, $usetrueaddress, $CFG->forum_replytouser);
+
+                if (!$mailresult) {
                     mtrace("ERROR!");
                     echo "Error: mod/forum/cron.php: Could not send out digest mail to user $userto->id ($userto->email)... not trying again.\n";
                     add_to_log($course->id, 'forum', 'mail digest error', '', '', $cm->id, $userto->id);
-                } else if ($mailresult === 'emailstop') {
-                    // should not happen anymore - see check above
                 } else {
                     mtrace("success.");
                     $usermailcount++;
@@ -785,8 +941,7 @@ function forum_cron() {
         set_config('digestmailtimelast', $timenow);
     }
 
-    $USER = $cronuser;
-    course_setup(SITEID); // reset cron user language, theme and timezone settings
+    cron_setup_user();
 
     if (!empty($usermailcount)) {
         mtrace(get_string('digestsentusers', 'forum', $usermailcount));
@@ -810,7 +965,11 @@ function forum_cron() {
 /**
  * Builds and returns the body of the email notification in plain text.
  *
+ * @global object
+ * @global object
+ * @uses CONTEXT_MODULE
  * @param object $course
+ * @param object $cm
  * @param object $forum
  * @param object $discussion
  * @param object $post
@@ -819,21 +978,18 @@ function forum_cron() {
  * @param boolean $bare
  * @return string The email body in plain text format.
  */
-function forum_make_mail_text($course, $forum, $discussion, $post, $userfrom, $userto, $bare = false) {
+function forum_make_mail_text($course, $cm, $forum, $discussion, $post, $userfrom, $userto, $bare = false) {
     global $CFG, $USER;
 
-    if (!isset($userto->viewfullnames[$forum->id])) {
-        if (!$cm = get_coursemodule_from_instance('forum', $forum->id, $course->id)) {
-            error('Course Module ID was incorrect');
-        }
         $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
+
+    if (!isset($userto->viewfullnames[$forum->id])) {
         $viewfullnames = has_capability('moodle/site:viewfullnames', $modcontext, $userto->id);
     } else {
         $viewfullnames = $userto->viewfullnames[$forum->id];
     }
 
     if (!isset($userto->canpost[$discussion->id])) {
-        $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
         $canreply = forum_user_can_post($forum, $discussion, $userto, $cm, $course, $modcontext);
     } else {
         $canreply = $userto->canpost[$discussion->id];
@@ -852,13 +1008,17 @@ function forum_make_mail_text($course, $forum, $discussion, $post, $userfrom, $u
     $posttext = '';
 
     if (!$bare) {
-        $posttext  = "$course->shortname -> $strforums -> ".format_string($forum->name,true);
+        $shortname = format_string($course->shortname, true, array('context' => get_context_instance(CONTEXT_COURSE, $course->id)));
+        $posttext  = "$shortname -> $strforums -> ".format_string($forum->name,true);
 
         if ($discussion->name != $forum->name) {
             $posttext  .= " -> ".format_string($discussion->name,true);
         }
     }
 
+    // add absolute file links
+    $post->message = file_rewrite_pluginfile_urls($post->message, 'pluginfile.php', $modcontext->id, 'mod_forum', 'post', $post->id);
+
     $posttext .= "\n---------------------------------------------------------------------\n";
     $posttext .= format_string($post->subject,true);
     if ($bare) {
@@ -866,16 +1026,13 @@ function forum_make_mail_text($course, $forum, $discussion, $post, $userfrom, $u
     }
     $posttext .= "\n".$strbynameondate."\n";
     $posttext .= "---------------------------------------------------------------------\n";
-    $posttext .= format_text_email(trusttext_strip($post->message), $post->format);
+    $posttext .= format_text_email($post->message, $post->messageformat);
     $posttext .= "\n\n";
-    if ($post->attachment) {
-        $post->course = $course->id;
-        $post->forum = $forum->id;
-        $posttext .= forum_print_attachments($post, "text");
-    }
+    $posttext .= forum_print_attachments($post, $cm, "text");
+
     if (!$bare && $canreply) {
         $posttext .= "---------------------------------------------------------------------\n";
-        $posttext .= get_string("postmailinfo", "forum", $course->shortname)."\n";
+        $posttext .= get_string("postmailinfo", "forum", $shortname)."\n";
         $posttext .= "$CFG->wwwroot/mod/forum/post.php?reply=$post->id\n";
     }
     if (!$bare && $canunsubscribe) {
@@ -890,7 +1047,9 @@ function forum_make_mail_text($course, $forum, $discussion, $post, $userfrom, $u
 /**
  * Builds and returns the body of the email notification in html format.
  *
+ * @global object
  * @param object $course
+ * @param object $cm
  * @param object $forum
  * @param object $discussion
  * @param object $post
@@ -898,7 +1057,7 @@ function forum_make_mail_text($course, $forum, $discussion, $post, $userfrom, $u
  * @param object $userto
  * @return string The email text in HTML format
  */
-function forum_make_mail_html($course, $forum, $discussion, $post, $userfrom, $userto) {
+function forum_make_mail_html($course, $cm, $forum, $discussion, $post, $userfrom, $userto) {
     global $CFG;
 
     if ($userto->mailformat != 1) {  // Needs to be HTML
@@ -906,23 +1065,25 @@ function forum_make_mail_html($course, $forum, $discussion, $post, $userfrom, $u
     }
 
     if (!isset($userto->canpost[$discussion->id])) {
-        $canreply = forum_user_can_post($forum, $discussion, $userto);
+        $canreply = forum_user_can_post($forum, $discussion, $userto, $cm, $course);
     } else {
         $canreply = $userto->canpost[$discussion->id];
     }
 
     $strforums = get_string('forums', 'forum');
     $canunsubscribe = ! forum_is_forcesubscribed($forum);
+    $shortname = format_string($course->shortname, true, array('context' => get_context_instance(CONTEXT_COURSE, $course->id)));
 
     $posthtml = '<head>';
-    foreach ($CFG->stylesheets as $stylesheet) {
+/*    foreach ($CFG->stylesheets as $stylesheet) {
+        //TODO: MDL-21120
         $posthtml .= '<link rel="stylesheet" type="text/css" href="'.$stylesheet.'" />'."\n";
-    }
+    }*/
     $posthtml .= '</head>';
     $posthtml .= "\n<body id=\"email\">\n\n";
 
     $posthtml .= '<div class="navbar">'.
-    '<a target="_blank" href="'.$CFG->wwwroot.'/course/view.php?id='.$course->id.'">'.$course->shortname.'</a> &raquo; '.
+    '<a target="_blank" href="'.$CFG->wwwroot.'/course/view.php?id='.$course->id.'">'.$shortname.'</a> &raquo; '.
     '<a target="_blank" href="'.$CFG->wwwroot.'/mod/forum/index.php?id='.$course->id.'">'.$strforums.'</a> &raquo; '.
     '<a target="_blank" href="'.$CFG->wwwroot.'/mod/forum/view.php?f='.$forum->id.'">'.format_string($forum->name,true).'</a>';
     if ($discussion->name == $forum->name) {
@@ -931,7 +1092,7 @@ function forum_make_mail_html($course, $forum, $discussion, $post, $userfrom, $u
         $posthtml .= ' &raquo; <a target="_blank" href="'.$CFG->wwwroot.'/mod/forum/discuss.php?d='.$discussion->id.'">'.
                      format_string($discussion->name,true).'</a></div>';
     }
-    $posthtml .= forum_make_mail_post($course, $forum, $discussion, $post, $userfrom, $userto, false, $canreply, true, false);
+    $posthtml .= forum_make_mail_post($course, $cm, $forum, $discussion, $post, $userfrom, $userto, false, $canreply, true, false);
 
     if ($canunsubscribe) {
         $posthtml .= '<hr /><div class="mdl-align unsubscribelink">
@@ -966,7 +1127,7 @@ function forum_user_outline($course, $user, $mod, $forum) {
     $count = forum_count_user_posts($forum->id, $user->id);
 
     if ($count && $count->postcount > 0) {
-        $result = new object();
+        $result = new stdClass();
         $result->info = get_string("numposts", "forum", $count->postcount);
         $result->time = $count->lastpost;
         if ($grade) {
@@ -974,11 +1135,12 @@ function forum_user_outline($course, $user, $mod, $forum) {
         }
         return $result;
     } else if ($grade) {
-        $result = new object();
+        $result = new stdClass();
         $result->info = get_string('grade') . ': ' . $grade->str_long_grade;
 
         //datesubmitted == time created. dategraded == time modified or time overridden
         //if grade was last modified by the user themselves use date graded. Otherwise use date submitted
+        //TODO: move this copied & pasted code somewhere in the grades API. See MDL-26704
         if ($grade->usermodified == $user->id || empty($grade->datesubmitted)) {
             $result->time = $grade->dategraded;
         } else {
@@ -992,65 +1154,40 @@ function forum_user_outline($course, $user, $mod, $forum) {
 
 
 /**
- *
+ * @global object
+ * @global object
+ * @param object $coure
+ * @param object $user
+ * @param object $mod
+ * @param object $forum
  */
 function forum_user_complete($course, $user, $mod, $forum) {
-    global $CFG,$USER;
+    global $CFG,$USER, $OUTPUT;
     require_once("$CFG->libdir/gradelib.php");
 
     $grades = grade_get_grades($course->id, 'mod', 'forum', $forum->id, $user->id);
     if (!empty($grades->items[0]->grades)) {
         $grade = reset($grades->items[0]->grades);
-        echo '<p>'.get_string('grade').': '.$grade->str_long_grade.'</p>';
+        echo $OUTPUT->container(get_string('grade').': '.$grade->str_long_grade);
         if ($grade->str_feedback) {
-            echo '<p>'.get_string('feedback').': '.$grade->str_feedback.'</p>';
+            echo $OUTPUT->container(get_string('feedback').': '.$grade->str_feedback);
         }
     }
 
     if ($posts = forum_get_user_posts($forum->id, $user->id)) {
 
         if (!$cm = get_coursemodule_from_instance('forum', $forum->id, $course->id)) {
-            error('Course Module ID was incorrect');
+            print_error('invalidcoursemodule');
         }
         $discussions = forum_get_user_involved_discussions($forum->id, $user->id);
 
-        // preload all user ratings for these discussions - one query only and minimal memory
-        $cm->cache->ratings = array();
-        $cm->cache->myratings = array();
-        if ($postratings = forum_get_all_user_ratings($user->id, $discussions)) {
-            foreach ($postratings as $pr) {
-                if (!isset($cm->cache->ratings[$pr->postid])) {
-                    $cm->cache->ratings[$pr->postid] = array();
-                }
-                $cm->cache->ratings[$pr->postid][$pr->id] = $pr->rating;
-
-                if ($pr->userid == $USER->id) {
-                    $cm->cache->myratings[$pr->postid] = $pr->rating;
-                }
-            }
-            unset($postratings);
-        }
-
         foreach ($posts as $post) {
             if (!isset($discussions[$post->discussion])) {
                 continue;
             }
             $discussion = $discussions[$post->discussion];
             
-            $ratings = null;
-
-            if ($forum->assessed) {
-                if ($scale = make_grades_menu($forum->scale)) {
-                    $ratings =new object();
-                    $ratings->scale = $scale;
-                    $ratings->assesstimestart = $forum->assesstimestart;
-                    $ratings->assesstimefinish = $forum->assesstimefinish;
-                    $ratings->allow = false;
-                }
-            }
-
-            forum_print_post($post, $discussion, $forum, $cm, $course, false, false, false, $ratings);
-
+            forum_print_post($post, $discussion, $forum, $cm, $course, false, false, false);
         }
     } else {
         echo "<p>".get_string("noposts", "forum")."</p>";
@@ -1058,12 +1195,19 @@ function forum_user_complete($course, $user, $mod, $forum) {
 }
 
 
+
+
+
+
 /**
- *
+ * @global object
+ * @global object
+ * @global object
+ * @param array $courses
+ * @param array $htmlarray
  */
 function forum_print_overview($courses,&$htmlarray) {
-    global $USER, $CFG;
-    //$LIKE = sql_ilike();//no longer using like in queries. MDL-20578
+    global $USER, $CFG, $DB, $SESSION;
 
     if (empty($courses) || !is_array($courses) || count($courses) == 0) {
         return array();
@@ -1075,18 +1219,23 @@ function forum_print_overview($courses,&$htmlarray) {
 
 
     // get all forum logs in ONE query (much better!)
-    $sql = "SELECT instance,cmid,l.course,COUNT(l.id) as count FROM {$CFG->prefix}log l "
-        ." JOIN {$CFG->prefix}course_modules cm ON cm.id = cmid "
+    $params = array();
+    $sql = "SELECT instance,cmid,l.course,COUNT(l.id) as count FROM {log} l "
+        ." JOIN {course_modules} cm ON cm.id = cmid "
         ." WHERE (";
     foreach ($courses as $course) {
-        $sql .= '(l.course = '.$course->id.' AND l.time > '.$course->lastaccess.') OR ';
+        $sql .= '(l.course = ? AND l.time > ?) OR ';
+        $params[] = $course->id;
+        $params[] = $course->lastaccess;
     }
     $sql = substr($sql,0,-3); // take off the last OR
 
     $sql .= ") AND l.module = 'forum' AND action = 'add post' "
-        ." AND userid != ".$USER->id." GROUP BY cmid,l.course,instance";
+        ." AND userid != ? GROUP BY cmid,l.course,instance";
 
-    if (!$new = get_records_sql($sql)) {
+    $params[] = $USER->id;
+
+    if (!$new = $DB->get_records_sql($sql, $params)) {
         $new = array(); // avoid warnings
     }
 
@@ -1101,16 +1250,32 @@ function forum_print_overview($courses,&$htmlarray) {
     if (count($trackingforums) > 0) {
         $cutoffdate = isset($CFG->forum_oldpostdays) ? (time() - ($CFG->forum_oldpostdays*24*60*60)) : 0;
         $sql = 'SELECT d.forum,d.course,COUNT(p.id) AS count '.
-            ' FROM '.$CFG->prefix.'forum_posts p '.
-            ' JOIN '.$CFG->prefix.'forum_discussions d ON p.discussion = d.id '.
-            ' LEFT JOIN '.$CFG->prefix.'forum_read r ON r.postid = p.id AND r.userid = '.$USER->id.' WHERE (';
+            ' FROM {forum_posts} p '.
+            ' JOIN {forum_discussions} d ON p.discussion = d.id '.
+            ' LEFT JOIN {forum_read} r ON r.postid = p.id AND r.userid = ? WHERE (';
+        $params = array($USER->id);
+
         foreach ($trackingforums as $track) {
-            $sql .= '(d.forum = '.$track->id.' AND (d.groupid = -1 OR d.groupid = 0 OR d.groupid = '.get_current_group($track->course).')) OR ';
+            $sql .= '(d.forum = ? AND (d.groupid = -1 OR d.groupid = 0 OR d.groupid = ?)) OR ';
+            $params[] = $track->id;
+            if (isset($SESSION->currentgroup[$track->course])) {
+                $groupid =  $SESSION->currentgroup[$track->course];
+            } else {
+                $groupid = groups_get_all_groups($track->course, $USER->id);
+                if (is_array($groupid)) {
+                    $groupid = array_shift(array_keys($groupid));
+                    $SESSION->currentgroup[$track->course] = $groupid;
+                } else {
+                    $groupid = 0;
+                }
+            }
+            $params[] = $groupid;
         }
         $sql = substr($sql,0,-3); // take off the last OR
-        $sql .= ') AND p.modified >= '.$cutoffdate.' AND r.id is NULL GROUP BY d.forum,d.course';
+        $sql .= ') AND p.modified >= ? AND r.id is NULL GROUP BY d.forum,d.course';
+        $params[] = $cutoffdate;
 
-        if (!$unread = get_records_sql($sql)) {
+        if (!$unread = $DB->get_records_sql($sql, $params)) {
             $unread = array();
         }
     } else {
@@ -1141,10 +1306,10 @@ function forum_print_overview($courses,&$htmlarray) {
         if ($count > 0 || $thisunread > 0) {
             $str .= '<div class="overview forum"><div class="name">'.$strforum.': <a title="'.$strforum.'" href="'.$CFG->wwwroot.'/mod/forum/view.php?f='.$forum->id.'">'.
                 $forum->name.'</a></div>';
-            $str .= '<div class="info">';
-            $str .= $count.' '.$strnumpostssince;
+            $str .= '<div class="info"><span class="postsincelogin">';
+            $str .= $count.' '.$strnumpostssince."</span>";
             if (!empty($showunread)) {
-                $str .= '<br />'.$thisunread .' '.$strnumunread;
+                $str .= '<div class="unreadposts">'.$thisunread .' '.$strnumunread.'</div>';
             }
             $str .= '</div></div>';
         }
@@ -1163,25 +1328,31 @@ function forum_print_overview($courses,&$htmlarray) {
 /**
  * Given a course and a date, prints a summary of all the new
  * messages posted in the course since that date
+ *
+ * @global object
+ * @global object
+ * @global object
+ * @uses CONTEXT_MODULE
+ * @uses VISIBLEGROUPS
  * @param object $course
  * @param bool $viewfullnames capability
  * @param int $timestart
  * @return bool success
  */
 function forum_print_recent_activity($course, $viewfullnames, $timestart) {
-    global $CFG, $USER;
+    global $CFG, $USER, $DB, $OUTPUT;
 
     // do not use log table if possible, it may be huge and is expensive to join with other tables
 
-    if (!$posts = get_records_sql("SELECT p.*, f.type AS forumtype, d.forum, d.groupid,
+    if (!$posts = $DB->get_records_sql("SELECT p.*, f.type AS forumtype, d.forum, d.groupid,
                                           d.timestart, d.timeend, d.userid AS duserid,
                                           u.firstname, u.lastname, u.email, u.picture
-                                     FROM {$CFG->prefix}forum_posts p
-                                          JOIN {$CFG->prefix}forum_discussions d ON d.id = p.discussion
-                                          JOIN {$CFG->prefix}forum f             ON f.id = d.forum
-                                          JOIN {$CFG->prefix}user u              ON u.id = p.userid
-                                    WHERE p.created > $timestart AND f.course = {$course->id}
-                                 ORDER BY p.id ASC")) { // order by initial posting date
+                                         FROM {forum_posts} p
+                                              JOIN {forum_discussions} d ON d.id = p.discussion
+                                              JOIN {forum} f             ON f.id = d.forum
+                                              JOIN {user} u              ON u.id = p.userid
+                                        WHERE p.created > ? AND f.course = ?
+                                     ORDER BY p.id ASC", array($timestart, $course->id))) { // order by initial posting date
          return false;
     }
 
@@ -1245,7 +1416,7 @@ function forum_print_recent_activity($course, $viewfullnames, $timestart) {
         return false;
     }
 
-    print_headline(get_string('newforumposts', 'forum').':', 3);
+    echo $OUTPUT->heading(get_string('newforumposts', 'forum').':', 3);
     echo "\n<ul class='unlist'>\n";
 
     foreach ($printposts as $post) {
@@ -1274,107 +1445,56 @@ function forum_print_recent_activity($course, $viewfullnames, $timestart) {
 /**
  * Return grade for given user or all users.
  *
- * @param int $forumid id of forum
+ * @global object
+ * @global object
+ * @param object $forum
  * @param int $userid optional user id, 0 means all users
  * @return array array of grades, false if none
  */
-function forum_get_user_grades($forum, $userid=0) {
+function forum_get_user_grades($forum, $userid = 0) {
     global $CFG;
 
-    $user = $userid ? "AND u.id = $userid" : "";
-
-    $aggtype = $forum->assessed;
-    switch ($aggtype) {
-        case FORUM_AGGREGATE_COUNT :
-            $sql = "SELECT u.id, u.id AS userid, COUNT(fr.rating) AS rawgrade
-                      FROM {$CFG->prefix}user u, {$CFG->prefix}forum_posts fp,
-                           {$CFG->prefix}forum_ratings fr, {$CFG->prefix}forum_discussions fd
-                     WHERE u.id = fp.userid AND fp.discussion = fd.id AND fr.post = fp.id
-                           AND fr.userid != u.id AND fd.forum = $forum->id
-                           $user
-                  GROUP BY u.id";
-            break;
-        case FORUM_AGGREGATE_MAX :
-            $sql = "SELECT u.id, u.id AS userid, MAX(fr.rating) AS rawgrade
-                      FROM {$CFG->prefix}user u, {$CFG->prefix}forum_posts fp,
-                           {$CFG->prefix}forum_ratings fr, {$CFG->prefix}forum_discussions fd
-                     WHERE u.id = fp.userid AND fp.discussion = fd.id AND fr.post = fp.id
-                           AND fr.userid != u.id AND fd.forum = $forum->id
-                           $user
-                  GROUP BY u.id";
-            break;
-        case FORUM_AGGREGATE_MIN :
-            $sql = "SELECT u.id, u.id AS userid, MIN(fr.rating) AS rawgrade
-                      FROM {$CFG->prefix}user u, {$CFG->prefix}forum_posts fp,
-                           {$CFG->prefix}forum_ratings fr, {$CFG->prefix}forum_discussions fd
-                     WHERE u.id = fp.userid AND fp.discussion = fd.id AND fr.post = fp.id
-                           AND fr.userid != u.id AND fd.forum = $forum->id
-                           $user
-                  GROUP BY u.id";
-            break;
-        case FORUM_AGGREGATE_SUM :
-            $sql = "SELECT u.id, u.id AS userid, SUM(fr.rating) AS rawgrade
-                     FROM {$CFG->prefix}user u, {$CFG->prefix}forum_posts fp,
-                          {$CFG->prefix}forum_ratings fr, {$CFG->prefix}forum_discussions fd
-                    WHERE u.id = fp.userid AND fp.discussion = fd.id AND fr.post = fp.id
-                          AND fr.userid != u.id AND fd.forum = $forum->id
-                          $user
-                 GROUP BY u.id";
-            break;
-        default : //avg
-            $sql = "SELECT u.id, u.id AS userid, AVG(fr.rating) AS rawgrade
-                      FROM {$CFG->prefix}user u, {$CFG->prefix}forum_posts fp,
-                           {$CFG->prefix}forum_ratings fr, {$CFG->prefix}forum_discussions fd
-                     WHERE u.id = fp.userid AND fp.discussion = fd.id AND fr.post = fp.id
-                           AND fr.userid != u.id AND fd.forum = $forum->id
-                           $user
-                  GROUP BY u.id";
-            break;
-    }
+    require_once($CFG->dirroot.'/rating/lib.php');
 
-    if ($results = get_records_sql($sql)) {
-        // it could throw off the grading if count and sum returned a rawgrade higher than scale
-        // so to prevent it we review the results and ensure that rawgrade does not exceed the scale, if it does we set rawgrade = scale (i.e. full credit)
-        foreach ($results as $rid=>$result) {
-            if ($forum->scale >= 0) {
-                //numeric
-                if ($result->rawgrade > $forum->scale) {
-                    $results[$rid]->rawgrade = $forum->scale;
-                }
-            } else {
-                //scales
-                if ($scale = get_record('scale', 'id', -$forum->scale)) {
-                    $scale = explode(',', $scale->scale);
-                    $max = count($scale);
-                    if ($result->rawgrade > $max) {
-                        $results[$rid]->rawgrade = $max;
-                    }
-                }
-            }
-        }
-    }
+    $ratingoptions = new stdClass;
+    $ratingoptions->component = 'mod_forum';
+    $ratingoptions->ratingarea = 'post';
 
-    return $results;
+    //need these to work backwards to get a context id. Is there a better way to get contextid from a module instance?
+    $ratingoptions->modulename = 'forum';
+    $ratingoptions->moduleid   = $forum->id;
+    $ratingoptions->userid = $userid;
+    $ratingoptions->aggregationmethod = $forum->assessed;
+    $ratingoptions->scaleid = $forum->scale;
+    $ratingoptions->itemtable = 'forum_posts';
+    $ratingoptions->itemtableusercolumn = 'userid';
+
+    $rm = new rating_manager();
+    return $rm->get_user_grades($ratingoptions);
 }
 
 /**
- * Update grades by firing grade_updated event
+ * Update activity grades
  *
- * @param object $forum null means all forums
- * @param int $userid specific user only, 0 mean all
+ * @global object
+ * @global object
+ * @param object $forum
+ * @param int $userid specific user only, 0 means all
  * @param boolean $nullifnone return null if grade does not exist
  * @return void
  */
-function forum_update_grades($forum=null, $userid=0, $nullifnone=true) {
-    global $CFG;
-
-    if ($forum != null) {
+function forum_update_grades($forum, $userid=0, $nullifnone=true) {
+    global $CFG, $DB;
         require_once($CFG->libdir.'/gradelib.php');
-        if ($grades = forum_get_user_grades($forum, $userid)) {
+
+    if (!$forum->assessed) {
+        forum_grade_item_update($forum);
+
+    } else if ($grades = forum_get_user_grades($forum, $userid)) {
             forum_grade_item_update($forum, $grades);
 
         } else if ($userid and $nullifnone) {
-            $grade = new object();
+        $grade = new stdClass();
             $grade->userid   = $userid;
             $grade->rawgrade = NULL;
             forum_grade_item_update($forum, $grade);
@@ -1382,29 +1502,46 @@ function forum_update_grades($forum=null, $userid=0, $nullifnone=true) {
         } else {
             forum_grade_item_update($forum);
         }
+}
 
-    } else {
-        $sql = "SELECT f.*, cm.idnumber as cmidnumber
-                  FROM {$CFG->prefix}forum f, {$CFG->prefix}course_modules cm, {$CFG->prefix}modules m
+/**
+ * Update all grades in gradebook.
+ * @global object
+ */
+function forum_upgrade_grades() {
+    global $DB;
+
+    $sql = "SELECT COUNT('x')
+              FROM {forum} f, {course_modules} cm, {modules} m
+             WHERE m.name='forum' AND m.id=cm.module AND cm.instance=f.id";
+    $count = $DB->count_records_sql($sql);
+
+    $sql = "SELECT f.*, cm.idnumber AS cmidnumber, f.course AS courseid
+              FROM {forum} f, {course_modules} cm, {modules} m
                  WHERE m.name='forum' AND m.id=cm.module AND cm.instance=f.id";
-        if ($rs = get_recordset_sql($sql)) {
-            while ($forum = rs_fetch_next_record($rs)) {
-                if ($forum->assessed) {
+    $rs = $DB->get_recordset_sql($sql);
+    if ($rs->valid()) {
+        $pbar = new progress_bar('forumupgradegrades', 500, true);
+        $i=0;
+        foreach ($rs as $forum) {
+            $i++;
+            upgrade_set_timeout(60*5); // set up timeout, may also abort execution
                     forum_update_grades($forum, 0, false);
-                } else {
-                    forum_grade_item_update($forum);
-                }
-            }
-            rs_close($rs);
+            $pbar->update($i, $count, "Updating Forum grades ($i/$count).");
         }
     }
+    $rs->close();
 }
 
 /**
  * Create/update grade item for given forum
  *
+ * @global object
+ * @uses GRADE_TYPE_NONE
+ * @uses GRADE_TYPE_VALUE
+ * @uses GRADE_TYPE_SCALE
  * @param object $forum object with extra cmidnumber
- * @param mixed optional array/object of grade(s); 'reset' means reset grades in gradebook
+ * @param mixed $grades optional array/object of grade(s); 'reset' means reset grades in gradebook
  * @return int 0 if ok
  */
 function forum_grade_item_update($forum, $grades=NULL) {
@@ -1439,6 +1576,7 @@ function forum_grade_item_update($forum, $grades=NULL) {
 /**
  * Delete grade item for given forum
  *
+ * @global object
  * @param object $forum object
  * @return object grade_item
  */
@@ -1452,39 +1590,46 @@ function forum_grade_item_delete($forum) {
 
 /**
  * Returns the users with data in one forum
- * (users with records in forum_subscriptions, forum_posts and forum_ratings, students)
+ * (users with records in forum_subscriptions, forum_posts, students)
+ *
+ * @todo: deprecated - to be deleted in 2.2
+ *
  * @param int $forumid
  * @return mixed array or false if none
  */
 function forum_get_participants($forumid) {
 
-    global $CFG;
+    global $CFG, $DB;
+
+    $params = array('forumid' => $forumid);
 
     //Get students from forum_subscriptions
-    $st_subscriptions = get_records_sql("SELECT DISTINCT u.id, u.id
-                                         FROM {$CFG->prefix}user u,
-                                              {$CFG->prefix}forum_subscriptions s
-                                         WHERE s.forum = '$forumid' and
-                                               u.id = s.userid");
+    $sql = "SELECT DISTINCT u.id, u.id
+              FROM {user} u,
+                   {forum_subscriptions} s
+             WHERE s.forum = :forumid AND
+                   u.id = s.userid";
+    $st_subscriptions = $DB->get_records_sql($sql, $params);
+
     //Get students from forum_posts
-    $st_posts = get_records_sql("SELECT DISTINCT u.id, u.id
-                                 FROM {$CFG->prefix}user u,
-                                      {$CFG->prefix}forum_discussions d,
-                                      {$CFG->prefix}forum_posts p
-                                 WHERE d.forum = '$forumid' and
-                                       p.discussion = d.id and
-                                       u.id = p.userid");
-
-    //Get students from forum_ratings
-    $st_ratings = get_records_sql("SELECT DISTINCT u.id, u.id
-                                   FROM {$CFG->prefix}user u,
-                                        {$CFG->prefix}forum_discussions d,
-                                        {$CFG->prefix}forum_posts p,
-                                        {$CFG->prefix}forum_ratings r
-                                   WHERE d.forum = '$forumid' and
-                                         p.discussion = d.id and
-                                         r.post = p.id and
-                                         u.id = r.userid");
+    $sql = "SELECT DISTINCT u.id, u.id
+              FROM {user} u,
+                   {forum_discussions} d,
+                   {forum_posts} p
+              WHERE d.forum = :forumid AND
+                    p.discussion = d.id AND
+                    u.id = p.userid";
+    $st_posts = $DB->get_records_sql($sql, $params);
+
+    //Get students from the ratings table
+    $sql = "SELECT DISTINCT r.userid, r.userid AS id
+              FROM {forum_discussions} d
+              JOIN {forum_posts} p ON p.discussion = d.id
+              JOIN {rating} r on r.itemid = p.id
+             WHERE d.forum = :forumid AND
+                   r.component = 'mod_forum' AND
+                   r.ratingarea = 'post'";
+    $st_ratings = $DB->get_records_sql($sql, $params);
 
     //Add st_posts to st_subscriptions
     if ($st_posts) {
@@ -1504,15 +1649,17 @@ function forum_get_participants($forumid) {
 
 /**
  * This function returns if a scale is being used by one forum
+ *
+ * @global object
  * @param int $forumid
  * @param int $scaleid negative number
  * @return bool
  */
 function forum_scale_used ($forumid,$scaleid) {
-
+    global $DB;
     $return = false;
 
-    $rec = get_record("forum","id","$forumid","scale","-$scaleid");
+    $rec = $DB->get_record("forum",array("id" => "$forumid","scale" => "-$scaleid"));
 
     if (!empty($rec) && !empty($scaleid)) {
         $return = true;
@@ -1525,11 +1672,14 @@ function forum_scale_used ($forumid,$scaleid) {
  * Checks if scale is being used by any instance of forum
  *
  * This is used to find out if scale used anywhere
+ *
+ * @global object
  * @param $scaleid int
  * @return boolean True if the scale is used by any forum
  */
 function forum_scale_used_anywhere($scaleid) {
-    if ($scaleid and record_exists('forum', 'scale', -$scaleid)) {
+    global $DB;
+    if ($scaleid and $DB->record_exists('forum', array('scale' => -$scaleid))) {
         return true;
     } else {
         return false;
@@ -1541,61 +1691,74 @@ function forum_scale_used_anywhere($scaleid) {
 /**
  * Gets a post with all info ready for forum_print_post
  * Most of these joins are just to get the forum id
+ *
+ * @global object
+ * @global object
  * @param int $postid
  * @return mixed array of posts or false
  */
 function forum_get_post_full($postid) {
-    global $CFG;
+    global $CFG, $DB;
 
-    return get_record_sql("SELECT p.*, d.forum, u.firstname, u.lastname, u.email, u.picture, u.imagealt
-                             FROM {$CFG->prefix}forum_posts p
-                                  JOIN {$CFG->prefix}forum_discussions d ON p.discussion = d.id
-                                  LEFT JOIN {$CFG->prefix}user u ON p.userid = u.id
-                            WHERE p.id = '$postid'");
+    return $DB->get_record_sql("SELECT p.*, d.forum, u.firstname, u.lastname, u.email, u.picture, u.imagealt
+                             FROM {forum_posts} p
+                                  JOIN {forum_discussions} d ON p.discussion = d.id
+                                  LEFT JOIN {user} u ON p.userid = u.id
+                            WHERE p.id = ?", array($postid));
 }
 
 /**
  * Gets posts with all info ready for forum_print_post
  * We pass forumid in because we always know it so no need to make a
  * complicated join to find it out.
+ *
+ * @global object
+ * @global object
  * @return mixed array of posts or false
  */
 function forum_get_discussion_posts($discussion, $sort, $forumid) {
-    global $CFG;
+    global $CFG, $DB;
 
-    return get_records_sql("SELECT p.*, $forumid AS forum, u.firstname, u.lastname, u.email, u.picture, u.imagealt
-                              FROM {$CFG->prefix}forum_posts p
-                         LEFT JOIN {$CFG->prefix}user u ON p.userid = u.id
-                             WHERE p.discussion = $discussion
-                               AND p.parent > 0 $sort");
+    return $DB->get_records_sql("SELECT p.*, $forumid AS forum, u.firstname, u.lastname, u.email, u.picture, u.imagealt
+                              FROM {forum_posts} p
+                         LEFT JOIN {user} u ON p.userid = u.id
+                             WHERE p.discussion = ?
+                               AND p.parent > 0 $sort", array($discussion));
 }
 
 /**
  * Gets all posts in discussion including top parent.
+ *
+ * @global object
+ * @global object
+ * @global object
  * @param int $discussionid
  * @param string $sort
  * @param bool $tracking does user track the forum?
  * @return array of posts
  */
 function forum_get_all_discussion_posts($discussionid, $sort, $tracking=false) {
-    global $CFG, $USER;
+    global $CFG, $DB, $USER;
 
     $tr_sel  = "";
     $tr_join = "";
+    $params = array();
 
     if ($tracking) {
         $now = time();
         $cutoffdate = $now - ($CFG->forum_oldpostdays * 24 * 3600);
         $tr_sel  = ", fr.id AS postread";
-        $tr_join = "LEFT JOIN {$CFG->prefix}forum_read fr ON (fr.postid = p.id AND fr.userid = $USER->id)";
+        $tr_join = "LEFT JOIN {forum_read} fr ON (fr.postid = p.id AND fr.userid = ?)";
+        $params[] = $USER->id;
     }
 
-    if (!$posts = get_records_sql("SELECT p.*, u.firstname, u.lastname, u.email, u.picture, u.imagealt $tr_sel
-                                     FROM {$CFG->prefix}forum_posts p
-                                          LEFT JOIN {$CFG->prefix}user u ON p.userid = u.id
+    $params[] = $discussionid;
+    if (!$posts = $DB->get_records_sql("SELECT p.*, u.firstname, u.lastname, u.email, u.picture, u.imagealt $tr_sel
+                                     FROM {forum_posts} p
+                                          LEFT JOIN {user} u ON p.userid = u.id
                                           $tr_join
-                                    WHERE p.discussion = $discussionid
-                                 ORDER BY $sort")) {
+                                    WHERE p.discussion = ?
+                                 ORDER BY $sort", $params)) {
         return array();
     }
 
@@ -1624,21 +1787,31 @@ function forum_get_all_discussion_posts($discussionid, $sort, $tracking=false) {
  * Gets posts with all info ready for forum_print_post
  * We pass forumid in because we always know it so no need to make a
  * complicated join to find it out.
+ *
+ * @global object
+ * @global object
+ * @param int $parent
+ * @param int $forumid
+ * @return array
  */
 function forum_get_child_posts($parent, $forumid) {
-    global $CFG;
+    global $CFG, $DB;
 
-    return get_records_sql("SELECT p.*, $forumid AS forum, u.firstname, u.lastname, u.email, u.picture, u.imagealt
-                              FROM {$CFG->prefix}forum_posts p
-                         LEFT JOIN {$CFG->prefix}user u ON p.userid = u.id
-                             WHERE p.parent = '$parent'
-                          ORDER BY p.created ASC");
+    return $DB->get_records_sql("SELECT p.*, $forumid AS forum, u.firstname, u.lastname, u.email, u.picture, u.imagealt
+                              FROM {forum_posts} p
+                         LEFT JOIN {user} u ON p.userid = u.id
+                             WHERE p.parent = ?
+                          ORDER BY p.created ASC", array($parent));
 }
 
 /**
  * An array of forum objects that the user is allowed to read/search through.
- * @param $userid
- * @param $courseid - if 0, we look for forums throughout the whole site.
+ *
+ * @global object
+ * @global object
+ * @global object
+ * @param int $userid
+ * @param int $courseid if 0, we look for forums throughout the whole site.
  * @return array of forum objects, or false if no matches
  *         Forum objects have the following attributes:
  *         id, type, course, cmid, cmvisible, cmgroupmode, accessallgroups,
@@ -1646,20 +1819,19 @@ function forum_get_child_posts($parent, $forumid) {
  */
 function forum_get_readable_forums($userid, $courseid=0) {
 
-    global $CFG, $USER;
+    global $CFG, $DB, $USER;
     require_once($CFG->dirroot.'/course/lib.php');
 
-    if (!$forummod = get_record('modules', 'name', 'forum')) {
-        error('The forum module is not installed');
+    if (!$forummod = $DB->get_record('modules', array('name' => 'forum'))) {
+        print_error('notinstalled', 'forum');
     }
 
     if ($courseid) {
-        $courses = get_records('course', 'id', $courseid);
+        $courses = $DB->get_records('course', array('id' => $courseid));
     } else {
         // If no course is specified, then the user can see SITE + his courses.
-        // And admins can see all courses, so pass the $doanything flag enabled
-        $courses1 = get_records('course', 'id', SITEID);
-        $courses2 = get_my_courses($userid, null, null, true);
+        $courses1 = $DB->get_records('course', array('id' => SITEID));
+        $courses2 = enrol_get_users_courses($userid, true, array('modinfo'));
         $courses = array_merge($courses1, $courses2);
     }
     if (!$courses) {
@@ -1680,7 +1852,7 @@ function forum_get_readable_forums($userid, $courseid=0) {
             continue;
         }
 
-        $courseforums = get_records('forum', 'course', $course->id);
+        $courseforums = $DB->get_records('forum', array('course' => $course->id));
 
         foreach ($modinfo->instances['forum'] as $forumid => $cm) {
             if (!$cm->uservisible or !isset($courseforums[$forumid])) {
@@ -1700,10 +1872,7 @@ function forum_get_readable_forums($userid, $courseid=0) {
                 if (is_null($modinfo->groups)) {
                     $modinfo->groups = groups_get_user_groups($course->id, $USER->id);
                 }
-                if (empty($CFG->enablegroupings)) {
-                    $forum->onlygroups = $modinfo->groups[0];
-                    $forum->onlygroups[] = -1;
-                } else if (isset($modinfo->groups[$cm->groupingid])) {
+                if (isset($modinfo->groups[$cm->groupingid])) {
                     $forum->onlygroups = $modinfo->groups[$cm->groupingid];
                     $forum->onlygroups[] = -1;
                 } else {
@@ -1740,25 +1909,26 @@ function forum_get_readable_forums($userid, $courseid=0) {
 
     } // End foreach $courses
 
-    //print_object($courses);
-    //print_object($readableforums);
-
     return $readableforums;
 }
 
 /**
  * Returns a list of posts found using an array of search terms.
- * @param $searchterms - array of search terms, e.g. word +word -word
- * @param $courseid - if 0, we search through the whole site
- * @param $page
- * @param $recordsperpage=50
- * @param &$totalcount
- * @param $extrasql
- * @return array of posts found
+ *
+ * @global object
+ * @global object
+ * @global object
+ * @param array $searchterms array of search terms, e.g. word +word -word
+ * @param int $courseid if 0, we search through the whole site
+ * @param int $limitfrom
+ * @param int $limitnum
+ * @param int &$totalcount
+ * @param string $extrasql
+ * @return array|bool Array of posts found or false
  */
 function forum_search_posts($searchterms, $courseid=0, $limitfrom=0, $limitnum=50,
                             &$totalcount, $extrasql='') {
-    global $CFG, $USER;
+    global $CFG, $DB, $USER;
     require_once($CFG->libdir.'/searchlib.php');
 
     $forums = forum_get_readable_forums($USER->id, $courseid);
@@ -1772,12 +1942,14 @@ function forum_search_posts($searchterms, $courseid=0, $limitfrom=0, $limitnum=5
 
     $fullaccess = array();
     $where = array();
+    $params = array();
 
     foreach ($forums as $forumid => $forum) {
         $select = array();
 
         if (!$forum->viewhiddentimedposts) {
-            $select[] = "(d.userid = {$USER->id} OR (d.timestart < $now AND (d.timeend = 0 OR d.timeend > $now)))";
+            $select[] = "(d.userid = :userid{$forumid} OR (d.timestart < :timestart{$forumid} AND (d.timeend = 0 OR d.timeend > :timeend{$forumid})))";
+            $params = array_merge($params, array('userid'.$forumid=>$USER->id, 'timestart'.$forumid=>$now, 'timeend'.$forumid=>$now));
         }
 
         $cm = $forum->cm;
@@ -1786,44 +1958,37 @@ function forum_search_posts($searchterms, $courseid=0, $limitfrom=0, $limitnum=5
         if ($forum->type == 'qanda'
             && !has_capability('mod/forum:viewqandawithoutposting', $context)) {
             if (!empty($forum->onlydiscussions)) {
-                $discussionsids = implode(',', $forum->onlydiscussions);
-                $select[] = "(d.id IN ($discussionsids) OR p.parent = 0)";
+                list($discussionid_sql, $discussionid_params) = $DB->get_in_or_equal($forum->onlydiscussions, SQL_PARAMS_NAMED, 'qanda'.$forumid.'_');
+                $params = array_merge($params, $discussionid_params);
+                $select[] = "(d.id $discussionid_sql OR p.parent = 0)";
             } else {
                 $select[] = "p.parent = 0";
             }
         }
 
         if (!empty($forum->onlygroups)) {
-            $groupids = implode(',', $forum->onlygroups);
-            $select[] = "d.groupid IN ($groupids)";
+            list($groupid_sql, $groupid_params) = $DB->get_in_or_equal($forum->onlygroups, SQL_PARAMS_NAMED, 'grps'.$forumid.'_');
+            $params = array_merge($params, $groupid_params);
+            $select[] = "d.groupid $groupid_sql";
         }
 
         if ($select) {
             $selects = implode(" AND ", $select);
-            $where[] = "(d.forum = $forumid AND $selects)";
+            $where[] = "(d.forum = :forum{$forumid} AND $selects)";
+            $params['forum'.$forumid] = $forumid;
         } else {
             $fullaccess[] = $forumid;
         }
     }
 
     if ($fullaccess) {
-        $fullids = implode(',', $fullaccess);
-        $where[] = "(d.forum IN ($fullids))";
+        list($fullid_sql, $fullid_params) = $DB->get_in_or_equal($fullaccess, SQL_PARAMS_NAMED, 'fula');
+        $params = array_merge($params, $fullid_params);
+        $where[] = "(d.forum $fullid_sql)";
     }
 
     $selectdiscussion = "(".implode(" OR ", $where).")";
 
-    // Some differences SQL
-    $LIKE = sql_ilike();
-    $NOTLIKE = 'NOT ' . $LIKE;
-    if ($CFG->dbfamily == 'postgres') {
-        $REGEXP = '~*';
-        $NOTREGEXP = '!~*';
-    } else {
-        $REGEXP = 'REGEXP';
-        $NOTREGEXP = 'NOT REGEXP';
-    }
-
     $messagesearch = '';
     $searchstring = '';
 
@@ -1850,19 +2015,20 @@ function forum_search_posts($searchterms, $courseid=0, $limitfrom=0, $limitnum=5
     // CREATE FULLTEXT INDEX foru_post_tix ON [prefix]forum_posts (subject, message)
     // Experimental feature under 1.8! MDL-8830
         if (!empty($CFG->forum_usetextsearches)) {
-            $messagesearch = search_generate_text_SQL($parsearray, 'p.message', 'p.subject',
+            list($messagesearch, $msparams) = search_generate_text_SQL($parsearray, 'p.message', 'p.subject',
                                                  'p.userid', 'u.id', 'u.firstname',
                                                  'u.lastname', 'p.modified', 'd.forum');
         } else {
-            $messagesearch = search_generate_SQL($parsearray, 'p.message', 'p.subject',
+            list($messagesearch, $msparams) = search_generate_SQL($parsearray, 'p.message', 'p.subject',
                                                  'p.userid', 'u.id', 'u.firstname',
                                                  'u.lastname', 'p.modified', 'd.forum');
         }
+        $params = array_merge($params, $msparams);
     }
 
-    $fromsql = "{$CFG->prefix}forum_posts p,
-                  {$CFG->prefix}forum_discussions d,
-                  {$CFG->prefix}user u";
+    $fromsql = "{forum_posts} p,
+                  {forum_discussions} d,
+                  {user} u";
 
     $selectsql = " $messagesearch
                AND p.discussion = d.id
@@ -1880,272 +2046,283 @@ function forum_search_posts($searchterms, $courseid=0, $limitfrom=0, $limitnum=5
                          u.lastname,
                          u.email,
                          u.picture,
-                         u.imagealt
+                         u.imagealt,
+                         u.email
                     FROM $fromsql
                    WHERE $selectsql
                 ORDER BY p.modified DESC";
 
-    $totalcount = count_records_sql($countsql);
-
-    return get_records_sql($searchsql, $limitfrom, $limitnum);
-}
-
-/**
- * Returns a list of ratings for all posts in discussion
- * @param object $discussion
- * @return array of ratings or false
- */
-function forum_get_all_discussion_ratings($discussion) {
-    global $CFG;
-    return get_records_sql("SELECT r.id, r.userid, p.id AS postid, r.rating
-                              FROM {$CFG->prefix}forum_ratings r,
-                                   {$CFG->prefix}forum_posts p
-                             WHERE r.post = p.id AND p.discussion = $discussion->id
-                             ORDER BY p.id ASC");
-}
-
-/**
- * Returns a list of ratings for one specific user for all posts in discussion
- * @global object $CFG
- * @param object $discussions the discussions for which we return all ratings
- * @param int $userid the user for who we return all ratings
- * @return object
- */
-function forum_get_all_user_ratings($userid, $discussions) {
-    global $CFG;
-
-
-    foreach ($discussions as $discussion) {
-     if (!isset($discussionsid)){
-         $discussionsid = $discussion->id;
-     }
-     else {
-         $discussionsid .= ",".$discussion->id;
-     }
-    }
-
-    $sql = "SELECT r.id, r.userid, p.id AS postid, r.rating
-                              FROM {$CFG->prefix}forum_ratings r,
-                                   {$CFG->prefix}forum_posts p
-                             WHERE r.post = p.id AND p.userid = $userid";
-    //postgres compability
-    if (!isset($discussionsid)) {
-       $sql .=" AND p.discussion IN (".$discussionsid.")";
-    }
-    $sql .=" ORDER BY p.id ASC";
-
-    return get_records_sql($sql);
-    
+    $totalcount = $DB->count_records_sql($countsql, $params);
 
+    return $DB->get_records_sql($searchsql, $params, $limitfrom, $limitnum);
 }
 
 /**
  * Returns a list of ratings for a particular post - sorted.
+ *
+ * TODO: Check if this function is actually used anywhere.
+ * Up until the fix for MDL-27471 this function wasn't even returning.
+ *
+ * @param stdClass $context
  * @param int $postid
  * @param string $sort
- * @return array of ratings or false
+ * @return array Array of ratings or false
  */
-function forum_get_ratings($postid, $sort="u.firstname ASC") {
-    global $CFG;
-    return get_records_sql("SELECT u.*, r.rating, r.time
-                              FROM {$CFG->prefix}forum_ratings r,
-                                   {$CFG->prefix}user u
-                             WHERE r.post = '$postid'
-                               AND r.userid = u.id
-                             ORDER BY $sort");
+function forum_get_ratings($context, $postid, $sort = "u.firstname ASC") {
+    $options = new stdClass;
+    $options->context = $context;
+    $options->component = 'mod_forum';
+    $options->ratingarea = 'post';
+    $options->itemid = $postid;
+    $options->sort = "ORDER BY $sort";
+
+    $rm = new rating_manager();
+    return $rm->get_all_ratings_for_item($options);
 }
 
 /**
  * Returns a list of all new posts that have not been mailed yet
- * @param int $starttime - posts created after this time
- * @param int $endtime - posts created before this
- * @param int $now - used for timed discussions only
+ *
+ * @param int $starttime posts created after this time
+ * @param int $endtime posts created before this
+ * @param int $now used for timed discussions only
+ * @return array
  */
 function forum_get_unmailed_posts($starttime, $endtime, $now=null) {
-    global $CFG;
+    global $CFG, $DB;
 
+    $params = array($starttime, $endtime);
     if (!empty($CFG->forum_enabletimedposts)) {
         if (empty($now)) {
             $now = time();
         }
-        $timedsql = "AND (d.timestart < $now AND (d.timeend = 0 OR d.timeend > $now))";
+        $timedsql = "AND (d.timestart < ? AND (d.timeend = 0 OR d.timeend > ?))";
+        $params[] = $now;
+        $params[] = $now;
     } else {
         $timedsql = "";
     }
 
-    return get_records_sql("SELECT p.*, d.course, d.forum
-                              FROM {$CFG->prefix}forum_posts p
-                                   JOIN {$CFG->prefix}forum_discussions d ON d.id = p.discussion
+    return $DB->get_records_sql("SELECT p.*, d.course, d.forum
+                              FROM {forum_posts} p
+                                   JOIN {forum_discussions} d ON d.id = p.discussion
                              WHERE p.mailed = 0
-                                   AND p.created >= $starttime
-                                   AND (p.created < $endtime OR p.mailnow = 1)
+                                   AND p.created >= ?
+                                   AND (p.created < ? OR p.mailnow = 1)
                                    $timedsql
-                          ORDER BY p.modified ASC");
+                          ORDER BY p.modified ASC", $params);
 }
 
 /**
  * Marks posts before a certain time as being mailed already
+ *
+ * @global object
+ * @global object
+ * @param int $endtime
+ * @param int $now Defaults to time()
+ * @return bool
  */
 function forum_mark_old_posts_as_mailed($endtime, $now=null) {
-    global $CFG;
+    global $CFG, $DB;
     if (empty($now)) {
         $now = time();
     }
 
     if (empty($CFG->forum_enabletimedposts)) {
-        return execute_sql("UPDATE {$CFG->prefix}forum_posts
+        return $DB->execute("UPDATE {forum_posts}
                                SET mailed = '1'
-                             WHERE (created < $endtime OR mailnow = 1)
-                                   AND mailed = 0", false);
+                             WHERE (created < ? OR mailnow = 1)
+                                   AND mailed = 0", array($endtime));
 
     } else {
-        return execute_sql("UPDATE {$CFG->prefix}forum_posts
+        return $DB->execute("UPDATE {forum_posts}
                                SET mailed = '1'
                              WHERE discussion NOT IN (SELECT d.id
-                                                        FROM {$CFG->prefix}forum_discussions d
-                                                       WHERE d.timestart > $now)
-                                   AND (created < $endtime OR mailnow = 1)
-                                   AND mailed = 0", false);
+                                                        FROM {forum_discussions} d
+                                                       WHERE d.timestart > ?)
+                                   AND (created < ? OR mailnow = 1)
+                                   AND mailed = 0", array($now, $endtime));
     }
 }
 
 /**
  * Get all the posts for a user in a forum suitable for forum_print_post
+ *
+ * @global object
+ * @global object
+ * @uses CONTEXT_MODULE
+ * @return array
  */
 function forum_get_user_posts($forumid, $userid) {
-    global $CFG;
+    global $CFG, $DB;
 
     $timedsql = "";
+    $params = array($forumid, $userid);
+
     if (!empty($CFG->forum_enabletimedposts)) {
         $cm = get_coursemodule_from_instance('forum', $forumid);
         if (!has_capability('mod/forum:viewhiddentimedposts' , get_context_instance(CONTEXT_MODULE, $cm->id))) {
             $now = time();
-            $timedsql = "AND (d.timestart < $now AND (d.timeend = 0 OR d.timeend > $now))";
+            $timedsql = "AND (d.timestart < ? AND (d.timeend = 0 OR d.timeend > ?))";
+            $params[] = $now;
+            $params[] = $now;
         }
     }
 
-    return get_records_sql("SELECT p.*, d.forum, u.firstname, u.lastname, u.email, u.picture, u.imagealt
-                              FROM {$CFG->prefix}forum f
-                                   JOIN {$CFG->prefix}forum_discussions d ON d.forum = f.id
-                                   JOIN {$CFG->prefix}forum_posts p       ON p.discussion = d.id
-                                   JOIN {$CFG->prefix}user u              ON u.id = p.userid
-                             WHERE f.id = $forumid
-                                   AND p.userid = $userid
+    return $DB->get_records_sql("SELECT p.*, d.forum, u.firstname, u.lastname, u.email, u.picture, u.imagealt
+                              FROM {forum} f
+                                   JOIN {forum_discussions} d ON d.forum = f.id
+                                   JOIN {forum_posts} p       ON p.discussion = d.id
+                                   JOIN {user} u              ON u.id = p.userid
+                             WHERE f.id = ?
+                                   AND p.userid = ?
                                    $timedsql
-                          ORDER BY p.modified ASC");
+                          ORDER BY p.modified ASC", $params);
 }
 
 /**
  * Get all the discussions user participated in
+ *
+ * @global object
+ * @global object
+ * @uses CONTEXT_MODULE
  * @param int $forumid
  * @param int $userid
- * @return array or false
+ * @return array Array or false
  */
 function forum_get_user_involved_discussions($forumid, $userid) {
-    global $CFG;
+    global $CFG, $DB;
 
     $timedsql = "";
+    $params = array($forumid, $userid);
     if (!empty($CFG->forum_enabletimedposts)) {
         $cm = get_coursemodule_from_instance('forum', $forumid);
         if (!has_capability('mod/forum:viewhiddentimedposts' , get_context_instance(CONTEXT_MODULE, $cm->id))) {
             $now = time();
-            $timedsql = "AND (d.timestart < $now AND (d.timeend = 0 OR d.timeend > $now))";
+            $timedsql = "AND (d.timestart < ? AND (d.timeend = 0 OR d.timeend > ?))";
+            $params[] = $now;
+            $params[] = $now;
         }
     }
 
-    return get_records_sql("SELECT DISTINCT d.*
-                              FROM {$CFG->prefix}forum f
-                                   JOIN {$CFG->prefix}forum_discussions d ON d.forum = f.id
-                                   JOIN {$CFG->prefix}forum_posts p       ON p.discussion = d.id
-                             WHERE f.id = $forumid
-                                   AND p.userid = $userid
-                                   $timedsql");
+    return $DB->get_records_sql("SELECT DISTINCT d.*
+                              FROM {forum} f
+                                   JOIN {forum_discussions} d ON d.forum = f.id
+                                   JOIN {forum_posts} p       ON p.discussion = d.id
+                             WHERE f.id = ?
+                                   AND p.userid = ?
+                                   $timedsql", $params);
 }
 
 /**
  * Get all the posts for a user in a forum suitable for forum_print_post
+ *
+ * @global object
+ * @global object
  * @param int $forumid
  * @param int $userid
  * @return array of counts or false
  */
 function forum_count_user_posts($forumid, $userid) {
-    global $CFG;
+    global $CFG, $DB;
 
     $timedsql = "";
+    $params = array($forumid, $userid);
     if (!empty($CFG->forum_enabletimedposts)) {
         $cm = get_coursemodule_from_instance('forum', $forumid);
         if (!has_capability('mod/forum:viewhiddentimedposts' , get_context_instance(CONTEXT_MODULE, $cm->id))) {
             $now = time();
-            $timedsql = "AND (d.timestart < $now AND (d.timeend = 0 OR d.timeend > $now))";
+            $timedsql = "AND (d.timestart < ? AND (d.timeend = 0 OR d.timeend > ?))";
+            $params[] = $now;
+            $params[] = $now;
         }
     }
 
-    return get_record_sql("SELECT COUNT(p.id) AS postcount, MAX(p.modified) AS lastpost
-                             FROM {$CFG->prefix}forum f
-                                  JOIN {$CFG->prefix}forum_discussions d ON d.forum = f.id
-                                  JOIN {$CFG->prefix}forum_posts p       ON p.discussion = d.id
-                                  JOIN {$CFG->prefix}user u              ON u.id = p.userid
-                            WHERE f.id = $forumid
-                                  AND p.userid = $userid
-                                  $timedsql");
+    return $DB->get_record_sql("SELECT COUNT(p.id) AS postcount, MAX(p.modified) AS lastpost
+                             FROM {forum} f
+                                  JOIN {forum_discussions} d ON d.forum = f.id
+                                  JOIN {forum_posts} p       ON p.discussion = d.id
+                                  JOIN {user} u              ON u.id = p.userid
+                            WHERE f.id = ?
+                                  AND p.userid = ?
+                                  $timedsql", $params);
 }
 
 /**
  * Given a log entry, return the forum post details for it.
+ *
+ * @global object
+ * @global object
+ * @param object $log
+ * @return array|null
  */
 function forum_get_post_from_log($log) {
-    global $CFG;
+    global $CFG, $DB;
 
     if ($log->action == "add post") {
 
-        return get_record_sql("SELECT p.*, f.type AS forumtype, d.forum, d.groupid,
+        return $DB->get_record_sql("SELECT p.*, f.type AS forumtype, d.forum, d.groupid,
                                            u.firstname, u.lastname, u.email, u.picture
-                                 FROM {$CFG->prefix}forum_discussions d,
-                                      {$CFG->prefix}forum_posts p,
-                                      {$CFG->prefix}forum f,
-                                      {$CFG->prefix}user u
-                                WHERE p.id = '$log->info'
+                                 FROM {forum_discussions} d,
+                                      {forum_posts} p,
+                                      {forum} f,
+                                      {user} u
+                                WHERE p.id = ?
                                   AND d.id = p.discussion
                                   AND p.userid = u.id
                                   AND u.deleted <> '1'
-                                  AND f.id = d.forum");
+                                  AND f.id = d.forum", array($log->info));
 
 
     } else if ($log->action == "add discussion") {
 
-        return get_record_sql("SELECT p.*, f.type AS forumtype, d.forum, d.groupid,
+        return $DB->get_record_sql("SELECT p.*, f.type AS forumtype, d.forum, d.groupid,
                                            u.firstname, u.lastname, u.email, u.picture
-                                 FROM {$CFG->prefix}forum_discussions d,
-                                      {$CFG->prefix}forum_posts p,
-                                      {$CFG->prefix}forum f,
-                                      {$CFG->prefix}user u
-                                WHERE d.id = '$log->info'
+                                 FROM {forum_discussions} d,
+                                      {forum_posts} p,
+                                      {forum} f,
+                                      {user} u
+                                WHERE d.id = ?
                                   AND d.firstpost = p.id
                                   AND p.userid = u.id
                                   AND u.deleted <> '1'
-                                  AND f.id = d.forum");
+                                  AND f.id = d.forum", array($log->info));
     }
     return NULL;
 }
 
 /**
  * Given a discussion id, return the first post from the discussion
+ *
+ * @global object
+ * @global object
+ * @param int $dicsussionid
+ * @return array
  */
 function forum_get_firstpost_from_discussion($discussionid) {
-    global $CFG;
+    global $CFG, $DB;
 
-    return get_record_sql("SELECT p.*
-                             FROM {$CFG->prefix}forum_discussions d,
-                                  {$CFG->prefix}forum_posts p
-                            WHERE d.id = '$discussionid'
-                              AND d.firstpost = p.id ");
+    return $DB->get_record_sql("SELECT p.*
+                             FROM {forum_discussions} d,
+                                  {forum_posts} p
+                            WHERE d.id = ?
+                              AND d.firstpost = p.id ", array($discussionid));
 }
 
 /**
  * Returns an array of counts of replies to each discussion
+ *
+ * @global object
+ * @global object
+ * @param int $forumid
+ * @param string $forumsort
+ * @param int $limit
+ * @param int $page
+ * @param int $perpage
+ * @return array
  */
 function forum_count_discussion_replies($forumid, $forumsort="", $limit=-1, $page=-1, $perpage=0) {
-    global $CFG;
+    global $CFG, $DB;
 
     if ($limit > 0) {
         $limitfrom = 0;
@@ -2171,45 +2348,59 @@ function forum_count_discussion_replies($forumid, $forumsort="", $limit=-1, $pag
 
     if (($limitfrom == 0 and $limitnum == 0) or $forumsort == "") {
         $sql = "SELECT p.discussion, COUNT(p.id) AS replies, MAX(p.id) AS lastpostid
-                  FROM {$CFG->prefix}forum_posts p
-                       JOIN {$CFG->prefix}forum_discussions d ON p.discussion = d.id
-                 WHERE p.parent > 0 AND d.forum = $forumid
+                  FROM {forum_posts} p
+                       JOIN {forum_discussions} d ON p.discussion = d.id
+                 WHERE p.parent > 0 AND d.forum = ?
               GROUP BY p.discussion";
-        return get_records_sql($sql);
+        return $DB->get_records_sql($sql, array($forumid));
 
     } else {
         $sql = "SELECT p.discussion, (COUNT(p.id) - 1) AS replies, MAX(p.id) AS lastpostid
-                  FROM {$CFG->prefix}forum_posts p
-                       JOIN {$CFG->prefix}forum_discussions d ON p.discussion = d.id
-                 WHERE d.forum = $forumid
+                  FROM {forum_posts} p
+                       JOIN {forum_discussions} d ON p.discussion = d.id
+                 WHERE d.forum = ?
               GROUP BY p.discussion $groupby
               $orderby";
-        return get_records_sql("SELECT * FROM ($sql) sq", $limitfrom, $limitnum);
+        return $DB->get_records_sql("SELECT * FROM ($sql) sq", array($forumid), $limitfrom, $limitnum);
     }
 }
 
+/**
+ * @global object
+ * @global object
+ * @global object
+ * @staticvar array $cache
+ * @param object $forum
+ * @param object $cm
+ * @param object $course
+ * @return mixed
+ */
 function forum_count_discussions($forum, $cm, $course) {
-    global $CFG, $USER;
+    global $CFG, $DB, $USER;
 
     static $cache = array();
 
     $now = round(time(), -2); // db cache friendliness
 
+    $params = array($course->id);
+
     if (!isset($cache[$course->id])) {
         if (!empty($CFG->forum_enabletimedposts)) {
-            $timedsql = "AND d.timestart < $now AND (d.timeend = 0 OR d.timeend > $now)";
+            $timedsql = "AND d.timestart < ? AND (d.timeend = 0 OR d.timeend > ?)";
+            $params[] = $now;
+            $params[] = $now;
         } else {
             $timedsql = "";
         }
 
         $sql = "SELECT f.id, COUNT(d.id) as dcount
-                  FROM {$CFG->prefix}forum f
-                       JOIN {$CFG->prefix}forum_discussions d ON d.forum = f.id
-                 WHERE f.course = $course->id
+                  FROM {forum} f
+                       JOIN {forum_discussions} d ON d.forum = f.id
+                 WHERE f.course = ?
                        $timedsql
               GROUP BY f.id";
 
-        if ($counts = get_records_sql($sql)) {
+        if ($counts = $DB->get_records_sql($sql, $params)) {
             foreach ($counts as $count) {
                 $counts[$count->id] = $count->dcount;
             }
@@ -2240,10 +2431,10 @@ function forum_count_discussions($forum, $cm, $course) {
         $modinfo->groups = groups_get_user_groups($course->id, $USER->id);
     }
 
-    if (empty($CFG->enablegroupings)) {
-        $mygroups = $modinfo->groups[0];
-    } else {
+    if (array_key_exists($cm->groupingid, $modinfo->groups)) {
         $mygroups = $modinfo->groups[$cm->groupingid];
+    } else {
+        $mygroups = false; // Will be set below
     }
 
     // add all groups posts
@@ -2252,42 +2443,58 @@ function forum_count_discussions($forum, $cm, $course) {
     } else {
         $mygroups[-1] = -1;
     }
-    $mygroups = implode(',', $mygroups);
+
+    list($mygroups_sql, $params) = $DB->get_in_or_equal($mygroups);
+    $params[] = $forum->id;
 
     if (!empty($CFG->forum_enabletimedposts)) {
         $timedsql = "AND d.timestart < $now AND (d.timeend = 0 OR d.timeend > $now)";
+        $params[] = $now;
+        $params[] = $now;
     } else {
         $timedsql = "";
     }
 
     $sql = "SELECT COUNT(d.id)
-              FROM {$CFG->prefix}forum_discussions d
-             WHERE d.forum = $forum->id AND d.groupid IN ($mygroups)
+              FROM {forum_discussions} d
+             WHERE d.groupid $mygroups_sql AND d.forum = ?
                    $timedsql";
 
-    return get_field_sql($sql);
+    return $DB->get_field_sql($sql, $params);
 }
 
 /**
- * How many unrated posts are in the given discussion for a given user?
+ * How many posts by other users are unrated by a given user in the given discussion?
+ *
+ * TODO: Is this function still used anywhere?
+ *
+ * @param int $discussionid
+ * @param int $userid
+ * @return mixed
  */
 function forum_count_unrated_posts($discussionid, $userid) {
-    global $CFG;
-    if ($posts = get_record_sql("SELECT count(*) as num
-                                   FROM {$CFG->prefix}forum_posts
+    global $CFG, $DB;
+
+    $sql = "SELECT COUNT(*) as num
+              FROM {forum_posts}
                                   WHERE parent > 0
-                                    AND discussion = '$discussionid'
-                                    AND userid <> '$userid' ")) {
-
-        if ($rated = get_record_sql("SELECT count(*) as num
-                                       FROM {$CFG->prefix}forum_posts p,
-                                            {$CFG->prefix}forum_ratings r
-                                      WHERE p.discussion = '$discussionid'
-                                        AND p.id = r.post
-                                        AND r.userid = '$userid'")) {
-            $difference = $posts->num - $rated->num;
-            if ($difference > 0) {
-                return $difference;
+               AND discussion = :discussionid
+               AND userid <> :userid";
+    $params = array('discussionid' => $discussionid, 'userid' => $userid);
+    $posts = $DB->get_record_sql($sql, $params);
+    if ($posts) {
+        $sql = "SELECT count(*) as num
+                  FROM {forum_posts} p,
+                       {rating} r
+                 WHERE p.discussion = :discussionid AND
+                       p.id = r.itemid AND
+                       r.userid = userid AND
+                       r.component = 'mod_forum' AND
+                       r.ratingarea = 'post'";
+        $rated = $DB->get_record_sql($sql, $params);
+        if ($rated) {
+            if ($posts->num > $rated->num) {
+                return $posts->num - $rated->num;
             } else {
                 return 0;    // Just in case there was a counting error
             }
@@ -2301,15 +2508,29 @@ function forum_count_unrated_posts($discussionid, $userid) {
 
 /**
  * Get all discussions in a forum
+ *
+ * @global object
+ * @global object
+ * @global object
+ * @uses CONTEXT_MODULE
+ * @uses VISIBLEGROUPS
+ * @param object $cm
+ * @param string $forumsort
+ * @param bool $fullpost
+ * @param int $unused
+ * @param int $limit
+ * @param bool $userlastmodified
+ * @param int $page
+ * @param int $perpage
+ * @return array
  */
 function forum_get_discussions($cm, $forumsort="d.timemodified DESC", $fullpost=true, $unused=-1, $limit=-1, $userlastmodified=false, $page=-1, $perpage=0) {
-    global $CFG, $USER;
+    global $CFG, $DB, $USER;
 
     $timelimit = '';
 
-    $modcontext = null;
-
     $now = round(time(), -2);
+    $params = array($cm->instance);
 
     $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
 
@@ -2320,9 +2541,12 @@ function forum_get_discussions($cm, $forumsort="d.timemodified DESC", $fullpost=
     if (!empty($CFG->forum_enabletimedposts)) { /// Users must fulfill timed posts
 
         if (!has_capability('mod/forum:viewhiddentimedposts', $modcontext)) {
-            $timelimit = " AND ((d.timestart <= $now AND (d.timeend = 0 OR d.timeend > $now))";
+            $timelimit = " AND ((d.timestart <= ? AND (d.timeend = 0 OR d.timeend > ?))";
+            $params[] = $now;
+            $params[] = $now;
             if (isloggedin()) {
-                $timelimit .= " OR d.userid = $USER->id";
+                $timelimit .= " OR d.userid = ?";
+                $params[] = $USER->id;
             }
             $timelimit .= ")";
         }
@@ -2349,7 +2573,8 @@ function forum_get_discussions($cm, $forumsort="d.timemodified DESC", $fullpost=
 
         if ($groupmode == VISIBLEGROUPS or has_capability('moodle/site:accessallgroups', $modcontext)) {
             if ($currentgroup) {
-                $groupselect = "AND (d.groupid = $currentgroup OR d.groupid = -1)";
+                $groupselect = "AND (d.groupid = ? OR d.groupid = -1)";
+                $params[] = $currentgroup;
             } else {
                 $groupselect = "";
             }
@@ -2357,7 +2582,8 @@ function forum_get_discussions($cm, $forumsort="d.timemodified DESC", $fullpost=
         } else {
             //seprate groups without access all
             if ($currentgroup) {
-                $groupselect = "AND (d.groupid = $currentgroup OR d.groupid = -1)";
+                $groupselect = "AND (d.groupid = ? OR d.groupid = -1)";
+                $params[] = $currentgroup;
             } else {
                 $groupselect = "AND d.groupid = -1";
             }
@@ -2381,26 +2607,38 @@ function forum_get_discussions($cm, $forumsort="d.timemodified DESC", $fullpost=
         $umtable  = "";
     } else {
         $umfields = ", um.firstname AS umfirstname, um.lastname AS umlastname";
-        $umtable  = " LEFT JOIN {$CFG->prefix}user um ON (d.usermodified = um.id)";
+        $umtable  = " LEFT JOIN {user} um ON (d.usermodified = um.id)";
     }
 
     $sql = "SELECT $postdata, d.name, d.timemodified, d.usermodified, d.groupid, d.timestart, d.timeend,
                    u.firstname, u.lastname, u.email, u.picture, u.imagealt $umfields
-              FROM {$CFG->prefix}forum_discussions d
-                   JOIN {$CFG->prefix}forum_posts p ON p.discussion = d.id
-                   JOIN {$CFG->prefix}user u ON p.userid = u.id
+              FROM {forum_discussions} d
+                   JOIN {forum_posts} p ON p.discussion = d.id
+                   JOIN {user} u ON p.userid = u.id
                    $umtable
-             WHERE d.forum = {$cm->instance} AND p.parent = 0
+             WHERE d.forum = ? AND p.parent = 0
                    $timelimit $groupselect
           ORDER BY $forumsort";
-    return get_records_sql($sql, $limitfrom, $limitnum);
+    return $DB->get_records_sql($sql, $params, $limitfrom, $limitnum);
 }
 
+/**
+ *
+ * @global object
+ * @global object
+ * @global object
+ * @uses CONTEXT_MODULE
+ * @uses VISIBLEGROUPS
+ * @param object $cm
+ * @return array
+ */
 function forum_get_discussions_unread($cm) {
-    global $CFG, $USER;
+    global $CFG, $DB, $USER;
 
     $now = round(time(), -2);
+    $cutoffdate = $now - ($CFG->forum_oldpostdays*24*60*60);
 
+    $params = array();
     $groupmode    = groups_get_activity_groupmode($cm);
     $currentgroup = groups_get_activity_group($cm);
 
@@ -2409,15 +2647,17 @@ function forum_get_discussions_unread($cm) {
 
         if ($groupmode == VISIBLEGROUPS or has_capability('moodle/site:accessallgroups', $modcontext)) {
             if ($currentgroup) {
-                $groupselect = "AND (d.groupid = $currentgroup OR d.groupid = -1)";
+                $groupselect = "AND (d.groupid = :currentgroup OR d.groupid = -1)";
+                $params['currentgroup'] = $currentgroup;
             } else {
                 $groupselect = "";
             }
 
         } else {
-            //seprate groups without access all
+            //separate groups without access all
             if ($currentgroup) {
-                $groupselect = "AND (d.groupid = $currentgroup OR d.groupid = -1)";
+                $groupselect = "AND (d.groupid = :currentgroup OR d.groupid = -1)";
+                $params['currentgroup'] = $currentgroup;
             } else {
                 $groupselect = "AND d.groupid = -1";
             }
@@ -2426,24 +2666,26 @@ function forum_get_discussions_unread($cm) {
         $groupselect = "";
     }
 
-    $cutoffdate = $now - ($CFG->forum_oldpostdays*24*60*60);
-
     if (!empty($CFG->forum_enabletimedposts)) {
-        $timedsql = "AND d.timestart < $now AND (d.timeend = 0 OR d.timeend > $now)";
+        $timedsql = "AND d.timestart < :now1 AND (d.timeend = 0 OR d.timeend > :now2)";
+        $params['now1'] = $now;
+        $params['now2'] = $now;
     } else {
         $timedsql = "";
     }
 
     $sql = "SELECT d.id, COUNT(p.id) AS unread
-              FROM {$CFG->prefix}forum_discussions d
-                   JOIN {$CFG->prefix}forum_posts p     ON p.discussion = d.id
-                   LEFT JOIN {$CFG->prefix}forum_read r ON (r.postid = p.id AND r.userid = $USER->id)
+              FROM {forum_discussions} d
+                   JOIN {forum_posts} p     ON p.discussion = d.id
+                   LEFT JOIN {forum_read} r ON (r.postid = p.id AND r.userid = $USER->id)
              WHERE d.forum = {$cm->instance}
-                   AND p.modified >= $cutoffdate AND r.id is NULL
-                   $timedsql
+                   AND p.modified >= :cutoffdate AND r.id is NULL
                    $groupselect
+                   $timedsql
           GROUP BY d.id";
-    if ($unreads = get_records_sql($sql)) {
+    $params['cutoffdate'] = $cutoffdate;
+
+    if ($unreads = $DB->get_records_sql($sql, $params)) {
         foreach ($unreads as $unread) {
             $unreads[$unread->id] = $unread->unread;
         }
@@ -2453,11 +2695,20 @@ function forum_get_discussions_unread($cm) {
     }
 }
 
+/**
+ * @global object
+ * @global object
+ * @global object
+ * @uses CONEXT_MODULE
+ * @uses VISIBLEGROUPS
+ * @param object $cm
+ * @return array
+ */
 function forum_get_discussions_count($cm) {
-    global $CFG, $USER;
+    global $CFG, $DB, $USER;
 
     $now = round(time(), -2);
-
+    $params = array($cm->instance);
     $groupmode    = groups_get_activity_groupmode($cm);
     $currentgroup = groups_get_activity_group($cm);
 
@@ -2466,7 +2717,8 @@ function forum_get_discussions_count($cm) {
 
         if ($groupmode == VISIBLEGROUPS or has_capability('moodle/site:accessallgroups', $modcontext)) {
             if ($currentgroup) {
-                $groupselect = "AND (d.groupid = $currentgroup OR d.groupid = -1)";
+                $groupselect = "AND (d.groupid = ? OR d.groupid = -1)";
+                $params[] = $currentgroup;
             } else {
                 $groupselect = "";
             }
@@ -2474,7 +2726,8 @@ function forum_get_discussions_count($cm) {
         } else {
             //seprate groups without access all
             if ($currentgroup) {
-                $groupselect = "AND (d.groupid = $currentgroup OR d.groupid = -1)";
+                $groupselect = "AND (d.groupid = ? OR d.groupid = -1)";
+                $params[] = $currentgroup;
             } else {
                 $groupselect = "AND d.groupid = -1";
             }
@@ -2492,50 +2745,62 @@ function forum_get_discussions_count($cm) {
         $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
 
         if (!has_capability('mod/forum:viewhiddentimedposts', $modcontext)) {
-            $timelimit = " AND ((d.timestart <= $now AND (d.timeend = 0 OR d.timeend > $now))";
+            $timelimit = " AND ((d.timestart <= ? AND (d.timeend = 0 OR d.timeend > ?))";
+            $params[] = $now;
+            $params[] = $now;
             if (isloggedin()) {
-                $timelimit .= " OR d.userid = $USER->id";
+                $timelimit .= " OR d.userid = ?";
+                $params[] = $USER->id;
             }
             $timelimit .= ")";
         }
     }
 
     $sql = "SELECT COUNT(d.id)
-              FROM {$CFG->prefix}forum_discussions d
-                   JOIN {$CFG->prefix}forum_posts p ON p.discussion = d.id
-             WHERE d.forum = {$cm->instance} AND p.parent = 0
-                   $timelimit $groupselect";
+              FROM {forum_discussions} d
+                   JOIN {forum_posts} p ON p.discussion = d.id
+             WHERE d.forum = ? AND p.parent = 0
+                   $groupselect $timelimit";
 
-    return get_field_sql($sql);
+    return $DB->get_field_sql($sql, $params);
 }
 
 
 /**
  * Get all discussions started by a particular user in a course (or group)
  * This function no longer used ...
+ *
+ * @todo Remove this function if no longer used
+ * @global object
+ * @global object
+ * @param int $courseid
+ * @param int $userid
+ * @param int $groupid
+ * @return array
  */
 function forum_get_user_discussions($courseid, $userid, $groupid=0) {
-    global $CFG;
-
+    global $CFG, $DB;
+    $params = array($courseid, $userid);
     if ($groupid) {
-        $groupselect = " AND d.groupid = '$groupid' ";
+        $groupselect = " AND d.groupid = ? ";
+        $params[] = $groupid;
     } else  {
         $groupselect = "";
     }
 
-    return get_records_sql("SELECT p.*, d.groupid, u.firstname, u.lastname, u.email, u.picture, u.imagealt,
+    return $DB->get_records_sql("SELECT p.*, d.groupid, u.firstname, u.lastname, u.email, u.picture, u.imagealt,
                                    f.type as forumtype, f.name as forumname, f.id as forumid
-                              FROM {$CFG->prefix}forum_discussions d,
-                                   {$CFG->prefix}forum_posts p,
-                                   {$CFG->prefix}user u,
-                                   {$CFG->prefix}forum f
-                             WHERE d.course = '$courseid'
+                              FROM {forum_discussions} d,
+                                   {forum_posts} p,
+                                   {user} u,
+                                   {forum} f
+                             WHERE d.course = ?
                                AND p.discussion = d.id
                                AND p.parent = 0
                                AND p.userid = u.id
-                               AND u.id = '$userid'
+                               AND u.id = ?
                                AND d.forum = f.id $groupselect
-                          ORDER BY p.created DESC");
+                          ORDER BY p.created DESC", $params);
 }
 
 /**
@@ -2548,62 +2813,83 @@ function forum_get_user_discussions($courseid, $userid, $groupid=0) {
  * @return array list of users.
  */
 function forum_get_potential_subscribers($forumcontext, $groupid, $fields, $sort) {
-    return get_users_by_capability($forumcontext, 'mod/forum:initialsubscriptions', $fields, $sort, '', '', $groupid, '', false, true);
+    global $DB;
+
+    // only active enrolled users or everybody on the frontpage with this capability
+    list($esql, $params) = get_enrolled_sql($forumcontext, 'mod/forum:initialsubscriptions', $groupid, true);
+
+    $sql = "SELECT $fields
+              FROM {user} u
+              JOIN ($esql) je ON je.id = u.id";
+    if ($sort) {
+        $sql = "$sql ORDER BY $sort";
+    } else {
+        $sql = "$sql ORDER BY u.lastname ASC, u.firstname ASC";
+    }
+
+    return $DB->get_records_sql($sql, $params);
 }
 
 /**
  * Returns list of user objects that are subscribed to this forum
  *
+ * @global object
+ * @global object
  * @param object $course the course
  * @param forum $forum the forum
  * @param integer $groupid group id, or 0 for all.
  * @param object $context the forum context, to save re-fetching it where possible.
+ * @param string $fields requested user fields (with "u." table prefix)
  * @return array list of users.
  */
-function forum_subscribed_users($course, $forum, $groupid=0, $context = NULL) {
-    global $CFG;
-
-    if ($groupid) {
-        $grouptables = ", {$CFG->prefix}groups_members gm ";
-        $groupselect = "AND gm.groupid = $groupid AND u.id = gm.userid";
+function forum_subscribed_users($course, $forum, $groupid=0, $context = null, $fields = null) {
+    global $CFG, $DB;
 
-    } else  {
-        $grouptables = '';
-        $groupselect = '';
+    if (empty($fields)) {
+        $fields ="u.id,
+                  u.username,
+                  u.firstname,
+                  u.lastname,
+                  u.maildisplay,
+                  u.mailformat,
+                  u.maildigest,
+                  u.imagealt,
+                  u.email,
+                  u.emailstop,
+                  u.city,
+                  u.country,
+                  u.lastaccess,
+                  u.lastlogin,
+                  u.picture,
+                  u.timezone,
+                  u.theme,
+                  u.lang,
+                  u.trackforums,
+                  u.mnethostid";
     }
 
-    if (forum_is_forcesubscribed($forum)) {
         if (empty($context)) {
             $cm = get_coursemodule_from_instance('forum', $forum->id, $course->id);
             $context = get_context_instance(CONTEXT_MODULE, $cm->id);
         }
-        $sort = "u.email ASC";
-        $fields ="u.id, u.username, u.firstname, u.lastname, u.maildisplay, u.mailformat, u.maildigest, u.emailstop, u.imagealt,
-                  u.email, u.city, u.country, u.lastaccess, u.lastlogin, u.picture, u.timezone, u.theme, u.lang, u.trackforums, u.mnethostid";
-        $results = forum_get_potential_subscribers($context, $groupid, $fields, $sort);
-    } else {
-        $results = get_records_sql("SELECT u.id, u.username, u.firstname, u.lastname, u.maildisplay, u.mailformat, u.maildigest, u.emailstop, u.imagealt,
-                                   u.email, u.city, u.country, u.lastaccess, u.lastlogin, u.picture, u.timezone, u.theme, u.lang, u.trackforums, u.mnethostid
-                              FROM {$CFG->prefix}user u,
-                                   {$CFG->prefix}forum_subscriptions s $grouptables
-                             WHERE s.forum = '$forum->id'
-                               AND s.userid = u.id
-                               AND u.deleted = 0  $groupselect
-                          ORDER BY u.email ASC");
-    }
 
-    static $guestid = null;
+    if (forum_is_forcesubscribed($forum)) {
+        $results = forum_get_potential_subscribers($context, $groupid, $fields, "u.email ASC");
 
-    if (is_null($guestid)) {
-        if ($guest = guest_user()) {
-            $guestid = $guest->id;
         } else {
-            $guestid = 0;
-        }
+        // only active enrolled users or everybody on the frontpage
+        list($esql, $params) = get_enrolled_sql($context, '', $groupid, true);
+        $params['forumid'] = $forum->id;
+        $results = $DB->get_records_sql("SELECT $fields
+                                           FROM {user} u
+                                           JOIN ($esql) je ON je.id = u.id
+                                           JOIN {forum_subscriptions} s ON s.userid = u.id
+                                          WHERE s.forum = :forumid
+                                       ORDER BY u.email ASC", $params);
     }
 
     // Guest user should never be subscribed to a forum.
-    unset($results[$guestid]);
+    unset($results[$CFG->siteguest]);
 
     return $results;
 }
@@ -2613,11 +2899,17 @@ function forum_subscribed_users($course, $forum, $groupid=0, $context = NULL) {
 // OTHER FUNCTIONS ///////////////////////////////////////////////////////////
 
 
+/**
+ * @global object
+ * @global object
+ * @param int $courseid
+ * @param string $type
+ */
 function forum_get_course_forum($courseid, $type) {
 // How to set up special 1-per-course forums
-    global $CFG;
+    global $CFG, $DB, $OUTPUT;
 
-    if ($forums = get_records_select("forum", "course = '$courseid' AND type = '$type'", "id ASC")) {
+    if ($forums = $DB->get_records_select("forum", "course = ? AND type = ?", array($courseid, $type), "id ASC")) {
         // There should always only be ONE, but with the right combination of
         // errors there might be more.  In this case, just return the oldest one (lowest ID).
         foreach ($forums as $forum) {
@@ -2630,8 +2922,8 @@ function forum_get_course_forum($courseid, $type) {
     $forum->type = "$type";
     switch ($forum->type) {
         case "news":
-            $forum->name  = addslashes(get_string("namenews", "forum"));
-            $forum->intro = addslashes(get_string("intronews", "forum"));
+            $forum->name  = get_string("namenews", "forum");
+            $forum->intro = get_string("intronews", "forum");
             $forum->forcesubscribe = FORUM_FORCESUBSCRIBE;
             $forum->assessed = 0;
             if ($courseid == SITEID) {
@@ -2640,76 +2932,96 @@ function forum_get_course_forum($courseid, $type) {
             }
             break;
         case "social":
-            $forum->name  = addslashes(get_string("namesocial", "forum"));
-            $forum->intro = addslashes(get_string("introsocial", "forum"));
+            $forum->name  = get_string("namesocial", "forum");
+            $forum->intro = get_string("introsocial", "forum");
+            $forum->assessed = 0;
+            $forum->forcesubscribe = 0;
+            break;
+        case "blog":
+            $forum->name = get_string('blogforum', 'forum');
+            $forum->intro = get_string('introblog', 'forum');
             $forum->assessed = 0;
             $forum->forcesubscribe = 0;
             break;
         default:
-            notify("That forum type doesn't exist!");
+            echo $OUTPUT->notification("That forum type doesn't exist!");
             return false;
             break;
     }
 
     $forum->timemodified = time();
-    $forum->id = insert_record("forum", $forum);
+    $forum->id = $DB->insert_record("forum", $forum);
 
-    if (! $module = get_record("modules", "name", "forum")) {
-        notify("Could not find forum module!!");
+    if (! $module = $DB->get_record("modules", array("name" => "forum"))) {
+        echo $OUTPUT->notification("Could not find forum module!!");
         return false;
     }
-    $mod = new object();
+    $mod = new stdClass();
     $mod->course = $courseid;
     $mod->module = $module->id;
     $mod->instance = $forum->id;
     $mod->section = 0;
     if (! $mod->coursemodule = add_course_module($mod) ) {   // assumes course/lib.php is loaded
-        notify("Could not add a new course module to the course '" . format_string($course->fullname) . "'");
+        echo $OUTPUT->notification("Could not add a new course module to the course '" . $courseid . "'");
         return false;
     }
     if (! $sectionid = add_mod_to_section($mod) ) {   // assumes course/lib.php is loaded
-        notify("Could not add the new course module to that section");
-        return false;
-    }
-    if (! set_field("course_modules", "section", $sectionid, "id", $mod->coursemodule)) {
-        notify("Could not update the course module with the correct section");
+        echo $OUTPUT->notification("Could not add the new course module to that section");
         return false;
     }
+    $DB->set_field("course_modules", "section", $sectionid, array("id" => $mod->coursemodule));
+
     include_once("$CFG->dirroot/course/lib.php");
     rebuild_course_cache($courseid);
 
-    return get_record("forum", "id", "$forum->id");
+    return $DB->get_record("forum", array("id" => "$forum->id"));
 }
 
 
 /**
-* Given the data about a posting, builds up the HTML to display it and
-* returns the HTML in a string.  This is designed for sending via HTML email.
-*/
-function forum_make_mail_post($course, $forum, $discussion, $post, $userfrom, $userto,
+ * Given the data about a posting, builds up the HTML to display it and
+ * returns the HTML in a string.  This is designed for sending via HTML email.
+ *
+ * @global object
+ * @param object $course
+ * @param object $cm
+ * @param object $forum
+ * @param object $discussion
+ * @param object $post
+ * @param object $userform
+ * @param object $userto
+ * @param bool $ownpost
+ * @param bool $reply
+ * @param bool $link
+ * @param bool $rate
+ * @param string $footer
+ * @return string
+ */
+function forum_make_mail_post($course, $cm, $forum, $discussion, $post, $userfrom, $userto,
                               $ownpost=false, $reply=false, $link=false, $rate=false, $footer="") {
 
-    global $CFG;
+    global $CFG, $OUTPUT;
 
-    if (!isset($userto->viewfullnames[$forum->id])) {
-        if (!$cm = get_coursemodule_from_instance('forum', $forum->id, $course->id)) {
-            error('Course Module ID was incorrect');
-        }
         $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
+
+    if (!isset($userto->viewfullnames[$forum->id])) {
         $viewfullnames = has_capability('moodle/site:viewfullnames', $modcontext, $userto->id);
     } else {
         $viewfullnames = $userto->viewfullnames[$forum->id];
     }
 
+    // add absolute file links
+    $post->message = file_rewrite_pluginfile_urls($post->message, 'pluginfile.php', $modcontext->id, 'mod_forum', 'post', $post->id);
+
     // format the post body
-    $options = new object();
+    $options = new stdClass();
     $options->para = true;
-    $formattedtext = format_text(trusttext_strip($post->message), $post->format, $options, $course->id);
+    $formattedtext = format_text($post->message, $post->messageformat, $options, $course->id);
 
     $output = '<table border="0" cellpadding="3" cellspacing="0" class="forumpost">';
 
     $output .= '<tr class="header"><td width="35" valign="top" class="picture left">';
-    $output .= print_user_picture($userfrom, $course->id, $userfrom->picture, false, true);
+    $output .= $OUTPUT->user_picture($userfrom, array('courseid'=>$course->id));
     $output .= '</td>';
 
     if ($post->parent) {
@@ -2720,7 +3032,7 @@ function forum_make_mail_post($course, $forum, $discussion, $post, $userfrom, $u
     $output .= '<div class="subject">'.format_string($post->subject).'</div>';
 
     $fullname = fullname($userfrom, $viewfullnames);
-    $by = new object();
+    $by = new stdClass();
     $by->name = '<a href="'.$CFG->wwwroot.'/user/view.php?id='.$userfrom->id.'&amp;course='.$course->id.'">'.$fullname.'</a>';
     $by->date = userdate($post->modified, '', $userto->timezone);
     $output .= '<div class="author">'.get_string('bynameondate', 'forum', $by).'</div>';
@@ -2732,10 +3044,7 @@ function forum_make_mail_post($course, $forum, $discussion, $post, $userfrom, $u
     if (isset($userfrom->groups)) {
         $groups = $userfrom->groups[$forum->id];
     } else {
-        if (!$cm = get_coursemodule_from_instance('forum', $forum->id, $course->id)) {
-            error('Course Module ID was incorrect');
-        }
-        $group = groups_get_all_groups($course->id, $userfrom->id, $cm->groupingid);
+        $groups = groups_get_all_groups($course->id, $userfrom->id, $cm->groupingid);
     }
 
     if ($groups) {
@@ -2746,11 +3055,11 @@ function forum_make_mail_post($course, $forum, $discussion, $post, $userfrom, $u
 
     $output .= '</td><td class="content">';
 
-    if ($post->attachment) {
-        $post->course = $course->id;
+    $attachments = forum_print_attachments($post, $cm, 'html');
+    if ($attachments !== '') {
         $output .= '<div class="attachments">';
-        $output .= forum_print_attachments($post, 'html');
-        $output .= "</div>";
+        $output .= $attachments;
+        $output .= '</div>';
     }
 
     $output .= $formattedtext;
@@ -2791,12 +3100,22 @@ function forum_make_mail_post($course, $forum, $discussion, $post, $userfrom, $u
 /**
  * Print a forum post
  *
+ * @global object
+ * @global object
+ * @uses FORUM_MODE_THREADED
+ * @uses PORTFOLIO_FORMAT_PLAINHTML
+ * @uses PORTFOLIO_FORMAT_FILE
+ * @uses PORTFOLIO_FORMAT_RICHHTML
+ * @uses PORTFOLIO_ADD_TEXT_LINK
+ * @uses CONTEXT_MODULE
  * @param object $post The post to print.
- * @param integer $courseid The course this post belongs to.
+ * @param object $discussion
+ * @param object $forum
+ * @param object $cm
+ * @param object $course
  * @param boolean $ownpost Whether this post belongs to the current user.
  * @param boolean $reply Whether to print a 'reply' link at the bottom of the message.
  * @param boolean $link Just print a shortened version of the post as a link to the full post.
- * @param object $ratings -- I don't really know --
  * @param string $footer Extra stuff to print after the message.
  * @param string $highlight Space-separated list of terms to highlight.
  * @param int $post_read true, false or -99. If we already know whether this user
@@ -2806,27 +3125,31 @@ function forum_make_mail_post($course, $forum, $discussion, $post, $userfrom, $u
  *          the current user can't see this post, if this argument is true
  *          (the default) then print a dummy 'you can't see this post' post.
  *          If false, don't output anything at all.
+ * @param bool|null $istracked
+ * @return void
  */
 function forum_print_post($post, $discussion, $forum, &$cm, $course, $ownpost=false, $reply=false, $link=false,
-                          $ratings=NULL, $footer="", $highlight="", $post_read=null, $dummyifcantsee=true, $istracked=null) {
+                          $footer="", $highlight="", $postisread=null, $dummyifcantsee=true, $istracked=null, $return=false) {
+    global $USER, $CFG, $OUTPUT;
 
-    global $USER, $CFG;
+    require_once($CFG->libdir . '/filelib.php');
+
+    // String cache
+    static $str;
 
-    static $stredit, $strdelete, $strreply, $strparent, $strprune;
-    static $strpruneheading, $displaymode;
-    static $strmarkread, $strmarkunread;
+    $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
 
     $post->course = $course->id;
     $post->forum  = $forum->id;
+    $post->message = file_rewrite_pluginfile_urls($post->message, 'pluginfile.php', $modcontext->id, 'mod_forum', 'post', $post->id);
 
     // caching
     if (!isset($cm->cache)) {
-        $cm->cache = new object();
+        $cm->cache = new stdClass;
     }
 
     if (!isset($cm->cache->caps)) {
         $cm->cache->caps = array();
-        $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
         $cm->cache->caps['mod/forum:viewdiscussion']   = has_capability('mod/forum:viewdiscussion', $modcontext);
         $cm->cache->caps['moodle/site:viewfullnames']  = has_capability('moodle/site:viewfullnames', $modcontext);
         $cm->cache->caps['mod/forum:editanypost']      = has_capability('mod/forum:editanypost', $modcontext);
@@ -2834,108 +3157,81 @@ function forum_print_post($post, $discussion, $forum, &$cm, $course, $ownpost=fa
         $cm->cache->caps['mod/forum:deleteownpost']    = has_capability('mod/forum:deleteownpost', $modcontext);
         $cm->cache->caps['mod/forum:deleteanypost']    = has_capability('mod/forum:deleteanypost', $modcontext);
         $cm->cache->caps['mod/forum:viewanyrating']    = has_capability('mod/forum:viewanyrating', $modcontext);
+        $cm->cache->caps['mod/forum:exportpost']       = has_capability('mod/forum:exportpost', $modcontext);
+        $cm->cache->caps['mod/forum:exportownpost']    = has_capability('mod/forum:exportownpost', $modcontext);
     }
 
     if (!isset($cm->uservisible)) {
         $cm->uservisible = coursemodule_visible_for_user($cm);
     }
 
+    if ($istracked && is_null($postisread)) {
+        $postisread = forum_tp_is_post_read($USER->id, $post);
+    }
+
     if (!forum_user_can_see_post($forum, $discussion, $post, NULL, $cm)) {
+        $output = '';
         if (!$dummyifcantsee) {
+            if ($return) {
+                return $output;
+            }
+            echo $output;
             return;
         }
-        echo '<a id="p'.$post->id.'"></a>';
-        echo '<table cellspacing="0" class="forumpost">';
-        echo '<tr class="header"><td class="picture left">';
-        //        print_user_picture($post->userid, $courseid, $post->picture);
-        echo '</td>';
+        $output .= html_writer::tag('a', '', array('id'=>'p'.$post->id));
+        $output .= html_writer::start_tag('div', array('class'=>'forumpost clearfix'));
+        $output .= html_writer::start_tag('div', array('class'=>'row header'));
+        $output .= html_writer::tag('div', '', array('class'=>'left picture')); // Picture
         if ($post->parent) {
-            echo '<td class="topic">';
+            $output .= html_writer::start_tag('div', array('class'=>'topic'));
         } else {
-            echo '<td class="topic starter">';
-        }
-        echo '<div class="subject">'.get_string('forumsubjecthidden','forum').'</div>';
-        echo '<div class="author">';
-        print_string('forumauthorhidden','forum');
-        echo '</div></td></tr>';
-
-        echo '<tr><td class="left side">';
-        echo '&nbsp;';
-
-        // Actual content
-
-        echo '</td><td class="content">'."\n";
-        echo get_string('forumbodyhidden','forum');
-        echo '</td></tr></table>';
-        return;
+            $output .= html_writer::start_tag('div', array('class'=>'topic starter'));
     }
+        $output .= html_writer::tag('div', get_string('forumsubjecthidden','forum'), array('class'=>'subject')); // Subject
+        $output .= html_writer::tag('div', get_string('forumauthorhidden','forum'), array('class'=>'author')); // author
+        $output .= html_writer::end_tag('div');
+        $output .= html_writer::end_tag('div'); // row
+        $output .= html_writer::start_tag('div', array('class'=>'row'));
+        $output .= html_writer::tag('div', '&nbsp;', array('class'=>'left side')); // Groups
+        $output .= html_writer::tag('div', get_string('forumbodyhidden','forum'), array('class'=>'content')); // Content
+        $output .= html_writer::end_tag('div'); // row
+        $output .= html_writer::end_tag('div'); // forumpost
 
-    if (empty($stredit)) {
-        $stredit         = get_string('edit', 'forum');
-        $strdelete       = get_string('delete', 'forum');
-        $strreply        = get_string('reply', 'forum');
-        $strparent       = get_string('parent', 'forum');
-        $strpruneheading = get_string('pruneheading', 'forum');
-        $strprune        = get_string('prune', 'forum');
-        $displaymode     = get_user_preferences('forum_displaymode', $CFG->forum_displaymode);
-        $strmarkread     = get_string('markread', 'forum');
-        $strmarkunread   = get_string('markunread', 'forum');
-
+        if ($return) {
+            return $output;
     }
-
-    $read_style = '';
-    // ignore trackign status if not tracked or tracked param missing
-    if ($istracked) {
-        if (is_null($post_read)) {
-            debugging('fetching post_read info');
-            $post_read = forum_tp_is_post_read($USER->id, $post);
+        echo $output;
+        return;
         }
 
-        if ($post_read) {
-            $read_style = ' read';
-        } else {
-            $read_style = ' unread';
-            echo '<a name="unread"></a>';
-        }
+    if (empty($str)) {
+        $str = new stdClass;
+        $str->edit         = get_string('edit', 'forum');
+        $str->delete       = get_string('delete', 'forum');
+        $str->reply        = get_string('reply', 'forum');
+        $str->parent       = get_string('parent', 'forum');
+        $str->pruneheading = get_string('pruneheading', 'forum');
+        $str->prune        = get_string('prune', 'forum');
+        $str->displaymode     = get_user_preferences('forum_displaymode', $CFG->forum_displaymode);
+        $str->markread     = get_string('markread', 'forum');
+        $str->markunread   = get_string('markunread', 'forum');
     }
 
-    echo '<a id="p'.$post->id.'"></a>';
-    echo '<table cellspacing="0" class="forumpost'.$read_style.'">';
+    $discussionlink = new moodle_url('/mod/forum/discuss.php', array('d'=>$post->discussion));
 
-    // Picture
-    $postuser = new object();
+    // Build an object that represents the posting user
+    $postuser = new stdClass;
     $postuser->id        = $post->userid;
     $postuser->firstname = $post->firstname;
     $postuser->lastname  = $post->lastname;
     $postuser->imagealt  = $post->imagealt;
     $postuser->picture   = $post->picture;
+    $postuser->email     = $post->email;
+    // Some handy things for later on
+    $postuser->fullname    = fullname($postuser, $cm->cache->caps['moodle/site:viewfullnames']);
+    $postuser->profilelink = new moodle_url('/user/view.php', array('id'=>$post->userid, 'course'=>$course->id));
 
-    echo '<tr class="header"><td class="picture left">';
-    print_user_picture($postuser, $course->id);
-    echo '</td>';
-
-    if ($post->parent) {
-        echo '<td class="topic">';
-    } else {
-        echo '<td class="topic starter">';
-    }
-
-    if (!empty($post->subjectnoformat)) {
-        echo '<div class="subject">'.$post->subject.'</div>';
-    } else {
-        echo '<div class="subject">'.format_string($post->subject).'</div>';
-    }
-
-    echo '<div class="author">';
-    $fullname = fullname($postuser, $cm->cache->caps['moodle/site:viewfullnames']);
-    $by = new object();
-    $by->name = '<a href="'.$CFG->wwwroot.'/user/view.php?id='.
-                $post->userid.'&amp;course='.$course->id.'">'.$fullname.'</a>';
-    $by->date = userdate($post->modified);
-    print_string('bynameondate', 'forum', $by);
-    echo '</div></td></tr>';
-
-    echo '<tr><td class="left side">';
+    // Prepare the groups the posting user belongs to
     if (isset($cm->cache->usersgroups)) {
         $groups = array();
         if (isset($cm->cache->usersgroups[$post->userid])) {
@@ -2947,201 +3243,348 @@ function forum_print_post($post, $discussion, $forum, &$cm, $course, $ownpost=fa
         $groups = groups_get_all_groups($course->id, $post->userid, $cm->groupingid);
     }
 
-    if ($groups) {
-        print_group_picture($groups, $course->id, false, false, true);
+    // Prepare the attachements for the post, files then images
+    list($attachments, $attachedimages) = forum_print_attachments($post, $cm, 'separateimages');
+
+    // Determine if we need to shorten this post
+    $shortenpost = ($link && (strlen(strip_tags($post->message)) > $CFG->forum_longpost));
+
+
+    // Prepare an array of commands
+    $commands = array();
+
+    // SPECIAL CASE: The front page can display a news item post to non-logged in users.
+    // Don't display the mark read / unread controls in this case.
+    if ($istracked && $CFG->forum_usermarksread && isloggedin()) {
+        $url = new moodle_url($discussionlink, array('postid'=>$post->id, 'mark'=>'unread'));
+        $text = $str->markunread;
+        if (!$postisread) {
+            $url->param('mark', 'read');
+            $text = $str->markread;
+        }
+        if ($str->displaymode == FORUM_MODE_THREADED) {
+            $url->param('parent', $post->parent);
+        } else {
+            $url->set_anchor('p'.$post->id);
+        }
+        $commands[] = array('url'=>$url, 'text'=>$text);
+    }
+
+    // Zoom in to the parent specifically
+    if ($post->parent) {
+        $url = new moodle_url($discussionlink);
+        if ($str->displaymode == FORUM_MODE_THREADED) {
+            $url->param('parent', $post->parent);
     } else {
-        echo '&nbsp;';
+            $url->set_anchor('p'.$post->parent);
+        }
+        $commands[] = array('url'=>$url, 'text'=>$str->parent);
     }
 
-// Actual content
+    // Hack for allow to edit news posts those are not displayed yet until they are displayed
+    $age = time() - $post->created;
+    if (!$post->parent && $forum->type == 'news' && $discussion->timestart > time()) {
+        $age = 0;
+    }
+    if (($ownpost && $age < $CFG->maxeditingtime) || $cm->cache->caps['mod/forum:editanypost']) {
+        $commands[] = array('url'=>new moodle_url('/mod/forum/post.php', array('edit'=>$post->id)), 'text'=>$str->edit);
+    }
 
-    echo '</td><td class="content">'."\n";
+    if ($cm->cache->caps['mod/forum:splitdiscussions'] && $post->parent && $forum->type != 'single') {
+        $commands[] = array('url'=>new moodle_url('/mod/forum/post.php', array('prune'=>$post->id)), 'text'=>$str->prune, 'title'=>$str->pruneheading);
+    }
 
-    if ($post->attachment) {
-        echo '<div class="attachments">';
-        $attachedimages = forum_print_attachments($post);
-        echo '</div>';
-    } else {
-        $attachedimages = '';
+    if (($ownpost && $age < $CFG->maxeditingtime && $cm->cache->caps['mod/forum:deleteownpost']) || $cm->cache->caps['mod/forum:deleteanypost']) {
+        $commands[] = array('url'=>new moodle_url('/mod/forum/post.php', array('delete'=>$post->id)), 'text'=>$str->delete);
     }
 
+    if ($reply) {
+        $commands[] = array('url'=>new moodle_url('/mod/forum/post.php', array('reply'=>$post->id)), 'text'=>$str->reply);
+    }
 
-    $options = new object();
-    $options->para      = false;
-    $options->trusttext = true;
-    if ($link and (strlen(strip_tags($post->message)) > $CFG->forum_longpost)) {
-        // Print shortened version
-        echo format_text(forum_shorten_post($post->message), $post->format, $options, $course->id);
-        $numwords = count_words(strip_tags($post->message));
-        echo '<div class="posting"><a href="'.$CFG->wwwroot.'/mod/forum/discuss.php?d='.$post->discussion.'">';
-        echo get_string('readtherest', 'forum');
-        echo '</a> ('.get_string('numwords', '', $numwords).')...</div>';
-    } else {
-        // Print whole message
-        echo '<div class="posting">';
-        if ($highlight) {
-            echo highlight($highlight, format_text($post->message, $post->format, $options, $course->id));
-        } else {
-            echo format_text($post->message, $post->format, $options, $course->id);
+    if ($CFG->enableportfolios && ($cm->cache->caps['mod/forum:exportpost'] || ($ownpost && $cm->cache->caps['mod/forum:exportownpost']))) {
+        $p = array('postid' => $post->id);
+        require_once($CFG->libdir.'/portfoliolib.php');
+        $button = new portfolio_add_button();
+        $button->set_callback_options('forum_portfolio_caller', array('postid' => $post->id), '/mod/forum/locallib.php');
+        if (empty($attachments)) {
+            $button->set_formats(PORTFOLIO_FORMAT_PLAINHTML);
+        } else {
+            $button->set_formats(PORTFOLIO_FORMAT_RICHHTML);
+        }
+
+        $porfoliohtml = $button->to_html(PORTFOLIO_ADD_TEXT_LINK);
+        if (!empty($porfoliohtml)) {
+            $commands[] = $porfoliohtml;
         }
-        echo '</div>';
-        echo $attachedimages;
     }
+    // Finished building commands
 
 
-// Commands
+    // Begin output
 
-    $commands = array();
+    $output  = '';
 
     if ($istracked) {
-        // SPECIAL CASE: The front page can display a news item post to non-logged in users.
-        // Don't display the mark read / unread controls in this case.
-        if ($CFG->forum_usermarksread and isloggedin()) {
-            if ($post_read) {
-                $mcmd = '&amp;mark=unread&amp;postid='.$post->id;
-                $mtxt = $strmarkunread;
+        if ($postisread) {
+            $forumpostclass = ' read';
             } else {
-                $mcmd = '&amp;mark=read&amp;postid='.$post->id;
-                $mtxt = $strmarkread;
+            $forumpostclass = ' unread';
+            $output .= html_writer::tag('a', '', array('name'=>'unread'));
             }
-            if ($displaymode == FORUM_MODE_THREADED) {
-                $commands[] = '<a href="'.$CFG->wwwroot.'/mod/forum/discuss.php?d='.
-                              $post->discussion.'&amp;parent='.$post->id.$mcmd.'">'.$mtxt.'</a>';
             } else {
-                $commands[] = '<a href="'.$CFG->wwwroot.'/mod/forum/discuss.php?d='.
-                              $post->discussion.$mcmd.'#p'.$post->id.'">'.$mtxt.'</a>';
+        // ignore trackign status if not tracked or tracked param missing
+        $forumpostclass = '';
             }
+
+    $topicclass = '';
+    if (empty($post->parent)) {
+        $topicclass = ' firstpost starter';
         }
+
+    $output .= html_writer::tag('a', '', array('id'=>'p'.$post->id));
+    $output .= html_writer::start_tag('div', array('class'=>'forumpost clearfix'.$forumpostclass.$topicclass));
+    $output .= html_writer::start_tag('div', array('class'=>'row header clearfix'));
+    $output .= html_writer::start_tag('div', array('class'=>'left picture'));
+    $output .= $OUTPUT->user_picture($postuser, array('courseid'=>$course->id));
+    $output .= html_writer::end_tag('div');
+
+
+    $output .= html_writer::start_tag('div', array('class'=>'topic'.$topicclass));
+
+    $postsubject = $post->subject;
+    if (empty($post->subjectnoformat)) {
+        $postsubject = format_string($postsubject);
     }
+    $output .= html_writer::tag('div', $postsubject, array('class'=>'subject'));
 
-    if ($post->parent) {  // Zoom in to the parent specifically
-        if ($displaymode == FORUM_MODE_THREADED) {
-            $commands[] = '<a href="'.$CFG->wwwroot.'/mod/forum/discuss.php?d='.
-                      $post->discussion.'&amp;parent='.$post->parent.'">'.$strparent.'</a>';
-        } else {
-            $commands[] = '<a href="'.$CFG->wwwroot.'/mod/forum/discuss.php?d='.
-                      $post->discussion.'#p'.$post->parent.'">'.$strparent.'</a>';
+    $by = new stdClass();
+    $by->name = html_writer::link($postuser->profilelink, $postuser->fullname);
+    $by->date = userdate($post->modified);
+    $output .= html_writer::tag('div', get_string('bynameondate', 'forum', $by), array('class'=>'author'));
+
+    $output .= html_writer::end_tag('div'); //topic
+    $output .= html_writer::end_tag('div'); //row
+
+    $output .= html_writer::start_tag('div', array('class'=>'row maincontent clearfix'));
+    $output .= html_writer::start_tag('div', array('class'=>'left'));
+
+    $groupoutput = '';
+    if ($groups) {
+        $groupoutput = print_group_picture($groups, $course->id, false, true, true);
         }
+    if (empty($groupoutput)) {
+        $groupoutput = '&nbsp;';
     }
+    $output .= html_writer::tag('div', $groupoutput, array('class'=>'grouppictures'));
 
-    $age = time() - $post->created;
-    // Hack for allow to edit news posts those are not displayed yet until they are displayed
-    if (!$post->parent and $forum->type == 'news' and $discussion->timestart > time()) {
-        $age = 0;
+    $output .= html_writer::end_tag('div'); //left side
+    $output .= html_writer::start_tag('div', array('class'=>'no-overflow'));
+    $output .= html_writer::start_tag('div', array('class'=>'content'));
+    if (!empty($attachments)) {
+        $output .= html_writer::tag('div', $attachments, array('class'=>'attachments'));
     }
-    $editanypost = $cm->cache->caps['mod/forum:editanypost'];
 
-    if ($ownpost or $editanypost) {
-        if (($age < $CFG->maxeditingtime) or $editanypost) {
-            $commands[] =  '<a href="'.$CFG->wwwroot.'/mod/forum/post.php?edit='.$post->id.'">'.$stredit.'</a>';
+    $options = new stdClass;
+    $options->para    = false;
+    $options->trusted = $post->messagetrust;
+    $options->context = $modcontext;
+    if ($shortenpost) {
+        // Prepare shortened version
+        $postclass    = 'shortenedpost';
+        $postcontent  = format_text(forum_shorten_post($post->message), $post->messageformat, $options, $course->id);
+        $postcontent .= html_writer::link($discussionlink, get_string('readtherest', 'forum'));
+        $postcontent .= html_writer::tag('span', '('.get_string('numwords', 'moodle', count_words(strip_tags($post->message))).')...', array('class'=>'post-word-count'));
+    } else {
+        // Prepare whole post
+        $postclass    = 'fullpost';
+        $postcontent  = format_text($post->message, $post->messageformat, $options, $course->id);
+        if (!empty($highlight)) {
+            $postcontent = highlight($highlight, $postcontent);
         }
+        $postcontent .= html_writer::tag('div', $attachedimages, array('class'=>'attachedimages'));
     }
+    // Output the post content
+    $output .= html_writer::tag('div', $postcontent, array('class'=>'posting '.$postclass));
+    $output .= html_writer::end_tag('div'); // Content
+    $output .= html_writer::end_tag('div'); // Content mask
+    $output .= html_writer::end_tag('div'); // Row
 
-    if ($cm->cache->caps['mod/forum:splitdiscussions']
-                && $post->parent && $forum->type != 'single') {
+    $output .= html_writer::start_tag('div', array('class'=>'row side'));
+    $output .= html_writer::tag('div','&nbsp;', array('class'=>'left'));
+    $output .= html_writer::start_tag('div', array('class'=>'options clearfix'));
 
-        $commands[] = '<a href="'.$CFG->wwwroot.'/mod/forum/post.php?prune='.$post->id.
-                      '" title="'.$strpruneheading.'">'.$strprune.'</a>';
+    // Output ratings
+    if (!empty($post->rating)) {
+        $output .= html_writer::tag('div', $OUTPUT->render($post->rating), array('class'=>'forum-post-rating'));
     }
 
-    if (($ownpost and $age < $CFG->maxeditingtime
-                and $cm->cache->caps['mod/forum:deleteownpost'])
-                or $cm->cache->caps['mod/forum:deleteanypost']) {
-        $commands[] = '<a href="'.$CFG->wwwroot.'/mod/forum/post.php?delete='.$post->id.'">'.$strdelete.'</a>';
+    // Output the commands
+    $commandhtml = array();
+    foreach ($commands as $command) {
+        if (is_array($command)) {
+            $commandhtml[] = html_writer::link($command['url'], $command['text']);
+        } else {
+            $commandhtml[] = $command;
+        }
     }
+    $output .= html_writer::tag('div', implode(' | ', $commandhtml), array('class'=>'commands'));
 
-    if ($reply) {
-        $commands[] = '<a href="'.$CFG->wwwroot.'/mod/forum/post.php?reply='.$post->id.'">'.$strreply.'</a>';
+    // Output link to post if required
+    if ($link) {
+        if ($post->replies == 1) {
+            $replystring = get_string('repliesone', 'forum', $post->replies);
+        } else {
+            $replystring = get_string('repliesmany', 'forum', $post->replies);
     }
 
-    echo '<div class="commands">';
-    echo implode(' | ', $commands);
-    echo '</div>';
+        $output .= html_writer::start_tag('div', array('class'=>'link'));
+        $output .= html_writer::link($discussionlink, get_string('discussthistopic', 'forum'));
+        $output .= '&nbsp;('.$replystring.')';
+        $output .= html_writer::end_tag('div'); // link
+    }
 
+    // Output footer if required
+    if ($footer) {
+        $output .= html_writer::tag('div', $footer, array('class'=>'footer'));
+    }
 
-// Ratings
+    // Close remaining open divs
+    $output .= html_writer::end_tag('div'); // content
+    $output .= html_writer::end_tag('div'); // row
+    $output .= html_writer::end_tag('div'); // forumpost
 
-    $ratingsmenuused = false;
-    if (!empty($ratings) and isloggedin()) {
-        echo '<div class="ratings">';
-        $useratings = true;
-        if ($ratings->assesstimestart and $ratings->assesstimefinish) {
-            if ($post->created < $ratings->assesstimestart or $post->created > $ratings->assesstimefinish) {
-                $useratings = false;
-            }
+    // Mark the forum post as read if required
+    if ($istracked && !$CFG->forum_usermarksread && !$postisread) {
+        forum_tp_mark_post_read($USER->id, $post, $forum->id);
         }
-        if ($useratings) {
-            $mypost = ($USER->id == $post->userid);
 
-            $canviewallratings = $cm->cache->caps['mod/forum:viewanyrating'];
-
-            if (isset($cm->cache->ratings)) {
-                if (isset($cm->cache->ratings[$post->id])) {
-                    $allratings = $cm->cache->ratings[$post->id];
-                } else {
-                    $allratings = array(); // no reatings present yet
+    if ($return) {
+        return $output;
                 }
-            } else {
-                $allratings = NULL; // not preloaded
+    echo $output;
+    return;
+}
+
+/**
+ * Return rating related permissions
+ *
+ * @param string $options the context id
+ * @return array an associative array of the user's rating permissions
+ */
+function forum_rating_permissions($contextid, $component, $ratingarea) {
+    $context = get_context_instance_by_id($contextid, MUST_EXIST);
+    if ($component != 'mod_forum' || $ratingarea != 'post') {
+        // We don't know about this component/ratingarea so just return null to get the
+        // default restrictive permissions.
+        return null;
             }
+    return array(
+        'view'    => has_capability('mod/forum:viewrating', $context),
+        'viewany' => has_capability('mod/forum:viewanyrating', $context),
+        'viewall' => has_capability('mod/forum:viewallratings', $context),
+        'rate'    => has_capability('mod/forum:rate', $context)
+    );
+}
 
-            if (isset($cm->cache->myratings)) {
-                if (isset($cm->cache->myratings[$post->id])) {
-                    $myrating = $cm->cache->myratings[$post->id];
-                } else {
-                    $myrating = FORUM_UNSET_POST_RATING; // no reatings present yet
+/**
+ * Validates a submitted rating
+ * @param array $params submitted data
+ *            context => object the context in which the rated items exists [required]
+ *            component => The component for this module - should always be mod_forum [required]
+ *            ratingarea => object the context in which the rated items exists [required]
+ *            itemid => int the ID of the object being rated [required]
+ *            scaleid => int the scale from which the user can select a rating. Used for bounds checking. [required]
+ *            rating => int the submitted rating [required]
+ *            rateduserid => int the id of the user whose items have been rated. NOT the user who submitted the ratings. 0 to update all. [required]
+ *            aggregation => int the aggregation method to apply when calculating grades ie RATING_AGGREGATE_AVERAGE [required]
+ * @return boolean true if the rating is valid. Will throw rating_exception if not
+ */
+function forum_rating_validate($params) {
+    global $DB, $USER;
+
+    // Check the component is mod_forum
+    if ($params['component'] != 'mod_forum') {
+        throw new rating_exception('invalidcomponent');
                 }
-            } else {
-                $myrating = NULL; // not preloaded
+
+    // Check the ratingarea is post (the only rating area in forum)
+    if ($params['ratingarea'] != 'post') {
+        throw new rating_exception('invalidratingarea');
             }
 
-            if ($canviewallratings and !$mypost) {
-                echo '<span class="forumpostratingtext">' .
-                     forum_print_ratings($post->id, $ratings->scale, $forum->assessed, $canviewallratings, $allratings, true) .
-                     '</span>';
-                if (!empty($ratings->allow)) {
-                    echo '&nbsp;';
-                    forum_print_rating_menu($post->id, $USER->id, $ratings->scale, $myrating);
-                    $ratingsmenuused = true;
+    // Check the rateduserid is not the current user .. you can't rate your own posts
+    if ($params['rateduserid'] == $USER->id) {
+        throw new rating_exception('nopermissiontorate');
                 }
 
-            } else if ($mypost) {
-                echo '<span class="forumpostratingtext">' .
-                     forum_print_ratings($post->id, $ratings->scale, $forum->assessed, true, $allratings, true) .
-                     '</span>';
+    // Fetch all the related records ... we need to do this anyway to call forum_user_can_see_post
+    $post = $DB->get_record('forum_posts', array('id' => $params['itemid'], 'userid' => $params['rateduserid']), '*', MUST_EXIST);
+    $discussion = $DB->get_record('forum_discussions', array('id' => $post->discussion), '*', MUST_EXIST);
+    $forum = $DB->get_record('forum', array('id' => $discussion->forum), '*', MUST_EXIST);
+    $course = $DB->get_record('course', array('id' => $forum->course), '*', MUST_EXIST);
+    $cm = get_coursemodule_from_instance('forum', $forum->id, $course->id , false, MUST_EXIST);
+    $context = get_context_instance(CONTEXT_MODULE, $cm->id);
 
-            } else if (!empty($ratings->allow) ) {
-                forum_print_rating_menu($post->id, $USER->id, $ratings->scale, $myrating);
-                $ratingsmenuused = true;
+    // Make sure the context provided is the context of the forum
+    if ($context->id != $params['context']->id) {
+        throw new rating_exception('invalidcontext');
             }
+
+    if ($forum->scale != $params['scaleid']) {
+        //the scale being submitted doesnt match the one in the database
+        throw new rating_exception('invalidscaleid');
+    }
+
+    // check the item we're rating was created in the assessable time window
+    if (!empty($forum->assesstimestart) && !empty($forum->assesstimefinish)) {
+        if ($post->created < $forum->assesstimestart || $post->created > $forum->assesstimefinish) {
+            throw new rating_exception('notavailable');
         }
-        echo '</div>';
     }
 
-// Link to post if required
+    //check that the submitted rating is valid for the scale
 
-    if ($link) {
-        echo '<div class="link">';
-        if ($post->replies == 1) {
-            $replystring = get_string('repliesone', 'forum', $post->replies);
+    // lower limit
+    if ($params['rating'] < 0  && $params['rating'] != RATING_UNSET_RATING) {
+        throw new rating_exception('invalidnum');
+    }
+
+    // upper limit
+    if ($forum->scale < 0) {
+        //its a custom scale
+        $scalerecord = $DB->get_record('scale', array('id' => -$forum->scale));
+        if ($scalerecord) {
+            $scalearray = explode(',', $scalerecord->scale);
+            if ($params['rating'] > count($scalearray)) {
+                throw new rating_exception('invalidnum');
+            }
         } else {
-            $replystring = get_string('repliesmany', 'forum', $post->replies);
+            throw new rating_exception('invalidscaleid');
         }
-        echo '<a href="'.$CFG->wwwroot.'/mod/forum/discuss.php?d='.$post->discussion.'">'.
-             get_string('discussthistopic', 'forum').'</a>&nbsp;('.$replystring.')';
-        echo '</div>';
+    } else if ($params['rating'] > $forum->scale) {
+        //if its numeric and submitted rating is above maximum
+        throw new rating_exception('invalidnum');
     }
 
-    if ($footer) {
-        echo '<div class="footer">'.$footer.'</div>';
+    // Make sure groups allow this user to see the item they're rating
+    if ($discussion->groupid > 0 and $groupmode = groups_get_activity_groupmode($cm, $course)) {   // Groups are being used
+        if (!groups_group_exists($discussion->groupid)) { // Can't find group
+            throw new rating_exception('cannotfindgroup');//something is wrong
     }
-    echo '</td></tr></table>'."\n\n";
 
-    if ($istracked && !$CFG->forum_usermarksread && !$post_read) {
-        forum_tp_mark_post_read($USER->id, $post, $forum->id);
+        if (!groups_is_member($discussion->groupid) and !has_capability('moodle/site:accessallgroups', $context)) {
+            // do not allow rating of posts from other groups when in SEPARATEGROUPS or VISIBLEGROUPS
+            throw new rating_exception('notmemberofgroup');
+        }
     }
 
-    return $ratingsmenuused;
+    // perform some final capability checks
+    if (!forum_user_can_see_post($forum, $discussion, $post, $USER, $cm)) {
+        throw new rating_exception('nopermissiontorate');
+    }
+
+    return true;
 }
 
 
@@ -3151,6 +3594,8 @@ function forum_print_post($post, $discussion, $forum, &$cm, $course, $ownpost=fa
  * happen to be combined for efficiency in the $post parameter by the function
  * that calls this one: forum_print_latest_discussions()
  *
+ * @global object
+ * @global object
  * @param object $post The post object (passed by reference for speed).
  * @param object $forum The forum object.
  * @param int $group Current group.
@@ -3162,14 +3607,14 @@ function forum_print_post($post, $discussion, $forum, &$cm, $course, $ownpost=fa
 function forum_print_discussion_header(&$post, $forum, $group=-1, $datestring="",
                                         $cantrack=true, $forumtracked=true, $canviewparticipants=true, $modcontext=NULL) {
 
-    global $USER, $CFG;
+    global $USER, $CFG, $OUTPUT;
 
     static $rowcount;
     static $strmarkalldread;
 
     if (empty($modcontext)) {
         if (!$cm = get_coursemodule_from_instance('forum', $forum->id, $forum->course)) {
-            error('Course Module ID was incorrect');
+            print_error('invalidcoursemodule');
         }
         $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
     }
@@ -3192,15 +3637,16 @@ function forum_print_discussion_header(&$post, $forum, $group=-1, $datestring=""
     echo "</td>\n";
 
     // Picture
-    $postuser = new object;
+    $postuser = new stdClass();
     $postuser->id = $post->userid;
     $postuser->firstname = $post->firstname;
     $postuser->lastname = $post->lastname;
     $postuser->imagealt = $post->imagealt;
     $postuser->picture = $post->picture;
+    $postuser->email = $post->email;
 
     echo '<td class="picture">';
-    print_user_picture($postuser, $forum->course);
+    echo $OUTPUT->user_picture($postuser, array('courseid'=>$forum->course));
     echo "</td>\n";
 
     // User name
@@ -3240,7 +3686,7 @@ function forum_print_discussion_header(&$post, $forum, $group=-1, $datestring=""
                     echo '</a>';
                     echo '<a title="'.$strmarkalldread.'" href="'.$CFG->wwwroot.'/mod/forum/markposts.php?f='.
                          $forum->id.'&amp;d='.$post->discussion.'&amp;mark=read&amp;returnpage=view.php">' .
-                         '<img src="'.$CFG->pixpath.'/t/clear.gif" class="iconsmall" alt="'.$strmarkalldread.'" /></a>';
+                         '<img src="'.$OUTPUT->pix_url('t/clear') . '" class="iconsmall" alt="'.$strmarkalldread.'" /></a>';
                     echo '</span>';
                 } else {
                     echo '<span class="read">';
@@ -3259,7 +3705,7 @@ function forum_print_discussion_header(&$post, $forum, $group=-1, $datestring=""
     echo '<td class="lastpost">';
     $usedate = (empty($post->timemodified)) ? $post->modified : $post->timemodified;  // Just in case
     $parenturl = (empty($post->lastpostid)) ? '' : '&amp;parent='.$post->lastpostid;
-    $usermodified = new object();
+    $usermodified = new stdClass();
     $usermodified->id        = $post->usermodified;
     $usermodified->firstname = $post->umfirstname;
     $usermodified->lastname  = $post->umlastname;
@@ -3278,6 +3724,10 @@ function forum_print_discussion_header(&$post, $forum, $group=-1, $datestring=""
  * Given a post object that we already know has a long message
  * this function truncates the message nicely to the first
  * sane place between $CFG->forum_longpost and $CFG->forum_shortpost
+ *
+ * @global object
+ * @param string $message
+ * @return string
  */
 function forum_shorten_post($message) {
 
@@ -3326,726 +3776,560 @@ function forum_shorten_post($message) {
    return substr($message, 0, $truncate);
 }
 
-
 /**
- * Print the multiple ratings on a post given to the current user by others.
- * Forumid prevents the double lookup of the forumid in discussion to determine the aggregate type
- * Scale is an array of ratings
+ * Print the drop down that allows the user to select how they want to have
+ * the discussion displayed.
+ *
+ * @param int $id forum id if $forumtype is 'single',
+ *              discussion id for any other forum type
+ * @param mixed $mode forum layout mode
+ * @param string $forumtype optional
  */
-function forum_print_ratings($postid, $scale, $aggregatetype, $link=true, $ratings=null, $return=false) {
+function forum_print_mode_form($id, $mode, $forumtype='') {
+    global $OUTPUT;
+    if ($forumtype == 'single') {
+        $select = new single_select(new moodle_url("/mod/forum/view.php", array('f'=>$id)), 'mode', forum_get_layout_modes(), $mode, null, "mode");
+        $select->class = "forummode";
+    } else {
+        $select = new single_select(new moodle_url("/mod/forum/discuss.php", array('d'=>$id)), 'mode', forum_get_layout_modes(), $mode, null, "mode");
+    }
+    echo $OUTPUT->render($select);
+}
 
-    $strratings = '';
+/**
+ * @global object
+ * @param object $course
+ * @param string $search
+ * @return string
+ */
+function forum_search_form($course, $search='') {
+    global $CFG, $OUTPUT;
 
-    switch ($aggregatetype) {
-        case FORUM_AGGREGATE_AVG :
-            $agg        = forum_get_ratings_mean($postid, $scale, $ratings);
-            $strratings = get_string("aggregateavg", "forum");
-            break;
-        case FORUM_AGGREGATE_COUNT :
-            $agg        = forum_get_ratings_count($postid, $scale, $ratings);
-            $strratings = get_string("aggregatecount", "forum");
-            break;
-        case FORUM_AGGREGATE_MAX :
-            $agg        = forum_get_ratings_max($postid, $scale, $ratings);
-            $strratings = get_string("aggregatemax", "forum");
-            break;
-        case FORUM_AGGREGATE_MIN :
-            $agg        = forum_get_ratings_min($postid, $scale, $ratings);
-            $strratings = get_string("aggregatemin", "forum");
-            break;
-        case FORUM_AGGREGATE_SUM :
-            $agg        = forum_get_ratings_sum($postid, $scale, $ratings);
-            $strratings = get_string("aggregatesum", "forum");
-            break;
-    }
+    $output  = '<div class="forumsearch">';
+    $output .= '<form action="'.$CFG->wwwroot.'/mod/forum/search.php" style="display:inline">';
+    $output .= '<fieldset class="invisiblefieldset">';
+    $output .= $OUTPUT->help_icon('search');
+    $output .= '<label class="accesshide" for="search" >'.get_string('search', 'forum').'</label>';
+    $output .= '<input id="search" name="search" type="text" size="18" value="'.s($search, true).'" alt="search" />';
+    $output .= '<label class="accesshide" for="searchforums" >'.get_string('searchforums', 'forum').'</label>';
+    $output .= '<input id="searchforums" value="'.get_string('searchforums', 'forum').'" type="submit" />';
+    $output .= '<input name="id" type="hidden" value="'.$course->id.'" />';
+    $output .= '</fieldset>';
+    $output .= '</form>';
+    $output .= '</div>';
 
-    if ($agg !== "") {
+    return $output;
+}
 
-        if (empty($strratings)) {
-            $strratings = get_string("ratings", "forum");
-        }
 
-        $strratings .= ': ';
+/**
+ * @global object
+ * @global object
+ */
+function forum_set_return() {
+    global $CFG, $SESSION;
 
-        if ($link) {
-            $strratings .= link_to_popup_window ("/mod/forum/report.php?id=$postid", "ratings", $agg, 400, 600, null, null, true);
+    if (! isset($SESSION->fromdiscussion)) {
+        if (!empty($_SERVER['HTTP_REFERER'])) {
+            $referer = $_SERVER['HTTP_REFERER'];
         } else {
-            $strratings .= "$agg ";
+            $referer = "";
         }
-
-        if ($return) {
-            return $strratings;
-        } else {
-            echo $strratings;
+        // If the referer is NOT a login screen then save it.
+        if (! strncasecmp("$CFG->wwwroot/login", $referer, 300)) {
+            $SESSION->fromdiscussion = $_SERVER["HTTP_REFERER"];
         }
     }
 }
 
 
 /**
- * Return the mean rating of a post given to the current user by others.
- * Scale is an array of possible ratings in the scale
- * Ratings is an optional simple array of actual ratings (just integers)
- * Forumid is the forum id field needed - passing it avoids a double query of lookup up the discusion and then the forum id to get the aggregate type
+ * @global object
+ * @param string $default
+ * @return string
  */
-function forum_get_ratings_mean($postid, $scale, $ratings=NULL) {
+function forum_go_back_to($default) {
+    global $SESSION;
 
-    if (is_null($ratings)) {
-        $ratings = array();
-        if ($rates = get_records("forum_ratings", "post", $postid)) {
-            foreach ($rates as $rate) {
-                $ratings[] = $rate->rating;
-            }
-        }
+    if (!empty($SESSION->fromdiscussion)) {
+        $returnto = $SESSION->fromdiscussion;
+        unset($SESSION->fromdiscussion);
+        return $returnto;
+    } else {
+        return $default;
     }
+}
+
+/**
+ * Given a discussion object that is being moved to $forumto,
+ * this function checks all posts in that discussion
+ * for attachments, and if any are found, these are
+ * moved to the new forum directory.
+ *
+ * @global object
+ * @param object $discussion
+ * @param int $forumfrom source forum id
+ * @param int $forumto target forum id
+ * @return bool success
+ */
+function forum_move_attachments($discussion, $forumfrom, $forumto) {
+    global $DB;
 
-    $count = count($ratings);
+    $fs = get_file_storage();
 
-    if ($count == 0 ) {
-        return "";
+    $newcm = get_coursemodule_from_instance('forum', $forumto);
+    $oldcm = get_coursemodule_from_instance('forum', $forumfrom);
 
-    } else if ($count == 1) {
-        $rating = reset($ratings);
-        return $scale[$rating];
+    $newcontext = get_context_instance(CONTEXT_MODULE, $newcm->id);
+    $oldcontext = get_context_instance(CONTEXT_MODULE, $oldcm->id);
 
-    } else {
-        $total = 0;
-        foreach ($ratings as $rating) {
-            $total += $rating;
+    // loop through all posts, better not use attachment flag ;-)
+    if ($posts = $DB->get_records('forum_posts', array('discussion'=>$discussion->id), '', 'id, attachment')) {
+        foreach ($posts as $post) {
+            $fs->move_area_files_to_new_context($oldcontext->id,
+                    $newcontext->id, 'mod_forum', 'post', $post->id);
+            $attachmentsmoved = $fs->move_area_files_to_new_context($oldcontext->id,
+                    $newcontext->id, 'mod_forum', 'attachment', $post->id);
+            if ($attachmentsmoved > 0 && $post->attachment != '1') {
+                // Weird - let's fix it
+                $post->attachment = '1';
+                $DB->update_record('forum_posts', $post);
+            } else if ($attachmentsmoved == 0 && $post->attachment != '') {
+                // Weird - let's fix it
+                $post->attachment = '';
+                $DB->update_record('forum_posts', $post);
         }
-        $mean = round( ((float)$total/(float)$count) + 0.001);  // Little fudge factor so that 0.5 goes UP
-
-        if (isset($scale[$mean])) {
-            return $scale[$mean]." ($count)";
-        } else {
-            return "$mean ($count)";    // Should never happen, hopefully
         }
     }
+
+    return true;
 }
 
 /**
- * Return the count of the ratings of a post given to the current user by others.
- *
- * For numerical grades, the scale index is the same as the real grade value from interval {0..n}
- * and $scale looks like Array( 0 => '0/n', 1 => '1/n', ..., n => 'n/n' )
+ * Returns attachments as formated text/html optionally with separate images
  *
- * For scales, the index is the order of the scale item {1..n}
- * and $scale looks like Array( 1 => 'poor', 2 => 'weak', 3 => 'good' )
- * In case of no ratings done yet, we have nothing to display.
- *
- * @param int $postid
- * @param array $scale Possible ratings in the scale - the end of the scale is the highest or max grade
- * @param array $ratings An optional simple array of actual ratings (just integers)
+ * @global object
+ * @global object
+ * @global object
+ * @param object $post
+ * @param object $cm
+ * @param string $type html/text/separateimages
+ * @return mixed string or array of (html text withouth images and image HTML)
  */
-function forum_get_ratings_count($postid, $scale, $ratings=NULL) {
+function forum_print_attachments($post, $cm, $type) {
+    global $CFG, $DB, $USER, $OUTPUT;
 
-    if (is_null($ratings)) {
-        $ratings = array();
-        if ($rates = get_records("forum_ratings", "post", $postid)) {
-            foreach ($rates as $rate) {
-                $ratings[] = $rate->rating;
-            }
-        }
+    if (empty($post->attachment)) {
+        return $type !== 'separateimages' ? '' : array('', '');
     }
 
-    $count = count($ratings);
-    if (! array_key_exists(0, $scale)) {
-        $scaleused = true;
-    } else {
-        $scaleused = false;
+    if (!in_array($type, array('separateimages', 'html', 'text'))) {
+        return $type !== 'separateimages' ? '' : array('', '');
     }
 
-    if ($count == 0) {
-        if ($scaleused) {    // If no rating given yet and we use a scale
-            return get_string('noratinggiven', 'forum');
-        } else {
-            return '';
-        }
+    if (!$context = get_context_instance(CONTEXT_MODULE, $cm->id)) {
+        return $type !== 'separateimages' ? '' : array('', '');
     }
+    $strattachment = get_string('attachment', 'forum');
 
-    $maxgradeidx = max(array_keys($scale)); // For numerical grades, the index is the same as the real grade value {0..n}
-                                            // and $scale looks like Array( 0 => '0/n', 1 => '1/n', ..., n => 'n/n' )
-                                            // For scales, the index is the order of the scale item {1..n}
-                                            // and $scale looks like Array( 1 => 'poor', 2 => 'weak', 3 => 'good' )
+    $fs = get_file_storage();
 
-    if ($count > $maxgradeidx) {      // The count exceeds the max grade
-        $a = new stdClass();
-        $a->count = $count;
-        $a->grade = $scale[$maxgradeidx];
-        return get_string('aggregatecountformat', 'forum', $a);
-    } else {                                // Display the count and the aggregated grade for this post
-        $a = new stdClass();
-        $a->count = $count;
-        $a->grade = $scale[$count];
-        return get_string('aggregatecountformat', 'forum', $a);
-    }
-}
+    $imagereturn = '';
+    $output = '';
 
-/**
- * Return the max rating of a post given to the current user by others.
- * Scale is an array of possible ratings in the scale
- * Ratings is an optional simple array of actual ratings (just integers)
- */
-function forum_get_ratings_max($postid, $scale, $ratings=NULL) {
+    $canexport = !empty($CFG->enableportfolios) && (has_capability('mod/forum:exportpost', $context) || ($post->userid == $USER->id && has_capability('mod/forum:exportownpost', $context)));
 
-    if (is_null($ratings)) {
-        $ratings = array();
-        if ($rates = get_records("forum_ratings", "post", $postid)) {
-            foreach ($rates as $rate) {
-                $ratings[] = $rate->rating;
-            }
+    if ($canexport) {
+        require_once($CFG->libdir.'/portfoliolib.php');
         }
-    }
-
-    $count = count($ratings);
 
-    if ($count == 0 ) {
-        return "";
+    $files = $fs->get_area_files($context->id, 'mod_forum', 'attachment', $post->id, "timemodified", false);
+    if ($files) {
+        if ($canexport) {
+            $button = new portfolio_add_button();
+        }
+        foreach ($files as $file) {
+            $filename = $file->get_filename();
+            $mimetype = $file->get_mimetype();
+            $iconimage = '<img src="'.$OUTPUT->pix_url(file_mimetype_icon($mimetype)).'" class="icon" alt="'.$mimetype.'" />';
+            $path = file_encode_url($CFG->wwwroot.'/pluginfile.php', '/'.$context->id.'/mod_forum/attachment/'.$post->id.'/'.$filename);
 
-    } else if ($count == 1) { //this works for max
-        $rating = reset($ratings);
-        return $scale[$rating];
+            if ($type == 'html') {
+                $output .= "<a href=\"$path\">$iconimage</a> ";
+                $output .= "<a href=\"$path\">".s($filename)."</a>";
+                if ($canexport) {
+                    $button->set_callback_options('forum_portfolio_caller', array('postid' => $post->id, 'attachment' => $file->get_id()), '/mod/forum/locallib.php');
+                    $button->set_format_by_file($file);
+                    $output .= $button->to_html(PORTFOLIO_ADD_ICON_LINK);
+                }
+                $output .= "<br />";
 
-    } else {
-        $max = max($ratings);
+            } else if ($type == 'text') {
+                $output .= "$strattachment ".s($filename).":\n$path\n";
 
-        if (isset($scale[$max])) {
-            return $scale[$max]." ($count)";
+            } else { //'returnimages'
+                if (in_array($mimetype, array('image/gif', 'image/jpeg', 'image/png'))) {
+                    // Image attachments don't get printed as links
+                    $imagereturn .= "<br /><img src=\"$path\" alt=\"\" />";
+                    if ($canexport) {
+                        $button->set_callback_options('forum_portfolio_caller', array('postid' => $post->id, 'attachment' => $file->get_id()), '/mod/forum/locallib.php');
+                        $button->set_format_by_file($file);
+                        $imagereturn .= $button->to_html(PORTFOLIO_ADD_ICON_LINK);
+                    }
         } else {
-            return "$max ($count)";    // Should never happen, hopefully
+                    $output .= "<a href=\"$path\">$iconimage</a> ";
+                    $output .= format_text("<a href=\"$path\">".s($filename)."</a>", FORMAT_HTML, array('context'=>$context));
+                    if ($canexport) {
+                        $button->set_callback_options('forum_portfolio_caller', array('postid' => $post->id, 'attachment' => $file->get_id()), '/mod/forum/locallib.php');
+                        $button->set_format_by_file($file);
+                        $output .= $button->to_html(PORTFOLIO_ADD_ICON_LINK);
         }
+                    $output .= '<br />';
     }
-}
-
-/**
- * Return the min rating of a post given to the current user by others.
- * Scale is an array of possible ratings in the scale
- * Ratings is an optional simple array of actual ratings (just integers)
- */
-function forum_get_ratings_min($postid, $scale,  $ratings=NULL) {
-
-    if (is_null($ratings)) {
-        $ratings = array();
-        if ($rates = get_records("forum_ratings", "post", $postid)) {
-            foreach ($rates as $rate) {
-                $ratings[] = $rate->rating;
             }
         }
     }
 
-    $count = count($ratings);
-
-    if ($count == 0 ) {
-        return "";
-
-    } else if ($count == 1) {
-        $rating = reset($ratings);
-        return $scale[$rating]; //this works for min
-
-    } else {
-        $min = min($ratings);
+    if ($type !== 'separateimages') {
+        return $output;
 
-        if (isset($scale[$min])) {
-            return $scale[$min]." ($count)";
         } else {
-            return "$min ($count)";    // Should never happen, hopefully
-        }
+        return array($output, $imagereturn);
     }
 }
 
+/**
+ * Lists all browsable file areas
+ *
+ * @param object $course
+ * @param object $cm
+ * @param object $context
+ * @return array
+ */
+function forum_get_file_areas($course, $cm, $context) {
+    $areas = array();
+    return $areas;
+}
 
 /**
- * Return the sum or total of ratings of a post given to the current user by others.
- * Scale is an array of possible ratings in the scale
- * Ratings is an optional simple array of actual ratings (just integers)
+ * File browsing support for forum module.
+ *
+ * @param object $browser
+ * @param object $areas
+ * @param object $course
+ * @param object $cm
+ * @param object $context
+ * @param string $filearea
+ * @param int $itemid
+ * @param string $filepath
+ * @param string $filename
+ * @return object file_info instance or null if not found
  */
-function forum_get_ratings_sum($postid, $scale, $ratings=NULL) {
+function forum_get_file_info($browser, $areas, $course, $cm, $context, $filearea, $itemid, $filepath, $filename) {
+    global $CFG, $DB;
 
-    if (is_null($ratings)) {
-        $ratings = array();
-        if ($rates = get_records("forum_ratings", "post", $postid)) {
-            foreach ($rates as $rate) {
-                $ratings[] = $rate->rating;
+    if ($context->contextlevel != CONTEXT_MODULE) {
+        return null;
             }
+
+    $fileareas = array('attachment', 'post');
+    if (!in_array($filearea, $fileareas)) {
+        return null;
         }
+
+    if (!$post = $DB->get_record('forum_posts', array('id' => $itemid))) {
+        return null;
     }
 
-    $count = count($ratings);
-    $scalecount = count($scale)-1; //this should give us the last element of the scale aka the max grade with  $scale[$scalecount]
+    if (!$discussion = $DB->get_record('forum_discussions', array('id' => $post->discussion))) {
+        return null;
+    }
 
-    if ($count == 0 ) {
-        return "";
+    if (!$forum = $DB->get_record('forum', array('id' => $cm->instance))) {
+        return null;
+    }
 
-    } else if ($count == 1) { //this works for max.
-        $rating = reset($ratings);
-        return $scale[$rating];
+    $fs = get_file_storage();
+    $filepath = is_null($filepath) ? '/' : $filepath;
+    $filename = is_null($filename) ? '.' : $filename;
+    if (!($storedfile = $fs->get_file($context->id, 'mod_forum', $filearea, $itemid, $filepath, $filename))) {
+        return null;
+    }
 
-    } else {
-        $total = 0;
-        foreach ($ratings as $rating) {
-            $total += $rating;
+    // Make sure groups allow this user to see this file
+    if ($discussion->groupid > 0 and $groupmode = groups_get_activity_groupmode($cm, $course)) {   // Groups are being used
+        if (!groups_group_exists($discussion->groupid)) { // Can't find group
+            return null;                           // Be safe and don't send it to anyone
         }
-        if ($total > $scale[$scalecount]) { //if the total exceeds the max grade then set it to the max grade
-            $total = $scale[$scalecount];
+
+        if (!groups_is_member($discussion->groupid) and !has_capability('moodle/site:accessallgroups', $context)) {
+            // do not send posts from other groups when in SEPARATEGROUPS or VISIBLEGROUPS
+            return null;
         }
-        if (isset($scale[$total])) {
-            return $scale[$total]." ($count)";
-        } else {
-            return "$total ($count)";    // Should never happen, hopefully
         }
+
+    // Make sure we're allowed to see it...
+    if (!forum_user_can_see_post($forum, $discussion, $post, NULL, $cm)) {
+        return null;
     }
+
+    $urlbase = $CFG->wwwroot.'/pluginfile.php';
+    return new file_info_stored($browser, $context, $storedfile, $urlbase, $filearea, $itemid, true, true, false);
 }
 
 /**
- * Return a summary of post ratings given to the current user by others.
- * Scale is an array of possible ratings in the scale
- * Ratings is an optional simple array of actual ratings (just integers)
+ * Serves the forum attachments. Implements needed access control ;-)
+ *
+ * @param object $course
+ * @param object $cm
+ * @param object $context
+ * @param string $filearea
+ * @param array $args
+ * @param bool $forcedownload
+ * @return bool false if file not found, does not return if found - justsend the file
  */
-function forum_get_ratings_summary($postid, $scale, $ratings=NULL) {
+function forum_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload) {
+    global $CFG, $DB;
 
-    if (is_null($ratings)) {
-        $ratings = array();
-        if ($rates = get_records("forum_ratings", "post", $postid)) {
-            foreach ($rates as $rate) {
-                $rating[] = $rate->rating;
-            }
-        }
+    if ($context->contextlevel != CONTEXT_MODULE) {
+        return false;
     }
 
+    require_course_login($course, true, $cm);
 
-    if (!$count = count($ratings)) {
-        return "";
+    $fileareas = array('attachment', 'post');
+    if (!in_array($filearea, $fileareas)) {
+        return false;
     }
 
+    $postid = (int)array_shift($args);
 
-    foreach ($scale as $key => $scaleitem) {
-        $sumrating[$key] = 0;
+    if (!$post = $DB->get_record('forum_posts', array('id'=>$postid))) {
+        return false;
     }
 
-    foreach ($ratings as $rating) {
-        $sumrating[$rating]++;
+    if (!$discussion = $DB->get_record('forum_discussions', array('id'=>$post->discussion))) {
+        return false;
     }
 
-    $summary = "";
-    foreach ($scale as $key => $scaleitem) {
-        $summary = $sumrating[$key].$summary;
-        if ($key > 1) {
-            $summary = "/$summary";
-        }
+    if (!$forum = $DB->get_record('forum', array('id'=>$cm->instance))) {
+        return false;
     }
-    return $summary;
-}
 
-/**
- * Print the menu of ratings as part of a larger form.
- * If the post has already been - set that value.
- * Scale is an array of ratings
- */
-function forum_print_rating_menu($postid, $userid, $scale, $myrating=NULL) {
+    $fs = get_file_storage();
+    $relativepath = implode('/', $args);
+    $fullpath = "/$context->id/mod_forum/$filearea/$postid/$relativepath";
+    if (!$file = $fs->get_file_by_hash(sha1($fullpath)) or $file->is_directory()) {
+        return false;
+    }
 
-    static $strrate;
+    // Make sure groups allow this user to see this file
+    if ($discussion->groupid > 0 and $groupmode = groups_get_activity_groupmode($cm, $course)) {   // Groups are being used
+        if (!groups_group_exists($discussion->groupid)) { // Can't find group
+            return false;                           // Be safe and don't send it to anyone
+        }
 
-    if (is_null($myrating)) {
-        if (!$rating = get_record("forum_ratings", "userid", $userid, "post", $postid)) {
-            $myrating = FORUM_UNSET_POST_RATING;
-        } else {
-            $myrating = $rating->rating;
+        if (!groups_is_member($discussion->groupid) and !has_capability('moodle/site:accessallgroups', $context)) {
+            // do not send posts from other groups when in SEPARATEGROUPS or VISIBLEGROUPS
+            return false;
         }
     }
 
-    if (empty($strrate)) {
-        $strrate = get_string("rate", "forum");
+    // Make sure we're allowed to see it...
+    if (!forum_user_can_see_post($forum, $discussion, $post, NULL, $cm)) {
+        return false;
     }
-    $scale = array(FORUM_UNSET_POST_RATING => $strrate.'...') + $scale;
-    choose_from_menu($scale, $postid, $myrating, '', '', '0', false, false, 0, '', false, false, 'forumpostratingmenu');
-}
 
-/**
- * Print the drop down that allows the user to select how they want to have
- * the discussion displayed.
- * @param $id - forum id if $forumtype is 'single',
- *              discussion id for any other forum type
- * @param $mode - forum layout mode
- * @param $forumtype - optional
- */
-function forum_print_mode_form($id, $mode, $forumtype='') {
-    if ($forumtype == 'single') {
-        echo '<div class="forummode">';
-        popup_form("view.php?f=$id&amp;mode=", forum_get_layout_modes(), "mode", $mode, "");
-        echo '</div>';
-    } else {
-        popup_form("discuss.php?d=$id&amp;mode=", forum_get_layout_modes(), "mode", $mode, "");
-    }
+
+    // finally send the file
+    send_stored_file($file, 0, 0, true); // download MUST be forced - security!
 }
 
 /**
+ * If successful, this function returns the name of the file
  *
+ * @global object
+ * @param object $post is a full post record, including course and forum
+ * @param object $forum
+ * @param object $cm
+ * @param mixed $mform
+ * @param string $message
+ * @return bool
  */
-function forum_search_form($course, $search='') {
-    global $CFG;
+function forum_add_attachment($post, $forum, $cm, $mform=null, &$message=null) {
+    global $DB;
 
-    $output  = '<div class="forumsearch">';
-    $output .= '<form action="'.$CFG->wwwroot.'/mod/forum/search.php" style="display:inline">';
-    $output .= '<fieldset class="invisiblefieldset">';
-    $output .= helpbutton('search', get_string('search'), 'moodle', true, false, '', true);
-    $output .= '<input name="search" type="text" size="18" value="'.s($search, true).'" alt="search" />';
-    $output .= '<input value="'.get_string('searchforums', 'forum').'" type="submit" />';
-    $output .= '<input name="id" type="hidden" value="'.$course->id.'" />';
-    $output .= '</fieldset>';
-    $output .= '</form>';
-    $output .= '</div>';
+    if (empty($mform)) {
+        return false;
+    }
 
-    return $output;
-}
+    if (empty($post->attachments)) {
+        return true;   // Nothing to do
+    }
 
+    $context = get_context_instance(CONTEXT_MODULE, $cm->id);
 
-/**
- *
- */
-function forum_set_return() {
-    global $CFG, $SESSION;
+    $info = file_get_draft_area_info($post->attachments);
+    $present = ($info['filecount']>0) ? '1' : '';
+    file_save_draft_area_files($post->attachments, $context->id, 'mod_forum', 'attachment', $post->id);
 
-    if (! isset($SESSION->fromdiscussion)) {
-        if (!empty($_SERVER['HTTP_REFERER'])) {
-            $referer = $_SERVER['HTTP_REFERER'];
-        } else {
-            $referer = "";
-        }
-        // If the referer is NOT a login screen then save it.
-        if (! strncasecmp("$CFG->wwwroot/login", $referer, 300)) {
-            $SESSION->fromdiscussion = $_SERVER["HTTP_REFERER"];
-        }
-    }
-}
+    $DB->set_field('forum_posts', 'attachment', $present, array('id'=>$post->id));
 
+    return true;
+}
 
 /**
+ * Add a new post in an existing discussion.
  *
+ * @global object
+ * @global object
+ * @global object
+ * @param object $post
+ * @param mixed $mform
+ * @param string $message
+ * @return int
  */
-function forum_go_back_to($default) {
-    global $SESSION;
+function forum_add_new_post($post, $mform, &$message) {
+    global $USER, $CFG, $DB;
 
-    if (!empty($SESSION->fromdiscussion)) {
-        $returnto = $SESSION->fromdiscussion;
-        unset($SESSION->fromdiscussion);
-        return $returnto;
-    } else {
-        return $default;
-    }
-}
+    $discussion = $DB->get_record('forum_discussions', array('id' => $post->discussion));
+    $forum      = $DB->get_record('forum', array('id' => $discussion->forum));
+    $cm         = get_coursemodule_from_instance('forum', $forum->id);
+    $context    = get_context_instance(CONTEXT_MODULE, $cm->id);
 
-/**
- * Creates a directory file name, suitable for make_upload_directory()
- */
-function forum_file_area_name($post) {
-    global $CFG;
+    $post->created    = $post->modified = time();
+    $post->mailed     = "0";
+    $post->userid     = $USER->id;
+    $post->attachment = "";
 
-    if (!isset($post->forum) or !isset($post->course)) {
-        debugging('missing forum or course', DEBUG_DEVELOPER);
-        if (!$discussion = get_record('forum_discussions', 'id', $post->discussion)) {
-            return false;
-        }
-        if (!$forum = get_record('forum', 'id', $discussion->forum)) {
-            return false;
-        }
-        $forumid  = $forum->id;
-        $courseid = $forum->course;
-    } else {
-        $forumid  = $post->forum;
-        $courseid = $post->course;
-    }
+    $post->id = $DB->insert_record("forum_posts", $post);
+    $post->message = file_save_draft_area_files($post->itemid, $context->id, 'mod_forum', 'post', $post->id, array('subdirs'=>true), $post->message);
+    $DB->set_field('forum_posts', 'message', $post->message, array('id'=>$post->id));
+    forum_add_attachment($post, $forum, $cm, $mform, $message);
 
-    return "$courseid/$CFG->moddata/forum/$forumid/$post->id";
-}
+    // Update discussion modified date
+    $DB->set_field("forum_discussions", "timemodified", $post->modified, array("id" => $post->discussion));
+    $DB->set_field("forum_discussions", "usermodified", $post->userid, array("id" => $post->discussion));
 
-/**
- *
- */
-function forum_file_area($post) {
-    $path = forum_file_area_name($post);
-    if ($path) {
-        return make_upload_directory($path);
-    } else {
-        return false;
+    if (forum_tp_can_track_forums($forum) && forum_tp_is_tracked($forum)) {
+        forum_tp_mark_post_read($post->userid, $post, $post->forum);
     }
+
+    return $post->id;
 }
 
 /**
+ * Update a post
  *
+ * @global object
+ * @global object
+ * @global object
+ * @param object $post
+ * @param mixed $mform
+ * @param string $message
+ * @return bool
  */
-function forum_delete_old_attachments($post, $exception="") {
-
-/**
- * Deletes all the user files in the attachments area for a post
- * EXCEPT for any file named $exception
- */
-    if ($basedir = forum_file_area($post)) {
-        if ($files = get_directory_list($basedir)) {
-            foreach ($files as $file) {
-                if ($file != $exception) {
-                    unlink("$basedir/$file");
-                    notify("Existing file '$file' has been deleted!");
-                }
-            }
-        }
-        if (!$exception) {  // Delete directory as well, if empty
-            rmdir("$basedir");
-        }
-    }
-}
+function forum_update_post($post, $mform, &$message) {
+    global $USER, $CFG, $DB;
 
-/**
- * Given a discussion object that is being moved to forumid,
- * this function checks all posts in that discussion
- * for attachments, and if any are found, these are
- * moved to the new forum directory.
- */
-function forum_move_attachments($discussion, $forumid) {
+    $discussion = $DB->get_record('forum_discussions', array('id' => $post->discussion));
+    $forum      = $DB->get_record('forum', array('id' => $discussion->forum));
+    $cm         = get_coursemodule_from_instance('forum', $forum->id);
+    $context    = get_context_instance(CONTEXT_MODULE, $cm->id);
 
-    global $CFG;
+    $post->modified = time();
 
-    require_once($CFG->dirroot.'/lib/uploadlib.php');
+    $DB->update_record('forum_posts', $post);
 
-    $return = true;
+    $discussion->timemodified = $post->modified; // last modified tracking
+    $discussion->usermodified = $post->userid;   // last modified tracking
 
-    if ($posts = get_records_select("forum_posts", "discussion = '$discussion->id' AND attachment <> ''")) {
-        foreach ($posts as $oldpost) {
-            $oldpost->course = $discussion->course;
-            $oldpost->forum = $discussion->forum;
-            $oldpostdir = "$CFG->dataroot/".forum_file_area_name($oldpost);
-            if (is_dir($oldpostdir)) {
-                $newpost = $oldpost;
-                $newpost->forum = $forumid;
-                $newpostdir = forum_file_area_name($newpost);
-                // take off the last directory because otherwise we're renaming to a directory that already exists
-                // and this is unhappy in certain situations, eg over an nfs mount and potentially on windows too.
-                make_upload_directory(substr($newpostdir,0,strrpos($newpostdir,'/')));
-                $newpostdir = $CFG->dataroot.'/'.forum_file_area_name($newpost);
-                $files = get_directory_list($oldpostdir); // get it before we rename it.
-                if (! @rename($oldpostdir, $newpostdir)) {
-                    $return = false;
-                }
-                foreach ($files as $file) {
-                    clam_change_log($oldpostdir.'/'.$file,$newpostdir.'/'.$file);
-                }
-            }
+    if (!$post->parent) {   // Post is a discussion starter - update discussion title and times too
+        $discussion->name      = $post->subject;
+        $discussion->timestart = $post->timestart;
+        $discussion->timeend   = $post->timeend;
         }
+    $post->message = file_save_draft_area_files($post->itemid, $context->id, 'mod_forum', 'post', $post->id, array('subdirs'=>true), $post->message);
+    $DB->set_field('forum_posts', 'message', $post->message, array('id'=>$post->id));
+
+    $DB->update_record('forum_discussions', $discussion);
+
+    forum_add_attachment($post, $forum, $cm, $mform, $message);
+
+    if (forum_tp_can_track_forums($forum) && forum_tp_is_tracked($forum)) {
+        forum_tp_mark_post_read($post->userid, $post, $post->forum);
     }
-    return $return;
+
+    return true;
 }
 
 /**
- * if return=html, then return a html string.
- * if return=text, then return a text-only string.
- * otherwise, print HTML for non-images, and return image HTML
+ * Given an object containing all the necessary data,
+ * create a new discussion and return the id
+ *
+ * @global object
+ * @global object
+ * @global object
+ * @param object $post
+ * @param mixed $mform
+ * @param string $message
+ * @param int $userid
+ * @return object
  */
-function forum_print_attachments($post, $return=NULL) {
+function forum_add_discussion($discussion, $mform=null, &$message=null, $userid=null) {
+    global $USER, $CFG, $DB;
 
-    global $CFG;
-
-    $filearea = forum_file_area_name($post);
+    $timenow = time();
 
-    $imagereturn = "";
-    $output = "";
+    if (is_null($userid)) {
+        $userid = $USER->id;
+    }
 
-    if ($basedir = forum_file_area($post)) {
-        if ($files = get_directory_list($basedir)) {
-            $strattachment = get_string("attachment", "forum");
-            foreach ($files as $file) {
-                $icon = mimeinfo("icon", $file);
-                $type = mimeinfo("type", $file);
-                $ffurl = get_file_url("$filearea/$file");
-                $image = "<img src=\"$CFG->pixpath/f/$icon\" class=\"icon\" alt=\"\" />";
+    // The first post is stored as a real post, and linked
+    // to from the discuss entry.
 
-                if ($return == "html") {
-                    $output .= "<a href=\"$ffurl\">$image</a> ";
-                    $output .= "<a href=\"$ffurl\">$file</a><br />";
+    $forum = $DB->get_record('forum', array('id'=>$discussion->forum));
+    $cm    = get_coursemodule_from_instance('forum', $forum->id);
 
-                } else if ($return == "text") {
-                    $output .= "$strattachment $file:\n$ffurl\n";
-
-                } else {
-                    if (in_array($type, array('image/gif', 'image/jpeg', 'image/png'))) {    // Image attachments don't get printed as links
-                        $imagereturn .= "<br /><img src=\"$ffurl\" alt=\"\" />";
-                    } else {
-                        echo "<a href=\"$ffurl\">$image</a> ";
-                        echo filter_text("<a href=\"$ffurl\">$file</a><br />");
-                    }
-                }
-            }
-        }
-    }
-
-    if ($return) {
-        return $output;
-    }
-
-    return $imagereturn;
-}
-/**
- * If successful, this function returns the name of the file
- * @param $post is a full post record, including course and forum
- * @param $newfile is a full upload array from $_FILES
- * @param $message is a string to hold the messages.
- */
-
-/**
- *
- */
-function forum_add_attachment($post, $inputname,&$message) {
-
-    global $CFG;
-
-    if (!$forum = get_record("forum", "id", $post->forum)) {
-        return "";
-    }
-
-    if (!$course = get_record("course", "id", $forum->course)) {
-        return "";
-    }
-
-    require_once($CFG->dirroot.'/lib/uploadlib.php');
-    $um = new upload_manager($inputname,true,false,$course,false,$forum->maxbytes,true,true);
-    $dir = forum_file_area_name($post);
-    if ($um->process_file_uploads($dir)) {
-        $message .= $um->get_errors();
-        return $um->get_new_filename();
-    }
-    $message .= $um->get_errors();
-    return null;
-}
-
-/**
- *
- */
-function forum_add_new_post($post,&$message) {
-
-    global $USER, $CFG;
-
-    $discussion = get_record('forum_discussions', 'id', $post->discussion);
-    $forum      = get_record('forum', 'id', $discussion->forum);
-
-    $post->created    = $post->modified = time();
-    $post->mailed     = "0";
-    $post->userid     = $USER->id;
-    $post->attachment = "";
-    $post->forum      = $forum->id;     // speedup
-    $post->course     = $forum->course; // speedup
-
-    if (! $post->id = insert_record("forum_posts", $post)) {
-        return false;
-    }
-
-    if ($post->attachment = forum_add_attachment($post, 'attachment',$message)) {
-        set_field("forum_posts", "attachment", $post->attachment, "id", $post->id);
-    }
-
-    // Update discussion modified date
-    set_field("forum_discussions", "timemodified", $post->modified, "id", $post->discussion);
-    set_field("forum_discussions", "usermodified", $post->userid, "id", $post->discussion);
-
-    if (forum_tp_can_track_forums($forum) && forum_tp_is_tracked($forum)) {
-        forum_tp_mark_post_read($post->userid, $post, $post->forum);
-    }
-
-    return $post->id;
-}
-
-/**
- *
- */
-function forum_update_post($post,&$message) {
-
-    global $USER, $CFG;
-
-    $forum = get_record('forum', 'id', $post->forum);
-
-    $post->modified = time();
-
-    $updatediscussion = new object();
-    $updatediscussion->id           = $post->discussion;
-    $updatediscussion->timemodified = $post->modified; // last modified tracking
-    $updatediscussion->usermodified = $post->userid;   // last modified tracking
-
-    if (!$post->parent) {   // Post is a discussion starter - update discussion title and times too
-        $updatediscussion->name      = $post->subject;
-        $updatediscussion->timestart = $post->timestart;
-        $updatediscussion->timeend   = $post->timeend;
-    }
-
-    if (!update_record('forum_discussions', $updatediscussion)) {
-        return false;
-    }
-
-    if ($newfilename = forum_add_attachment($post, 'attachment',$message)) {
-        $post->attachment = $newfilename;
-    } else {
-        unset($post->attachment);
-    }
-
-    if (forum_tp_can_track_forums($forum) && forum_tp_is_tracked($forum)) {
-        forum_tp_mark_post_read($post->userid, $post, $post->forum);
-    }
-
-    return update_record('forum_posts', $post);
-}
-
-/**
- * Given an object containing all the necessary data,
- * create a new discussion and return the id
- */
-function forum_add_discussion($discussion,&$message) {
-
-    global $USER, $CFG;
-
-    $timenow = time();
-
-    // The first post is stored as a real post, and linked
-    // to from the discuss entry.
-
-    $forum = get_record('forum', 'id', $discussion->forum);
-
-    $post = new object();
+    $post = new stdClass();
     $post->discussion  = 0;
     $post->parent      = 0;
-    $post->userid      = $USER->id;
+    $post->userid        = $userid;
     $post->created     = $timenow;
     $post->modified    = $timenow;
     $post->mailed      = 0;
     $post->subject     = $discussion->name;
-    $post->message     = $discussion->intro;
-    $post->attachment  = "";
+    $post->message       = $discussion->message;
+    $post->messageformat = $discussion->messageformat;
+    $post->messagetrust  = $discussion->messagetrust;
+    $post->attachments   = isset($discussion->attachments) ? $discussion->attachments : null;
     $post->forum       = $forum->id;     // speedup
     $post->course      = $forum->course; // speedup
-    $post->format      = $discussion->format;
     $post->mailnow     = $discussion->mailnow;
 
-    if (! $post->id = insert_record("forum_posts", $post) ) {
-        return 0;
-    }
+    $post->id = $DB->insert_record("forum_posts", $post);
 
-    if ($post->attachment = forum_add_attachment($post, 'attachment',$message)) {
-        set_field("forum_posts", "attachment", $post->attachment, "id", $post->id); //ignore errors
+    // TODO: Fix the calling code so that there always is a $cm when this function is called
+    if (!empty($cm->id) && !empty($discussion->itemid)) {   // In "single simple discussions" this may not exist yet
+        $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+        $text = file_save_draft_area_files($discussion->itemid, $context->id, 'mod_forum', 'post', $post->id, array('subdirs'=>true), $post->message);
+        $DB->set_field('forum_posts', 'message', $text, array('id'=>$post->id));
     }
 
-    // Now do the main entry for the discussion,
-    // linking to this first post
+    // Now do the main entry for the discussion, linking to this first post
 
     $discussion->firstpost    = $post->id;
     $discussion->timemodified = $timenow;
     $discussion->usermodified = $post->userid;
-    $discussion->userid = $USER->id;
+    $discussion->userid       = $userid;
 
-    if (! $post->discussion = insert_record("forum_discussions", $discussion) ) {
-        delete_records("forum_posts", "id", $post->id);
-        return 0;
-    }
+    $post->discussion = $DB->insert_record("forum_discussions", $discussion);
 
     // Finally, set the pointer on the post.
-    if (! set_field("forum_posts", "discussion", $post->discussion, "id", $post->id)) {
-        delete_records("forum_posts", "id", $post->id);
-        delete_records("forum_discussions", "id", $post->discussion);
-        return 0;
+    $DB->set_field("forum_posts", "discussion", $post->discussion, array("id"=>$post->id));
+
+    if (!empty($cm->id)) {
+        forum_add_attachment($post, $forum, $cm, $mform, $message);
     }
 
     if (forum_tp_can_track_forums($forum) && forum_tp_is_tracked($forum)) {
@@ -4057,21 +4341,27 @@ function forum_add_discussion($discussion,&$message) {
 
 
 /**
+ * Deletes a discussion and handles all associated cleanup.
  *
+ * @global object
+ * @param object $discussion Discussion to delete
+ * @param bool $fulldelete True when deleting entire forum
+ * @param object $course Course
+ * @param object $cm Course-module
+ * @param object $forum Forum
+ * @return bool
  */
-function forum_delete_discussion($discussion, $fulldelete=false) {
-// $discussion is a discussion record object
+function forum_delete_discussion($discussion, $fulldelete, $course, $cm, $forum) {
+    global $DB, $CFG;
+    require_once($CFG->libdir.'/completionlib.php');
 
     $result = true;
 
-    if ($posts = get_records("forum_posts", "discussion", $discussion->id)) {
+    if ($posts = $DB->get_records("forum_posts", array("discussion" => $discussion->id))) {
         foreach ($posts as $post) {
             $post->course = $discussion->course;
             $post->forum  = $discussion->forum;
-            if (! delete_records("forum_ratings", "post", "$post->id")) {
-                $result = false;
-            }
-            if (! forum_delete_post($post, $fulldelete)) {
+            if (!forum_delete_post($post, 'ignore', $course, $cm, $forum, $fulldelete)) {
                 $result = false;
             }
         }
@@ -4079,62 +4369,114 @@ function forum_delete_discussion($discussion, $fulldelete=false) {
 
     forum_tp_delete_read_records(-1, -1, $discussion->id);
 
-    if (! delete_records("forum_discussions", "id", "$discussion->id")) {
+    if (!$DB->delete_records("forum_discussions", array("id"=>$discussion->id))) {
         $result = false;
     }
 
+    // Update completion state if we are tracking completion based on number of posts
+    // But don't bother when deleting whole thing
+    if (!$fulldelete) {
+        $completion = new completion_info($course);
+        if ($completion->is_enabled($cm) == COMPLETION_TRACKING_AUTOMATIC &&
+           ($forum->completiondiscussions || $forum->completionreplies || $forum->completionposts)) {
+            $completion->update_state($cm, COMPLETION_INCOMPLETE, $discussion->userid);
+        }
+    }
+
     return $result;
 }
 
 
 /**
+ * Deletes a single forum post.
  *
+ * @global object
+ * @param object $post Forum post object
+ * @param mixed $children Whether to delete children. If false, returns false
+ *   if there are any children (without deleting the post). If true,
+ *   recursively deletes all children. If set to special value 'ignore', deletes
+ *   post regardless of children (this is for use only when deleting all posts
+ *   in a disussion).
+ * @param object $course Course
+ * @param object $cm Course-module
+ * @param object $forum Forum
+ * @param bool $skipcompletion True to skip updating completion state if it
+ *   would otherwise be updated, i.e. when deleting entire forum anyway.
+ * @return bool
  */
-function forum_delete_post($post, $children=false) {
-   if ($childposts = get_records('forum_posts', 'parent', $post->id)) {
+function forum_delete_post($post, $children, $course, $cm, $forum, $skipcompletion=false) {
+    global $DB, $CFG;
+    require_once($CFG->libdir.'/completionlib.php');
+
+    $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+
+    if ($children != 'ignore' && ($childposts = $DB->get_records('forum_posts', array('parent'=>$post->id)))) {
        if ($children) {
            foreach ($childposts as $childpost) {
-               forum_delete_post($childpost, true);
+               forum_delete_post($childpost, true, $course, $cm, $forum, $skipcompletion);
            }
        } else {
            return false;
        }
    }
-   if (delete_records("forum_posts", "id", $post->id)) {
-       delete_records("forum_ratings", "post", $post->id);  // Just in case
 
-       forum_tp_delete_read_records(-1, $post->id);
+    //delete ratings
+    require_once($CFG->dirroot.'/rating/lib.php');
+    $delopt = new stdClass;
+    $delopt->contextid = $context->id;
+    $delopt->component = 'mod_forum';
+    $delopt->ratingarea = 'post';
+    $delopt->itemid = $post->id;
+    $rm = new rating_manager();
+    $rm->delete_ratings($delopt);
 
-       if ($post->attachment) {
-           $discussion = get_record("forum_discussions", "id", $post->discussion);
-           $post->course = $discussion->course;
-           $post->forum  = $discussion->forum;
-           forum_delete_old_attachments($post);
-       }
+    //delete attachments
+    $fs = get_file_storage();
+    $fs->delete_area_files($context->id, 'mod_forum', 'attachment', $post->id);
+    $fs->delete_area_files($context->id, 'mod_forum', 'post', $post->id);
+
+    if ($DB->delete_records("forum_posts", array("id" => $post->id))) {
+
+        forum_tp_delete_read_records(-1, $post->id);
 
    // Just in case we are deleting the last post
        forum_discussion_update_last_post($post->discussion);
 
+        // Update completion state if we are tracking completion based on number of posts
+        // But don't bother when deleting whole thing
+
+        if (!$skipcompletion) {
+            $completion = new completion_info($course);
+            if ($completion->is_enabled($cm) == COMPLETION_TRACKING_AUTOMATIC &&
+               ($forum->completiondiscussions || $forum->completionreplies || $forum->completionposts)) {
+                $completion->update_state($cm, COMPLETION_INCOMPLETE, $post->userid);
+            }
+        }
+
        return true;
    }
    return false;
 }
 
 /**
- *
+ * @global object
+ * @param object $post
+ * @param bool $children
+ * @return int
  */
 function forum_count_replies($post, $children=true) {
+    global $DB;
     $count = 0;
 
     if ($children) {
-        if ($childposts = get_records('forum_posts', 'parent', $post->id)) {
+        if ($childposts = $DB->get_records('forum_posts', array('parent' => $post->id))) {
            foreach ($childposts as $childpost) {
                $count ++;                   // For this child
                $count += forum_count_replies($childpost, true);
            }
         }
     } else {
-        $count += count_records('forum_posts', 'parent', $post->id);
+        $count += $DB->count_records('forum_posts', array('parent' => $post->id));
     }
 
     return $count;
@@ -4142,44 +4484,64 @@ function forum_count_replies($post, $children=true) {
 
 
 /**
- *
+ * @global object
+ * @param int $forumid
+ * @param mixed $value
+ * @return bool
  */
 function forum_forcesubscribe($forumid, $value=1) {
-    return set_field("forum", "forcesubscribe", $value, "id", $forumid);
+    global $DB;
+    return $DB->set_field("forum", "forcesubscribe", $value, array("id" => $forumid));
 }
 
 /**
- *
+ * @global object
+ * @param object $forum
+ * @return bool
  */
 function forum_is_forcesubscribed($forum) {
+    global $DB;
     if (isset($forum->forcesubscribe)) {    // then we use that
         return ($forum->forcesubscribe == FORUM_FORCESUBSCRIBE);
     } else {   // Check the database
-       return (get_field('forum', 'forcesubscribe', 'id', $forum) == FORUM_FORCESUBSCRIBE);
+       return ($DB->get_field('forum', 'forcesubscribe', array('id' => $forum)) == FORUM_FORCESUBSCRIBE);
+    }
+}
+
+function forum_get_forcesubscribed($forum) {
+    global $DB;
+    if (isset($forum->forcesubscribe)) {    // then we use that
+        return $forum->forcesubscribe;
+    } else {   // Check the database
+        return $DB->get_field('forum', 'forcesubscribe', array('id' => $forum));
     }
 }
 
 /**
- *
+ * @global object
+ * @param int $userid
+ * @param object $forum
+ * @return bool
  */
 function forum_is_subscribed($userid, $forum) {
+    global $DB;
     if (is_numeric($forum)) {
-        $forum = get_record('forum', 'id', $forum);
+        $forum = $DB->get_record('forum', array('id' => $forum));
     }
     if (forum_is_forcesubscribed($forum)) {
         return true;
     }
-    return record_exists("forum_subscriptions", "userid", $userid, "forum", $forum->id);
+    return $DB->record_exists("forum_subscriptions", array("userid" => $userid, "forum" => $forum->id));
 }
 
 function forum_get_subscribed_forums($course) {
-    global $USER, $CFG;
+    global $USER, $CFG, $DB;
     $sql = "SELECT f.id
-              FROM {$CFG->prefix}forum f
-                   LEFT JOIN {$CFG->prefix}forum_subscriptions fs ON (fs.forum = f.id AND fs.userid = $USER->id)
+              FROM {forum} f
+                   LEFT JOIN {forum_subscriptions} fs ON (fs.forum = f.id AND fs.userid = ?)
              WHERE f.forcesubscribe <> ".FORUM_DISALLOWSUBSCRIBE."
                    AND (f.forcesubscribe = ".FORUM_FORCESUBSCRIBE." OR fs.id IS NOT NULL)";
-    if ($subscribed = get_records_sql($sql)) {
+    if ($subscribed = $DB->get_records_sql($sql, array($USER->id))) {
         foreach ($subscribed as $s) {
             $subscribed[$s->id] = $s->id;
         }
@@ -4191,30 +4553,44 @@ function forum_get_subscribed_forums($course) {
 
 /**
  * Adds user to the subscriber list
+ *
+ * @global object
+ * @param int $userid
+ * @param int $forumid
  */
 function forum_subscribe($userid, $forumid) {
+    global $DB;
 
-    if (record_exists("forum_subscriptions", "userid", $userid, "forum", $forumid)) {
+    if ($DB->record_exists("forum_subscriptions", array("userid"=>$userid, "forum"=>$forumid))) {
         return true;
     }
 
-    $sub = new object();
+    $sub = new stdClass();
     $sub->userid  = $userid;
     $sub->forum = $forumid;
 
-    return insert_record("forum_subscriptions", $sub);
+    return $DB->insert_record("forum_subscriptions", $sub);
 }
 
 /**
  * Removes user from the subscriber list
+ *
+ * @global object
+ * @param int $userid
+ * @param int $forumid
  */
 function forum_unsubscribe($userid, $forumid) {
-    return delete_records("forum_subscriptions", "userid", $userid, "forum", $forumid);
+    global $DB;
+    return $DB->delete_records("forum_subscriptions", array("userid"=>$userid, "forum"=>$forumid));
 }
 
 /**
  * Given a new post, subscribes or unsubscribes as appropriate.
  * Returns some text which describes what happened.
+ *
+ * @global objec
+ * @param object $post
+ * @param object $forum
  */
 function forum_post_subscription($post, $forum) {
 
@@ -4250,7 +4626,7 @@ function forum_post_subscription($post, $forum) {
         }
     }
 
-    $info = new object();
+    $info = new stdClass();
     $info->name  = fullname($USER);
     $info->forum = format_string($forum->name);
 
@@ -4266,16 +4642,21 @@ function forum_post_subscription($post, $forum) {
 
 /**
  * Generate and return the subscribe or unsubscribe link for a forum.
+ *
  * @param object $forum the forum. Fields used are $forum->id and $forum->forcesubscribe.
  * @param object $context the context object for this forum.
  * @param array $messages text used for the link in its various states
  *      (subscribed, unsubscribed, forcesubscribed or cantsubscribe).
  *      Any strings not passed in are taken from the $defaultmessages array
  *      at the top of the function.
- * @param
+ * @param bool $cantaccessagroup
+ * @param bool $fakelink
+ * @param bool $backtoindex
+ * @param array $subscribed_forums
+ * @return string
  */
 function forum_get_subscribe_link($forum, $context, $messages = array(), $cantaccessagroup = false, $fakelink=true, $backtoindex=false, $subscribed_forums=null) {
-    global $CFG, $USER;
+    global $CFG, $USER, $PAGE, $OUTPUT;
     $defaultmessages = array(
         'subscribed' => get_string('unsubscribe', 'forum'),
         'unsubscribed' => get_string('subscribe', 'forum'),
@@ -4292,6 +4673,9 @@ function forum_get_subscribe_link($forum, $context, $messages = array(), $cantac
     } else if ($cantaccessagroup) {
         return $messages['cantaccessgroup'];
     } else {
+        if (!is_enrolled($context, $USER, '', true)) {
+            return '';
+        }
         if (is_null($subscribed_forums)) {
             $subscribed = forum_is_subscribed($USER->id, $forum);
         } else {
@@ -4313,25 +4697,16 @@ function forum_get_subscribe_link($forum, $context, $messages = array(), $cantac
             $backtoindexlink = '';
         }
         $link = '';
-        $sesskeylink = '&amp;sesskey='.sesskey();
 
         if ($fakelink) {
-            $link .= <<<EOD
-<script type="text/javascript">
-//<![CDATA[
-var subs_link = document.getElementById("subscriptionlink");
-if(subs_link){
-    subs_link.innerHTML = "<a title=\"$linktitle\" href='$CFG->wwwroot/mod/forum/subscribe.php?id={$forum->id}{$backtoindexlink}{$sesskeylink}'>$linktext<\/a>";
-}
-//]]>
-</script>
-<noscript>
-EOD;
+            $PAGE->requires->js('/mod/forum/forum.js');
+            $PAGE->requires->js_function_call('forum_produce_subscribe_link', array($forum->id, $backtoindexlink, $linktext, $linktitle));
+            $link = "<noscript>";
         }
         $options['id'] = $forum->id;
         $options['sesskey'] = sesskey();
-        $link .= print_single_button($CFG->wwwroot . '/mod/forum/subscribe.php',
-                $options, $linktext, 'post', '_self', true, $linktitle);
+        $url = new moodle_url('/mod/forum/subscribe.php', $options);
+        $link .= $OUTPUT->single_button($url, $linktext, 'get', array('title'=>$linktitle));
         if ($fakelink) {
             $link .= '</noscript>';
         }
@@ -4343,10 +4718,17 @@ EOD;
 
 /**
  * Generate and return the track or no track link for a forum.
+ *
+ * @global object
+ * @global object
+ * @global object
  * @param object $forum the forum. Fields used are $forum->id and $forum->forcesubscribe.
+ * @param array $messages
+ * @param bool $fakelink
+ * @return string
  */
 function forum_get_tracking_link($forum, $messages=array(), $fakelink=true) {
-    global $CFG, $USER;
+    global $CFG, $USER, $PAGE, $OUTPUT;
 
     static $strnotrackforum, $strtrackforum;
 
@@ -4373,17 +4755,14 @@ function forum_get_tracking_link($forum, $messages=array(), $fakelink=true) {
 
     $link = '';
     if ($fakelink) {
-        $link .= '<script type="text/javascript">';
-        $link .= '//<![CDATA['."\n";
-        $link .= 'document.getElementById("trackinglink").innerHTML = "<a title=\"' . $linktitle . '\" href=\"' . $CFG->wwwroot .
-           '/mod/forum/settracking.php?id=' . $forum->id . '\">' . $linktext . '<\/a>";'."\n";
-        $link .= '//]]>'."\n";
-        $link .= '</script>';
+        $PAGE->requires->js('/mod/forum/forum.js');
+        $PAGE->requires->js_function_call('forum_produce_tracking_link', Array($forum->id, $linktext, $linktitle));
         // use <noscript> to print button in case javascript is not enabled
         $link .= '<noscript>';
     }
-    $link .= print_single_button($CFG->wwwroot . '/mod/forum/settracking.php?id=' . $forum->id,
-            '', $linktext, 'post', '_self', true, $linktitle);
+    $url = new moodle_url('/mod/forum/settracking.php', array('id'=>$forum->id));
+    $link .= $OUTPUT->single_button($url, $linktext, 'get', array('title'=>$linktitle));
+
     if ($fakelink) {
         $link .= '</noscript>';
     }
@@ -4395,58 +4774,92 @@ function forum_get_tracking_link($forum, $messages=array(), $fakelink=true) {
 
 /**
  * Returns true if user created new discussion already
+ *
+ * @global object
+ * @global object
  * @param int $forumid
  * @param int $userid
  * @return bool
  */
 function forum_user_has_posted_discussion($forumid, $userid) {
-    global $CFG;
+    global $CFG, $DB;
 
     $sql = "SELECT 'x'
-              FROM {$CFG->prefix}forum_discussions d, {$CFG->prefix}forum_posts p
-             WHERE d.forum = $forumid AND p.discussion = d.id AND p.parent = 0 and p.userid = $userid";
+              FROM {forum_discussions} d, {forum_posts} p
+             WHERE d.forum = ? AND p.discussion = d.id AND p.parent = 0 and p.userid = ?";
 
-    return record_exists_sql($sql);
+    return $DB->record_exists_sql($sql, array($forumid, $userid));
 }
 
 /**
- *
+ * @global object
+ * @global object
+ * @param int $forumid
+ * @param int $userid
+ * @return array
  */
 function forum_discussions_user_has_posted_in($forumid, $userid) {
-    global $CFG;
+    global $CFG, $DB;
 
     $haspostedsql = "SELECT d.id AS id,
                             d.*
-                       FROM {$CFG->prefix}forum_posts p,
-                            {$CFG->prefix}forum_discussions d
+                       FROM {forum_posts} p,
+                            {forum_discussions} d
                       WHERE p.discussion = d.id
-                        AND d.forum = $forumid
-                        AND p.userid = $userid";
+                        AND d.forum = ?
+                        AND p.userid = ?";
 
-    return get_records_sql($haspostedsql);
+    return $DB->get_records_sql($haspostedsql, array($forumid, $userid));
 }
 
 /**
- *
+ * @global object
+ * @global object
+ * @param int $forumid
+ * @param int $did
+ * @param int $userid
+ * @return bool
  */
 function forum_user_has_posted($forumid, $did, $userid) {
-    global $CFG;
+    global $DB;
 
     if (empty($did)) {
         // posted in any forum discussion?
         $sql = "SELECT 'x'
-                  FROM {$CFG->prefix}forum_posts p
-                  JOIN {$CFG->prefix}forum_discussions d ON d.id = p.discussion
-                 WHERE p.userid = $userid AND d.forum = $forumid";
-        return record_exists_sql($sql);
+                  FROM {forum_posts} p
+                  JOIN {forum_discussions} d ON d.id = p.discussion
+                 WHERE p.userid = :userid AND d.forum = :forumid";
+        return $DB->record_exists_sql($sql, array('forumid'=>$forumid,'userid'=>$userid));
     } else {
-        // started discussion?
-        return record_exists('forum_posts','discussion',$did,'userid',$userid);
+        return $DB->record_exists('forum_posts', array('discussion'=>$did,'userid'=>$userid));
     }
 }
 
 /**
- *
+ * Returns creation time of the first user's post in given discussion
+ * @global object $DB
+ * @param int $did Discussion id
+ * @param int $userid User id
+ * @return int|bool post creation time stamp or return false
+ */
+function forum_get_user_posted_time($did, $userid) {
+    global $DB;
+
+    $posttime = $DB->get_field('forum_posts', 'MIN(created)', array('userid'=>$userid, 'discussion'=>$did));
+    if (empty($posttime)) {
+        return false;
+    }
+    return $posttime;
+}
+
+/**
+ * @global object
+ * @param object $forum
+ * @param object $currentgroup
+ * @param int $unused
+ * @param object $cm
+ * @param object $context
+ * @return bool
  */
 function forum_user_can_post_discussion($forum, $currentgroup=null, $unused=-1, $cm=NULL, $context=NULL) {
 // $forum is an object
@@ -4460,7 +4873,7 @@ function forum_user_can_post_discussion($forum, $currentgroup=null, $unused=-1,
     if (!$cm) {
         debugging('missing cm', DEBUG_DEVELOPER);
         if (!$cm = get_coursemodule_from_instance('forum', $forum->id, $forum->course)) {
-            error('Course Module ID was incorrect');
+            print_error('invalidcoursemodule');
         }
     }
 
@@ -4510,12 +4923,23 @@ function forum_user_can_post_discussion($forum, $currentgroup=null, $unused=-1,
 /**
  * This function checks whether the user can reply to posts in a forum
  * discussion. Use forum_user_can_post_discussion() to check whether the user
- * can start dicussions.
- * @param $forum - forum object
- * @param $user - user object
+ * can start discussions.
+ *
+ * @global object
+ * @global object
+ * @uses DEBUG_DEVELOPER
+ * @uses CONTEXT_MODULE
+ * @uses VISIBLEGROUPS
+ * @param object $forum forum object
+ * @param object $discussion
+ * @param object $user
+ * @param object $cm
+ * @param object $course
+ * @param object $context
+ * @return bool
  */
 function forum_user_can_post($forum, $discussion, $user=NULL, $cm=NULL, $course=NULL, $context=NULL) {
-    global $USER;
+    global $USER, $DB;
     if (empty($user)) {
         $user = $USER;
     }
@@ -4533,14 +4957,14 @@ function forum_user_can_post($forum, $discussion, $user=NULL, $cm=NULL, $course=
     if (!$cm) {
         debugging('missing cm', DEBUG_DEVELOPER);
         if (!$cm = get_coursemodule_from_instance('forum', $forum->id, $forum->course)) {
-            error('Course Module ID was incorrect');
+            print_error('invalidcoursemodule');
         }
     }
 
     if (!$course) {
         debugging('missing course', DEBUG_DEVELOPER);
-        if (!$course = get_record('course', 'id', $forum->course)) {
-            error('Incorrect course id');
+        if (!$course = $DB->get_record('course', array('id' => $forum->course))) {
+            print_error('invalidcourseid');
         }
     }
 
@@ -4548,8 +4972,8 @@ function forum_user_can_post($forum, $discussion, $user=NULL, $cm=NULL, $course=
         $context = get_context_instance(CONTEXT_MODULE, $cm->id);
     }
 
-    // normal users with temporary guest access can not post
-    if (has_capability('moodle/legacy:guest', $context, $user->id, false)) {
+    // normal users with temporary guest access can not post, suspended users can not post either
+    if (!is_viewing($context, $user->id) and !is_enrolled($context, $user->id, '', true)) {
         return false;
     }
 
@@ -4559,7 +4983,7 @@ function forum_user_can_post($forum, $discussion, $user=NULL, $cm=NULL, $course=
         $capname = 'mod/forum:replypost';
     }
 
-    if (!has_capability($capname, $context, $user->id, false)) {
+    if (!has_capability($capname, $context, $user->id)) {
         return false;
     }
 
@@ -4588,7 +5012,20 @@ function forum_user_can_post($forum, $discussion, $user=NULL, $cm=NULL, $course=
 }
 
 
-//checks to see if a user can view a particular post
+/**
+ * checks to see if a user can view a particular post
+ *
+ * @global object
+ * @global object
+ * @uses CONTEXT_MODULE
+ * @uses SEPARATEGROUPS
+ * @param object $post
+ * @param object $course
+ * @param object $cm
+ * @param object $forum
+ * @param object $discussion
+ * @param object $user
+ */
 function forum_user_can_view_post($post, $course, $cm, $forum, $discussion, $user=NULL){
 
     global $CFG, $USER;
@@ -4614,10 +5051,17 @@ function forum_user_can_view_post($post, $course, $cm, $forum, $discussion, $use
 
 
 /**
- *
+ * @global object
+ * @global object
+ * @uses DEBUG_DEVELOPER
+ * @param object $forum
+ * @param object $discussion
+ * @param object $context
+ * @param object $user
+ * @return bool
  */
 function forum_user_can_see_discussion($forum, $discussion, $context, $user=NULL) {
-    global $USER;
+    global $USER, $DB;
 
     if (empty($user) || empty($user->id)) {
         $user = $USER;
@@ -4626,13 +5070,13 @@ function forum_user_can_see_discussion($forum, $discussion, $context, $user=NULL
     // retrieve objects (yuk)
     if (is_numeric($forum)) {
         debugging('missing full forum', DEBUG_DEVELOPER);
-        if (!$forum = get_record('forum','id',$forum)) {
+        if (!$forum = $DB->get_record('forum',array('id'=>$forum))) {
             return false;
         }
     }
     if (is_numeric($discussion)) {
         debugging('missing full discussion', DEBUG_DEVELOPER);
-        if (!$discussion = get_record('forum_discussions','id',$discussion)) {
+        if (!$discussion = $DB->get_record('forum_discussions',array('id'=>$discussion))) {
             return false;
         }
     }
@@ -4651,28 +5095,35 @@ function forum_user_can_see_discussion($forum, $discussion, $context, $user=NULL
 
 
 /**
- *
+ * @global object
+ * @global object
+ * @param object $forum
+ * @param object $discussion
+ * @param object $post
+ * @param object $user
+ * @param object $cm
+ * @return bool
  */
 function forum_user_can_see_post($forum, $discussion, $post, $user=NULL, $cm=NULL) {
-    global $CFG, $USER;
+    global $CFG, $USER, $DB;
 
     // retrieve objects (yuk)
     if (is_numeric($forum)) {
         debugging('missing full forum', DEBUG_DEVELOPER);
-        if (!$forum = get_record('forum','id',$forum)) {
+        if (!$forum = $DB->get_record('forum',array('id'=>$forum))) {
             return false;
         }
     }
 
     if (is_numeric($discussion)) {
         debugging('missing full discussion', DEBUG_DEVELOPER);
-        if (!$discussion = get_record('forum_discussions','id',$discussion)) {
+        if (!$discussion = $DB->get_record('forum_discussions',array('id'=>$discussion))) {
             return false;
         }
     }
     if (is_numeric($post)) {
         debugging('missing full post', DEBUG_DEVELOPER);
-        if (!$post = get_record('forum_posts','id',$post)) {
+        if (!$post = $DB->get_record('forum_posts',array('id'=>$post))) {
             return false;
         }
     }
@@ -4683,7 +5134,7 @@ function forum_user_can_see_post($forum, $discussion, $post, $user=NULL, $cm=NUL
     if (!$cm) {
         debugging('missing cm', DEBUG_DEVELOPER);
         if (!$cm = get_coursemodule_from_instance('forum', $forum->id, $forum->course)) {
-            error('Course Module ID was incorrect');
+            print_error('invalidcoursemodule');
         }
     }
 
@@ -4691,16 +5142,10 @@ function forum_user_can_see_post($forum, $discussion, $post, $user=NULL, $cm=NUL
         $user = $USER;
     }
 
-    if (isset($cm->cache->caps['mod/forum:viewdiscussion'])) {
-        if (!$cm->cache->caps['mod/forum:viewdiscussion']) {
+    $canviewdiscussion = !empty($cm->cache->caps['mod/forum:viewdiscussion']) || has_capability('mod/forum:viewdiscussion', get_context_instance(CONTEXT_MODULE, $cm->id), $user->id);
+    if (!$canviewdiscussion && !has_all_capabilities(array('moodle/user:viewdetails', 'moodle/user:readuserposts'), get_context_instance(CONTEXT_USER, $post->userid))) {
             return false;
         }
-    } else {
-        $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
-        if (!has_capability('mod/forum:viewdiscussion', $modcontext, $user->id)) {
-            return false;
-        }
-    }
 
     if (isset($cm->uservisible)) {
         if (!$cm->uservisible) {
@@ -4728,6 +5173,8 @@ function forum_user_can_see_post($forum, $discussion, $post, $user=NULL, $cm=NUL
 /**
  * Prints the discussion view screen for a forum.
  *
+ * @global object
+ * @global object
  * @param object $course The current course object.
  * @param object $forum Forum to be printed.
  * @param int $maxdiscussions .
@@ -4736,16 +5183,16 @@ function forum_user_can_see_post($forum, $discussion, $post, $user=NULL, $cm=NUL
  * @param int $groupmode Group mode of the forum (optional).
  * @param void $unused (originally current group)
  * @param int $page Page mode, page to display (optional).
- * @param int perpage The maximum number of discussions per page(optional)
+ * @param int $perpage The maximum number of discussions per page(optional)
  *
  */
 function forum_print_latest_discussions($course, $forum, $maxdiscussions=-1, $displayformat='plain', $sort='',
                                         $currentgroup=-1, $groupmode=-1, $page=-1, $perpage=100, $cm=NULL) {
-    global $CFG, $USER;
+    global $CFG, $USER, $OUTPUT;
 
     if (!$cm) {
         if (!$cm = get_coursemodule_from_instance('forum', $forum->id, $forum->course)) {
-            error('Course Module ID was incorrect');
+            print_error('invalidcoursemodule');
         }
     }
     $context = get_context_instance(CONTEXT_MODULE, $cm->id);
@@ -4789,24 +5236,43 @@ function forum_print_latest_discussions($course, $forum, $maxdiscussions=-1, $di
         $currentgroup = groups_get_activity_group($cm);
     }
 
+    $groups = array(); //cache
+
 // If the user can post discussions, then this is a good place to put the
 // button for it. We do not show the button if we are showing site news
 // and the current user is a guest.
 
-    if (forum_user_can_post_discussion($forum, $currentgroup, $groupmode, $cm, $context) ||
-        ($forum->type != 'news'
-         and (isguestuser() or !isloggedin() or has_capability('moodle/legacy:guest', $context, NULL, false))) ) {
+    $canstart = forum_user_can_post_discussion($forum, $currentgroup, $groupmode, $cm, $context);
+    if (!$canstart and $forum->type !== 'news') {
+        if (isguestuser() or !isloggedin()) {
+            $canstart = true;
+        }
+        if (!is_enrolled($context) and !is_viewing($context)) {
+            // allow guests and not-logged-in to see the button - they are prompted to log in after clicking the link
+            // normal users with temporary guest access see this button too, they are asked to enrol instead
+            // do not show the button to users with suspended enrolments here
+            $canstart = enrol_selfenrol_available($course->id);
+        }
+    }
 
+    if ($canstart) {
         echo '<div class="singlebutton forumaddnew">';
         echo "<form id=\"newdiscussionform\" method=\"get\" action=\"$CFG->wwwroot/mod/forum/post.php\">";
         echo '<div>';
         echo "<input type=\"hidden\" name=\"forum\" value=\"$forum->id\" />";
-        echo '<input type="submit" value="';
-        echo ($forum->type == 'news') ? get_string('addanewtopic', 'forum')
-            : (($forum->type == 'qanda')
-               ? get_string('addanewquestion','forum')
-               : get_string('addanewdiscussion', 'forum'));
-        echo '" />';
+        switch ($forum->type) {
+            case 'news':
+            case 'blog':
+                $buttonadd = get_string('addanewtopic', 'forum');
+                break;
+            case 'qanda':
+                $buttonadd = get_string('addanewquestion', 'forum');
+                break;
+            default:
+                $buttonadd = get_string('addanewdiscussion', 'forum');
+                break;
+        }
+        echo '<input type="submit" value="'.$buttonadd.'" />';
         echo '</div>';
         echo '</form>';
         echo "</div>\n";
@@ -4817,9 +5283,9 @@ function forum_print_latest_discussions($course, $forum, $maxdiscussions=-1, $di
     } else if ($groupmode and has_capability('mod/forum:startdiscussion', $context)) {
         // inform users why they can not post new discussion
         if ($currentgroup) {
-            notify(get_string('cannotadddiscussion', 'forum'));
+            echo $OUTPUT->notification(get_string('cannotadddiscussion', 'forum'));
         } else {
-            notify(get_string('cannotadddiscussionall', 'forum'));
+            echo $OUTPUT->notification(get_string('cannotadddiscussionall', 'forum'));
         }
     }
 
@@ -4846,7 +5312,7 @@ function forum_print_latest_discussions($course, $forum, $maxdiscussions=-1, $di
         $numdiscussions = forum_get_discussions_count($cm);
 
         ///Show the paging bar
-        print_paging_bar($numdiscussions, $page, $perpage, "view.php?f=$forum->id&amp;");
+        echo $OUTPUT->paging_bar($numdiscussions, $page, $perpage, "view.php?f=$forum->id");
         if ($numdiscussions > 1000) {
             // saves some memory on sites with very large forums
             $replies = forum_count_discussion_replies($forum->id, $sort, $maxdiscussions, $page, $perpage);
@@ -4897,7 +5363,7 @@ function forum_print_latest_discussions($course, $forum, $maxdiscussions=-1, $di
                     echo '&nbsp;<a title="'.get_string('markallread', 'forum').
                          '" href="'.$CFG->wwwroot.'/mod/forum/markposts.php?f='.
                          $forum->id.'&amp;mark=read&amp;returnpage=view.php">'.
-                         '<img src="'.$CFG->pixpath.'/t/clear.gif" class="iconsmall" alt="'.get_string('markallread', 'forum').'" /></a>';
+                         '<img src="'.$OUTPUT->pix_url('t/clear') . '" class="iconsmall" alt="'.get_string('markallread', 'forum').'" /></a>';
                 }
                 echo '</th>';
             }
@@ -4930,7 +5396,7 @@ function forum_print_latest_discussions($course, $forum, $maxdiscussions=-1, $di
             }
         }
 
-        if (!empty($USER->id)) {
+        if (isloggedin()) {
             $ownpost = ($discussion->userid == $USER->id);
         } else {
             $ownpost=false;
@@ -4986,32 +5452,44 @@ function forum_print_latest_discussions($course, $forum, $maxdiscussions=-1, $di
     }
 
     if ($page != -1) { ///Show the paging bar
-        print_paging_bar($numdiscussions, $page, $perpage, "view.php?f=$forum->id&amp;");
+        echo $OUTPUT->paging_bar($numdiscussions, $page, $perpage, "view.php?f=$forum->id");
     }
 }
 
 
 /**
+ * Prints a forum discussion
  *
+ * @uses CONTEXT_MODULE
+ * @uses FORUM_MODE_FLATNEWEST
+ * @uses FORUM_MODE_FLATOLDEST
+ * @uses FORUM_MODE_THREADED
+ * @uses FORUM_MODE_NESTED
+ * @param stdClass $course
+ * @param stdClass $cm
+ * @param stdClass $forum
+ * @param stdClass $discussion
+ * @param stdClass $post
+ * @param int $mode
+ * @param mixed $canreply
+ * @param bool $canrate
  */
 function forum_print_discussion($course, $cm, $forum, $discussion, $post, $mode, $canreply=NULL, $canrate=false) {
-
     global $USER, $CFG;
 
-    if (!empty($USER->id)) {
-        $ownpost = ($USER->id == $post->userid);
-    } else {
-        $ownpost = false;
-    }
-    if ($canreply === NULL) {
+    require_once($CFG->dirroot.'/rating/lib.php');
+
+    $ownpost = (isloggedin() && $USER->id == $post->userid);
+
         $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
+    if ($canreply === NULL) {
         $reply = forum_user_can_post($forum, $discussion, $USER, $cm, $course, $modcontext);
     } else {
         $reply = $canreply;
     }
 
     // $cm holds general cache for forum functions
-    $cm->cache = new object();
+    $cm->cache = new stdClass;
     $cm->cache->groups      = groups_get_all_groups($course->id, 0, $cm->groupingid);
     $cm->cache->usersgroups = array();
 
@@ -5043,43 +5521,28 @@ function forum_print_discussion($course, $cm, $forum, $discussion, $post, $mode,
         unset($postersgroups);
     }
 
-    $ratings = NULL;
-    $ratingsmenuused = false;
-    $ratingsformused = false;
-    if ($forum->assessed and isloggedin()) {
-        if ($scale = make_grades_menu($forum->scale)) {
-            $ratings =new object();
-            $ratings->scale = $scale;
-            $ratings->assesstimestart = $forum->assesstimestart;
-            $ratings->assesstimefinish = $forum->assesstimefinish;
-            $ratings->allow = $canrate;
-
-            if ($ratings->allow) {
-                echo '<form id="form" method="post" action="rate.php">';
-                echo '<div class="ratingform">';
-                echo '<input type="hidden" name="forumid" value="'.$forum->id.'" />';
-                echo '<input type="hidden" name="sesskey" value="'.sesskey().'" />';
-                $ratingsformused = true;
+    //load ratings
+    if ($forum->assessed != RATING_AGGREGATE_NONE) {
+        $ratingoptions = new stdClass;
+        $ratingoptions->context = $modcontext;
+        $ratingoptions->component = 'mod_forum';
+        $ratingoptions->ratingarea = 'post';
+        $ratingoptions->items = $posts;
+        $ratingoptions->aggregate = $forum->assessed;//the aggregation method
+        $ratingoptions->scaleid = $forum->scale;
+        $ratingoptions->userid = $USER->id;
+        if ($forum->type == 'single' or !$discussion->id) {
+            $ratingoptions->returnurl = "$CFG->wwwroot/mod/forum/view.php?id=$cm->id";
+        } else {
+            $ratingoptions->returnurl = "$CFG->wwwroot/mod/forum/discuss.php?d=$discussion->id";
             }
+        $ratingoptions->assesstimestart = $forum->assesstimestart;
+        $ratingoptions->assesstimefinish = $forum->assesstimefinish;
 
-            // preload all ratings - one query only and minimal memory
-            $cm->cache->ratings = array();
-            $cm->cache->myratings = array();
-            if ($postratings = forum_get_all_discussion_ratings($discussion)) {
-                foreach ($postratings as $pr) {
-                    if (!isset($cm->cache->ratings[$pr->postid])) {
-                        $cm->cache->ratings[$pr->postid] = array();
-                    }
-                    $cm->cache->ratings[$pr->postid][$pr->id] = $pr->rating;
-                    if ($pr->userid == $USER->id) {
-                        $cm->cache->myratings[$pr->postid] = $pr->rating;
-                    }
-                }
-                unset($postratings);
-            }
+        $rm = new rating_manager();
+        $posts = $rm->get_ratings($ratingoptions);
         }
 
-    }
 
     $post->forum = $forum->id;   // Add the forum id to the post object, later used by forum_print_post
     $post->forumtype = $forum->type;
@@ -5088,66 +5551,46 @@ function forum_print_discussion($course, $cm, $forum, $discussion, $post, $mode,
 
     $postread = !empty($post->postread);
 
-    if (forum_print_post($post, $discussion, $forum, $cm, $course, $ownpost, $reply, false, $ratings,
-                         '', '', $postread, true, $forumtracked)) {
-        $ratingsmenuused = true;
-    }
+    forum_print_post($post, $discussion, $forum, $cm, $course, $ownpost, $reply, false,
+                         '', '', $postread, true, $forumtracked);
 
     switch ($mode) {
         case FORUM_MODE_FLATOLDEST :
         case FORUM_MODE_FLATNEWEST :
         default:
-            if (forum_print_posts_flat($course, $cm, $forum, $discussion, $post, $mode, $ratings, $reply, $forumtracked, $posts)) {
-                $ratingsmenuused = true;
-            }
+            forum_print_posts_flat($course, $cm, $forum, $discussion, $post, $mode, $reply, $forumtracked, $posts);
             break;
 
         case FORUM_MODE_THREADED :
-            if (forum_print_posts_threaded($course, $cm, $forum, $discussion, $post, 0, $ratings, $reply, $forumtracked, $posts)) {
-                $ratingsmenuused = true;
-            }
+            forum_print_posts_threaded($course, $cm, $forum, $discussion, $post, 0, $reply, $forumtracked, $posts);
             break;
 
         case FORUM_MODE_NESTED :
-            if (forum_print_posts_nested($course, $cm, $forum, $discussion, $post, $ratings, $reply, $forumtracked, $posts)) {
-                $ratingsmenuused = true;
-            }
+            forum_print_posts_nested($course, $cm, $forum, $discussion, $post, $reply, $forumtracked, $posts);
             break;
     }
-
-    if ($ratingsformused) {
-        if ($ratingsmenuused) {
-            echo '<div class="ratingsubmit">';
-            echo '<input type="submit" id="forumpostratingsubmit" value="'.get_string('sendinratings', 'forum').'" />';
-            if (ajaxenabled() && !empty($CFG->forum_ajaxrating)) { /// AJAX enabled, standard submission form
-                $rate_ajax_config_settings = array("pixpath"=>$CFG->pixpath, "wwwroot"=>$CFG->wwwroot, "sesskey"=>sesskey());
-                echo "<script type=\"text/javascript\">//<![CDATA[\n".
-                     "var rate_ajax_config = " . json_encode($rate_ajax_config_settings) . ";\n".
-                     "init_rate_ajax();\n".
-                     "//]]></script>\n";
-            }
-            if ($forum->scale < 0) {
-                if ($scale = get_record("scale", "id", abs($forum->scale))) {
-                    print_scale_menu_helpbutton($course->id, $scale );
-                }
-            }
-            echo '</div>';
-        }
-
-        echo '</div>';
-        echo '</form>';
-    }
 }
 
 
 /**
- *
+ * @global object
+ * @global object
+ * @uses FORUM_MODE_FLATNEWEST
+ * @param object $course
+ * @param object $cm
+ * @param object $forum
+ * @param object $discussion
+ * @param object $post
+ * @param object $mode
+ * @param bool $reply
+ * @param bool $forumtracked
+ * @param array $posts
+ * @return void
  */
-function forum_print_posts_flat($course, &$cm, $forum, $discussion, $post, $mode, $ratings, $reply, $forumtracked, $posts) {
+function forum_print_posts_flat($course, &$cm, $forum, $discussion, $post, $mode, $reply, $forumtracked, $posts) {
     global $USER, $CFG;
 
     $link  = false;
-    $ratingsmenuused = false;
 
     if ($mode == FORUM_MODE_FLATNEWEST) {
         $sort = "ORDER BY created DESC";
@@ -5164,24 +5607,23 @@ function forum_print_posts_flat($course, &$cm, $forum, $discussion, $post, $mode
 
         $postread = !empty($post->postread);
 
-        if (forum_print_post($post, $discussion, $forum, $cm, $course, $ownpost, $reply, $link, $ratings,
-                             '', '', $postread, true, $forumtracked)) {
-            $ratingsmenuused = true;
-        }
+        forum_print_post($post, $discussion, $forum, $cm, $course, $ownpost, $reply, $link,
+                             '', '', $postread, true, $forumtracked);
     }
-
-    return $ratingsmenuused;
 }
 
-
 /**
- * TODO document
+ * @todo Document this function
+ *
+ * @global object
+ * @global object
+ * @uses CONTEXT_MODULE
+ * @return void
  */
-function forum_print_posts_threaded($course, &$cm, $forum, $discussion, $parent, $depth, $ratings, $reply, $forumtracked, $posts) {
+function forum_print_posts_threaded($course, &$cm, $forum, $discussion, $parent, $depth, $reply, $forumtracked, $posts) {
     global $USER, $CFG;
 
     $link  = false;
-    $ratingsmenuused = false;
 
     if (!empty($posts[$parent->id]->children)) {
         $posts = $posts[$parent->id]->children;
@@ -5198,16 +5640,14 @@ function forum_print_posts_threaded($course, &$cm, $forum, $discussion, $parent,
 
                 $postread = !empty($post->postread);
 
-                if (forum_print_post($post, $discussion, $forum, $cm, $course, $ownpost, $reply, $link, $ratings,
-                                     '', '', $postread, true, $forumtracked)) {
-                    $ratingsmenuused = true;
-                }
+                forum_print_post($post, $discussion, $forum, $cm, $course, $ownpost, $reply, $link,
+                                     '', '', $postread, true, $forumtracked);
             } else {
                 if (!forum_user_can_see_post($forum, $discussion, $post, NULL, $cm)) {
                     echo "</div>\n";
                     continue;
                 }
-                $by = new object();
+                $by = new stdClass();
                 $by->name = fullname($post, $canviewfullnames);
                 $by->date = userdate($post->modified);
 
@@ -5226,23 +5666,22 @@ function forum_print_posts_threaded($course, &$cm, $forum, $discussion, $parent,
                 echo "</span>";
             }
 
-            if (forum_print_posts_threaded($course, $cm, $forum, $discussion, $post, $depth-1, $ratings, $reply, $forumtracked, $posts)) {
-                $ratingsmenuused = true;
-            }
+            forum_print_posts_threaded($course, $cm, $forum, $discussion, $post, $depth-1, $reply, $forumtracked, $posts);
             echo "</div>\n";
         }
     }
-    return $ratingsmenuused;
 }
 
 /**
- *
+ * @todo Document this function
+ * @global object
+ * @global object
+ * @return void
  */
-function forum_print_posts_nested($course, &$cm, $forum, $discussion, $parent, $ratings, $reply, $forumtracked, $posts) {
+function forum_print_posts_nested($course, &$cm, $forum, $discussion, $parent, $reply, $forumtracked, $posts) {
     global $USER, $CFG;
 
     $link  = false;
-    $ratingsmenuused = false;
 
     if (!empty($posts[$parent->id]->children)) {
         $posts = $posts[$parent->id]->children;
@@ -5250,7 +5689,7 @@ function forum_print_posts_nested($course, &$cm, $forum, $discussion, $parent, $
         foreach ($posts as $post) {
 
             echo '<div class="indent">';
-            if (empty($USER->id)) {
+            if (!isloggedin()) {
                 $ownpost = false;
             } else {
                 $ownpost = ($USER->id == $post->userid);
@@ -5259,60 +5698,64 @@ function forum_print_posts_nested($course, &$cm, $forum, $discussion, $parent, $
             $post->subject = format_string($post->subject);
             $postread = !empty($post->postread);
 
-            if (forum_print_post($post, $discussion, $forum, $cm, $course, $ownpost, $reply, $link, $ratings,
-                                 '', '', $postread, true, $forumtracked)) {
-                $ratingsmenuused = true;
-            }
-            if (forum_print_posts_nested($course, $cm, $forum, $discussion, $post, $ratings, $reply, $forumtracked, $posts)) {
-                $ratingsmenuused = true;
-            }
+            forum_print_post($post, $discussion, $forum, $cm, $course, $ownpost, $reply, $link,
+                                 '', '', $postread, true, $forumtracked);
+            forum_print_posts_nested($course, $cm, $forum, $discussion, $post, $reply, $forumtracked, $posts);
             echo "</div>\n";
         }
     }
-    return $ratingsmenuused;
 }
 
 /**
  * Returns all forum posts since a given time in specified forum.
+ *
+ * @todo Document this functions args
+ * @global object
+ * @global object
+ * @global object
+ * @global object
  */
 function forum_get_recent_mod_activity(&$activities, &$index, $timestart, $courseid, $cmid, $userid=0, $groupid=0)  {
-    global $CFG, $COURSE, $USER;
+    global $CFG, $COURSE, $USER, $DB;
 
     if ($COURSE->id == $courseid) {
         $course = $COURSE;
     } else {
-        $course = get_record('course', 'id', $courseid);
+        $course = $DB->get_record('course', array('id' => $courseid));
     }
 
     $modinfo =& get_fast_modinfo($course);
 
     $cm = $modinfo->cms[$cmid];
+    $params = array($timestart, $cm->instance);
 
     if ($userid) {
-        $userselect = "AND u.id = $userid";
+        $userselect = "AND u.id = ?";
+        $params[] = $userid;
     } else {
         $userselect = "";
     }
 
     if ($groupid) {
-        $groupselect = "AND gm.groupid = $groupid";
-        $groupjoin   = "JOIN {$CFG->prefix}groups_members gm ON  gm.userid=u.id";
+        $groupselect = "AND gm.groupid = ?";
+        $groupjoin   = "JOIN {groups_members} gm ON  gm.userid=u.id";
+        $params[] = $groupid;
     } else {
         $groupselect = "";
         $groupjoin   = "";
     }
 
-    if (!$posts = get_records_sql("SELECT p.*, f.type AS forumtype, d.forum, d.groupid,
+    if (!$posts = $DB->get_records_sql("SELECT p.*, f.type AS forumtype, d.forum, d.groupid,
                                           d.timestart, d.timeend, d.userid AS duserid,
-                                          u.firstname, u.lastname, u.email, u.picture, u.imagealt
-                                     FROM {$CFG->prefix}forum_posts p
-                                          JOIN {$CFG->prefix}forum_discussions d ON d.id = p.discussion
-                                          JOIN {$CFG->prefix}forum f             ON f.id = d.forum
-                                          JOIN {$CFG->prefix}user u              ON u.id = p.userid
+                                              u.firstname, u.lastname, u.email, u.picture, u.imagealt, u.email
+                                         FROM {forum_posts} p
+                                              JOIN {forum_discussions} d ON d.id = p.discussion
+                                              JOIN {forum} f             ON f.id = d.forum
+                                              JOIN {user} u              ON u.id = p.userid
                                           $groupjoin
-                                    WHERE p.created > $timestart AND f.id = $cm->instance
+                                        WHERE p.created > ? AND f.id = ?
                                           $userselect $groupselect
-                                 ORDER BY p.id ASC")) { // order by initial posting date
+                                     ORDER BY p.id ASC", $params)) { // order by initial posting date
          return;
     }
 
@@ -5361,7 +5804,7 @@ function forum_get_recent_mod_activity(&$activities, &$index, $timestart, $cours
     $aname = format_string($cm->name,true);
 
     foreach ($printposts as $post) {
-        $tmpactivity = new object();
+        $tmpactivity = new stdClass();
 
         $tmpactivity->type         = 'forum';
         $tmpactivity->cmid         = $cm->id;
@@ -5369,13 +5812,13 @@ function forum_get_recent_mod_activity(&$activities, &$index, $timestart, $cours
         $tmpactivity->sectionnum   = $cm->sectionnum;
         $tmpactivity->timestamp    = $post->modified;
 
-        $tmpactivity->content = new object();
+        $tmpactivity->content = new stdClass();
         $tmpactivity->content->id         = $post->id;
         $tmpactivity->content->discussion = $post->discussion;
         $tmpactivity->content->subject    = format_string($post->subject);
         $tmpactivity->content->parent     = $post->parent;
 
-        $tmpactivity->user = new object();
+        $tmpactivity->user = new stdClass();
         $tmpactivity->user->id        = $post->userid;
         $tmpactivity->user->firstname = $post->firstname;
         $tmpactivity->user->lastname  = $post->lastname;
@@ -5390,10 +5833,11 @@ function forum_get_recent_mod_activity(&$activities, &$index, $timestart, $cours
 }
 
 /**
- *
+ * @todo Document this function
+ * @global object
  */
 function forum_print_recent_mod_activity($activity, $courseid, $detail, $modnames, $viewfullnames) {
-    global $CFG;
+    global $CFG, $OUTPUT;
 
     if ($activity->content->parent) {
         $class = 'reply';
@@ -5404,13 +5848,13 @@ function forum_print_recent_mod_activity($activity, $courseid, $detail, $modname
     echo '<table border="0" cellpadding="3" cellspacing="0" class="forum-recent">';
 
     echo "<tr><td class=\"userpicture\" valign=\"top\">";
-    print_user_picture($activity->user, $courseid);
+    echo $OUTPUT->user_picture($activity->user, array('courseid'=>$courseid));
     echo "</td><td class=\"$class\">";
 
     echo '<div class="title">';
     if ($detail) {
         $aname = s($activity->name);
-        echo "<img src=\"$CFG->modpixpath/$activity->type/icon.gif\" ".
+        echo "<img src=\"" . $OUTPUT->pix_url('icon', $activity->type) . "\" ".
              "class=\"icon\" alt=\"{$aname}\" />";
     }
     echo "<a href=\"$CFG->wwwroot/mod/forum/discuss.php?d={$activity->content->discussion}"
@@ -5430,10 +5874,16 @@ function forum_print_recent_mod_activity($activity, $courseid, $detail, $modname
 /**
  * recursively sets the discussion field to $discussionid on $postid and all its children
  * used when pruning a post
+ *
+ * @global object
+ * @param int $postid
+ * @param int $discussionid
+ * @return bool
  */
 function forum_change_discussionid($postid, $discussionid) {
-    set_field('forum_posts', 'discussion', $discussionid, 'id', $postid);
-    if ($posts = get_records('forum_posts', 'parent', $postid)) {
+    global $DB;
+    $DB->set_field('forum_posts', 'discussion', $discussionid, array('id' => $postid));
+    if ($posts = $DB->get_records('forum_posts', array('parent' => $postid))) {
         foreach ($posts as $post) {
             forum_change_discussionid($post->id, $discussionid);
         }
@@ -5443,6 +5893,12 @@ function forum_change_discussionid($postid, $discussionid) {
 
 /**
  * Prints the editing button on subscribers page
+ *
+ * @global object
+ * @global object
+ * @param int $courseid
+ * @param int $forumid
+ * @return string
  */
 function forum_update_subscriptions_button($courseid, $forumid) {
     global $CFG, $USER;
@@ -5455,60 +5911,53 @@ function forum_update_subscriptions_button($courseid, $forumid) {
         $edit = "on";
     }
 
-    return "<form $CFG->frametarget method=\"get\" action=\"$CFG->wwwroot/mod/forum/subscribers.php\">".
+    return "<form method=\"get\" action=\"$CFG->wwwroot/mod/forum/subscribers.php\">".
            "<input type=\"hidden\" name=\"id\" value=\"$forumid\" />".
            "<input type=\"hidden\" name=\"edit\" value=\"$edit\" />".
            "<input type=\"submit\" value=\"$string\" /></form>";
 }
 
-/*
- * This function gets run whenever a role is assigned to a user in a context
+/**
+ * This function gets run whenever user is enrolled into course
  *
- * @param integer $userid
- * @param object $context
- * @return bool
+ * @param object $cp
+ * @return void
  */
-function forum_role_assign($userid, $context, $roleid) {
-    // check to see if this role comes with mod/forum:initialsubscriptions
-    $cap = role_context_capabilities($roleid, $context, 'mod/forum:initialsubscriptions');
-    $cap1 = role_context_capabilities($roleid, $context, 'moodle/course:view');
-    // we are checking the role because has_capability() will pull this capability out
-    // from other roles this user might have and resolve them, which is no good
-    // the role needs course view to
-    if (isset($cap['mod/forum:initialsubscriptions']) && $cap['mod/forum:initialsubscriptions'] == CAP_ALLOW &&
-        isset($cap1['moodle/course:view']) && $cap1['moodle/course:view'] == CAP_ALLOW) {
-        return forum_add_user_default_subscriptions($userid, $context);
-    } else {
-        // MDL-8981, do not subscribe to forum
-        return true;
-    }
+function forum_user_enrolled($cp) {
+    $context = get_context_instance(CONTEXT_COURSE, $cp->courseid);
+    forum_add_user_default_subscriptions($cp->userid, $context);
 }
 
 
 /**
- * This function gets run whenever a role is assigned to a user in a context
+ * This function gets run whenever user is unenrolled from course
  *
- * @param integer $userid
- * @param object $context
- * @return bool
+ * @param object $cp
+ * @return void
  */
-function forum_role_unassign($userid, $context) {
-    if (empty($context->contextlevel)) {
-        return false;
+function forum_user_unenrolled($cp) {
+    if ($cp->lastenrol) {
+        $context = get_context_instance(CONTEXT_COURSE, $cp->courseid);
+        forum_remove_user_subscriptions($cp->userid, $context);
+        forum_remove_user_tracking($cp->userid, $context);
     }
-
-    forum_remove_user_subscriptions($userid, $context);
-    forum_remove_user_tracking($userid, $context);
-
-    return true;
 }
 
 
 /**
  * Add subscriptions for new users
+ *
+ * @global object
+ * @uses CONTEXT_SYSTEM
+ * @uses CONTEXT_COURSE
+ * @uses CONTEXT_COURSECAT
+ * @uses FORUM_INITIALSUBSCRIBE
+ * @param int $userid
+ * @param object $context
+ * @return bool
  */
 function forum_add_user_default_subscriptions($userid, $context) {
-
+    global $DB;
     if (empty($context->contextlevel)) {
         return false;
     }
@@ -5516,22 +5965,22 @@ function forum_add_user_default_subscriptions($userid, $context) {
     switch ($context->contextlevel) {
 
         case CONTEXT_SYSTEM:   // For the whole site
-             $rs = get_recordset('course', '', '', '', 'id');
-             while ($course = rs_fetch_next_record($rs)) {
+             $rs = $DB->get_recordset('course',null,'','id');
+             foreach ($rs as $course) {
                  $subcontext = get_context_instance(CONTEXT_COURSE, $course->id);
                  forum_add_user_default_subscriptions($userid, $subcontext);
              }
-             rs_close($rs);
+             $rs->close();
              break;
 
         case CONTEXT_COURSECAT:   // For a whole category
-            $rs = get_recordset('course', 'category', $context->instanceid, '', 'id');
-            while ($course = rs_fetch_next_record($rs)) {
+             $rs = $DB->get_recordset('course', array('category' => $context->instanceid),'','id');
+             foreach ($rs as $course) {
                 $subcontext = get_context_instance(CONTEXT_COURSE, $course->id);
                 forum_add_user_default_subscriptions($userid, $subcontext);
             }
-            rs_close($rs);
-             if ($categories = get_records('course_categories', 'parent', $context->instanceid)) {
+             $rs->close();
+             if ($categories = $DB->get_records('course_categories', array('parent' => $context->instanceid))) {
                  foreach ($categories as $category) {
                      $subcontext = get_context_instance(CONTEXT_COURSECAT, $category->id);
                      forum_add_user_default_subscriptions($userid, $subcontext);
@@ -5541,7 +5990,8 @@ function forum_add_user_default_subscriptions($userid, $context) {
 
 
         case CONTEXT_COURSE:   // For a whole course
-             if ($course = get_record('course', 'id', $context->instanceid)) {
+             if (is_enrolled($context, $userid)) {
+                if ($course = $DB->get_record('course', array('id' => $context->instanceid))) {
                  if ($forums = get_all_instances_in_course('forum', $course, $userid, false)) {
                      foreach ($forums as $forum) {
                          if ($forum->forcesubscribe != FORUM_INITIALSUBSCRIBE) {
@@ -5555,11 +6005,13 @@ function forum_add_user_default_subscriptions($userid, $context) {
                      }
                  }
              }
+             }
              break;
 
         case CONTEXT_MODULE:   // Just one forum
+            if (has_capability('mod/forum:initialsubscriptions', $context, $userid)) {
              if ($cm = get_coursemodule_from_id('forum', $context->instanceid)) {
-                 if ($forum = get_record('forum', 'id', $cm->instance)) {
+                     if ($forum = $DB->get_record('forum', array('id' => $cm->instance))) {
                      if ($forum->forcesubscribe != FORUM_INITIALSUBSCRIBE) {
                          continue;
                      }
@@ -5568,6 +6020,7 @@ function forum_add_user_default_subscriptions($userid, $context) {
                      }
                  }
              }
+            }
              break;
     }
 
@@ -5577,10 +6030,20 @@ function forum_add_user_default_subscriptions($userid, $context) {
 
 /**
  * Remove subscriptions for a user in a context
+ *
+ * @global object
+ * @global object
+ * @uses CONTEXT_SYSTEM
+ * @uses CONTEXT_COURSECAT
+ * @uses CONTEXT_COURSE
+ * @uses CONTEXT_MODULE
+ * @param int $userid
+ * @param object $context
+ * @return bool
  */
 function forum_remove_user_subscriptions($userid, $context) {
 
-    global $CFG;
+    global $CFG, $DB;
 
     if (empty($context->contextlevel)) {
         return false;
@@ -5589,14 +6052,13 @@ function forum_remove_user_subscriptions($userid, $context) {
     switch ($context->contextlevel) {
 
         case CONTEXT_SYSTEM:   // For the whole site
-            //if ($courses = get_my_courses($userid)) {
             // find all courses in which this user has a forum subscription
-            if ($courses = get_records_sql("SELECT c.id
-                                              FROM {$CFG->prefix}course c,
-                                                   {$CFG->prefix}forum_subscriptions fs,
-                                                   {$CFG->prefix}forum f
-                                                   WHERE c.id = f.course AND f.id = fs.forum AND fs.userid = $userid
-                                                   GROUP BY c.id")) {
+            if ($courses = $DB->get_records_sql("SELECT c.id
+                                                  FROM {course} c,
+                                                       {forum_subscriptions} fs,
+                                                       {forum} f
+                                                       WHERE c.id = f.course AND f.id = fs.forum AND fs.userid = ?
+                                                       GROUP BY c.id", array($userid))) {
 
                 foreach ($courses as $course) {
                     $subcontext = get_context_instance(CONTEXT_COURSE, $course->id);
@@ -5606,13 +6068,13 @@ function forum_remove_user_subscriptions($userid, $context) {
             break;
 
         case CONTEXT_COURSECAT:   // For a whole category
-             if ($courses = get_records('course', 'category', $context->instanceid, '', 'id')) {
+             if ($courses = $DB->get_records('course', array('category' => $context->instanceid), '', 'id')) {
                  foreach ($courses as $course) {
                      $subcontext = get_context_instance(CONTEXT_COURSE, $course->id);
                      forum_remove_user_subscriptions($userid, $subcontext);
                  }
              }
-             if ($categories = get_records('course_categories', 'parent', $context->instanceid, '', 'id')) {
+             if ($categories = $DB->get_records('course_categories', array('parent' => $context->instanceid), '', 'id')) {
                  foreach ($categories as $category) {
                      $subcontext = get_context_instance(CONTEXT_COURSECAT, $category->id);
                      forum_remove_user_subscriptions($userid, $subcontext);
@@ -5621,16 +6083,17 @@ function forum_remove_user_subscriptions($userid, $context) {
              break;
 
         case CONTEXT_COURSE:   // For a whole course
-             if ($course = get_record('course', 'id', $context->instanceid, '', '', '', '', 'id')) {
+            if (!is_enrolled($context, $userid)) {
+                 if ($course = $DB->get_record('course', array('id' => $context->instanceid), 'id')) {
                 // find all forums in which this user has a subscription, and its coursemodule id
-                if ($forums = get_records_sql("SELECT f.id, cm.id as coursemodule
-                                                 FROM {$CFG->prefix}forum f,
-                                                      {$CFG->prefix}modules m,
-                                                      {$CFG->prefix}course_modules cm,
-                                                      {$CFG->prefix}forum_subscriptions fs
-                                                WHERE fs.userid = $userid AND f.course = $context->instanceid
+                    if ($forums = $DB->get_records_sql("SELECT f.id, cm.id as coursemodule
+                                                         FROM {forum} f,
+                                                              {modules} m,
+                                                              {course_modules} cm,
+                                                              {forum_subscriptions} fs
+                                                        WHERE fs.userid = ? AND f.course = ?
                                                       AND fs.forum = f.id AND cm.instance = f.id
-                                                      AND cm.module = m.id AND m.name = 'forum'")) {
+                                                              AND cm.module = m.id AND m.name = 'forum'", array($userid, $context->instanceid))) {
 
                      foreach ($forums as $forum) {
                          if ($modcontext = get_context_instance(CONTEXT_MODULE, $forum->coursemodule)) {
@@ -5641,16 +6104,19 @@ function forum_remove_user_subscriptions($userid, $context) {
                      }
                  }
              }
+            }
              break;
 
         case CONTEXT_MODULE:   // Just one forum
+            if (!is_enrolled($context, $userid)) {
              if ($cm = get_coursemodule_from_id('forum', $context->instanceid)) {
-                 if ($forum = get_record('forum', 'id', $cm->instance)) {
+                     if ($forum = $DB->get_record('forum', array('id' => $cm->instance))) {
                      if (!has_capability('mod/forum:viewdiscussion', $context, $userid)) {
                          forum_unsubscribe($userid, $forum->id);
                      }
                  }
              }
+            }
              break;
     }
 
@@ -5661,10 +6127,20 @@ function forum_remove_user_subscriptions($userid, $context) {
 
 /**
  * Remove post tracking for a user in a context
+ *
+ * @global object
+ * @global object
+ * @uses CONTEXT_SYSTEM
+ * @uses CONTEXT_COURSECAT
+ * @uses CONTEXT_COURSE
+ * @uses CONTEXT_MODULE
+ * @param int $userid
+ * @param object $context
+ * @return bool
  */
 function forum_remove_user_tracking($userid, $context) {
 
-    global $CFG;
+    global $CFG, $DB;
 
     if (empty($context->contextlevel)) {
         return false;
@@ -5675,20 +6151,20 @@ function forum_remove_user_tracking($userid, $context) {
         case CONTEXT_SYSTEM:   // For the whole site
             // find all courses in which this user has tracking info
             $allcourses = array();
-            if ($courses = get_records_sql("SELECT c.id
-                                              FROM {$CFG->prefix}course c,
-                                                   {$CFG->prefix}forum_read fr,
-                                                   {$CFG->prefix}forum f
-                                                   WHERE c.id = f.course AND f.id = fr.forumid AND fr.userid = $userid
-                                                   GROUP BY c.id")) {
+            if ($courses = $DB->get_records_sql("SELECT c.id
+                                                  FROM {course} c,
+                                                       {forum_read} fr,
+                                                       {forum} f
+                                                       WHERE c.id = f.course AND f.id = fr.forumid AND fr.userid = ?
+                                                       GROUP BY c.id", array($userid))) {
 
                 $allcourses = $allcourses + $courses;
             }
-            if ($courses = get_records_sql("SELECT c.id
-                                              FROM {$CFG->prefix}course c,
-                                                   {$CFG->prefix}forum_track_prefs ft,
-                                                   {$CFG->prefix}forum f
-                                             WHERE c.id = f.course AND f.id = ft.forumid AND ft.userid = $userid")) {
+            if ($courses = $DB->get_records_sql("SELECT c.id
+                                              FROM {course} c,
+                                                   {forum_track_prefs} ft,
+                                                   {forum} f
+                                             WHERE c.id = f.course AND f.id = ft.forumid AND ft.userid = ?", array($userid))) {
 
                 $allcourses = $allcourses + $courses;
             }
@@ -5699,13 +6175,13 @@ function forum_remove_user_tracking($userid, $context) {
             break;
 
         case CONTEXT_COURSECAT:   // For a whole category
-             if ($courses = get_records('course', 'category', $context->instanceid, '', 'id')) {
+             if ($courses = $DB->get_records('course', array('category' => $context->instanceid), '', 'id')) {
                  foreach ($courses as $course) {
                      $subcontext = get_context_instance(CONTEXT_COURSE, $course->id);
                      forum_remove_user_tracking($userid, $subcontext);
                  }
              }
-             if ($categories = get_records('course_categories', 'parent', $context->instanceid, '', 'id')) {
+             if ($categories = $DB->get_records('course_categories', array('parent' => $context->instanceid), '', 'id')) {
                  foreach ($categories as $category) {
                      $subcontext = get_context_instance(CONTEXT_COURSECAT, $category->id);
                      forum_remove_user_tracking($userid, $subcontext);
@@ -5714,16 +6190,17 @@ function forum_remove_user_tracking($userid, $context) {
              break;
 
         case CONTEXT_COURSE:   // For a whole course
-             if ($course = get_record('course', 'id', $context->instanceid, '', '', '', '', 'id')) {
+            if (!is_enrolled($context, $userid)) {
+                 if ($course = $DB->get_record('course', array('id' => $context->instanceid), 'id')) {
                 // find all forums in which this user has reading tracked
-                if ($forums = get_records_sql("SELECT f.id, cm.id as coursemodule
-                                                 FROM {$CFG->prefix}forum f,
-                                                      {$CFG->prefix}modules m,
-                                                      {$CFG->prefix}course_modules cm,
-                                                      {$CFG->prefix}forum_read fr
-                                                WHERE fr.userid = $userid AND f.course = $context->instanceid
+                    if ($forums = $DB->get_records_sql("SELECT DISTINCT f.id, cm.id as coursemodule
+                                                     FROM {forum} f,
+                                                          {modules} m,
+                                                          {course_modules} cm,
+                                                          {forum_read} fr
+                                                    WHERE fr.userid = ? AND f.course = ?
                                                       AND fr.forumid = f.id AND cm.instance = f.id
-                                                      AND cm.module = m.id AND m.name = 'forum'")) {
+                                                          AND cm.module = m.id AND m.name = 'forum'", array($userid, $context->instanceid))) {
 
                      foreach ($forums as $forum) {
                          if ($modcontext = get_context_instance(CONTEXT_MODULE, $forum->coursemodule)) {
@@ -5735,19 +6212,20 @@ function forum_remove_user_tracking($userid, $context) {
                  }
 
                 // find all forums in which this user has a disabled tracking
-                if ($forums = get_records_sql("SELECT f.id, cm.id as coursemodule
-                                                 FROM {$CFG->prefix}forum f,
-                                                      {$CFG->prefix}modules m,
-                                                      {$CFG->prefix}course_modules cm,
-                                                      {$CFG->prefix}forum_track_prefs ft
-                                                WHERE ft.userid = $userid AND f.course = $context->instanceid
+                    if ($forums = $DB->get_records_sql("SELECT f.id, cm.id as coursemodule
+                                                     FROM {forum} f,
+                                                          {modules} m,
+                                                          {course_modules} cm,
+                                                          {forum_track_prefs} ft
+                                                    WHERE ft.userid = ? AND f.course = ?
                                                       AND ft.forumid = f.id AND cm.instance = f.id
-                                                      AND cm.module = m.id AND m.name = 'forum'")) {
+                                                          AND cm.module = m.id AND m.name = 'forum'", array($userid, $context->instanceid))) {
 
                      foreach ($forums as $forum) {
                          if ($modcontext = get_context_instance(CONTEXT_MODULE, $forum->coursemodule)) {
                              if (!has_capability('mod/forum:viewdiscussion', $modcontext, $userid)) {
-                                delete_records('forum_track_prefs', 'userid', $userid, 'forumid', $forum->id);
+                                    $DB->delete_records('forum_track_prefs', array('userid' => $userid, 'forumid' => $forum->id));
+                                 }
                              }
                          }
                      }
@@ -5756,14 +6234,16 @@ function forum_remove_user_tracking($userid, $context) {
              break;
 
         case CONTEXT_MODULE:   // Just one forum
+            if (!is_enrolled($context, $userid)) {
              if ($cm = get_coursemodule_from_id('forum', $context->instanceid)) {
-                 if ($forum = get_record('forum', 'id', $cm->instance)) {
+                     if ($forum = $DB->get_record('forum', array('id' => $cm->instance))) {
                      if (!has_capability('mod/forum:viewdiscussion', $context, $userid)) {
-                        delete_records('forum_track_prefs', 'userid', $userid, 'forumid', $forum->id);
+                            $DB->delete_records('forum_track_prefs', array('userid' => $userid, 'forumid' => $forum->id));
                         forum_tp_delete_read_records($userid, -1, -1, $forum->id);
                      }
                  }
              }
+            }
              break;
     }
 
@@ -5772,12 +6252,15 @@ function forum_remove_user_tracking($userid, $context) {
 
 /**
  * Mark posts as read.
+ *
+ * @global object
+ * @global object
  * @param object $user object
  * @param array $postids array of post ids
  * @return boolean success
  */
 function forum_tp_mark_posts_read($user, $postids) {
-    global $CFG;
+    global $CFG, $DB;
 
     if (!forum_tp_can_track_forums(false, $user)) {
         return true;
@@ -5798,10 +6281,13 @@ function forum_tp_mark_posts_read($user, $postids) {
         return $status;
     }
 
+    list($usql, $params) = $DB->get_in_or_equal($postids);
+    $params[] = $user->id;
+
     $sql = "SELECT id
-              FROM {$CFG->prefix}forum_read
-             WHERE userid = $user->id AND postid IN (".implode(',', $postids).")";
-    if ($existing = get_records_sql($sql)) {
+              FROM {forum_read}
+             WHERE postid $usql AND userid = ?";
+    if ($existing = $DB->get_records_sql($sql, $params)) {
         $existing = array_keys($existing);
     } else {
         $existing = array();
@@ -5810,25 +6296,34 @@ function forum_tp_mark_posts_read($user, $postids) {
     $new = array_diff($postids, $existing);
 
     if ($new) {
-        $sql = "INSERT INTO {$CFG->prefix}forum_read (userid, postid, discussionid, forumid, firstread, lastread)
-
-                SELECT $user->id, p.id, p.discussion, d.forum, $now, $now
-                  FROM {$CFG->prefix}forum_posts p
-                       JOIN {$CFG->prefix}forum_discussions d       ON d.id = p.discussion
-                       JOIN {$CFG->prefix}forum f                   ON f.id = d.forum
-                       LEFT JOIN {$CFG->prefix}forum_track_prefs tf ON (tf.userid = $user->id AND tf.forumid = f.id)
-                 WHERE p.id IN (".implode(',', $new).")
-                       AND p.modified >= $cutoffdate
+        list($usql, $new_params) = $DB->get_in_or_equal($new);
+        $params = array($user->id, $now, $now, $user->id);
+        $params = array_merge($params, $new_params);
+        $params[] = $cutoffdate;
+
+        $sql = "INSERT INTO {forum_read} (userid, postid, discussionid, forumid, firstread, lastread)
+
+                SELECT ?, p.id, p.discussion, d.forum, ?, ?
+                  FROM {forum_posts} p
+                       JOIN {forum_discussions} d       ON d.id = p.discussion
+                       JOIN {forum} f                   ON f.id = d.forum
+                       LEFT JOIN {forum_track_prefs} tf ON (tf.userid = ? AND tf.forumid = f.id)
+                 WHERE p.id $usql
+                       AND p.modified >= ?
                        AND (f.trackingtype = ".FORUM_TRACKING_ON."
                             OR (f.trackingtype = ".FORUM_TRACKING_OPTIONAL." AND tf.id IS NULL))";
-        $status = execute_sql($sql, false) && $status;
+        $status = $DB->execute($sql, $params) && $status;
     }
 
     if ($existing) {
-        $sql = "UPDATE {$CFG->prefix}forum_read
-                   SET lastread = $now
-                 WHERE userid = $user->id AND postid IN (".implode(',', $existing).")";
-        $status = execute_sql($sql, false) && $status;
+        list($usql, $new_params) = $DB->get_in_or_equal($existing);
+        $params = array($now, $user->id);
+        $params = array_merge($params, $new_params);
+
+        $sql = "UPDATE {forum_read}
+                   SET lastread = ?
+                 WHERE userid = ? AND postid $usql";
+        $status = $DB->execute($sql, $params) && $status;
     }
 
     return $status;
@@ -5836,67 +6331,92 @@ function forum_tp_mark_posts_read($user, $postids) {
 
 /**
  * Mark post as read.
+ * @global object
+ * @global object
+ * @param int $userid
+ * @param int $postid
  */
 function forum_tp_add_read_record($userid, $postid) {
-    global $CFG;
+    global $CFG, $DB;
 
     $now = time();
     $cutoffdate = $now - ($CFG->forum_oldpostdays * 24 * 3600);
 
-    if (!record_exists('forum_read', 'userid', $userid, 'postid', $postid)) {
-        $sql = "INSERT INTO {$CFG->prefix}forum_read (userid, postid, discussionid, forumid, firstread, lastread)
+    if (!$DB->record_exists('forum_read', array('userid' => $userid, 'postid' => $postid))) {
+        $sql = "INSERT INTO {forum_read} (userid, postid, discussionid, forumid, firstread, lastread)
 
-                SELECT $userid, p.id, p.discussion, d.forum, $now, $now
-                  FROM {$CFG->prefix}forum_posts p
-                       JOIN {$CFG->prefix}forum_discussions d ON d.id = p.discussion
-                 WHERE p.id = $postid AND p.modified >= $cutoffdate";
-        return execute_sql($sql, false);
+                SELECT ?, p.id, p.discussion, d.forum, ?, ?
+                  FROM {forum_posts} p
+                       JOIN {forum_discussions} d ON d.id = p.discussion
+                 WHERE p.id = ? AND p.modified >= ?";
+        return $DB->execute($sql, array($userid, $now, $now, $postid, $cutoffdate));
 
     } else {
-        $sql = "UPDATE {$CFG->prefix}forum_read
-                   SET lastread = $now
-                 WHERE userid = $userid AND postid = $userid";
-        return execute_sql($sql, false);
+        $sql = "UPDATE {forum_read}
+                   SET lastread = ?
+                 WHERE userid = ? AND postid = ?";
+        return $DB->execute($sql, array($now, $userid, $userid));
     }
 }
 
 /**
  * Returns all records in the 'forum_read' table matching the passed keys, indexed
  * by userid.
+ *
+ * @global object
+ * @param int $userid
+ * @param int $postid
+ * @param int $discussionid
+ * @param int $forumid
+ * @return array
  */
 function forum_tp_get_read_records($userid=-1, $postid=-1, $discussionid=-1, $forumid=-1) {
+    global $DB;
     $select = '';
+    $params = array();
+
     if ($userid > -1) {
         if ($select != '') $select .= ' AND ';
-        $select .= 'userid = \''.$userid.'\'';
+        $select .= 'userid = ?';
+        $params[] = $userid;
     }
     if ($postid > -1) {
         if ($select != '') $select .= ' AND ';
-        $select .= 'postid = \''.$postid.'\'';
+        $select .= 'postid = ?';
+        $params[] = $postid;
     }
     if ($discussionid > -1) {
         if ($select != '') $select .= ' AND ';
-        $select .= 'discussionid = \''.$discussionid.'\'';
+        $select .= 'discussionid = ?';
+        $params[] = $discussionid;
     }
     if ($forumid > -1) {
         if ($select != '') $select .= ' AND ';
-        $select .= 'forumid = \''.$forumid.'\'';
+        $select .= 'forumid = ?';
+        $params[] = $forumid;
     }
 
-    return get_records_select('forum_read', $select);
+    return $DB->get_records_select('forum_read', $select, $params);
 }
 
 /**
  * Returns all read records for the provided user and discussion, indexed by postid.
+ *
+ * @global object
+ * @param inti $userid
+ * @param int $discussionid
  */
 function forum_tp_get_discussion_read_records($userid, $discussionid) {
-    $select = 'userid = \''.$userid.'\' AND discussionid = \''.$discussionid.'\'';
+    global $DB;
+    $select = 'userid = ? AND discussionid = ?';
     $fields = 'postid, firstread, lastread';
-    return get_records_select('forum_read', $select, '', $fields);
+    return $DB->get_records_select('forum_read', $select, array($userid, $discussionid), '', $fields);
 }
 
 /**
  * If its an old post, do nothing. If the record exists, the maintenance will clear it up later.
+ *
+ * @return bool
  */
 function forum_tp_mark_post_read($userid, $post, $forumid) {
     if (!forum_tp_is_post_old($post)) {
@@ -5908,26 +6428,36 @@ function forum_tp_mark_post_read($userid, $post, $forumid) {
 
 /**
  * Marks a whole forum as read, for a given user
+ *
+ * @global object
+ * @global object
+ * @param object $user
+ * @param int $forumid
+ * @param int|bool $groupid
+ * @return bool
  */
 function forum_tp_mark_forum_read($user, $forumid, $groupid=false) {
-    global $CFG;
+    global $CFG, $DB;
 
     $cutoffdate = time() - ($CFG->forum_oldpostdays*24*60*60);
 
     $groupsel = "";
+    $params = array($user->id, $forumid, $cutoffdate);
+
     if ($groupid !== false) {
-        $groupsel = " AND (d.groupid = $groupid OR d.groupid = -1)";
+        $groupsel = " AND (d.groupid = ? OR d.groupid = -1)";
+        $params[] = $groupid;
     }
 
     $sql = "SELECT p.id
-              FROM {$CFG->prefix}forum_posts p
-                   LEFT JOIN {$CFG->prefix}forum_discussions d ON d.id = p.discussion
-                   LEFT JOIN {$CFG->prefix}forum_read r        ON (r.postid = p.id AND r.userid = $user->id)
-             WHERE d.forum = $forumid
-                   AND p.modified >= $cutoffdate AND r.id is NULL
+              FROM {forum_posts} p
+                   LEFT JOIN {forum_discussions} d ON d.id = p.discussion
+                   LEFT JOIN {forum_read} r        ON (r.postid = p.id AND r.userid = ?)
+             WHERE d.forum = ?
+                   AND p.modified >= ? AND r.id is NULL
                    $groupsel";
 
-    if ($posts = get_records_sql($sql)) {
+    if ($posts = $DB->get_records_sql($sql, $params)) {
         $postids = array_keys($posts);
         return forum_tp_mark_posts_read($user, $postids);
     }
@@ -5937,19 +6467,25 @@ function forum_tp_mark_forum_read($user, $forumid, $groupid=false) {
 
 /**
  * Marks a whole discussion as read, for a given user
+ *
+ * @global object
+ * @global object
+ * @param object $user
+ * @param int $discussionid
+ * @return bool
  */
 function forum_tp_mark_discussion_read($user, $discussionid) {
-    global $CFG;
+    global $CFG, $DB;
 
     $cutoffdate = time() - ($CFG->forum_oldpostdays*24*60*60);
 
     $sql = "SELECT p.id
-              FROM {$CFG->prefix}forum_posts p
-                   LEFT JOIN {$CFG->prefix}forum_read r ON (r.postid = p.id AND r.userid = $user->id)
-             WHERE p.discussion = $discussionid
-                   AND p.modified >= $cutoffdate AND r.id is NULL";
+              FROM {forum_posts} p
+                   LEFT JOIN {forum_read} r ON (r.postid = p.id AND r.userid = ?)
+             WHERE p.discussion = ?
+                   AND p.modified >= ? AND r.id is NULL";
 
-    if ($posts = get_records_sql($sql)) {
+    if ($posts = $DB->get_records_sql($sql, array($user->id, $discussionid, $cutoffdate))) {
         $postids = array_keys($posts);
         return forum_tp_mark_posts_read($user, $postids);
     }
@@ -5958,15 +6494,20 @@ function forum_tp_mark_discussion_read($user, $discussionid) {
 }
 
 /**
- *
+ * @global object
+ * @param int $userid
+ * @param object $post
  */
 function forum_tp_is_post_read($userid, $post) {
+    global $DB;
     return (forum_tp_is_post_old($post) ||
-            record_exists('forum_read', 'userid', $userid, 'postid', $post->id));
+            $DB->record_exists('forum_read', array('userid' => $userid, 'postid' => $post->id)));
 }
 
 /**
- *
+ * @global object
+ * @param object $post
+ * @param int $time Defautls to time()
  */
 function forum_tp_is_post_old($post, $time=null) {
     global $CFG;
@@ -5979,52 +6520,70 @@ function forum_tp_is_post_old($post, $time=null) {
 
 /**
  * Returns the count of records for the provided user and discussion.
+ *
+ * @global object
+ * @global object
+ * @param int $userid
+ * @param int $discussionid
+ * @return bool
  */
 function forum_tp_count_discussion_read_records($userid, $discussionid) {
-    global $CFG;
+    global $CFG, $DB;
 
     $cutoffdate = isset($CFG->forum_oldpostdays) ? (time() - ($CFG->forum_oldpostdays*24*60*60)) : 0;
 
     $sql = 'SELECT COUNT(DISTINCT p.id) '.
-           'FROM '.$CFG->prefix.'forum_discussions d '.
-           'LEFT JOIN '.$CFG->prefix.'forum_read r ON d.id = r.discussionid AND r.userid = '.$userid.' '.
-           'LEFT JOIN '.$CFG->prefix.'forum_posts p ON p.discussion = d.id '.
-                'AND (p.modified < '.$cutoffdate.' OR p.id = r.postid) '.
-           'WHERE d.id = '.$discussionid;
+           'FROM {forum_discussions} d '.
+           'LEFT JOIN {forum_read} r ON d.id = r.discussionid AND r.userid = ? '.
+           'LEFT JOIN {forum_posts} p ON p.discussion = d.id '.
+                'AND (p.modified < ? OR p.id = r.postid) '.
+           'WHERE d.id = ? ';
 
-    return (count_records_sql($sql));
+    return ($DB->count_records_sql($sql, array($userid, $cutoffdate, $discussionid)));
 }
 
 /**
  * Returns the count of records for the provided user and discussion.
+ *
+ * @global object
+ * @global object
+ * @param int $userid
+ * @param int $discussionid
+ * @return int
  */
 function forum_tp_count_discussion_unread_posts($userid, $discussionid) {
-    global $CFG;
+    global $CFG, $DB;
 
     $cutoffdate = isset($CFG->forum_oldpostdays) ? (time() - ($CFG->forum_oldpostdays*24*60*60)) : 0;
 
     $sql = 'SELECT COUNT(p.id) '.
-           'FROM '.$CFG->prefix.'forum_posts p '.
-           'LEFT JOIN '.$CFG->prefix.'forum_read r ON r.postid = p.id AND r.userid = '.$userid.' '.
-           'WHERE p.discussion = '.$discussionid.' '.
-                'AND p.modified >= '.$cutoffdate.' AND r.id is NULL';
+           'FROM {forum_posts} p '.
+           'LEFT JOIN {forum_read} r ON r.postid = p.id AND r.userid = ? '.
+           'WHERE p.discussion = ? '.
+                'AND p.modified >= ? AND r.id is NULL';
 
-    return (count_records_sql($sql));
+    return $DB->count_records_sql($sql, array($userid, $cutoffdate, $discussionid));
 }
 
 /**
  * Returns the count of posts for the provided forum and [optionally] group.
+ * @global object
+ * @global object
+ * @param int $forumid
+ * @param int|bool $groupid
+ * @return int
  */
 function forum_tp_count_forum_posts($forumid, $groupid=false) {
-    global $CFG;
-
+    global $CFG, $DB;
+    $params = array($forumid);
     $sql = 'SELECT COUNT(*) '.
-           'FROM '.$CFG->prefix.'forum_posts fp,'.$CFG->prefix.'forum_discussions fd '.
-           'WHERE fd.forum = '.$forumid.' AND fp.discussion = fd.id';
+           'FROM {forum_posts} fp,{forum_discussions} fd '.
+           'WHERE fd.forum = ? AND fp.discussion = fd.id';
     if ($groupid !== false) {
-        $sql .= ' AND (fd.groupid = '.$groupid.' OR fd.groupid = -1)';
+        $sql .= ' AND (fd.groupid = ? OR fd.groupid = -1)';
+        $params[] = $groupid;
     }
-    $count = count_records_sql($sql);
+    $count = $DB->count_records_sql($sql, $params);
 
 
     return $count;
@@ -6032,59 +6591,76 @@ function forum_tp_count_forum_posts($forumid, $groupid=false) {
 
 /**
  * Returns the count of records for the provided user and forum and [optionally] group.
+ * @global object
+ * @global object
+ * @param int $userid
+ * @param int $forumid
+ * @param int|bool $groupid
+ * @return int
  */
 function forum_tp_count_forum_read_records($userid, $forumid, $groupid=false) {
-    global $CFG;
+    global $CFG, $DB;
 
     $cutoffdate = time() - ($CFG->forum_oldpostdays*24*60*60);
 
     $groupsel = '';
+    $params = array($userid, $forumid, $cutoffdate);
     if ($groupid !== false) {
-        $groupsel = "AND (d.groupid = $groupid OR d.groupid = -1)";
+        $groupsel = "AND (d.groupid = ? OR d.groupid = -1)";
+        $params[] = $groupid;
     }
 
     $sql = "SELECT COUNT(p.id)
-              FROM  {$CFG->prefix}forum_posts p
-                    JOIN {$CFG->prefix}forum_discussions d ON d.id = p.discussion
-                    LEFT JOIN {$CFG->prefix}forum_read r   ON (r.postid = p.id AND r.userid= $userid)
-              WHERE d.forum = $forumid
-                    AND (p.modified < $cutoffdate OR (p.modified >= $cutoffdate AND r.id IS NOT NULL))
+              FROM  {forum_posts} p
+                    JOIN {forum_discussions} d ON d.id = p.discussion
+                    LEFT JOIN {forum_read} r   ON (r.postid = p.id AND r.userid= ?)
+              WHERE d.forum = ?
+                    AND (p.modified < $cutoffdate OR (p.modified >= ? AND r.id IS NOT NULL))
                     $groupsel";
 
-    return get_field_sql($sql);
+    return $DB->get_field_sql($sql, $params);
 }
 
 /**
  * Returns the count of records for the provided user and course.
  * Please note that group access is ignored!
+ *
+ * @global object
+ * @global object
+ * @param int $userid
+ * @param int $courseid
+ * @return array
  */
 function forum_tp_get_course_unread_posts($userid, $courseid) {
-    global $CFG;
+    global $CFG, $DB;
 
     $now = round(time(), -2); // db cache friendliness
     $cutoffdate = $now - ($CFG->forum_oldpostdays*24*60*60);
+    $params = array($userid, $userid, $courseid, $cutoffdate);
 
     if (!empty($CFG->forum_enabletimedposts)) {
-        $timedsql = "AND d.timestart < $now AND (d.timeend = 0 OR d.timeend > $now)";
+        $timedsql = "AND d.timestart < ? AND (d.timeend = 0 OR d.timeend > ?)";
+        $params[] = $now;
+        $params[] = $now;
     } else {
         $timedsql = "";
     }
 
     $sql = "SELECT f.id, COUNT(p.id) AS unread
-              FROM {$CFG->prefix}forum_posts p
-                   JOIN {$CFG->prefix}forum_discussions d       ON d.id = p.discussion
-                   JOIN {$CFG->prefix}forum f                   ON f.id = d.forum
-                   JOIN {$CFG->prefix}course c                  ON c.id = f.course
-                   LEFT JOIN {$CFG->prefix}forum_read r         ON (r.postid = p.id AND r.userid = $userid)
-                   LEFT JOIN {$CFG->prefix}forum_track_prefs tf ON (tf.userid = $userid AND tf.forumid = f.id)
-             WHERE f.course = $courseid
-                   AND p.modified >= $cutoffdate AND r.id is NULL
+              FROM {forum_posts} p
+                   JOIN {forum_discussions} d       ON d.id = p.discussion
+                   JOIN {forum} f                   ON f.id = d.forum
+                   JOIN {course} c                  ON c.id = f.course
+                   LEFT JOIN {forum_read} r         ON (r.postid = p.id AND r.userid = ?)
+                   LEFT JOIN {forum_track_prefs} tf ON (tf.userid = ? AND tf.forumid = f.id)
+             WHERE f.course = ?
+                   AND p.modified >= ? AND r.id is NULL
                    AND (f.trackingtype = ".FORUM_TRACKING_ON."
                         OR (f.trackingtype = ".FORUM_TRACKING_OPTIONAL." AND tf.id IS NULL))
                    $timedsql
           GROUP BY f.id";
 
-    if ($return = get_records_sql($sql)) {
+    if ($return = $DB->get_records_sql($sql, $params)) {
         return $return;
     }
 
@@ -6093,9 +6669,16 @@ function forum_tp_get_course_unread_posts($userid, $courseid) {
 
 /**
  * Returns the count of records for the provided user and forum and [optionally] group.
+ *
+ * @global object
+ * @global object
+ * @global object
+ * @param object $cm
+ * @param object $course
+ * @return int
  */
 function forum_tp_count_forum_unread_posts($cm, $course) {
-    global $CFG, $USER;
+    global $CFG, $USER, $DB;
 
     static $readcache = array();
 
@@ -6132,15 +6715,7 @@ function forum_tp_count_forum_unread_posts($cm, $course) {
         $modinfo->groups = groups_get_user_groups($course->id, $USER->id);
     }
 
-    if (empty($CFG->enablegroupings)) {
-        $mygroups = $modinfo->groups[0];
-    } else {
-        if (array_key_exists($cm->groupingid, $modinfo->groups)) {
             $mygroups = $modinfo->groups[$cm->groupingid];
-        } else {
-            $mygroups = false; // Will be set below
-        }
-    }
 
     // add all groups posts
     if (empty($mygroups)) {
@@ -6148,76 +6723,97 @@ function forum_tp_count_forum_unread_posts($cm, $course) {
     } else {
         $mygroups[-1] = -1;
     }
-    $mygroups = implode(',', $mygroups);
 
+    list ($groups_sql, $groups_params) = $DB->get_in_or_equal($mygroups);
 
     $now = round(time(), -2); // db cache friendliness
     $cutoffdate = $now - ($CFG->forum_oldpostdays*24*60*60);
+    $params = array($USER->id, $forumid, $cutoffdate);
 
     if (!empty($CFG->forum_enabletimedposts)) {
-        $timedsql = "AND d.timestart < $now AND (d.timeend = 0 OR d.timeend > $now)";
+        $timedsql = "AND d.timestart < ? AND (d.timeend = 0 OR d.timeend > ?)";
+        $params[] = $now;
+        $params[] = $now;
     } else {
         $timedsql = "";
     }
 
+    $params = array_merge($params, $groups_params);
+
     $sql = "SELECT COUNT(p.id)
-              FROM {$CFG->prefix}forum_posts p
-                   JOIN {$CFG->prefix}forum_discussions d ON p.discussion = d.id
-                   LEFT JOIN {$CFG->prefix}forum_read r   ON (r.postid = p.id AND r.userid = $USER->id)
-             WHERE d.forum = $forumid
-                   AND p.modified >= $cutoffdate AND r.id is NULL
+              FROM {forum_posts} p
+                   JOIN {forum_discussions} d ON p.discussion = d.id
+                   LEFT JOIN {forum_read} r   ON (r.postid = p.id AND r.userid = ?)
+             WHERE d.forum = ?
+                   AND p.modified >= ? AND r.id is NULL
                    $timedsql
-                   AND d.groupid IN ($mygroups)";
+                   AND d.groupid $groups_sql";
 
-    return get_field_sql($sql);
+    return $DB->get_field_sql($sql, $params);
 }
 
 /**
  * Deletes read records for the specified index. At least one parameter must be specified.
+ *
+ * @global object
+ * @param int $userid
+ * @param int $postid
+ * @param int $discussionid
+ * @param int $forumid
+ * @return bool
  */
 function forum_tp_delete_read_records($userid=-1, $postid=-1, $discussionid=-1, $forumid=-1) {
+    global $DB;
+    $params = array();
+
     $select = '';
     if ($userid > -1) {
         if ($select != '') $select .= ' AND ';
-        $select .= 'userid = \''.$userid.'\'';
+        $select .= 'userid = ?';
+        $params[] = $userid;
     }
     if ($postid > -1) {
         if ($select != '') $select .= ' AND ';
-        $select .= 'postid = \''.$postid.'\'';
+        $select .= 'postid = ?';
+        $params[] = $postid;
     }
     if ($discussionid > -1) {
         if ($select != '') $select .= ' AND ';
-        $select .= 'discussionid = \''.$discussionid.'\'';
+        $select .= 'discussionid = ?';
+        $params[] = $discussionid;
     }
     if ($forumid > -1) {
         if ($select != '') $select .= ' AND ';
-        $select .= 'forumid = \''.$forumid.'\'';
+        $select .= 'forumid = ?';
+        $params[] = $forumid;
     }
     if ($select == '') {
         return false;
     }
     else {
-        return delete_records_select('forum_read', $select);
+        return $DB->delete_records_select('forum_read', $select, $params);
     }
 }
 /**
  * Get a list of forums not tracked by the user.
  *
+ * @global object
+ * @global object
  * @param int $userid The id of the user to use.
  * @param int $courseid The id of the course being checked.
  * @return mixed An array indexed by forum id, or false.
  */
 function forum_tp_get_untracked_forums($userid, $courseid) {
-    global $CFG;
+    global $CFG, $DB;
 
     $sql = "SELECT f.id
-              FROM {$CFG->prefix}forum f
-                   LEFT JOIN {$CFG->prefix}forum_track_prefs ft ON (ft.forumid = f.id AND ft.userid = $userid)
-             WHERE f.course = $courseid
+              FROM {forum} f
+                   LEFT JOIN {forum_track_prefs} ft ON (ft.forumid = f.id AND ft.userid = ?)
+             WHERE f.course = ?
                    AND (f.trackingtype = ".FORUM_TRACKING_OFF."
                         OR (f.trackingtype = ".FORUM_TRACKING_OPTIONAL." AND ft.id IS NOT NULL))";
 
-    if ($forums = get_records_sql($sql)) {
+    if ($forums = $DB->get_records_sql($sql, array($userid, $courseid))) {
         foreach ($forums as $forum) {
             $forums[$forum->id] = $forum;
         }
@@ -6233,12 +6829,15 @@ function forum_tp_get_untracked_forums($userid, $courseid) {
  * Checks the site settings, the user settings and the forum settings (if
  * requested).
  *
+ * @global object
+ * @global object
+ * @global object
  * @param mixed $forum The forum object to test, or the int id (optional).
  * @param mixed $userid The user object to check for (optional).
  * @return boolean
  */
 function forum_tp_can_track_forums($forum=false, $user=false) {
-    global $USER, $CFG;
+    global $USER, $CFG, $DB;
 
     // if possible, avoid expensive
     // queries
@@ -6263,7 +6862,7 @@ function forum_tp_can_track_forums($forum=false, $user=false) {
     // Work toward always passing an object...
     if (is_numeric($forum)) {
         debugging('Better use proper forum object.', DEBUG_DEVELOPER);
-        $forum = get_record('forum', 'id', $forum, '','','','', 'id,trackingtype');
+        $forum = $DB->get_record('forum', array('id' => $forum), '', 'id,trackingtype');
     }
 
     $forumallows = ($forum->trackingtype == FORUM_TRACKING_OPTIONAL);
@@ -6276,12 +6875,15 @@ function forum_tp_can_track_forums($forum=false, $user=false) {
  * Tells whether a specific forum is tracked by the user. A user can optionally
  * be specified. If not specified, the current user is assumed.
  *
+ * @global object
+ * @global object
+ * @global object
  * @param mixed $forum If int, the id of the forum being checked; if object, the forum object
  * @param int $userid The id of the user being checked (optional).
  * @return boolean
  */
 function forum_tp_is_tracked($forum, $user=false) {
-    global $USER, $CFG;
+    global $USER, $CFG, $DB;
 
     if ($user === false) {
         $user = $USER;
@@ -6294,7 +6896,7 @@ function forum_tp_is_tracked($forum, $user=false) {
     // Work toward always passing an object...
     if (is_numeric($forum)) {
         debugging('Better use proper forum object.', DEBUG_DEVELOPER);
-        $forum = get_record('forum', 'id', $forum);
+        $forum = $DB->get_record('forum', array('id' => $forum));
     }
 
     if (!forum_tp_can_track_forums($forum, $user)) {
@@ -6305,37 +6907,43 @@ function forum_tp_is_tracked($forum, $user=false) {
     $forumforced = ($forum->trackingtype == FORUM_TRACKING_ON);
 
     return $forumforced ||
-           ($forumallows && get_record('forum_track_prefs', 'userid', $user->id, 'forumid', $forum->id) === false);
+           ($forumallows && $DB->get_record('forum_track_prefs', array('userid' => $user->id, 'forumid' => $forum->id)) === false);
 }
 
 /**
- *
+ * @global object
+ * @global object
+ * @param int $forumid
+ * @param int $userid
  */
 function forum_tp_start_tracking($forumid, $userid=false) {
-    global $USER;
+    global $USER, $DB;
 
     if ($userid === false) {
         $userid = $USER->id;
     }
 
-    return delete_records('forum_track_prefs', 'userid', $userid, 'forumid', $forumid);
+    return $DB->delete_records('forum_track_prefs', array('userid' => $userid, 'forumid' => $forumid));
 }
 
 /**
- *
+ * @global object
+ * @global object
+ * @param int $forumid
+ * @param int $userid
  */
 function forum_tp_stop_tracking($forumid, $userid=false) {
-    global $USER;
+    global $USER, $DB;
 
     if ($userid === false) {
         $userid = $USER->id;
     }
 
-    if (!record_exists('forum_track_prefs', 'userid', $userid, 'forumid', $forumid)) {
-        $track_prefs = new object();
+    if (!$DB->record_exists('forum_track_prefs', array('userid' => $userid, 'forumid' => $forumid))) {
+        $track_prefs = new stdClass();
         $track_prefs->userid = $userid;
         $track_prefs->forumid = $forumid;
-        insert_record('forum_track_prefs', $track_prefs);
+        $DB->insert_record('forum_track_prefs', $track_prefs);
     }
 
     return forum_tp_delete_read_records($userid, -1, -1, $forumid);
@@ -6344,9 +6952,12 @@ function forum_tp_stop_tracking($forumid, $userid=false) {
 
 /**
  * Clean old records from the forum_read table.
+ * @global object
+ * @global object
+ * @return void
  */
 function forum_tp_clean_read_records() {
-    global $CFG;
+    global $CFG, $DB;
 
     if (!isset($CFG->forum_oldpostdays)) {
         return;
@@ -6356,49 +6967,54 @@ function forum_tp_clean_read_records() {
 
     //first get the oldest tracking present - we need tis to speedup the next delete query
     $sql = "SELECT MIN(fp.modified) AS first
-              FROM {$CFG->prefix}forum_posts fp
-                   JOIN {$CFG->prefix}forum_read fr ON fr.postid=fp.id";
-    if (!$first = get_field_sql($sql)) {
+              FROM {forum_posts} fp
+                   JOIN {forum_read} fr ON fr.postid=fp.id";
+    if (!$first = $DB->get_field_sql($sql)) {
         // nothing to delete;
         return;
     }
 
     // now delete old tracking info
     $sql = "DELETE
-              FROM {$CFG->prefix}forum_read
+              FROM {forum_read}
              WHERE postid IN (SELECT fp.id
-                                FROM {$CFG->prefix}forum_posts fp
-                               WHERE fp.modified >= $first AND fp.modified < $cutoffdate)";
-    execute_sql($sql, false);
+                                FROM {forum_posts} fp
+                               WHERE fp.modified >= ? AND fp.modified < ?)";
+    $DB->execute($sql, array($first, $cutoffdate));
 }
 
 /**
  * Sets the last post for a given discussion
+ *
+ * @global object
+ * @global object
+ * @param into $discussionid
+ * @return bool|int
  **/
 function forum_discussion_update_last_post($discussionid) {
-    global $CFG, $db;
+    global $CFG, $DB;
 
 // Check the given discussion exists
-    if (!record_exists('forum_discussions', 'id', $discussionid)) {
+    if (!$DB->record_exists('forum_discussions', array('id' => $discussionid))) {
         return false;
     }
 
 // Use SQL to find the last post for this discussion
-    $sql = 'SELECT id, userid, modified '.
-           'FROM '.$CFG->prefix.'forum_posts '.
-           'WHERE discussion='.$discussionid.' '.
-           'ORDER BY modified DESC ';
+    $sql = "SELECT id, userid, modified
+              FROM {forum_posts}
+             WHERE discussion=?
+             ORDER BY modified DESC";
 
 // Lets go find the last post
-    if (($lastpost = get_record_sql($sql, true))) {
-        $discussionobject = new Object;
+    if (($lastposts = $DB->get_records_sql($sql, array($discussionid), 0, 1))) {
+        $lastpost = reset($lastposts);
+        $discussionobject = new stdClass();
         $discussionobject->id = $discussionid;
         $discussionobject->usermodified = $lastpost->userid;
         $discussionobject->timemodified = $lastpost->modified;
-        if (update_record('forum_discussions', $discussionobject)) {
+        $DB->update_record('forum_discussions', $discussionobject);
             return $lastpost->id;
         }
-    }
 
 // To get here either we couldn't find a post for the discussion (weird)
 // or we couldn't update the discussion record (weird x2)
@@ -6407,14 +7023,14 @@ function forum_discussion_update_last_post($discussionid) {
 
 
 /**
- *
+ * @return array
  */
 function forum_get_view_actions() {
-    return array('view discussion','search','forum','forums','subscribers');
+    return array('view discussion', 'search', 'forum', 'forums', 'subscribers', 'view forum');
 }
 
 /**
- *
+ * @return array
  */
 function forum_get_post_actions() {
     return array('add discussion','add post','delete discussion','delete post','move discussion','prune post','update post');
@@ -6422,30 +7038,38 @@ function forum_get_post_actions() {
 
 /**
  * this function returns all the separate forum ids, given a courseid
+ *
+ * @global object
+ * @global object
  * @param int $courseid
  * @return array
  */
 function forum_get_separate_modules($courseid) {
 
-    global $CFG,$db;
-    $forummodule = get_record("modules", "name", "forum");
+    global $CFG,$DB;
+    $forummodule = $DB->get_record("modules", array("name" => "forum"));
 
-    $sql = 'SELECT f.id, f.id FROM '.$CFG->prefix.'forum f, '.$CFG->prefix.'course_modules cm WHERE
-           f.id = cm.instance AND cm.module ='.$forummodule->id.' AND cm.visible = 1 AND cm.course = '.$courseid.'
+    $sql = 'SELECT f.id, f.id FROM {forum} f, {course_modules} cm WHERE
+           f.id = cm.instance AND cm.module =? AND cm.visible = 1 AND cm.course = ?
            AND cm.groupmode ='.SEPARATEGROUPS;
 
-    return get_records_sql($sql);
+    return $DB->get_records_sql($sql, array($forummodule->id, $courseid));
 
 }
 
 /**
- *
+ * @global object
+ * @global object
+ * @global object
+ * @param object $forum
+ * @param object $cm
+ * @return bool
  */
 function forum_check_throttling($forum, $cm=null) {
-    global $USER, $CFG;
+    global $USER, $CFG, $DB, $OUTPUT;
 
     if (is_numeric($forum)) {
-        $forum = get_record('forum','id',$forum);
+        $forum = $DB->get_record('forum',array('id'=>$forum));
     }
     if (!is_object($forum)) {
         return false;  // this is broken.
@@ -6461,12 +7085,12 @@ function forum_check_throttling($forum, $cm=null) {
 
     if (!$cm) {
         if (!$cm = get_coursemodule_from_instance('forum', $forum->id, $forum->course)) {
-            error('Course Module ID was incorrect');
+            print_error('invalidcoursemodule');
         }
     }
 
     $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
-    if(!has_capability('mod/forum:throttlingapplies', $modcontext)) {
+    if(has_capability('mod/forum:postwithoutthrottling', $modcontext)) {
         return true;
     }
 
@@ -6474,12 +7098,12 @@ function forum_check_throttling($forum, $cm=null) {
     $timenow = time();
     $timeafter = $timenow - $forum->blockperiod;
 
-    $numposts = count_records_sql('SELECT COUNT(p.id) FROM '.$CFG->prefix.'forum_posts p'
-                                  .' JOIN '.$CFG->prefix.'forum_discussions d'
-                                  .' ON p.discussion = d.id WHERE d.forum = '.$forum->id
-                                  .' AND p.userid = '.$USER->id.' AND p.created > '.$timeafter);
+    $numposts = $DB->count_records_sql('SELECT COUNT(p.id) FROM {forum_posts} p'
+                                      .' JOIN {forum_discussions} d'
+                                      .' ON p.discussion = d.id WHERE d.forum = ?'
+                                      .' AND p.userid = ? AND p.created > ?', array($forum->id, $USER->id, $timeafter));
 
-    $a = new object();
+    $a = new stdClass();
     $a->blockafter = $forum->blockafter;
     $a->numposts = $numposts;
     $a->blockperiod = get_string('secondstotime'.$forum->blockperiod);
@@ -6488,7 +7112,7 @@ function forum_check_throttling($forum, $cm=null) {
         print_error('forumblockingtoomanyposts', 'error', $CFG->wwwroot.'/mod/forum/view.php?f='.$forum->id, $a);
     }
     if ($forum->warnafter <= $numposts) {
-        notify(get_string('forumblockingalmosttoomanyposts','forum',$a));
+        echo $OUTPUT->notification(get_string('forumblockingalmosttoomanyposts','forum',$a));
     }
 
 
@@ -6497,19 +7121,27 @@ function forum_check_throttling($forum, $cm=null) {
 
 /**
  * Removes all grades from gradebook
+ *
+ * @global object
+ * @global object
  * @param int $courseid
- * @param string optional type
+ * @param string $type optional
  */
 function forum_reset_gradebook($courseid, $type='') {
-    global $CFG;
+    global $CFG, $DB;
 
-    $type = $type ? "AND f.type='$type'" : '';
+    $wheresql = '';
+    $params = array($courseid);
+    if ($type) {
+        $wheresql = "AND f.type=?";
+        $params[] = $type;
+    }
 
     $sql = "SELECT f.*, cm.idnumber as cmidnumber, f.course as courseid
-              FROM {$CFG->prefix}forum f, {$CFG->prefix}course_modules cm, {$CFG->prefix}modules m
-             WHERE m.name='forum' AND m.id=cm.module AND cm.instance=f.id AND f.course=$courseid $type";
+              FROM {forum} f, {course_modules} cm, {modules} m
+             WHERE m.name='forum' AND m.id=cm.module AND cm.instance=f.id AND f.course=? $wheresql";
 
-    if ($forums = get_records_sql($sql)) {
+    if ($forums = $DB->get_records_sql($sql, $params)) {
         foreach ($forums as $forum) {
             forum_grade_item_update($forum, 'reset');
         }
@@ -6520,23 +7152,27 @@ function forum_reset_gradebook($courseid, $type='') {
  * This function is used by the reset_course_userdata function in moodlelib.
  * This function will remove all posts from the specified forum
  * and clean up any related data.
+ *
+ * @global object
+ * @global object
  * @param $data the data submitted from the reset course.
  * @return array status array
  */
 function forum_reset_userdata($data) {
-    global $CFG;
-    require_once($CFG->libdir.'/filelib.php');
+    global $CFG, $DB;
+    require_once($CFG->dirroot.'/rating/lib.php');
 
     $componentstr = get_string('modulenameplural', 'forum');
     $status = array();
 
+    $params = array($data->courseid);
+
     $removeposts = false;
+    $typesql     = "";
     if (!empty($data->reset_forum_all)) {
         $removeposts = true;
-        $typesql     = "";
         $typesstr    = get_string('resetforumsall', 'forum');
         $types       = array();
-
     } else if (!empty($data->reset_forum_types)){
         $removeposts = true;
         $typesql     = "";
@@ -6546,55 +7182,71 @@ function forum_reset_userdata($data) {
             if (!array_key_exists($type, $forum_types_all)) {
                 continue;
             }
-            $typesql .= " AND f.type='$type'";
+            $typesql .= " AND f.type=?";
             $types[] = $forum_types_all[$type];
+            $params[] = $type;
         }
         $typesstr = get_string('resetforums', 'forum').': '.implode(', ', $types);
-
     }
-
     $alldiscussionssql = "SELECT fd.id
-                            FROM {$CFG->prefix}forum_discussions fd, {$CFG->prefix}forum f
-                           WHERE f.course={$data->courseid} AND f.id=fd.forum";
+                            FROM {forum_discussions} fd, {forum} f
+                           WHERE f.course=? AND f.id=fd.forum";
 
     $allforumssql      = "SELECT f.id
-                            FROM {$CFG->prefix}forum f
-                           WHERE f.course={$data->courseid}";
+                            FROM {forum} f
+                           WHERE f.course=?";
 
     $allpostssql       = "SELECT fp.id
-                            FROM {$CFG->prefix}forum_posts fp, {$CFG->prefix}forum_discussions fd, {$CFG->prefix}forum f
-                           WHERE f.course={$data->courseid} AND f.id=fd.forum AND fd.id=fp.discussion";
+                            FROM {forum_posts} fp, {forum_discussions} fd, {forum} f
+                           WHERE f.course=? AND f.id=fd.forum AND fd.id=fp.discussion";
+
+    $forumssql = $forums = $rm = null;
+
+    if( $removeposts || !empty($data->reset_forum_ratings) ) {
+        $forumssql      = "$allforumssql $typesql";
+        $forums = $forums = $DB->get_records_sql($forumssql, $params);
+        $rm = new rating_manager();;
+        $ratingdeloptions = new stdClass;
+        $ratingdeloptions->component = 'mod_forum';
+        $ratingdeloptions->ratingarea = 'post';
+    }
 
     if ($removeposts) {
         $discussionssql = "$alldiscussionssql $typesql";
-        $forumssql      = "$allforumssql $typesql";
         $postssql       = "$allpostssql $typesql";
 
+        // now get rid of all attachments
+        $fs = get_file_storage();
+        if ($forums) {
+            foreach ($forums as $forumid=>$unused) {
+                if (!$cm = get_coursemodule_from_instance('forum', $forumid)) {
+                    continue;
+                }
+                $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+                $fs->delete_area_files($context->id, 'mod_forum', 'attachment');
+                $fs->delete_area_files($context->id, 'mod_forum', 'post');
+
+                //remove ratings
+                $ratingdeloptions->contextid = $context->id;
+                $rm->delete_ratings($ratingdeloptions);
+            }
+        }
+
         // first delete all read flags
-        delete_records_select('forum_read', "forumid IN ($forumssql)");
+        $DB->delete_records_select('forum_read', "forumid IN ($forumssql)", $params);
 
         // remove tracking prefs
-        delete_records_select('forum_track_prefs', "forumid IN ($forumssql)");
+        $DB->delete_records_select('forum_track_prefs', "forumid IN ($forumssql)", $params);
 
         // remove posts from queue
-        delete_records_select('forum_queue', "discussionid IN ($discussionssql)");
-
-        // remove ratings
-        delete_records_select('forum_ratings', "post IN ($postssql)");
+        $DB->delete_records_select('forum_queue', "discussionid IN ($discussionssql)", $params);
 
         // all posts - initial posts must be kept in single simple discussion forums
-        delete_records_select('forum_posts', "discussion IN ($discussionssql) AND parent <> 0"); // first all children
-        delete_records_select('forum_posts', "discussion IN ($discussionssql AND f.type <> 'single') AND parent = 0"); // now the initial posts for non single simple
+        $DB->delete_records_select('forum_posts', "discussion IN ($discussionssql) AND parent <> 0", $params); // first all children
+        $DB->delete_records_select('forum_posts', "discussion IN ($discussionssql AND f.type <> 'single') AND parent = 0", $params); // now the initial posts for non single simple
 
         // finally all discussions except single simple forums
-        delete_records_select('forum_discussions', "forum IN ($forumssql AND f.type <> 'single')");
-
-        // now get rid of all attachments
-        if ($forums = get_records_sql($forumssql)) {
-            foreach ($forums as $forumid=>$unused) {
-                fulldelete($CFG->dataroot.'/'.$data->courseid.'/moddata/forum/'.$forumid);
-            }
-        }
+        $DB->delete_records_select('forum_discussions', "forum IN ($forumssql AND f.type <> 'single')", $params);
 
         // remove all grades from gradebook
         if (empty($data->reset_gradebook_grades)) {
@@ -6610,9 +7262,21 @@ function forum_reset_userdata($data) {
         $status[] = array('component'=>$componentstr, 'item'=>$typesstr, 'error'=>false);
     }
 
-    // remove all ratings
+    // remove all ratings in this course's forums
     if (!empty($data->reset_forum_ratings)) {
-        delete_records_select('forum_ratings', "post IN ($allpostssql)");
+        if ($forums) {
+            foreach ($forums as $forumid=>$unused) {
+                if (!$cm = get_coursemodule_from_instance('forum', $forumid)) {
+                    continue;
+                }
+                $context = get_context_instance(CONTEXT_MODULE, $cm->id);
+
+                //remove ratings
+                $ratingdeloptions->contextid = $context->id;
+                $rm->delete_ratings($ratingdeloptions);
+            }
+        }
+
         // remove all grades from gradebook
         if (empty($data->reset_gradebook_grades)) {
             forum_reset_gradebook($data->courseid);
@@ -6621,13 +7285,13 @@ function forum_reset_userdata($data) {
 
     // remove all subscriptions unconditionally - even for users still enrolled in course
     if (!empty($data->reset_forum_subscriptions)) {
-        delete_records_select('forum_subscriptions', "forum IN ($allforumssql)");
+        $DB->delete_records_select('forum_subscriptions', "forum IN ($allforumssql)", $params);
         $status[] = array('component'=>$componentstr, 'item'=>get_string('resetsubscriptions','forum'), 'error'=>false);
     }
 
     // remove all tracking prefs unconditionally - even for users still enrolled in course
     if (!empty($data->reset_forum_track_prefs)) {
-        delete_records_select('forum_track_prefs', "forumid IN ($allforumssql)");
+        $DB->delete_records_select('forum_track_prefs', "forumid IN ($allforumssql)", $params);
         $status[] = array('component'=>$componentstr, 'item'=>get_string('resettrackprefs','forum'), 'error'=>false);
     }
 
@@ -6642,6 +7306,7 @@ function forum_reset_userdata($data) {
 
 /**
  * Called by course/reset.php
+ *
  * @param $mform form passed by reference
  */
 function forum_reset_course_form_definition(&$mform) {
@@ -6666,6 +7331,7 @@ function forum_reset_course_form_definition(&$mform) {
 
 /**
  * Course reset form defaults.
+ * @return array
  */
 function forum_reset_course_form_defaults($course) {
     return array('reset_forum_all'=>1, 'reset_forum_subscriptions'=>0, 'reset_forum_track_prefs'=>0, 'reset_forum_ratings'=>1);
@@ -6673,19 +7339,22 @@ function forum_reset_course_form_defaults($course) {
 
 /**
  * Converts a forum to use the Roles System
- * @param $forum        - a forum object with the same attributes as a record
+ *
+ * @global object
+ * @global object
+ * @param object $forum        a forum object with the same attributes as a record
  *                        from the forum database table
- * @param $forummodid   - the id of the forum module, from the modules table
- * @param $teacherroles - array of roles that have moodle/legacy:teacher
- * @param $studentroles - array of roles that have moodle/legacy:student
- * @param $guestroles   - array of roles that have moodle/legacy:guest
- * @param $cmid         - the course_module id for this forum instance
- * @return boolean      - forum was converted or not
+ * @param int $forummodid   the id of the forum module, from the modules table
+ * @param array $teacherroles array of roles that have archetype teacher
+ * @param array $studentroles array of roles that have archetype student
+ * @param array $guestroles   array of roles that have archetype guest
+ * @param int $cmid         the course_module id for this forum instance
+ * @return boolean      forum was converted or not
  */
 function forum_convert_to_roles($forum, $forummodid, $teacherroles=array(),
                                 $studentroles=array(), $guestroles=array(), $cmid=NULL) {
 
-    global $CFG;
+    global $CFG, $DB, $OUTPUT;
 
     if (!isset($forum->open) && !isset($forum->assesspublic)) {
         // We assume that this forum has already been converted to use the
@@ -6703,13 +7372,13 @@ function forum_convert_to_roles($forum, $forummodid, $teacherroles=array(),
         //   didn't have an entry in the course_modules table.
         require_once($CFG->dirroot.'/course/lib.php');
 
-        if (count_records('forum_discussions', 'forum', $forum->id) == 0) {
+        if ($DB->count_records('forum_discussions', array('forum' => $forum->id)) == 0) {
             // Delete empty teacher forums.
-            delete_records('forum', 'id', $forum->id);
+            $DB->delete_records('forum', array('id' => $forum->id));
         } else {
             // Create a course module for the forum and assign it to
             // section 0 in the course.
-            $mod = new object;
+            $mod = new stdClass();
             $mod->course = $forum->course;
             $mod->module = $forummodid;
             $mod->instance = $forum->id;
@@ -6719,23 +7388,19 @@ function forum_convert_to_roles($forum, $forummodid, $teacherroles=array(),
             $mod->groupmode = 0;
 
             if (!$cmid = add_course_module($mod)) {
-                error('Could not create new course module instance for the teacher forum');
+                print_error('cannotcreateinstanceforteacher', 'forum');
             } else {
                 $mod->coursemodule = $cmid;
                 if (!$sectionid = add_mod_to_section($mod)) {
-                    error('Could not add converted teacher forum instance to section 0 in the course');
+                    print_error('cannotaddteacherforumto', 'forum');
                 } else {
-                    if (!set_field('course_modules', 'section', $sectionid, 'id', $cmid)) {
-                        error('Could not update course module with section id');
-                    }
+                    $DB->set_field('course_modules', 'section', $sectionid, array('id' => $cmid));
                 }
             }
 
             // Change the forum type to general.
             $forum->type = 'general';
-            if (!update_record('forum', $forum)) {
-                error('Could not change forum from type teacher to type general');
-            }
+            $DB->update_record('forum', $forum);
 
             $context = get_context_instance(CONTEXT_MODULE, $cmid);
 
@@ -6757,7 +7422,7 @@ function forum_convert_to_roles($forum, $forummodid, $teacherroles=array(),
                 assign_capability('mod/forum:viewqandawithoutposting', CAP_PREVENT, $studentrole->id, $context->id);
                 assign_capability('mod/forum:viewsubscribers', CAP_PREVENT, $studentrole->id, $context->id);
                 assign_capability('mod/forum:managesubscriptions', CAP_PREVENT, $studentrole->id, $context->id);
-                assign_capability('mod/forum:throttlingapplies', CAP_PREVENT, $studentrole->id, $context->id);
+                assign_capability('mod/forum:postwithoutthrottling', CAP_PREVENT, $studentrole->id, $context->id);
             }
             foreach ($guestroles as $guestrole) {
                 assign_capability('mod/forum:viewdiscussion', CAP_PREVENT, $guestrole->id, $context->id);
@@ -6776,7 +7441,7 @@ function forum_convert_to_roles($forum, $forummodid, $teacherroles=array(),
                 assign_capability('mod/forum:viewqandawithoutposting', CAP_PREVENT, $guestrole->id, $context->id);
                 assign_capability('mod/forum:viewsubscribers', CAP_PREVENT, $guestrole->id, $context->id);
                 assign_capability('mod/forum:managesubscriptions', CAP_PREVENT, $guestrole->id, $context->id);
-                assign_capability('mod/forum:throttlingapplies', CAP_PREVENT, $guestrole->id, $context->id);
+                assign_capability('mod/forum:postwithoutthrottling', CAP_PREVENT, $guestrole->id, $context->id);
             }
         }
     } else {
@@ -6785,7 +7450,7 @@ function forum_convert_to_roles($forum, $forummodid, $teacherroles=array(),
         if (empty($cmid)) {
             // We were not given the course_module id. Try to find it.
             if (!$cm = get_coursemodule_from_instance('forum', $forum->id)) {
-                notify('Could not get the course module for the forum');
+                echo $OUTPUT->notification('Could not get the course module for the forum');
                 return false;
             } else {
                 $cmid = $cm->id;
@@ -6865,7 +7530,7 @@ function forum_convert_to_roles($forum, $forummodid, $teacherroles=array(),
         }
 
         if (empty($cm)) {
-            $cm = get_record('course_modules', 'id', $cmid);
+            $cm = $DB->get_record('course_modules', array('id' => $cmid));
         }
 
         // $cm->groupmode:
@@ -6897,19 +7562,9 @@ function forum_convert_to_roles($forum, $forummodid, $teacherroles=array(),
 }
 
 /**
- * Returns array of forum aggregate types
- */
-function forum_get_aggregate_types() {
-    return array (FORUM_AGGREGATE_NONE  => get_string('aggregatenone', 'forum'),
-                  FORUM_AGGREGATE_AVG   => get_string('aggregateavg', 'forum'),
-                  FORUM_AGGREGATE_COUNT => get_string('aggregatecount', 'forum'),
-                  FORUM_AGGREGATE_MAX   => get_string('aggregatemax', 'forum'),
-                  FORUM_AGGREGATE_MIN   => get_string('aggregatemin', 'forum'),
-                  FORUM_AGGREGATE_SUM   => get_string('aggregatesum', 'forum'));
-}
-
-/**
  * Returns array of forum layout modes
+ *
+ * @return array
  */
 function forum_get_layout_modes() {
     return array (FORUM_MODE_FLATOLDEST => get_string('modeflatoldestfirst', 'forum'),
@@ -6919,17 +7574,22 @@ function forum_get_layout_modes() {
 }
 
 /**
- * Returns array of forum types
+ * Returns array of forum types chooseable on the forum editing form
+ *
+ * @return array
  */
 function forum_get_forum_types() {
     return array ('general'  => get_string('generalforum', 'forum'),
                   'eachuser' => get_string('eachuserforum', 'forum'),
                   'single'   => get_string('singleforum', 'forum'),
-                  'qanda'    => get_string('qandaforum', 'forum'));
+                  'qanda'    => get_string('qandaforum', 'forum'),
+                  'blog'     => get_string('blogforum', 'forum'));
 }
 
 /**
  * Returns array of all forum layout modes
+ *
+ * @return array
  */
 function forum_get_forum_types_all() {
     return array ('news'     => get_string('namenews','forum'),
@@ -6937,11 +7597,14 @@ function forum_get_forum_types_all() {
                   'general'  => get_string('generalforum', 'forum'),
                   'eachuser' => get_string('eachuserforum', 'forum'),
                   'single'   => get_string('singleforum', 'forum'),
-                  'qanda'    => get_string('qandaforum', 'forum'));
+                  'qanda'    => get_string('qandaforum', 'forum'),
+                  'blog'     => get_string('blogforum', 'forum'));
 }
 
 /**
  * Returns array of forum open modes
+ *
+ * @return array
  */
 function forum_get_open_modes() {
     return array ('2' => get_string('openmode2', 'forum'),
@@ -6951,26 +7614,819 @@ function forum_get_open_modes() {
 
 /**
  * Returns all other caps used in module
+ *
+ * @return array
  */
 function forum_get_extra_capabilities() {
-    return array('moodle/site:accessallgroups', 'moodle/site:viewfullnames', 'moodle/site:trustcontent');
+    return array('moodle/site:accessallgroups', 'moodle/site:viewfullnames', 'moodle/site:trustcontent', 'moodle/rating:view', 'moodle/rating:viewany', 'moodle/rating:viewall', 'moodle/rating:rate');
 }
 
+
 /**
- * Returns creation time of the first user's post in given discussion
- * @global object $DB
- * @param int $did Discussion id
- * @param int $userid User id
- * @return int|bool post creation time stamp or return false
+ * This function is used to extend the global navigation by add forum nodes if there
+ * is relevant content.
+ *
+ * @param navigation_node $navref
+ * @param stdClass $course
+ * @param stdClass $module
+ * @param stdClass $cm
  */
-function forum_get_user_posted_time($did, $userid) {
+/*************************************************
+function forum_extend_navigation($navref, $course, $module, $cm) {
+    global $CFG, $OUTPUT, $USER;
+
+    $limit = 5;
+
+    $discussions = forum_get_discussions($cm,"d.timemodified DESC", false, -1, $limit);
+    $discussioncount = forum_get_discussions_count($cm);
+    if (!is_array($discussions) || count($discussions)==0) {
+        return;
+    }
+    $discussionnode = $navref->add(get_string('discussions', 'forum').' ('.$discussioncount.')');
+    $discussionnode->mainnavonly = true;
+    $discussionnode->display = false; // Do not display on navigation (only on navbar)
+
+    foreach ($discussions as $discussion) {
+        $icon = new pix_icon('i/feedback', '');
+        $url = new moodle_url('/mod/forum/discuss.php', array('d'=>$discussion->discussion));
+        $discussionnode->add($discussion->subject, $url, navigation_node::TYPE_SETTING, null, null, $icon);
+    }
+
+    if ($discussioncount > count($discussions)) {
+        if (!empty($navref->action)) {
+            $url = $navref->action;
+        } else {
+            $url = new moodle_url('/mod/forum/view.php', array('id'=>$cm->id));
+        }
+        $discussionnode->add(get_string('viewalldiscussions', 'forum'), $url, navigation_node::TYPE_SETTING, null, null, $icon);
+    }
+
+    $index = 0;
+    $recentposts = array();
+    $lastlogin = time() - COURSE_MAX_RECENT_PERIOD;
+    if (!isguestuser() and !empty($USER->lastcourseaccess[$course->id])) {
+        if ($USER->lastcourseaccess[$course->id] > $lastlogin) {
+            $lastlogin = $USER->lastcourseaccess[$course->id];
+        }
+    }
+    forum_get_recent_mod_activity($recentposts, $index, $lastlogin, $course->id, $cm->id);
+
+    if (is_array($recentposts) && count($recentposts)>0) {
+        $recentnode = $navref->add(get_string('recentactivity').' ('.count($recentposts).')');
+        $recentnode->mainnavonly = true;
+        $recentnode->display = false;
+        foreach ($recentposts as $post) {
+            $icon = new pix_icon('i/feedback', '');
+            $url = new moodle_url('/mod/forum/discuss.php', array('d'=>$post->content->discussion));
+            $title = $post->content->subject."\n".userdate($post->timestamp, get_string('strftimerecent', 'langconfig'))."\n".$post->user->firstname.' '.$post->user->lastname;
+            $recentnode->add($title, $url, navigation_node::TYPE_SETTING, null, null, $icon);
+        }
+    }
+}
+*************************/
+
+/**
+ * Adds module specific settings to the settings block
+ *
+ * @param settings_navigation $settings The settings navigation object
+ * @param navigation_node $forumnode The node to add module settings to
+ */
+function forum_extend_settings_navigation(settings_navigation $settingsnav, navigation_node $forumnode) {
+    global $USER, $PAGE, $CFG, $DB, $OUTPUT;
+
+    $forumobject = $DB->get_record("forum", array("id" => $PAGE->cm->instance));
+    if (empty($PAGE->cm->context)) {
+        $PAGE->cm->context = get_context_instance(CONTEXT_MODULE, $PAGE->cm->instance);
+    }
+
+    // for some actions you need to be enrolled, beiing admin is not enough sometimes here
+    $enrolled = is_enrolled($PAGE->cm->context, $USER, '', false);
+    $activeenrolled = is_enrolled($PAGE->cm->context, $USER, '', true);
+
+    $canmanage  = has_capability('mod/forum:managesubscriptions', $PAGE->cm->context);
+    $subscriptionmode = forum_get_forcesubscribed($forumobject);
+    $cansubscribe = ($activeenrolled && $subscriptionmode != FORUM_FORCESUBSCRIBE && ($subscriptionmode != FORUM_DISALLOWSUBSCRIBE || $canmanage));
+
+    if ($canmanage) {
+        $mode = $forumnode->add(get_string('subscriptionmode', 'forum'), null, navigation_node::TYPE_CONTAINER);
+
+        $allowchoice = $mode->add(get_string('subscriptionoptional', 'forum'), new moodle_url('/mod/forum/subscribe.php', array('id'=>$forumobject->id, 'mode'=>FORUM_CHOOSESUBSCRIBE, 'sesskey'=>sesskey())), navigation_node::TYPE_SETTING);
+        $forceforever = $mode->add(get_string("subscriptionforced", "forum"), new moodle_url('/mod/forum/subscribe.php', array('id'=>$forumobject->id, 'mode'=>FORUM_FORCESUBSCRIBE, 'sesskey'=>sesskey())), navigation_node::TYPE_SETTING);
+        $forceinitially = $mode->add(get_string("subscriptionauto", "forum"), new moodle_url('/mod/forum/subscribe.php', array('id'=>$forumobject->id, 'mode'=>FORUM_INITIALSUBSCRIBE, 'sesskey'=>sesskey())), navigation_node::TYPE_SETTING);
+        $disallowchoice = $mode->add(get_string('subscriptiondisabled', 'forum'), new moodle_url('/mod/forum/subscribe.php', array('id'=>$forumobject->id, 'mode'=>FORUM_DISALLOWSUBSCRIBE, 'sesskey'=>sesskey())), navigation_node::TYPE_SETTING);
+
+        switch ($subscriptionmode) {
+            case FORUM_CHOOSESUBSCRIBE : // 0
+                $allowchoice->action = null;
+                $allowchoice->add_class('activesetting');
+                break;
+            case FORUM_FORCESUBSCRIBE : // 1
+                $forceforever->action = null;
+                $forceforever->add_class('activesetting');
+                break;
+            case FORUM_INITIALSUBSCRIBE : // 2
+                $forceinitially->action = null;
+                $forceinitially->add_class('activesetting');
+                break;
+            case FORUM_DISALLOWSUBSCRIBE : // 3
+                $disallowchoice->action = null;
+                $disallowchoice->add_class('activesetting');
+                break;
+        }
+
+    } else if ($activeenrolled) {
+
+        switch ($subscriptionmode) {
+            case FORUM_CHOOSESUBSCRIBE : // 0
+                $notenode = $forumnode->add(get_string('subscriptionoptional', 'forum'));
+                break;
+            case FORUM_FORCESUBSCRIBE : // 1
+                $notenode = $forumnode->add(get_string('subscriptionforced', 'forum'));
+                break;
+            case FORUM_INITIALSUBSCRIBE : // 2
+                $notenode = $forumnode->add(get_string('subscriptionauto', 'forum'));
+                break;
+            case FORUM_DISALLOWSUBSCRIBE : // 3
+                $notenode = $forumnode->add(get_string('subscriptiondisabled', 'forum'));
+                break;
+        }
+    }
+
+    if ($cansubscribe) {
+        if (forum_is_subscribed($USER->id, $forumobject)) {
+            $linktext = get_string('unsubscribe', 'forum');
+        } else {
+            $linktext = get_string('subscribe', 'forum');
+        }
+        $url = new moodle_url('/mod/forum/subscribe.php', array('id'=>$forumobject->id, 'sesskey'=>sesskey()));
+        $forumnode->add($linktext, $url, navigation_node::TYPE_SETTING);
+    }
+
+    if (has_capability('mod/forum:viewsubscribers', $PAGE->cm->context)){
+        $url = new moodle_url('/mod/forum/subscribers.php', array('id'=>$forumobject->id));
+        $forumnode->add(get_string('showsubscribers', 'forum'), $url, navigation_node::TYPE_SETTING);
+    }
+
+    if ($enrolled && forum_tp_can_track_forums($forumobject)) { // keep tracking info for users with suspended enrolments
+        if ($forumobject->trackingtype != FORUM_TRACKING_OPTIONAL) {
+            //tracking forced on or off in forum settings so dont provide a link here to change it
+            //could add unclickable text like for forced subscription but not sure this justifies adding another menu item
+        } else {
+            if (forum_tp_is_tracked($forumobject)) {
+                $linktext = get_string('notrackforum', 'forum');
+            } else {
+                $linktext = get_string('trackforum', 'forum');
+            }
+            $url = new moodle_url('/mod/forum/settracking.php', array('id'=>$forumobject->id));
+            $forumnode->add($linktext, $url, navigation_node::TYPE_SETTING);
+        }
+    }
+
+    if ($enrolled && !empty($CFG->enablerssfeeds) && !empty($CFG->forum_enablerssfeeds) && $forumobject->rsstype && $forumobject->rssarticles) {
+
+        if (!function_exists('rss_get_url')) {
+            require_once("$CFG->libdir/rsslib.php");
+        }
+
+        if ($forumobject->rsstype == 1) {
+            $string = get_string('rsssubscriberssdiscussions','forum');
+        } else {
+            $string = get_string('rsssubscriberssposts','forum');
+        }
+        if (!isloggedin()) {
+            $userid = 0;
+        } else {
+            $userid = $USER->id;
+        }
+        $url = new moodle_url(rss_get_url($PAGE->cm->context->id, $userid, "mod_forum", $forumobject->id));
+        $forumnode->add($string, $url, settings_navigation::TYPE_SETTING, null, null, new pix_icon('i/rss', ''));
+    }
+}
+
+/**
+ * Abstract class used by forum subscriber selection controls
+ * @package mod-forum
+ * @copyright 2009 Sam Hemelryk
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class forum_subscriber_selector_base extends user_selector_base {
+
+    /**
+     * The id of the forum this selector is being used for
+     * @var int
+     */
+    protected $forumid = null;
+    /**
+     * The context of the forum this selector is being used for
+     * @var object
+     */
+    protected $context = null;
+    /**
+     * The id of the current group
+     * @var int
+     */
+    protected $currentgroup = null;
+
+    /**
+     * Constructor method
+     * @param string $name
+     * @param array $options
+     */
+    public function __construct($name, $options) {
+        parent::__construct($name, $options);
+        if (isset($options['context'])) {
+            $this->context = $options['context'];
+        }
+        if (isset($options['currentgroup'])) {
+            $this->currentgroup = $options['currentgroup'];
+        }
+        if (isset($options['forumid'])) {
+            $this->forumid = $options['forumid'];
+        }
+    }
+
+    /**
+     * Returns an array of options to seralise and store for searches
+     *
+     * @return array
+     */
+    protected function get_options() {
     global $CFG;
+        $options = parent::get_options();
+        $options['file'] =  substr(__FILE__, strlen($CFG->dirroot.'/'));
+        $options['context'] = $this->context;
+        $options['currentgroup'] = $this->currentgroup;
+        $options['forumid'] = $this->forumid;
+        return $options;
+    }
 
-    $posttime = get_field('forum_posts', 'MIN(created)', 'userid', $userid, 'discussion', $did);
-    if (empty($posttime)) {
-        return false;
+}
+
+/**
+ * A user selector control for potential subscribers to the selected forum
+ * @package mod-forum
+ * @copyright 2009 Sam Hemelryk
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forum_potential_subscriber_selector extends forum_subscriber_selector_base {
+
+    /**
+     * If set to true EVERYONE in this course is force subscribed to this forum
+     * @var bool
+     */
+    protected $forcesubscribed = false;
+    /**
+     * Can be used to store existing subscribers so that they can be removed from
+     * the potential subscribers list
+     */
+    protected $existingsubscribers = array();
+
+    /**
+     * Constructor method
+     * @param string $name
+     * @param array $options
+     */
+    public function __construct($name, $options) {
+        parent::__construct($name, $options);
+        if (isset($options['forcesubscribed'])) {
+            $this->forcesubscribed=true;
     }
-    return $posttime;
+    }
+
+    /**
+     * Returns an arary of options for this control
+     * @return array
+     */
+    protected function get_options() {
+        $options = parent::get_options();
+        if ($this->forcesubscribed===true) {
+            $options['forcesubscribed']=1;
+        }
+        return $options;
+    }
+
+    /**
+     * Finds all potential users
+     *
+     * Potential users are determined by checking for users with a capability
+     * determined in {@see forum_get_potential_subscribers()}
+     *
+     * @param string $search
+     * @return array
+     */
+    public function find_users($search) {
+        global $DB;
+
+        $availableusers = forum_get_potential_subscribers($this->context, $this->currentgroup, $this->required_fields_sql('u'), 'u.firstname ASC, u.lastname ASC');
+
+        if (empty($availableusers)) {
+            $availableusers = array();
+        } else if ($search) {
+            $search = strtolower($search);
+            foreach ($availableusers as $key=>$user) {
+                if (stripos($user->firstname, $search) === false && stripos($user->lastname, $search) === false) {
+                    unset($availableusers[$key]);
+                }
+            }
+        }
+
+        // Unset any existing subscribers
+        if (count($this->existingsubscribers)>0 && !$this->forcesubscribed) {
+            foreach ($this->existingsubscribers as $group) {
+                foreach ($group as $user) {
+                    if (array_key_exists($user->id, $availableusers)) {
+                        unset($availableusers[$user->id]);
+                    }
+                }
+            }
+        }
+
+        if ($this->forcesubscribed) {
+            return array(get_string("existingsubscribers", 'forum') => $availableusers);
+        } else {
+            return array(get_string("potentialsubscribers", 'forum') => $availableusers);
+        }
+    }
+
+    /**
+     * Sets the existing subscribers
+     * @param array $users
+     */
+    public function set_existing_subscribers(array $users) {
+        $this->existingsubscribers = $users;
+    }
+
+    /**
+     * Sets this forum as force subscribed or not
+     */
+    public function set_force_subscribed($setting=true) {
+        $this->forcesubscribed = true;
+    }
+}
+
+/**
+ * User selector control for removing subscribed users
+ * @package mod-forum
+ * @copyright 2009 Sam Hemelryk
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forum_existing_subscriber_selector extends forum_subscriber_selector_base {
+
+    /**
+     * Finds all subscribed users
+     *
+     * @param string $search
+     * @return array
+     */
+    public function find_users($search) {
+        global $DB;
+        list($wherecondition, $params) = $this->search_sql($search, 'u');
+        $params['forumid'] = $this->forumid;
+
+        // only active enrolled or everybody on the frontpage
+        list($esql, $eparams) = get_enrolled_sql($this->context, '', $this->currentgroup, true);
+        $params = array_merge($params, $eparams);
+
+        $fields = $this->required_fields_sql('u');
+
+        $subscribers = $DB->get_records_sql("SELECT $fields
+                                               FROM {user} u
+                                               JOIN ($esql) je ON je.id = u.id
+                                               JOIN {forum_subscriptions} s ON s.userid = u.id
+                                              WHERE $wherecondition AND s.forum = :forumid
+                                           ORDER BY u.lastname ASC, u.firstname ASC", $params);
+
+        return array(get_string("existingsubscribers", 'forum') => $subscribers);
+    }
+
+}
+
+/**
+ * Adds information about unread messages, that is only required for the course view page (and
+ * similar), to the course-module object.
+ * @param cm_info $cm Course-module object
+ */
+function forum_cm_info_view(cm_info $cm) {
+    global $CFG;
+
+    // Get tracking status (once per request)
+    static $initialised;
+    static $usetracking, $strunreadpostsone;
+    if (!isset($initialised)) {
+        if ($usetracking = forum_tp_can_track_forums()) {
+            $strunreadpostsone = get_string('unreadpostsone', 'forum');
+        }
+        $initialised = true;
+    }
+
+    if ($usetracking) {
+        if ($unread = forum_tp_count_forum_unread_posts($cm, $cm->get_course())) {
+            $out = '<span class="unread"> <a href="' . $cm->get_url() . '">';
+            if ($unread == 1) {
+                $out .= $strunreadpostsone;
+            } else {
+                $out .= get_string('unreadpostsnumber', 'forum', $unread);
+            }
+            $out .= '</a></span>';
+            $cm->set_after_link($out);
+        }
+    }
+}
+
+/**
+ * Return a list of page types
+ * @param string $pagetype current page type
+ * @param stdClass $parentcontext Block's parent context
+ * @param stdClass $currentcontext Current context of block
+ */
+function forum_page_type_list($pagetype, $parentcontext, $currentcontext) {
+    $forum_pagetype = array(
+        'mod-forum-*'=>get_string('page-mod-forum-x', 'forum'),
+        'mod-forum-view'=>get_string('page-mod-forum-view', 'forum'),
+        'mod-forum-discuss'=>get_string('page-mod-forum-discuss', 'forum')
+    );
+    return $forum_pagetype;
 }
 
-?>
+/**
+ * Gets all of the courses where the provided user has posted in a forum.
+ *
+ * @global moodle_database $DB The database connection
+ * @param stdClass $user The user who's posts we are looking for
+ * @param bool $discussionsonly If true only look for discussions started by the user
+ * @param bool $includecontexts If set to trye contexts for the courses will be preloaded
+ * @param int $limitfrom The offset of records to return
+ * @param int $limitnum The number of records to return
+ * @return array An array of courses
+ */
+function forum_get_courses_user_posted_in($user, $discussionsonly = false, $includecontexts = true, $limitfrom = null, $limitnum = null) {
+    global $DB;
+
+    // If we are only after discussions we need only look at the forum_discussions
+    // table and join to the userid there. If we are looking for posts then we need
+    // to join to the forum_posts table.
+    if (!$discussionsonly) {
+        $joinsql = 'JOIN {forum_discussions} fd ON fd.course = c.id
+                    JOIN {forum_posts} fp ON fp.discussion = fd.id';
+        $wheresql = 'fp.userid = :userid';
+        $params = array('userid' => $user->id);
+    } else {
+        $joinsql = 'JOIN {forum_discussions} fd ON fd.course = c.id';
+        $wheresql = 'fd.userid = :userid';
+        $params = array('userid' => $user->id);
+    }
+
+    // Join to the context table so that we can preload contexts if required.
+    if ($includecontexts) {
+        list($ctxselect, $ctxjoin) = context_instance_preload_sql('c.id', CONTEXT_COURSE, 'ctx');
+    } else {
+        $ctxselect = '';
+        $ctxjoin = '';
+    }
+
+    // Now we need to get all of the courses to search.
+    // All courses where the user has posted within a forum will be returned.
+    $sql = "SELECT DISTINCT c.* $ctxselect
+            FROM {course} c
+            $joinsql
+            $ctxjoin
+            WHERE $wheresql";
+    $courses = $DB->get_records_sql($sql, $params, $limitfrom, $limitnum);
+    if ($includecontexts) {
+        array_map('context_instance_preload', $courses);
+    }
+    return $courses;
+}
+
+/**
+ * Gets all of the forums a user has posted in for one or more courses.
+ *
+ * @global moodle_database $DB
+ * @param stdClass $user
+ * @param array $courseids An array of courseids to search or if not provided
+ *                       all courses the user has posted within
+ * @param bool $discussionsonly If true then only forums where the user has started
+ *                       a discussion will be returned.
+ * @param int $limitfrom The offset of records to return
+ * @param int $limitnum The number of records to return
+ * @return array An array of forums the user has posted within in the provided courses
+ */
+function forum_get_forums_user_posted_in($user, array $courseids = null, $discussionsonly = false, $limitfrom = null, $limitnum = null) {
+    global $DB;
+
+    $where = array("m.name = 'forum'");
+    $params = array();
+    if (!is_null($courseids)) {
+        list($coursewhere, $params) = $DB->get_in_or_equal($courseids, SQL_PARAMS_NAMED, 'courseid');
+        $where[] = 'f.course '.$coursewhere;
+    }
+    if (!$discussionsonly) {
+        $joinsql = 'JOIN {forum_discussions} fd ON fd.forum = f.id
+                    JOIN {forum_posts} fp ON fp.discussion = fd.id';
+        $where[] = 'fp.userid = :userid';
+    } else {
+        $joinsql = 'JOIN {forum_discussions} fd ON fd.forum = f.id';
+        $where[] = 'fd.userid = :userid';
+    }
+    $params['userid'] = $user->id;
+    $wheresql = join(' AND ', $where);
+
+    $sql = "SELECT DISTINCT f.*, cm.id AS cmid
+            FROM {forum} f
+            JOIN {course_modules} cm ON cm.instance = f.id
+            JOIN {modules} m ON m.id = cm.module
+            $joinsql
+            WHERE $wheresql";
+    $courseforums = $DB->get_records_sql($sql, $params, $limitfrom, $limitnum);
+    return $courseforums;
+}
+
+/**
+ * Returns posts made by the selected user in the requested courses.
+ *
+ * This method can be used to return all of the posts made by the requested user
+ * within the given courses.
+ * For each course the access of the current user and requested user is checked
+ * and then for each post access to the post and forum is checked as well.
+ *
+ * This function is safe to use with usercapabilities.
+ *
+ * @global moodle_database $DB
+ * @param stdClass $user The user whose posts we want to get
+ * @param array $courses The courses to search
+ * @param bool $musthaveaccess If set to true errors will be thrown if the user
+ *                             cannot access one or more of the courses to search
+ * @param bool $discussionsonly If set to true only discussion starting posts
+ *                              will be returned.
+ * @param int $limitfrom The offset of records to return
+ * @param int $limitnum The number of records to return
+ * @return stdClass An object the following properties
+ *               ->totalcount: the total number of posts made by the requested user
+ *                             that the current user can see.
+ *               ->courses: An array of courses the current user can see that the
+ *                          requested user has posted in.
+ *               ->forums: An array of forums relating to the posts returned in the
+ *                         property below.
+ *               ->posts: An array containing the posts to show for this request.
+ */
+function forum_get_posts_by_user($user, array $courses, $musthaveaccess = false, $discussionsonly = false, $limitfrom = 0, $limitnum = 50) {
+    global $DB, $USER;
+
+    $return = new stdClass;
+    $return->totalcount = 0;    // The total number of posts that the current user is able to view
+    $return->courses = array(); // The courses the current user can access
+    $return->forums = array();  // The forums that the current user can access that contain posts
+    $return->posts = array();   // The posts to display
+
+    // First up a small sanity check. If there are no courses to check we can
+    // return immediately, there is obviously nothing to search.
+    if (empty($courses)) {
+        return $return;
+    }
+
+    // A couple of quick setups
+    $isloggedin = isloggedin();
+    $isguestuser = $isloggedin && isguestuser();
+    $iscurrentuser = $isloggedin && $USER->id == $user->id;
+
+    // Checkout whether or not the current user has capabilities over the requested
+    // user and if so they have the capabilities required to view the requested
+    // users content.
+    $usercontext = get_context_instance(CONTEXT_USER, $user->id, MUST_EXIST);
+    $hascapsonuser = !$iscurrentuser && $DB->record_exists('role_assignments', array('userid' => $USER->id, 'contextid' => $usercontext->id));
+    $hascapsonuser = $hascapsonuser && has_all_capabilities(array('moodle/user:viewdetails', 'moodle/user:readuserposts'), $usercontext);
+
+    // Before we actually search each course we need to check the user's access to the
+    // course. If the user doesn't have the appropraite access then we either throw an
+    // error if a particular course was requested or we just skip over the course.
+    foreach ($courses as $course) {
+        $coursecontext = get_context_instance(CONTEXT_COURSE, $course->id, MUST_EXIST);
+        if ($iscurrentuser || $hascapsonuser) {
+            // If it is the current user, or the current user has capabilities to the
+            // requested user then all we need to do is check the requested users
+            // current access to the course.
+            // Note: There is no need to check group access or anything of the like
+            // as either the current user is the requested user, or has granted
+            // capabilities on the requested user. Either way they can see what the
+            // requested user posted, although its VERY unlikely in the `parent` situation
+            // that the current user will be able to view the posts in context.
+            if (!is_viewing($coursecontext, $user) && !is_enrolled($coursecontext, $user)) {
+                // Need to have full access to a course to see the rest of own info
+                if ($musthaveaccess) {
+                    print_error('errorenrolmentrequired', 'forum');
+                }
+                continue;
+            }
+        } else {
+            // Check whether the current user is enrolled or has access to view the course
+            // if they don't we immediately have a problem.
+            if (!can_access_course($coursecontext)) {
+                if ($musthaveaccess) {
+                    print_error('errorenrolmentrequired', 'forum');
+                }
+                continue;
+            }
+
+            // Check whether the requested user is enrolled or has access to view the course
+            // if they don't we immediately have a problem.
+            if (!can_access_course($coursecontext, $user)) {
+                if ($musthaveaccess) {
+                    print_error('notenrolled', 'forum');
+                }
+                continue;
+            }
+
+            // If groups are in use and enforced throughout the course then make sure
+            // we can meet in at least one course level group.
+            // Note that we check if either the current user or the requested user have
+            // the capability to access all groups. This is because with that capability
+            // a user in group A could post in the group B forum. Grrrr.
+            if (groups_get_course_groupmode($course) == SEPARATEGROUPS && $course->groupmodeforce
+              && !has_capability('moodle/site:accessallgroups', $coursecontext) && !has_capability('moodle/site:accessallgroups', $coursecontext, $user->id)) {
+                // If its the guest user to bad... the guest user cannot access groups
+                if (!$isloggedin or $isguestuser) {
+                    // do not use require_login() here because we might have already used require_login($course)
+                    if ($musthaveaccess) {
+                        redirect(get_login_url());
+                    }
+                    continue;
+                }
+                // Get the groups of the current user
+                $mygroups = array_keys(groups_get_all_groups($course->id, $USER->id, $course->defaultgroupingid, 'g.id, g.name'));
+                // Get the groups the requested user is a member of
+                $usergroups = array_keys(groups_get_all_groups($course->id, $user->id, $course->defaultgroupingid, 'g.id, g.name'));
+                // Check whether they are members of the same group. If they are great.
+                $intersect = array_intersect($mygroups, $usergroups);
+                if (empty($intersect)) {
+                    // But they're not... if it was a specific course throw an error otherwise
+                    // just skip this course so that it is not searched.
+                    if ($musthaveaccess) {
+                        print_error("groupnotamember", '', $CFG->wwwroot."/course/view.php?id=$course->id");
+                    }
+                    continue;
+                }
+            }
+        }
+        // Woo hoo we got this far which means the current user can search this
+        // this course for the requested user. Although this is only the course accessibility
+        // handling that is complete, the forum accessibility tests are yet to come.
+        $return->courses[$course->id] = $course;
+    }
+    // No longer beed $courses array - lose it not it may be big
+    unset($courses);
+
+    // Make sure that we have some courses to search
+    if (empty($return->courses)) {
+        // If we don't have any courses to search then the reality is that the current
+        // user doesn't have access to any courses is which the requested user has posted.
+        // Although we do know at this point that the requested user has posts.
+        if ($musthaveaccess) {
+            print_error('permissiondenied');
+        } else {
+            return $return;
+        }
+    }
+
+    // Next step: Collect all of the forums that we will want to search.
+    // It is important to note that this step isn't actually about searching, it is
+    // about determining which forums we can search by testing accessibility.
+    $forums = forum_get_forums_user_posted_in($user, array_keys($return->courses), $discussionsonly);
+
+    // Will be used to build the where conditions for the search
+    $forumsearchwhere = array();
+    // Will be used to store the where condition params for the search
+    $forumsearchparams = array();
+    // Will record forums where the user can freely access everything
+    $forumsearchfullaccess = array();
+    // DB caching friendly
+    $now = round(time(), -2);
+    // For each course to search we want to find the forums the user has posted in
+    // and providing the current user can access the forum create a search condition
+    // for the forum to get the requested users posts.
+    foreach ($return->courses as $course) {
+        // Now we need to get the forums
+        $modinfo = get_fast_modinfo($course);
+        if (empty($modinfo->instances['forum'])) {
+            // hmmm, no forums? well at least its easy... skip!
+            continue;
+        }
+        // Iterate
+        foreach ($modinfo->get_instances_of('forum') as $forumid => $cm) {
+            if (!$cm->uservisible or !isset($forums[$forumid])) {
+                continue;
+            }
+            // Get the forum in question
+            $forum = $forums[$forumid];
+            // This is needed for functionality later on in the forum code....
+            $forum->cm = $cm;
+
+            // Check that either the current user can view the forum, or that the
+            // current user has capabilities over the requested user and the requested
+            // user can view the discussion
+            if (!has_capability('mod/forum:viewdiscussion', $cm->context) && !($hascapsonuser && has_capability('mod/forum:viewdiscussion', $cm->context, $user->id))) {
+                continue;
+            }
+
+            // This will contain forum specific where clauses
+            $forumsearchselect = array();
+            if (!$iscurrentuser && !$hascapsonuser) {
+                // Make sure we check group access
+                if (groups_get_activity_groupmode($cm, $course) == SEPARATEGROUPS and !has_capability('moodle/site:accessallgroups', $cm->context)) {
+                    $groups = $modinfo->get_groups($cm->groupingid);
+                    $groups[] = -1;
+                    list($groupid_sql, $groupid_params) = $DB->get_in_or_equal($groups, SQL_PARAMS_NAMED, 'grps'.$forumid.'_');
+                    $forumsearchparams = array_merge($forumsearchparams, $groupid_params);
+                    $forumsearchselect[] = "d.groupid $groupid_sql";
+                }
+
+                // hidden timed discussions
+                if (!empty($CFG->forum_enabletimedposts) && !has_capability('mod/forum:viewhiddentimedposts', $cm->context)) {
+                    $forumsearchselect[] = "(d.userid = :userid{$forumid} OR (d.timestart < :timestart{$forumid} AND (d.timeend = 0 OR d.timeend > :timeend{$forumid})))";
+                    $forumsearchparams['userid'.$forumid] = $user->id;
+                    $forumsearchparams['timestart'.$forumid] = $now;
+                    $forumsearchparams['timeend'.$forumid] = $now;
+                }
+
+                // qanda access
+                if ($forum->type == 'qanda' && !has_capability('mod/forum:viewqandawithoutposting', $cm->context)) {
+                    // We need to check whether the user has posted in the qanda forum.
+                    $discussionspostedin = forum_discussions_user_has_posted_in($forum->id, $user->id);
+                    if (!empty($discussionspostedin)) {
+                        $forumonlydiscussions = array();  // Holds discussion ids for the discussions the user is allowed to see in this forum.
+                        foreach ($discussionspostedin as $d) {
+                            $forumonlydiscussions[] = $d->id;
+                        }
+                        list($discussionid_sql, $discussionid_params) = $DB->get_in_or_equal($forumonlydiscussions, SQL_PARAMS_NAMED, 'qanda'.$forumid.'_');
+                        $forumsearchparams = array_merge($forumsearchparams, $discussionid_params);
+                        $forumsearchselect[] = "(d.id $discussionid_sql OR p.parent = 0)";
+                    } else {
+                        $forumsearchselect[] = "p.parent = 0";
+                    }
+
+                }
+
+                if (count($forumsearchselect) > 0) {
+                    $forumsearchwhere[] = "(d.forum = :forum{$forumid} AND ".implode(" AND ", $forumsearchselect).")";
+                    $forumsearchparams['forum'.$forumid] = $forumid;
+                } else {
+                    $forumsearchfullaccess[] = $forumid;
+                }
+            } else {
+                // The current user/parent can see all of their own posts
+                $forumsearchfullaccess[] = $forumid;
+            }
+        }
+    }
+
+    // If we dont have any search conditions, and we don't have any forums where
+    // the user has full access then we just return the default.
+    if (empty($forumsearchwhere) && empty($forumsearchfullaccess)) {
+        return $return;
+    }
+
+    // Prepare a where condition for the full access forums.
+    if (count($forumsearchfullaccess) > 0) {
+        list($fullidsql, $fullidparams) = $DB->get_in_or_equal($forumsearchfullaccess, SQL_PARAMS_NAMED, 'fula');
+        $forumsearchparams = array_merge($forumsearchparams, $fullidparams);
+        $forumsearchwhere[] = "(d.forum $fullidsql)";
+    }
+
+    // Prepare SQL to both count and search
+    $userfields = user_picture::fields('u', null, 'userid');
+    $countsql = 'SELECT COUNT(*) ';
+    $selectsql = 'SELECT p.*, d.forum, d.name AS discussionname, '.$userfields.' ';
+    $wheresql = implode(" OR ", $forumsearchwhere);
+
+    if ($discussionsonly) {
+        if ($wheresql == '') {
+            $wheresql = 'p.parent = 0';
+        } else {
+            $wheresql = 'p.parent = 0 AND ('.$wheresql.')';
+        }
+    }
+
+    $sql = "FROM {forum_posts} p
+            JOIN {forum_discussions} d ON d.id = p.discussion
+            JOIN {user} u ON u.id = p.userid
+           WHERE ($wheresql)
+             AND p.userid = :userid ";
+    $orderby = "ORDER BY p.modified DESC";
+    $forumsearchparams['userid'] = $user->id;
+
+    // Set the total number posts made by the requested user that the current user can see
+    $return->totalcount = $DB->count_records_sql($countsql.$sql, $forumsearchparams);
+    // Set the collection of posts that has been requested
+    $return->posts = $DB->get_records_sql($selectsql.$sql.$orderby, $forumsearchparams, $limitfrom, $limitnum);
+
+    // We need to build an array of forums for which posts will be displayed.
+    // We do this here to save the caller needing to retrieve them themselves before
+    // printing these forums posts. Given we have the forums already there is
+    // practically no overhead here.
+    foreach ($return->posts as $post) {
+        if (!array_key_exists($post->forum, $return->forums)) {
+            $return->forums[$post->forum] = $forums[$post->forum];
+        }
+    }
+
+    return $return;
+}
