diff --git a/mod/forum/user.php b/mod/forum/user.php
index d25fbf6..48c2e76 100644
--- a/mod/forum/user.php
+++ b/mod/forum/user.php
@@ -1,197 +1,341 @@
-<?php // $Id$
-
-// Display user activity reports for a course
-
-    require_once('../../config.php');
-    require_once('lib.php');
-    // Course ID
-    $course  = required_param('course', PARAM_INT);
-    // User ID
-    $id      = optional_param('id', 0, PARAM_INT);
-    $mode    = optional_param('mode', 'posts', PARAM_ALPHA);
-    $page    = optional_param('page', 0, PARAM_INT);
-    $perpage = optional_param('perpage', 5, PARAM_INT);
-
-    if (empty($id)) {         // See your own profile by default
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Display user activity reports for a course
+ *
+ * @package mod-forum
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(dirname(dirname(__FILE__))).'/config.php');
+require_once($CFG->dirroot.'/mod/forum/lib.php');
+require_once($CFG->dirroot.'/rating/lib.php');
+
+$courseid  = optional_param('course', null, PARAM_INT); // Limit the posts to just this course
+$userid = optional_param('id', $USER->id, PARAM_INT);        // User id whose posts we want to view
+$mode = optional_param('mode', 'posts', PARAM_ALPHA);   // The mode to use. Either posts or discussions
+$page = optional_param('page', 0, PARAM_INT);           // The page number to display
+$perpage = optional_param('perpage', 5, PARAM_INT);     // The number of posts to display per page
+
+if (empty($userid)) {
+    if (!isloggedin()) {
         require_login();
-        $id = $USER->id;
     }
-
-    if (! $user = get_record("user", "id", $id)) {
-        error("User ID is incorrect");
+    $userid = $USER->id;
+}
+
+$discussionsonly = ($mode !== 'posts');
+$isspecificcourse = !is_null($courseid);
+$iscurrentuser = ($USER->id == $userid);
+
+$url = new moodle_url('/mod/forum/user.php', array('id' => $userid));
+if ($isspecificcourse) {
+    $url->param('course', $courseid);
+}
+if ($discussionsonly) {
+    $url->param('mode', 'discussions');
+}
+
+$PAGE->set_url($url);
+$PAGE->set_pagelayout('standard');
+
+if ($page != 0) {
+    $url->param('page', $page);
+}
+if ($perpage != 5) {
+    $url->param('perpage', $perpage);
+}
+
+add_to_log(($isspecificcourse)?$courseid:SITEID, "forum", "user report", 'user.php?'.$url->get_query_string(), $userid);
+
+$user = $DB->get_record("user", array("id" => $userid), '*', MUST_EXIST);
+$usercontext = get_context_instance(CONTEXT_USER, $user->id, MUST_EXIST);
+// Check if the requested user is the guest user
+if (isguestuser($user)) {
+    // The guest user cannot post, so it is not possible to view any posts.
+    // May as well just bail aggressively here.
+    print_error('invaliduserid');
+}
+// Make sure the user has not been deleted
+if ($user->deleted) {
+    $PAGE->set_title(get_string('userdeleted'));
+    $PAGE->set_context(get_system_context());
+    echo $OUTPUT->header();
+    echo $OUTPUT->heading($PAGE->title);
+    echo $OUTPUT->footer();
+    die;
+}
+
+$isloggedin = isloggedin();
+$isguestuser = $isloggedin && isguestuser();
+$isparent = !$iscurrentuser && $DB->record_exists('role_assignments', array('userid'=>$USER->id, 'contextid'=>$usercontext->id));
+$hasparentaccess = $isparent && has_all_capabilities(array('moodle/user:viewdetails', 'moodle/user:readuserposts'), $usercontext);
+
+// Check whether a specific course has been requested
+if ($isspecificcourse) {
+    // Get the requested course and its context
+    $course = $DB->get_record('course', array('id' => $courseid), '*', MUST_EXIST);
+    $coursecontext = get_context_instance(CONTEXT_COURSE, $courseid, MUST_EXIST);
+    // We have a specific course to search, which we will also assume we are within.
+    if ($hasparentaccess) {
+        // A `parent` role won't likely have access to the course so we won't attempt
+        // to enter it. We will however still make them jump through the normal
+        // login hoops
+        require_login();
+        $PAGE->set_context($coursecontext);
+        $PAGE->set_course($course);
+    } else {
+        // Enter the course we are searching
+        require_login($course);
     }
-
-    if (! $course = get_record("course", "id", $course)) {
-        error("Course id is incorrect.");
+    // Get the course ready for access checks
+    $courses = array($courseid => $course);
+} else {
+    // We are going to search for all of the users posts in all courses!
+    // a general require login here as we arn't actually within any course.
+    require_login();
+    $PAGE->set_context(get_system_context());
+
+    // Now we need to get all of the courses to search.
+    // All courses where the user has posted within a forum will be returned.
+    $courses = forum_get_courses_user_posted_in($user, $discussionsonly);
+}
+
+// Get the posts by the requested user that the current user can access.
+$result = forum_get_posts_by_user($user, $courses, $isspecificcourse, $discussionsonly, ($page * $perpage), $perpage);
+
+// Check whether there are not posts to display.
+if (empty($result->posts)) {
+    // Ok no posts to display means that either the user has not posted or there
+    // are no posts made by the requested user that the current user is able to
+    // see.
+    // In either case we need to decide whether we can show personal information
+    // about the requested user to the current user so we will execute some checks
+
+    // First check the obvious, its the current user, a specific course has been
+    // provided (require_login has been called), or they have a course contact role.
+    // True to any of those and the current user can see the details of the
+    // requested user.
+    $canviewuser = ($iscurrentuser || $isspecificcourse || empty($CFG->forceloginforprofiles) || has_coursecontact_role($userid));
+    // Next we'll check the caps, if the current user has the view details and a
+    // specific course has been requested, or if they have the view all details
+    $canviewuser = ($canviewuser || ($isspecificcourse && has_capability('moodle/user:viewdetails', $coursecontext) || has_capability('moodle/user:viewalldetails', $usercontext)));
+
+    // If none of the above was true the next step is to check a shared relation
+    // through some course
+    if (!$canviewuser) {
+        // Get all of the courses that the users have in common
+        $sharedcourses = enrol_get_shared_courses($USER->id, $user->id, true);
+        foreach ($sharedcourses as $sharedcourse) {
+            // Check the view cap within the course context
+            if (has_capability('moodle/user:viewdetails', get_context_instance(CONTEXT_COURSE, $sharedcourse->id))) {
+                $canviewuser = true;
+                break;
     }
-
-    $syscontext = get_context_instance(CONTEXT_SYSTEM);
-    $usercontext   = get_context_instance(CONTEXT_USER, $id);
-
-    // do not force parents to enrol
-    if (!get_record('role_assignments', 'userid', $USER->id, 'contextid', $usercontext->id)) {
-        require_course_login($course);
     }
-
-    if ($user->deleted) {
-        print_header();
-        print_heading(get_string('userdeleted'));
-        print_footer($course);
-        die;
+        unset($sharedcourses);
     }
 
-    switch ($mode) {
-        case 'posts' :
-            $searchterms = array('userid:'.$user->id);
-            $extrasql = '';
-            break;
+    // Prepare the page title
+    $pagetitle = get_string('noposts', 'mod_forum');
 
-        default:
-            $searchterms = array('userid:'.$user->id);
-            $extrasql = 'AND p.parent = 0';
-            break;
+    // Get the page heading
+    if ($isspecificcourse) {
+        $pageheading = format_string($course->shortname, true, array('context' => $coursecontext));
+    } else {
+        $pageheading = get_string('pluginname', 'mod_forum');
     }
-    if ($course->id == SITEID) {
-        if (empty($CFG->forceloginforprofiles) || isloggedin()) {
-            // Search throughout the whole site.
-            $searchcourse = 0;
+
+    // Next we need to set up the loading of the navigation and choose a message
+    // to display to the current user.
+    if ($iscurrentuser) {
+        // No need to extend the navigation it happens automatically for the
+        // current user.
+        if ($discussionsonly) {
+            $notification = get_string('nodiscussionsstartedbyyou', 'forum');
         } else {
-            $searchcourse = SITEID;
+            $notification = get_string('nopostsmadebyyou', 'forum');
         }
+    } else if ($canviewuser) {
+        $PAGE->navigation->extend_for_user($user);
+        $PAGE->navigation->set_userid_for_parent_checks($user->id); // see MDL-25805 for reasons and for full commit reference for reversal when fixed.
+        $fullname = fullname($user);
+        if ($discussionsonly) {
+            $notification = get_string('nodiscussionsstartedby', 'forum', $fullname);
     } else {
-        // Search only for posts the user made in this course.
-        $searchcourse = $course->id;
-    }
-
-    $posts = forum_search_posts($searchterms, $searchcourse, $page*$perpage, $perpage, $totalcount, $extrasql);
-
-    $hasposts = !empty($posts);
-    $iscurrentuser = $user->id == $USER->id;
-    $specificcourseprovided = !empty($searchcourse) && $searchcourse != SITEID;
-    if (!$hasposts && !$iscurrentuser && !$specificcourseprovided) {
-        $mustlogin = (!isloggedin() && $CFG->forceloginforprofiles);
-        $canviewtheuser = (isloggedin() && has_capability('moodle/user:viewdetails', $usercontext));
-        if ($mustlogin || (!isteacherinanycourse() && !isteacherinanycourse($user->id) && !$canviewtheuser)) {
-            // Best to assume that the current user cannot view the requested user
-            // so we are careful not to give out any information.
-            print_header();
-            print_heading(get_string('noposts', 'forum'));
-            print_footer();
-            exit;
+            $notification = get_string('nopostsmadebyuser', 'forum', $fullname);
+        }
+    } else {
+        // Don't extend the navigation it would be giving out information that
+        // the current uesr doesn't have access to.
+        $notification = get_string('cannotviewusersposts', 'forum');
+        if ($isspecificcourse) {
+            $url = new moodle_url('/course/view.php', array('id' => $courseid));
         } else {
-            // Nothing to check here. If a course has been specified then require_course_login
-            // has been called OR the current user is a parent of the requested user.
+            $url = new moodle_url('/');
         }
+        navigation_node::override_active_url($url);
     }
 
-    add_to_log($course->id, "forum", "user report",
-            "user.php?course=$course->id&amp;id=$user->id&amp;mode=$mode", "$user->id"); 
-
-    $strforumposts   = get_string('forumposts', 'forum');
-    $strparticipants = get_string('participants');
-    $strmode         = get_string($mode, 'forum');
-    $fullname        = fullname($user, has_capability('moodle/site:viewfullnames', $syscontext));
-
-    $navlinks = array();
-    if (has_capability('moodle/course:viewparticipants', get_context_instance(CONTEXT_COURSE, $course->id)) || has_capability('moodle/site:viewparticipants', $syscontext)) {
-        $navlinks[] = array('name' => $strparticipants, 'link' => "$CFG->wwwroot/user/index.php?id=$course->id", 'type' => 'core');
+    // Display a page letting the user know that there's nothing to display;
+    $PAGE->set_title($pagetitle);
+    $PAGE->set_heading($pageheading);
+    echo $OUTPUT->header();
+    echo $OUTPUT->heading($pagetitle);
+    echo $OUTPUT->notification($notification);
+    if (!$url->compare($PAGE->url)) {
+        echo $OUTPUT->continue_button($url);
     }
-    $navlinks[] = array('name' => $fullname, 'link' => "$CFG->wwwroot/user/view.php?id=$user->id&amp;course=$course->id", 'type' => 'title');
-    $navlinks[] = array('name' => $strforumposts, 'link' => '', 'type' => 'title');
-    $navlinks[] = array('name' => $strmode, 'link' => '', 'type' => 'title');
-
-    $navigation = build_navigation($navlinks);
-
-    print_header("$course->shortname: $fullname: $strmode", $course->fullname,$navigation);
-
-
-    $currenttab = $mode;
-    $showroles = 1;
-    include($CFG->dirroot.'/user/tabs.php');   /// Prints out tabs as part of user page
-
-    echo '<div class="user-content">';
-
-    // Get the posts.
-    if ($posts) {
-
-        print_paging_bar($totalcount, $page, $perpage,
-                         "user.php?id=$user->id&amp;course=$course->id&amp;mode=$mode&amp;perpage=$perpage&amp;");
-
-        $discussions = array();
-        $forums      = array();
-        $cms         = array();
-
-        foreach ($posts as $post) {
-
-            if (!isset($discussions[$post->discussion])) {
-                if (! $discussion = get_record('forum_discussions', 'id', $post->discussion)) {
-                    error('Discussion ID was incorrect');
+    echo $OUTPUT->footer();
+    die;
+}
+
+// Post output will contain an entry containing HTML to display each post by the
+// time we are done.
+$postoutput = array();
+
+$discussions = array();
+foreach ($result->posts as $post) {
+    $discussions[] = $post->discussion;
+}
+$discussions = $DB->get_records_list('forum_discussions', 'id', array_unique($discussions));
+
+//todo Rather than retrieving the ratings for each post individually it would be nice to do them in groups
+//however this requires creating arrays of posts with each array containing all of the posts from a particular forum,
+//retrieving the ratings then reassembling them all back into a single array sorted by post.modified (descending)
+$rm = new rating_manager();
+$ratingoptions = new stdClass;
+$ratingoptions->component = 'mod_forum';
+$ratingoptions->ratingarea = 'post';
+foreach ($result->posts as $post) {
+    if (!isset($result->forums[$post->forum]) || !isset($discussions[$post->discussion])) {
+        // Something very VERY dodgy has happened if we end up here
+        continue;
                 }
-                $discussions[$post->discussion] = $discussion;
-            } else {
+    $forum = $result->forums[$post->forum];
+    $cm = $forum->cm;
                 $discussion = $discussions[$post->discussion];
-            }
-
-            if (!isset($forums[$discussion->forum])) {
-                if (! $forum = get_record('forum', 'id', $discussion->forum)) {
-                    error("Could not find forum $discussion->forum");
-                }
-                $forums[$discussion->forum] = $forum;
+    $course = $result->courses[$discussion->course];
+
+    $forumurl = new moodle_url('/mod/forum/view.php', array('id' => $cm->id));
+    $discussionurl = new moodle_url('/mod/forum/discuss.php', array('d' => $post->discussion));
+
+    // load ratings
+    if ($forum->assessed != RATING_AGGREGATE_NONE) {
+        $ratingoptions->context = $cm->context;
+        $ratingoptions->items = array($post);
+        $ratingoptions->aggregate = $forum->assessed;//the aggregation method
+        $ratingoptions->scaleid = $forum->scale;
+        $ratingoptions->userid = $user->id;
+        $ratingoptions->assesstimestart = $forum->assesstimestart;
+        $ratingoptions->assesstimefinish = $forum->assesstimefinish;
+        if ($forum->type == 'single' or !$post->discussion) {
+            $ratingoptions->returnurl = $forumurl;
             } else {
-                $forum = $forums[$discussion->forum];
+            $ratingoptions->returnurl = $discussionurl;
             }
 
-            $ratings = null;
-            if ($forum->assessed) {
-                if ($scale = make_grades_menu($forum->scale)) {
-                    $ratings =new object();
-                    $ratings->scale = $scale;
-                    $ratings->assesstimestart = $forum->assesstimestart;
-                    $ratings->assesstimefinish = $forum->assesstimefinish;
-                    $ratings->allow = false;
-                }
+        $updatedpost = $rm->get_ratings($ratingoptions);
+        //updating the array this way because we're iterating over a collection and updating them one by one
+        $result->posts[$updatedpost[0]->id] = $updatedpost[0];
             }
 
-            if (!isset($cms[$forum->id])) {
-                if (!$cm = get_coursemodule_from_instance('forum', $forum->id)) {
-                    error('Course Module ID was incorrect');
-                }
-                $cms[$forum->id] = $cm;
-                unset($cm); // do not use cm directly, it would break caching
-            }
+    $courseshortname = format_string($course->shortname, true, array('context' => get_context_instance(CONTEXT_COURSE, $course->id)));
+    $forumname = format_string($forum->name, true, array('context' => $cm->context));
 
-            $fullsubject = "<a href=\"view.php?f=$forum->id\">".format_string($forum->name,true)."</a>";
+    $fullsubjects = array();
+    if (!$isspecificcourse && !$hasparentaccess) {
+        $fullsubjects[] = html_writer::link(new moodle_url('/course/view.php', array('id' => $course->id)), $courseshortname);
+        $fullsubjects[] = html_writer::link($forumurl, $forumname);
+    } else {
+        $fullsubjects[] = html_writer::tag('span', $courseshortname);
+        $fullsubjects[] = html_writer::tag('span', $forumname);
+    }
             if ($forum->type != 'single') {
-                $fullsubject .= " -> <a href=\"discuss.php?d=$discussion->id\">".format_string($discussion->name,true)."</a>";
+        $discussionname = format_string($discussion->name, true, array('context' => $cm->context));
+        if (!$isspecificcourse && !$hasparentaccess) {
+            $fullsubjects[] .= html_writer::link($discussionurl, $discussionname);
+        } else {
+            $fullsubjects[] .= html_writer::tag('span', $discussionname);
+        }
                 if ($post->parent != 0) {
-                    $fullsubject .= " -> <a href=\"discuss.php?d=$post->discussion&amp;parent=$post->id\">".format_string($post->subject,true)."</a>";
+            $postname = format_string($post->subject, true, array('context' => $cm->context));
+            if (!$isspecificcourse && !$hasparentaccess) {
+                $fullsubjects[] .= html_writer::link(new moodle_url('/mod/forum/discuss.php', array('d' => $post->discussion, 'parent' => $post->id)), $postname);
+            } else {
+                $fullsubjects[] .= html_writer::tag('span', $postname);
                 }
             }
-
-            if ($course->id == SITEID && has_capability('moodle/site:config', $syscontext)) {
-                $postcoursename = get_field('course', 'shortname', 'id', $forum->course);
-                $fullsubject = '<a href="'.$CFG->wwwroot.'/course/view.php?id='.$forum->course.'">'.$postcoursename.'</a> -> '. $fullsubject;
             }
-
-            $post->subject = $fullsubject;
-
-            $fulllink = "<a href=\"discuss.php?d=$post->discussion#p$post->id\">".
-                         get_string("postincontext", "forum")."</a>";
-
-            forum_print_post($post, $discussion, $forum, $cms[$forum->id], $course, false, false, false, $ratings, $fulllink);
-            echo "<br />";
-        }
-
-        print_paging_bar($totalcount, $page, $perpage,
-                         "user.php?id=$user->id&amp;course=$course->id&amp;mode=$mode&amp;perpage=$perpage&amp;");
-    } else {
-        if ($mode == 'posts') {
-            print_heading(get_string('noposts', 'forum'));
+    $post->subject = join(' -> ', $fullsubjects);
+    // This is really important, if the strings are formatted again all the links
+    // we've added will be lost.
+    $post->subjectnoformat = true;
+    $discussionurl->set_anchor('p'.$post->id);
+    $fulllink = html_writer::link($discussionurl, get_string("postincontext", "forum"));
+
+    $postoutput[] = forum_print_post($post, $discussion, $forum, $cm, $course, false, false, false, $fulllink, '', null, true, null, true);
+}
+
+$userfullname = fullname($user);
+
+if ($discussionsonly) {
+    $inpageheading = get_string('discussionsstartedby', 'mod_forum', $userfullname);
+} else {
+    $inpageheading = get_string('postsmadebyuser', 'mod_forum', $userfullname);
+}
+if ($isspecificcourse) {
+    $a = new stdClass;
+    $a->fullname = $userfullname;
+    $a->coursename = format_string($course->shortname, true, array('context' => $coursecontext));
+    $pageheading = $a->coursename;
+    if ($discussionsonly) {
+        $pagetitle = get_string('discussionsstartedbyuserincourse', 'mod_forum', $a);
         } else {
-            print_heading(get_string('nodiscussionsstartedby', 'forum'));
+        $pagetitle = get_string('postsmadebyuserincourse', 'mod_forum', $a);
         }
+} else {
+    $pagetitle = $inpageheading;
+    $pageheading = $userfullname;
+}
+
+$PAGE->set_title($pagetitle);
+$PAGE->set_heading($pagetitle);
+$PAGE->navigation->extend_for_user($user);
+$PAGE->navigation->set_userid_for_parent_checks($user->id); // see MDL-25805 for reasons and for full commit reference for reversal when fixed.
+
+echo $OUTPUT->header();
+echo $OUTPUT->heading($inpageheading);
+echo html_writer::start_tag('div', array('class' => 'user-content'));
+
+if (!empty($postoutput)) {
+    echo $OUTPUT->paging_bar($result->totalcount, $page, $perpage, $url);
+    foreach ($postoutput as $post) {
+        echo $post;
+        echo html_writer::empty_tag('br');
     }
-    echo '</div>';
-    print_footer($course);
-
-?>
+    echo $OUTPUT->paging_bar($result->totalcount, $page, $perpage, $url);
+} else if ($discussionsonly) {
+    echo $OUTPUT->heading(get_string('nodiscussionsstartedby', 'forum', $userfullname));
+} else {
+    echo $OUTPUT->heading(get_string('noposts', 'forum'));
+}
+
+echo html_writer::end_tag('div');
+echo $OUTPUT->footer();
