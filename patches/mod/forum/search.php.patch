diff --git a/mod/forum/search.php b/mod/forum/search.php
index 9e59099..9913fac 100644
--- a/mod/forum/search.php
+++ b/mod/forum/search.php
@@ -1,50 +1,72 @@
-<?php // $Id$
-
-    require_once('../../config.php');
-    require_once('lib.php');
-
-    $id = required_param('id', PARAM_INT);                  // course id
-    $search = trim(optional_param('search', '', PARAM_NOTAGS));  // search string
-    $page = optional_param('page', 0, PARAM_INT);   // which page to show
-    $perpage = optional_param('perpage', 10, PARAM_INT);   // how many per page
-    $showform = optional_param('showform', 0, PARAM_INT);   // Just show the form
-
-    $user    = trim(optional_param('user', '', PARAM_NOTAGS));    // Names to search for
-    $userid  = trim(optional_param('userid', 0, PARAM_INT));      // UserID to search for
-    $forumid = trim(optional_param('forumid', 0, PARAM_INT));      // ForumID to search for
-    $subject = trim(optional_param('subject', '', PARAM_NOTAGS)); // Subject
-    $phrase  = trim(optional_param('phrase', '', PARAM_NOTAGS));  // Phrase
-    $words   = trim(optional_param('words', '', PARAM_NOTAGS));   // Words
-    $fullwords = trim(optional_param('fullwords', '', PARAM_NOTAGS)); // Whole words
-    $notwords = trim(optional_param('notwords', '', PARAM_NOTAGS));   // Words we don't want
-
-    $timefromrestrict = optional_param('timefromrestrict', 0, PARAM_INT); // Use starting date
-    $fromday = optional_param('fromday', 0, PARAM_INT);      // Starting date
-    $frommonth = optional_param('frommonth', 0, PARAM_INT);      // Starting date
-    $fromyear = optional_param('fromyear', 0, PARAM_INT);      // Starting date
-    $fromhour = optional_param('fromhour', 0, PARAM_INT);      // Starting date
-    $fromminute = optional_param('fromminute', 0, PARAM_INT);      // Starting date
-    if ($timefromrestrict) {
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package mod-forum
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+require_once('lib.php');
+
+$id = required_param('id', PARAM_INT);                  // course id
+$search = trim(optional_param('search', '', PARAM_NOTAGS));  // search string
+$page = optional_param('page', 0, PARAM_INT);   // which page to show
+$perpage = optional_param('perpage', 10, PARAM_INT);   // how many per page
+$showform = optional_param('showform', 0, PARAM_INT);   // Just show the form
+
+$user    = trim(optional_param('user', '', PARAM_NOTAGS));    // Names to search for
+$userid  = trim(optional_param('userid', 0, PARAM_INT));      // UserID to search for
+$forumid = trim(optional_param('forumid', 0, PARAM_INT));      // ForumID to search for
+$subject = trim(optional_param('subject', '', PARAM_NOTAGS)); // Subject
+$phrase  = trim(optional_param('phrase', '', PARAM_NOTAGS));  // Phrase
+$words   = trim(optional_param('words', '', PARAM_NOTAGS));   // Words
+$fullwords = trim(optional_param('fullwords', '', PARAM_NOTAGS)); // Whole words
+$notwords = trim(optional_param('notwords', '', PARAM_NOTAGS));   // Words we don't want
+
+$timefromrestrict = optional_param('timefromrestrict', 0, PARAM_INT); // Use starting date
+$fromday = optional_param('fromday', 0, PARAM_INT);      // Starting date
+$frommonth = optional_param('frommonth', 0, PARAM_INT);      // Starting date
+$fromyear = optional_param('fromyear', 0, PARAM_INT);      // Starting date
+$fromhour = optional_param('fromhour', 0, PARAM_INT);      // Starting date
+$fromminute = optional_param('fromminute', 0, PARAM_INT);      // Starting date
+if ($timefromrestrict) {
         $datefrom = make_timestamp($fromyear, $frommonth, $fromday, $fromhour, $fromminute);
-    } else {
+} else {
         $datefrom = optional_param('datefrom', 0, PARAM_INT);      // Starting date
-    }
+}
 
-    $timetorestrict = optional_param('timetorestrict', 0, PARAM_INT); // Use ending date
-    $today = optional_param('today', 0, PARAM_INT);      // Ending date
-    $tomonth = optional_param('tomonth', 0, PARAM_INT);      // Ending date
-    $toyear = optional_param('toyear', 0, PARAM_INT);      // Ending date
-    $tohour = optional_param('tohour', 0, PARAM_INT);      // Ending date
-    $tominute = optional_param('tominute', 0, PARAM_INT);      // Ending date
-    if ($timetorestrict) {
+$timetorestrict = optional_param('timetorestrict', 0, PARAM_INT); // Use ending date
+$today = optional_param('today', 0, PARAM_INT);      // Ending date
+$tomonth = optional_param('tomonth', 0, PARAM_INT);      // Ending date
+$toyear = optional_param('toyear', 0, PARAM_INT);      // Ending date
+$tohour = optional_param('tohour', 0, PARAM_INT);      // Ending date
+$tominute = optional_param('tominute', 0, PARAM_INT);      // Ending date
+if ($timetorestrict) {
         $dateto = make_timestamp($toyear, $tomonth, $today, $tohour, $tominute);
-    } else {
+} else {
         $dateto = optional_param('dateto', 0, PARAM_INT);      // Ending date
-    }
-
+}
 
+$PAGE->set_pagelayout('standard');
+$PAGE->set_url($FULLME);
 
-    if (empty($search)) {   // Check the other parameters instead
+if (empty($search)) {   // Check the other parameters instead
         if (!empty($words)) {
             $search .= ' '.$words;
         }
@@ -76,58 +98,55 @@
             $search .= ' dateto:'.$dateto;
         }
         $individualparams = true;
-    } else {
+} else {
         $individualparams = false;
-    }
+}
 
-    if ($search) {
+if ($search) {
         $search = forum_clean_search_terms($search);
-    }
+}
 
-    if (! $course = get_record("course", "id", $id)) {
-        error("Course id is incorrect.");
-    }
+if (!$course = $DB->get_record('course', array('id'=>$id))) {
+    print_error('invalidcourseid');
+}
 
-    require_course_login($course);
+require_course_login($course);
 
-    add_to_log($course->id, "forum", "search", "search.php?id=$course->id&amp;search=".urlencode($search), $search);
+add_to_log($course->id, "forum", "search", "search.php?id=$course->id&amp;search=".urlencode($search), $search);
 
-    $strforums = get_string("modulenameplural", "forum");
-    $strsearch = get_string("search", "forum");
-    $strsearchresults = get_string("searchresults", "forum");
-    $strpage = get_string("page");
+$strforums = get_string("modulenameplural", "forum");
+$strsearch = get_string("search", "forum");
+$strsearchresults = get_string("searchresults", "forum");
+$strpage = get_string("page");
 
-    if (!$search || $showform) {
+if (!$search || $showform) {
 
-        $navlinks = array();
-        $navlinks[] = array('name' => $strforums, 'link' => "index.php?id=$course->id", 'type' => 'activity');
-        $navlinks[] = array('name' => $strsearch, 'link' => '', 'type' => 'title');
-        $navigation = build_navigation($navlinks);
+    $PAGE->navbar->add($strforums, new moodle_url('/mod/forum/index.php', array('id'=>$course->id)));
+    $PAGE->navbar->add(get_string('advancedsearch', 'forum'));
 
-        print_header_simple("$strsearch", "", $navigation, 'search.words',
-                  "", "", "&nbsp;", navmenu($course));
+    $PAGE->set_title($strsearch);
+    $PAGE->set_heading($course->fullname);
+    echo $OUTPUT->header();
 
         forum_print_big_search_form($course);
-        print_footer($course);
+    echo $OUTPUT->footer();
         exit;
-    }
+}
 
 /// We need to do a search now and print results
 
-    $searchterms = str_replace('forumid:', 'instance:', $search);
-    $searchterms = explode(' ', $searchterms);
-
-    $searchform = forum_search_form($course, $search);
-
-    $navlinks = array();
-    $navlinks[] = array('name' => $strsearch, 'link' => "search.php?id=$course->id", 'type' => 'activityinstance');
-    $navlinks[] = array('name' => s($search, true), 'link' => '', 'type' => 'link');
-    $navigation = build_navigation($navlinks);
+$searchterms = str_replace('forumid:', 'instance:', $search);
+$searchterms = explode(' ', $searchterms);
 
+$searchform = forum_search_form($course, $search);
 
-    if (!$posts = forum_search_posts($searchterms, $course->id, $page*$perpage, $perpage, $totalcount)) {
-        print_header_simple("$strsearchresults", "", $navigation, 'search.words', "", "", "&nbsp;", navmenu($course));
-        print_heading(get_string("nopostscontaining", "forum", $search));
+$PAGE->navbar->add($strsearch, new moodle_url('/mod/forum/search.php', array('id'=>$course->id)));
+$PAGE->navbar->add(s($search, true));
+if (!$posts = forum_search_posts($searchterms, $course->id, $page*$perpage, $perpage, $totalcount)) {
+    $PAGE->set_title($strsearchresults);
+    $PAGE->set_heading($course->fullname);
+    echo $OUTPUT->header();
+    echo $OUTPUT->heading(get_string("nopostscontaining", "forum", $search));
 
         if (!$individualparams) {
             $words = $search;
@@ -135,15 +154,27 @@
 
         forum_print_big_search_form($course);
 
-        print_footer($course);
+    echo $OUTPUT->footer();
         exit;
-    }
-
-
-    print_header_simple("$strsearchresults", "", $navigation, '', "", "",  $searchform, navmenu($course));
+}
 
-    echo '<div class="reportlink">';
-    echo '<a href="search.php?id='.$course->id.
+//including this here to prevent it being included if there are no search results
+require_once($CFG->dirroot.'/rating/lib.php');
+
+//set up the ratings information that will be the same for all posts
+$ratingoptions = new stdClass();
+$ratingoptions->component = 'mod_forum';
+$ratingoptions->ratingarea = 'post';
+$ratingoptions->userid = $USER->id;
+$ratingoptions->returnurl = $PAGE->url->out(false);
+$rm = new rating_manager();
+
+$PAGE->set_title($strsearchresults);
+$PAGE->set_heading($course->fullname);
+$PAGE->set_button($searchform);
+echo $OUTPUT->header();
+echo '<div class="reportlink">';
+echo '<a href="search.php?id='.$course->id.
                              '&amp;user='.urlencode($user).
                              '&amp;userid='.$userid.
                              '&amp;forumid='.$forumid.
@@ -156,40 +187,41 @@
                              '&amp;datefrom='.$datefrom.
                              '&amp;showform=1'.
                              '">'.get_string('advancedsearch','forum').'...</a>';
-    echo '</div>';
+echo '</div>';
 
-    print_heading("$strsearchresults: $totalcount");
+echo $OUTPUT->heading("$strsearchresults: $totalcount");
 
-    print_paging_bar($totalcount, $page, $perpage, "search.php?search=".urlencode(stripslashes($search))."&amp;id=$course->id&amp;perpage=$perpage&amp;");
+$url = new moodle_url('search.php', array('search' => $search, 'id' => $course->id, 'perpage' => $perpage));
+echo $OUTPUT->paging_bar($totalcount, $page, $perpage, $url);
 
-    //added to implement highlighting of search terms found only in HTML markup
-    //fiedorow - 9/2/2005
-    $strippedsearch = str_replace('user:','',$search);
-    $strippedsearch = str_replace('subject:','',$strippedsearch);
-    $strippedsearch = str_replace('&quot;','',$strippedsearch);
-    $searchterms = explode(' ', $strippedsearch);    // Search for words independently
-    foreach ($searchterms as $key => $searchterm) {
+//added to implement highlighting of search terms found only in HTML markup
+//fiedorow - 9/2/2005
+$strippedsearch = str_replace('user:','',$search);
+$strippedsearch = str_replace('subject:','',$strippedsearch);
+$strippedsearch = str_replace('&quot;','',$strippedsearch);
+$searchterms = explode(' ', $strippedsearch);    // Search for words independently
+foreach ($searchterms as $key => $searchterm) {
         if (preg_match('/^\-/',$searchterm)) {
             unset($searchterms[$key]);
         } else {
             $searchterms[$key] = preg_replace('/^\+/','',$searchterm);
         }
-    }
-    $strippedsearch = implode(' ', $searchterms);    // Rebuild the string
+}
+$strippedsearch = implode(' ', $searchterms);    // Rebuild the string
 
-    foreach ($posts as $post) {
+foreach ($posts as $post) {
 
         // Replace the simple subject with the three items forum name -> thread name -> subject
         // (if all three are appropriate) each as a link.
-        if (! $discussion = get_record('forum_discussions', 'id', $post->discussion)) {
-            error('Discussion ID was incorrect');
+    if (! $discussion = $DB->get_record('forum_discussions', array('id' => $post->discussion))) {
+        print_error('invaliddiscussionid', 'forum');
         }
-        if (! $forum = get_record('forum', 'id', "$discussion->forum")) {
-            error("Could not find forum $discussion->forum");
+    if (! $forum = $DB->get_record('forum', array('id' => "$discussion->forum"))) {
+        print_error('invalidforumid', 'forum');
         }
 
         if (!$cm = get_coursemodule_from_instance('forum', $forum->id)) {
-            error('Course Module ID was incorrect');
+        print_error('invalidcoursemodule');
         }
 
         $post->subject = highlight($strippedsearch, $post->subject);
@@ -206,23 +238,43 @@
         $post->subject = $fullsubject;
         $post->subjectnoformat = true;
 
+    //add the ratings information to the post
+    //Unfortunately seem to have do this individually as posts may be from different forums
+    if ($forum->assessed != RATING_AGGREGATE_NONE) {
+        $modcontext = get_context_instance(CONTEXT_MODULE, $cm->id);
+        $ratingoptions->context = $modcontext;
+        $ratingoptions->items = array($post);
+        $ratingoptions->aggregate = $forum->assessed;//the aggregation method
+        $ratingoptions->scaleid = $forum->scale;
+        $ratingoptions->assesstimestart = $forum->assesstimestart;
+        $ratingoptions->assesstimefinish = $forum->assesstimefinish;
+        $postswithratings = $rm->get_ratings($ratingoptions);
+
+        if ($postswithratings && count($postswithratings)==1) {
+            $post = $postswithratings[0];
+        }
+    }
+
         // Identify search terms only found in HTML markup, and add a warning about them to
         // the start of the message text. However, do not do the highlighting here. forum_print_post
         // will do it for us later.
         $missing_terms = "";
 
-        $options = new object();
-        $options->trusttext = true;
-        $message = highlight($strippedsearch,
-                        format_text($post->message, $post->format, $options, $course->id),
+    $options = new stdClass();
+    $options->trusted = $post->messagetrust;
+    $post->message = highlight($strippedsearch,
+                    format_text($post->message, $post->messageformat, $options, $course->id),
                         0, '<fgw9sdpq4>', '</fgw9sdpq4>');
 
         foreach ($searchterms as $searchterm) {
-            if (preg_match("/$searchterm/i",$message) && !preg_match('/<fgw9sdpq4>'.$searchterm.'<\/fgw9sdpq4>/i',$message)) {
+        if (preg_match("/$searchterm/i",$post->message) && !preg_match('/<fgw9sdpq4>'.$searchterm.'<\/fgw9sdpq4>/i',$post->message)) {
                 $missing_terms .= " $searchterm";
             }
         }
 
+    $post->message = str_replace('<fgw9sdpq4>', '<span class="highlight">', $post->message);
+    $post->message = str_replace('</fgw9sdpq4>', '</span>', $post->message);
+
         if ($missing_terms) {
             $strmissingsearchterms = get_string('missingsearchterms','forum');
             $post->message = '<p class="highlight2">'.$strmissingsearchterms.' '.$missing_terms.'</p>'.$post->message;
@@ -232,13 +284,13 @@
         $fulllink = "<a href=\"discuss.php?d=$post->discussion#p$post->id\">".get_string("postincontext", "forum")."</a>";
 
         // Now pring the post.
-        forum_print_post($post, $discussion, $forum, $cm, $course, false, false, false, false,
-                $fulllink, $strippedsearch, -99, false);
-    }
+    forum_print_post($post, $discussion, $forum, $cm, $course, false, false, false,
+            $fulllink, '', -99, false);
+}
 
-    print_paging_bar($totalcount, $page, $perpage, "search.php?search=".urlencode(stripslashes($search))."&amp;id=$course->id&amp;perpage=$perpage&amp;");
+echo $OUTPUT->paging_bar($totalcount, $page, $perpage, $url);
 
-    print_footer($course);
+echo $OUTPUT->footer();
 
 
 
@@ -246,16 +298,13 @@
  * @todo Document this function
  */
 function forum_print_big_search_form($course) {
-    global $CFG, $words, $subject, $phrase, $user, $userid, $fullwords, $notwords, $datefrom, $dateto;
+    global $CFG, $DB, $words, $subject, $phrase, $user, $userid, $fullwords, $notwords, $datefrom, $dateto, $PAGE, $OUTPUT;
 
-    print_simple_box(get_string('searchforumintro', 'forum'), 'center', '', '', 'searchbox', 'intro');
+    echo $OUTPUT->box(get_string('searchforumintro', 'forum'), 'searchbox boxaligncenter', 'intro');
 
-    print_simple_box_start("center");
+    echo $OUTPUT->box_start('generalbox boxaligncenter');
 
-    echo "<script type=\"text/javascript\">\n";
-    echo "var timefromitems = ['fromday','frommonth','fromyear','fromhour', 'fromminute'];\n";
-    echo "var timetoitems = ['today','tomonth','toyear','tohour','tominute'];\n";
-    echo "</script>\n";
+    echo html_writer::script('', $CFG->wwwroot.'/mod/forum/forum.js');
 
     echo '<form id="searchform" action="search.php" method="get">';
     echo '<table cellpadding="10" class="searchbox" id="form">';
@@ -276,7 +325,7 @@ function forum_print_big_search_form($course) {
     echo '<td class="c1"><input type="text" size="35" name="notwords" id="notwords" value="'.s($notwords, true).'" alt="" /></td>';
     echo '</tr>';
 
-    if ($CFG->dbfamily == 'mysql' || $CFG->dbfamily == 'postgres') {
+    if ($DB->get_dbfamily() == 'mysql' || $DB->get_dbfamily() == 'postgres') {
         echo '<tr>';
         echo '<td class="c0"><label for="fullwords">'.get_string('searchfullwords', 'forum').'</label></td>';
         echo '<td class="c1"><input type="text" size="35" name="fullwords" id="fullwords" value="'.s($fullwords, true).'" alt="" /></td>';
@@ -294,9 +343,12 @@ function forum_print_big_search_form($course) {
     }
 
     echo '<input name="timefromrestrict" type="checkbox" value="1" alt="'.get_string('searchdatefrom', 'forum').'" onclick="return lockoptions(\'searchform\', \'timefromrestrict\', timefromitems)" '.  $datefromchecked . ' /> ';
-    print_date_selector('fromday', 'frommonth', 'fromyear', $datefrom);
-    print_time_selector('fromhour', 'fromminute', $datefrom);
-
+    $selectors = html_writer::select_time('days', 'fromday', $datefrom)
+               . html_writer::select_time('months', 'frommonth', $datefrom)
+               . html_writer::select_time('years', 'fromyear', $datefrom)
+               . html_writer::select_time('hours', 'fromhour', $datefrom)
+               . html_writer::select_time('minutes', 'fromminute', $datefrom);
+    echo $selectors;
     echo '<input type="hidden" name="hfromday" value="0" />';
     echo '<input type="hidden" name="hfrommonth" value="0" />';
     echo '<input type="hidden" name="hfromyear" value="0" />';
@@ -317,8 +369,12 @@ function forum_print_big_search_form($course) {
     }
 
     echo '<input name="timetorestrict" type="checkbox" value="1" alt="'.get_string('searchdateto', 'forum').'" onclick="return lockoptions(\'searchform\', \'timetorestrict\', timetoitems)" ' .$datetochecked. ' /> ';
-    print_date_selector('today', 'tomonth', 'toyear', $dateto);
-    print_time_selector('tohour', 'tominute', $dateto);
+    $selectors = html_writer::select_time('days', 'fromday', $dateto)
+               . html_writer::select_time('months', 'frommonth', $dateto)
+               . html_writer::select_time('years', 'fromyear', $dateto)
+               . html_writer::select_time('hours', 'fromhour', $dateto)
+               . html_writer::select_time('minutes', 'fromminute', $dateto);
+    echo $selectors;
 
     echo '<input type="hidden" name="htoday" value="0" />';
     echo '<input type="hidden" name="htomonth" value="0" />';
@@ -332,7 +388,7 @@ function forum_print_big_search_form($course) {
     echo '<tr>';
     echo '<td class="c0"><label for="menuforumid">'.get_string('searchwhichforums', 'forum').'</label></td>';
     echo '<td class="c1">';
-    choose_from_menu(forum_menu_list($course), 'forumid', '', get_string('allforums', 'forum'), '');
+    echo html_writer::select(forum_menu_list($course), 'forumid', '', array(''=>get_string('allforums', 'forum')));
     echo '</td>';
     echo '</tr>';
 
@@ -354,12 +410,10 @@ function forum_print_big_search_form($course) {
     echo '</table>';
     echo '</form>';
 
-    echo "<script type=\"text/javascript\">";
-    echo "lockoptions('searchform','timefromrestrict', timefromitems);";
-    echo "lockoptions('searchform','timetorestrict', timetoitems);";
-    echo "</script>\n";
+    echo html_writer::script(js_writer::function_call('lockoptions_timetoitems'));
+    echo html_writer::script(js_writer::function_call('lockoptions_timefromitems'));
 
-    print_simple_box_end();
+    echo $OUTPUT->box_end();
 }
 
 /**
@@ -410,4 +464,3 @@ function forum_menu_list($course)  {
     return $menu;
 }
 
-?>
