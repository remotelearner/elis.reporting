diff --git a/question/import_form.php b/question/import_form.php
index 108846b..a3b082b 100644
--- a/question/import_form.php
+++ b/question/import_form.php
@@ -1,94 +1,147 @@
-<?php  // $Id$
-
-if (!defined('MOODLE_INTERNAL')) {
-    die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
-}
-
-require_once($CFG->libdir.'/formslib.php');
-
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Defines the import questions form.
+ *
+ * @package    moodlecore
+ * @subpackage questionbank
+ * @copyright  2007 Jamie Pratt me@jamiep.org
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->libdir . '/formslib.php');
+
+
+/**
+ * Form to import questions into the question bank.
+ *
+ * @copyright  2007 Jamie Pratt me@jamiep.org
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 class question_import_form extends moodleform {
 
-    function definition() {
+    protected function definition() {
         global $COURSE;
-        $mform    =& $this->_form;
+        $mform = $this->_form;
 
         $defaultcategory   = $this->_customdata['defaultcategory'];
         $contexts   = $this->_customdata['contexts'];
 
-//--------------------------------------------------------------------------------
-        $mform->addElement('header','fileformat', get_string('fileformat','quiz'));
+        // Choice of import format, with help icons.
+        $mform->addElement('header', 'fileformat', get_string('fileformat', 'question'));
+
         $fileformatnames = get_import_export_formats('import');
         $radioarray = array();
-        foreach ($fileformatnames as $id => $fileformatname) {
-            $radioarray[] = &MoodleQuickForm::createElement('radio','format','',$fileformatname,$id );
+        $i = 0 ;
+        foreach ($fileformatnames as $shortname => $fileformatname) {
+            $currentgrp1 = array();
+            $currentgrp1[] = $mform->createElement('radio', 'format', '', $fileformatname, $shortname);
+            $mform->addGroup($currentgrp1, "formathelp[$i]", '', array('<br />'), false);
+            $mform->addHelpButton("formathelp[$i]", $shortname, 'qformat_' . $shortname);
+            $i++ ;
         }
-        $mform->addGroup($radioarray,'format', '', array('<br />'), false);
-        $mform->addRule('format', null, 'required', null, 'client' );
-        $mform->setHelpButton('format', array('import', get_string('importquestions', 'quiz'), 'quiz'));
+        $mform->addRule("formathelp[0]", null, 'required', null, 'client');
 
-//--------------------------------------------------------------------------------
+        // Import options.
         $mform->addElement('header','general', get_string('general', 'form'));
 
-        $mform->addElement('questioncategory', 'category', get_string('category','quiz'), compact('contexts'));
+        $mform->addElement('questioncategory', 'category', get_string('importcategory', 'question'), compact('contexts'));
         $mform->setDefault('category', $defaultcategory);
-        $mform->setHelpButton('category', array('importcategory', get_string('importcategory','quiz'), 'quiz'));
+        $mform->addHelpButton('category', 'importcategory', 'question');
 
         $categorygroup = array();
-        $categorygroup[] =& $mform->createElement('checkbox', 'catfromfile', '', get_string('getcategoryfromfile', 'question'));
-        $categorygroup[] =& $mform->createElement('checkbox', 'contextfromfile', '', get_string('getcontextfromfile', 'question'));
+        $categorygroup[] = $mform->createElement('checkbox', 'catfromfile', '', get_string('getcategoryfromfile', 'question'));
+        $categorygroup[] = $mform->createElement('checkbox', 'contextfromfile', '', get_string('getcontextfromfile', 'question'));
         $mform->addGroup($categorygroup, 'categorygroup', '', '', false);
         $mform->disabledIf('categorygroup', 'catfromfile', 'notchecked');
         $mform->setDefault('catfromfile', 1);
         $mform->setDefault('contextfromfile', 1);
 
-
         $matchgrades = array();
-        $matchgrades['error'] = get_string('matchgradeserror','quiz');
-        $matchgrades['nearest'] = get_string('matchgradesnearest','quiz');
-        $mform->addElement('select', 'matchgrades', get_string('matchgrades','quiz'), $matchgrades);
-        $mform->setHelpButton('matchgrades', array('matchgrades', get_string('matchgrades','quiz'), 'quiz'));
+        $matchgrades['error'] = get_string('matchgradeserror', 'question');
+        $matchgrades['nearest'] = get_string('matchgradesnearest', 'question');
+        $mform->addElement('select', 'matchgrades', get_string('matchgrades', 'question'), $matchgrades);
+        $mform->addHelpButton('matchgrades', 'matchgrades', 'question');
         $mform->setDefault('matchgrades', 'error');
 
-        $mform->addElement('selectyesno', 'stoponerror', get_string('stoponerror', 'quiz'));
+        $mform->addElement('selectyesno', 'stoponerror', get_string('stoponerror', 'question'));
         $mform->setDefault('stoponerror', 1);
-        $mform->setHelpButton('stoponerror', array('stoponerror', get_string('stoponerror', 'quiz'), 'quiz'));
+        $mform->addHelpButton('stoponerror', 'stoponerror', 'question');
+
+        // The file to import
+        $mform->addElement('header', 'importfileupload', get_string('importquestions', 'question'));
 
-//--------------------------------------------------------------------------------
-        $mform->addElement('header', 'importfileupload', get_string('importfileupload','quiz'));
+        $mform->addElement('filepicker', 'newfile', get_string('import'));
+        $mform->addRule('newfile', null, 'required', null, 'client');
 
-        $this->set_upload_manager(new upload_manager('newfile', true, false, $COURSE, false, 0, false, true, false));
-        $mform->addElement('file', 'newfile', get_string('upload'));
-//--------------------------------------------------------------------------------
-        $mform->addElement('submit', 'submitbutton', get_string('uploadthisfile'));
+        // Submit button.
+        $mform->addElement('submit', 'submitbutton', get_string('import'));
 
-//--------------------------------------------------------------------------------
-        if (has_capability('moodle/course:managefiles', get_context_instance(CONTEXT_COURSE, $COURSE->id))){
-            $mform->addElement('header', 'importfilearea', get_string('importfilearea','quiz'));
+        // Set a template for the format select elements
+        $renderer = $mform->defaultRenderer();
+        $template = "{help} {element}\n";
+        $renderer->setGroupElementTemplate($template, 'format');
+    }
 
-            $mform->addElement('choosecoursefile', 'choosefile', get_string('choosefile','quiz'));
-//--------------------------------------------------------------------------------
-            $mform->addElement('submit', 'submitbutton', get_string('importfromthisfile','quiz'));
+    /**
+     * Checks that a file has been uploaded, and that it is of a plausible type.
+     * @param array $data the submitted data.
+     * @param array $errors the errors so far.
+     * @return array the updated errors.
+     */
+    protected function validate_uploaded_file($data, $errors) {
+        if (empty($data['newfile'])) {
+            $errors['newfile'] = get_string('required');
+            return $errors;
         }
-//--------------------------------------------------------------------------------
-        $mform->addElement('static', 'dummy', '');
-        $mform->closeHeaderBefore('dummy');
+
+        $files = $this->get_draft_files('newfile');
+        if (count($files) < 1) {
+            $errors['newfile'] = get_string('required');
+            return $errors;
     }
-    function get_importfile_name(){
-        if ($this->is_submitted() and $this->is_validated()) {
-            // return the temporary filename to process
-            return $this->_upload_manager->files['newfile']['tmp_name'];
-        }else{
-            return  NULL;
+
+        $formatfile = 'format/' . $data['format'] . '/format.php';
+        if (!is_readable($formatfile)) {
+            throw new moodle_exception('formatnotfound', 'question', '', $data['format']);
         }
+
+        require_once($formatfile);
+
+        $classname = 'qformat_' . $data['format'];
+        $qformat = new $classname();
+
+        $file = reset($files);
+        if ($file->get_mimetype() != $qformat->mime_type()) {
+            $a = new stdClass();
+            $a->actualtype = $file->get_mimetype();
+            $a->expectedtype = $qformat->mime_type();
+            $errors['newfile'] = get_string('importwrongfiletype', 'question', $a);
     }
     
-    function get_importfile_realname(){
-        if ($this->is_submitted() and $this->is_validated()) {
-            // return the temporary filename to process
-            return $this->_upload_manager->files['newfile']['name'];
-        }else{
-            return  NULL;
+        return $errors;
         }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+        $errors = $this->validate_uploaded_file($data, $errors);
+        return $errors;
     }
 }
-?>
