diff --git a/question/question.php b/question/question.php
index c67c6fb..896a3d1 100644
--- a/question/question.php
+++ b/question/question.php
@@ -1,13 +1,29 @@
-<?php // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
- * Page for editing questions using the new form library.
+ * Page for editing questions.
  *
- * @author T.J.Hunt@open.ac.uk
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package questionbank
- *//** */
+ * @package    moodlecore
+ * @subpackage questionbank
+ * @copyright  1999 onwards Martin Dougiamas {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
 
-// Includes.
 require_once(dirname(__FILE__) . '/../config.php');
 require_once(dirname(__FILE__) . '/editlib.php');
 require_once($CFG->libdir . '/filelib.php');
@@ -22,8 +38,60 @@ $courseid = optional_param('courseid', 0, PARAM_INT);
 $wizardnow = optional_param('wizardnow', '', PARAM_ALPHA);
 $movecontext = optional_param('movecontext', 0, PARAM_BOOL); // Switch to make
         // question uneditable - form is displayed to edit category only
-$returnurl = optional_param('returnurl', 0, PARAM_LOCALURL);
+$originalreturnurl = optional_param('returnurl', 0, PARAM_LOCALURL);
+$appendqnumstring = optional_param('appendqnumstring', '', PARAM_ALPHA);
 $inpopup = optional_param('inpopup', 0, PARAM_BOOL);
+$scrollpos = optional_param('scrollpos', 0, PARAM_INT);
+
+$url = new moodle_url('/question/question.php');
+if ($id !== 0) {
+    $url->param('id', $id);
+}
+if ($qtype !== '') {
+    $url->param('qtype', $qtype);
+}
+if ($categoryid !== 0) {
+    $url->param('category', $categoryid);
+}
+if ($cmid !== 0) {
+    $url->param('cmid', $cmid);
+}
+if ($courseid !== 0) {
+    $url->param('courseid', $courseid);
+}
+if ($wizardnow !== '') {
+    $url->param('wizardnow', $wizardnow);
+}
+if ($movecontext !== 0) {
+    $url->param('movecontext', $movecontext);
+}
+if ($originalreturnurl !== 0) {
+    $url->param('returnurl', $originalreturnurl);
+}
+if ($appendqnumstring !== '') {
+    $url->param('appendqnumstring', $appendqnumstring);
+}
+if ($inpopup !== 0) {
+    $url->param('inpopup', $inpopup);
+}
+if ($scrollpos) {
+    $url->param('scrollpos', $scrollpos);
+}
+$PAGE->set_url($url);
+
+if ($originalreturnurl) {
+    if (strpos($originalreturnurl, '/') !== 0) {
+        throw new coding_exception("returnurl must be a local URL starting with '/'. $originalreturnurl was given.");
+    }
+    $returnurl = new moodle_url($originalreturnurl);
+} else if ($cmid) {
+    $returnurl = new moodle_url('/question/edit.php', array('cmid' => $cmid));
+} else {
+    $returnurl = new moodle_url('/question/edit.php', array('courseid' => $courseid));
+}
+if ($scrollpos) {
+    $returnurl->param('scrollpos', $scrollpos);
+}
 
 if ($movecontext && !$id){
     print_error('questiondoesnotexist', 'question', $returnurl);
@@ -39,34 +107,51 @@ if ($cmid){
     $module = null;
     $cm = null;
 } else {
-    error('Need to pass courseid or cmid to this script.');
+    print_error('missingcourseorcmid', 'question');
 }
 $contexts = new question_edit_contexts($thiscontext);
+$PAGE->set_pagelayout('admin');
 
-if (!$returnurl) {
-    $returnurl = "{$CFG->wwwroot}/question/edit.php?courseid={$COURSE->id}";
+if (optional_param('addcancel', false, PARAM_BOOL)) {
+    redirect($returnurl);
 }
 
 if ($id) {
-    if (!$question = get_record('question', 'id', $id)) {
+    if (!$question = $DB->get_record('question', array('id' => $id))) {
         print_error('questiondoesnotexist', 'question', $returnurl);
     }
-    get_question_options($question);
+    get_question_options($question, true);
+
 } else if ($categoryid && $qtype) { // only for creating new questions
-    $question = new stdClass;
+    $question = new stdClass();
     $question->category = $categoryid;
     $question->qtype = $qtype;
+
+    // Check that users are allowed to create this question type at the moment.
+    if (!question_bank::qtype_enabled($qtype)) {
+        print_error('cannotenable', 'question', $returnurl, $qtype);
+    }
+
+} else if ($categoryid) {
+    // Category, but no qtype. They probably came from the addquestion.php
+    // script without choosing a question type. Send them back.
+    $addurl = new moodle_url('/question/addquestion.php', $url->params());
+    $addurl->param('validationerror', 1);
+    redirect($addurl);
+
 } else {
     print_error('notenoughdatatoeditaquestion', 'question', $returnurl);
 }
 
+$qtypeobj = question_bank::get_qtype($question->qtype);
+
 // Validate the question category.
-if (!$category = get_record('question_categories', 'id', $question->category)) {
+if (!$category = $DB->get_record('question_categories', array('id' => $question->category))) {
     print_error('categorydoesnotexist', 'question', $returnurl);
 }
 
-//permissions
-$question->formoptions = new object();
+// Check permissions
+$question->formoptions = new stdClass();
 
 $categorycontext = get_context_instance_by_id($category->contextid);
 $addpermission = has_capability('moodle/question:add', $categorycontext);
@@ -93,40 +178,33 @@ if ($id) {
         }
     }
 
-
 } else  { // creating a new question
     require_capability('moodle/question:add', $categorycontext);
     $formeditable = true;
+    $question->formoptions->canedit = question_has_capability_on($question, 'edit');
+    $question->formoptions->canmove = (question_has_capability_on($question, 'move') && $addpermission);
     $question->formoptions->repeatelements = true;
     $question->formoptions->movecontext = false;
 }
 
-
 // Validate the question type.
-if (!isset($QTYPES[$question->qtype])) {
-    print_error('unknownquestiontype', 'question', $returnurl, $question->qtype);
-}
-$CFG->pagepath = 'question/type/' . $question->qtype;
+$PAGE->set_pagetype('question-type-' . $question->qtype);
 
 // Create the question editing form.
-if ($wizardnow!=='' && !$movecontext){
-    if (!method_exists($QTYPES[$question->qtype], 'next_wizard_form')){
-        print_error('missingimportantcode', 'question', $returnurl, 'wizard form definition');
-    } else {
-        $mform = $QTYPES[$question->qtype]->next_wizard_form('question.php', $question, $wizardnow, $formeditable);
-    }
+if ($wizardnow !== '' && !$movecontext){
+    $mform = $qtypeobj->next_wizard_form('question.php', $question, $wizardnow, $formeditable);
 } else {
-    $mform = $QTYPES[$question->qtype]->create_editing_form('question.php', $question, $category, $contexts, $formeditable);
-}
-if ($mform === null) {
-    print_error('missingimportantcode', 'question', $returnurl, 'question editing form definition for "'.$question->qtype.'"');
+    $mform = $qtypeobj->create_editing_form('question.php', $question, $category, $contexts, $formeditable);
 }
 $toform = fullclone($question); // send the question object and a few more parameters to the form
 $toform->category = "$category->id,$category->contextid";
+$toform->scrollpos = $scrollpos;
 if ($formeditable && $id){
     $toform->categorymoveto = $toform->category;
 }
-$toform->returnurl = $returnurl;
+
+$toform->appendqnumstring = $appendqnumstring;
+$toform->returnurl = $originalreturnurl;
 $toform->movecontext = $movecontext;
 if ($cm !== null){
     $toform->cmid = $cm->id;
@@ -134,18 +212,19 @@ if ($cm !== null){
 } else {
     $toform->courseid = $COURSE->id;
 }
+
 $toform->inpopup = $inpopup;
+
 $mform->set_data($toform);
 
-if ($mform->is_cancelled()){
+if ($mform->is_cancelled()) {
     if ($inpopup) {
         close_window();
     } else {
-        $nexturl = new moodle_url($returnurl);
-        $nexturl->param('lastchanged', $question->id);
-        redirect($nexturl->out());
+        redirect($returnurl);
     }
-} elseif ($fromform = $mform->get_data()) {
+
+} else if ($fromform = $mform->get_data()) {
     /// If we are saving as a copy, break the connection to the old question.
     if (!empty($fromform->makecopy)) {
         $question->id = 0;
@@ -171,92 +250,85 @@ if ($mform->is_cancelled()){
         question_require_capability_on($question, 'move');
     }
 
-    /// Ensure we redirect back to the category the question is being saved into.
-    $returnurl = new moodle_url($returnurl);
+    // Ensure we redirect back to the category the question is being saved into.
     $returnurl->param('category', $fromform->category);
-    $returnurl = $returnurl->out();
 
-    /// Call the appropriate method.
     if ($movecontext) {
+        // We are just moving the question to a different context.
         list($tocatid, $tocontextid) = explode(',', $fromform->categorymoveto);
-        $tocontext = get_context_instance_by_id($tocontextid);
-        require_capability('moodle/question:add', $tocontext);
-        if (get_filesdir_from_context($categorycontext) != get_filesdir_from_context($tocontext)){
-            $movecontexturl  = new moodle_url($CFG->wwwroot.'/question/contextmoveq.php',
-                                            array('returnurl' => $returnurl,
-                                                    'ids'=>$question->id,
-                                                    'tocatid'=> $tocatid));
-            if ($cmid){
-                $movecontexturl->param('cmid', $cmid);
+        require_capability('moodle/question:add', get_context_instance_by_id($tocontextid));
+        question_move_questions_to_category(array($question->id), $tocatid);
+
             } else {
-                $movecontexturl->param('courseid', $COURSE->id);
-            }
-            redirect($movecontexturl->out());
+        // We are acutally saving the question.
+        $question = $qtypeobj->save_question($question, $fromform);
+        if (!empty($CFG->usetags) && isset($fromform->tags)) {
+            // A wizardpage from multipe pages questiontype like calculated may not
+            // allow editing the question tags, hence the isset($fromform->tags) test.
+            require_once($CFG->dirroot.'/tag/lib.php');
+            tag_set('question', $question->id, $fromform->tags);
         }
     }
 
-    $question = $QTYPES[$question->qtype]->save_question($question, $fromform, $COURSE, $wizardnow);
-    if (($QTYPES[$question->qtype]->finished_edit_wizard($fromform)) || $movecontext){
+    if (($qtypeobj->finished_edit_wizard($fromform)) || $movecontext) {
         if ($inpopup) {
-            notify(get_string('changessaved'), '');
+            echo $OUTPUT->notification(get_string('changessaved'), '');
             close_window(3);
         } else {
-            $nexturl = new moodle_url($returnurl);
-            $nexturl->param('lastchanged',$question->id);
-            redirect($nexturl->out());
+            $returnurl->param('lastchanged', $question->id);
+            if ($appendqnumstring) {
+                $returnurl->param($appendqnumstring, $question->id);
+                $returnurl->param('sesskey', sesskey());
+                $returnurl->param('cmid', $cmid);
+            }
+            redirect($returnurl);
         }
+
     } else {
-        $nexturlparams = array('returnurl'=>$returnurl);
+        $nexturlparams = array(
+                'returnurl' => $originalreturnurl,
+                'appendqnumstring' => $appendqnumstring,
+                'scrollpos' => $scrollpos);
         if (isset($fromform->nextpageparam) && is_array($fromform->nextpageparam)){
-            $nexturlparams += $fromform->nextpageparam;//useful for passing data to the next page which is not saved in the database
+            //useful for passing data to the next page which is not saved in the database.
+            $nexturlparams += $fromform->nextpageparam;
         }
         $nexturlparams['id'] = $question->id;
         $nexturlparams['wizardnow'] = $fromform->wizard;
-        $nexturl = new moodle_url('question.php', $nexturlparams);
+        $nexturl = new moodle_url('/question/question.php', $nexturlparams);
         if ($cmid){
             $nexturl->param('cmid', $cmid);
         } else {
             $nexturl->param('courseid', $COURSE->id);
         }
-        redirect($nexturl->out());
+        redirect($nexturl);
     }
-} else {
 
-    list($streditingquestion,) = $QTYPES[$question->qtype]->get_heading();
-    $headtags = get_editing_head_contributions($question);
+} else {
+    $streditingquestion = $qtypeobj->get_heading();
+    $PAGE->set_title($streditingquestion);
+    $PAGE->set_heading($COURSE->fullname);
     if ($cm !== null) {
         $strmodule = get_string('modulename', $cm->modname);
-        $strupdatemodule = has_capability('moodle/course:manageactivities', get_context_instance(CONTEXT_COURSE, $COURSE->id))
-            ? update_module_button($cm->id, $cm->course, $strmodule)
-            : "";
-
         $streditingmodule = get_string('editinga', 'moodle', $strmodule);
-
-        $navlinks = array();
-        $navlinks[] = array('name' => get_string('modulenameplural', $cm->modname), 'link' => "$CFG->wwwroot/mod/{$cm->modname}/index.php?id=$cm->course", 'type' => 'activity');
-        $navlinks[] = array('name' => format_string($module->name), 'link' => "$CFG->wwwroot/mod/{$cm->modname}/view.php?id={$cm->id}", 'type' => 'title');
+        $PAGE->navbar->add(get_string('modulenameplural', $cm->modname), new moodle_url('/mod/'.$cm->modname.'/index.php', array('id'=>$cm->course)));
+        $PAGE->navbar->add(format_string($module->name), new moodle_url('/mod/'.$cm->modname.'/view.php', array('id'=>$cm->id)));
         if (stripos($returnurl, "$CFG->wwwroot/mod/{$cm->modname}/view.php")!== 0){
             //don't need this link if returnurl returns to view.php
-            $navlinks[] = array('name' => $streditingmodule, 'link' => $returnurl, 'type' => 'title');
+            $PAGE->navbar->add($streditingmodule, $returnurl);
         }
-        $navlinks[] = array('name' => $streditingquestion, 'link' => '', 'type' => 'title');
-        $navigation = build_navigation($navlinks);
-        print_header_simple($streditingquestion, '', $navigation, '', $headtags, true, $strupdatemodule);
+        $PAGE->navbar->add($streditingquestion);
+        echo $OUTPUT->header();
 
     } else {
-        $navlinks = array();
-        $navlinks[] = array('name' => get_string('editquestions', "quiz"), 'link' => $returnurl, 'type' => 'title');
-        $navlinks[] = array('name' => $streditingquestion, 'link' => '', 'type' => 'title');
-        $strediting = '<a href="edit.php?courseid='.$COURSE->id.'">'.
-                get_string("editquestions", "quiz").'</a> -> '.$streditingquestion;
-        $navigation = build_navigation($navlinks);
-        print_header_simple($streditingquestion, '', $navigation, '', $headtags);
+        $strediting = '<a href="edit.php?courseid='.$COURSE->id.'">'.get_string('editquestions', 'question').'</a> -> '.$streditingquestion;
+        $PAGE->navbar->add(get_string('editquestions', 'question'), $returnurl);
+        $PAGE->navbar->add($streditingquestion);
+        echo $OUTPUT->header();
     }
 
-
     // Display a heading, question editing form and possibly some extra content needed for
     // for this question type.
-    $QTYPES[$question->qtype]->display_question_editing_page($mform, $question, $wizardnow);
-    print_footer($COURSE);
+    $qtypeobj->display_question_editing_page($mform, $question, $wizardnow);
+    echo $OUTPUT->footer();
 }
-?>
