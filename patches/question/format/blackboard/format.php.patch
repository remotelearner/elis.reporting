diff --git a/question/format/blackboard/format.php b/question/format/blackboard/format.php
index 3e4414d..1abf61f 100644
--- a/question/format/blackboard/format.php
+++ b/question/format/blackboard/format.php
@@ -1,62 +1,46 @@
-<?php // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
-////////////////////////////////////////////////////////////////////////////
-/// Blackboard 6.0 Format
-///
-/// This Moodle class provides all functions necessary to import and export
-///
-///
-////////////////////////////////////////////////////////////////////////////
-
-// Based on default.php, included by ../import.php
 /**
- * @package questionbank
- * @subpackage importexport
+ * Blackboard question importer.
+ *
+ * @package    qformat
+ * @subpackage blackboard
+ * @copyright  2003 Scott Elliott
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
-require_once ("$CFG->libdir/xmlize.php");
-require_once ("$CFG->libdir/tcpdf/html_entity_decode_php4.php");
-
-class qformat_blackboard extends qformat_default {
-
-    function provide_import() {
-        return true;
-    }
-
 
-/********************************
 
-    function readdata($filename) {
-    /// Returns complete file with an array, one item per line
+defined('MOODLE_INTERNAL') || die();
 
-        if (is_readable($filename)) {
+require_once ($CFG->libdir . '/xmlize.php');
 
-            $zip = zip_open($filename);
-            $zip_entry = $zip_read($zip);
-            if (strstr($zip_entry_name($zip_entry), "imsmanifest") == 0)
-              $zip_entry = $zip_read($zip); // skip past manifest file
-
-            if (zip_entry_open($zip, $zip_entry, "r")) {
-
-              $strbuf = zip_entry_read($zip_entry, zip_entry_filesize($zip_entry));
-              $buf = explode("\n", $strbuf);
-              zip_entry_close($zip_entry);
-              zip_close($zip);
-              return $buf;
-
-            } else {
-
-              zip_close($zip);
-              return false;
-
-            }
 
-        }
+/**
+ * Blackboard question importer.
+ *
+ * @copyright  2003 Scott Elliott
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class qformat_blackboard extends qformat_default {
 
-        return false;
+    public function provide_import() {
+        return true;
     }
 
-********************************/
-
   function readquestions ($lines) {
     /// Parses an array of lines into an array of questions,
     /// where each item is a question object as defined by
@@ -75,12 +59,12 @@ class qformat_blackboard extends qformat_default {
     $this->process_essay($xml, $questions);
 
     return $questions;
-}
+    }
 
 //----------------------------------------
 // Process Essay Questions
 //----------------------------------------
-function process_essay($xml, &$questions ) {
+    function process_essay($xml, &$questions ) {
   
     if (isset($xml["POOL"]["#"]["QUESTION_ESSAY"])) {
     	$essayquestions = $xml["POOL"]["#"]["QUESTION_ESSAY"];
@@ -100,9 +84,8 @@ function process_essay($xml, &$questions ) {
 
         // put questiontext in question object
         if ($ishtml) {
-            $question->questiontext = html_entity_decode_php4(trim($essayquestion["#"]["BODY"][0]["#"]["TEXT"][0]["#"]));
+                $question->questiontext = html_entity_decode(trim($essayquestion["#"]["BODY"][0]["#"]["TEXT"][0]["#"]));
         }
-        $question->questiontext = addslashes($question->questiontext);
         
         // put name in question object
         $question->name = substr($question->questiontext, 0, 254);
@@ -112,12 +95,12 @@ function process_essay($xml, &$questions ) {
         
         $questions[] = $question;
     } 	
-}
+    }
 
-//----------------------------------------
-// Process True / False Questions
-//----------------------------------------
-function process_tf($xml, &$questions) {
+    //----------------------------------------
+    // Process True / False Questions
+    //----------------------------------------
+    function process_tf($xml, &$questions) {
 
     if (isset($xml["POOL"]["#"]["QUESTION_TRUEFALSE"])) {
         $tfquestions = $xml["POOL"]["#"]["QUESTION_TRUEFALSE"];
@@ -140,11 +123,10 @@ function process_tf($xml, &$questions) {
 
         // put questiontext in question object
         if ($ishtml) {
-            $question->questiontext = html_entity_decode_php4(trim($thisquestion["#"]["BODY"][0]["#"]["TEXT"][0]["#"]));
+                $question->questiontext = html_entity_decode(trim($thisquestion["#"]["BODY"][0]["#"]["TEXT"][0]["#"]),ENT_QUOTES,'UTF-8');
         }
-        $question->questiontext = addslashes($question->questiontext);
         // put name in question object
-        $question->name = substr($question->questiontext, 0, 254);
+            $question->name = shorten_text($question->questiontext, 254);
 
         $choices = $thisquestion["#"]["ANSWER"];
 
@@ -155,22 +137,22 @@ function process_tf($xml, &$questions) {
 
         if (strcmp($id, $correct_answer) == 0) {  // true is correct
             $question->answer = 1;
-            $question->feedbacktrue = addslashes(trim(@$thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_CORRECT"][0]["#"]));
-            $question->feedbackfalse = addslashes(trim(@$thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_INCORRECT"][0]["#"]));
+                $question->feedbacktrue = trim(@$thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_CORRECT"][0]["#"]);
+                $question->feedbackfalse = trim(@$thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_INCORRECT"][0]["#"]);
         } else {  // false is correct
             $question->answer = 0;
-            $question->feedbacktrue = addslashes(trim(@$thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_INCORRECT"][0]["#"]));
-            $question->feedbackfalse = addslashes(trim(@$thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_CORRECT"][0]["#"]));
+                $question->feedbacktrue = trim(@$thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_INCORRECT"][0]["#"]);
+                $question->feedbackfalse = trim(@$thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_CORRECT"][0]["#"]);
         }
         $question->correctanswer = $question->answer;
         $questions[] = $question;
       }
-}
+    }
 
-//----------------------------------------
-// Process Multiple Choice Questions
-//----------------------------------------
-function process_mc($xml, &$questions) {
+    //----------------------------------------
+    // Process Multiple Choice Questions
+    //----------------------------------------
+    function process_mc($xml, &$questions) {
 
     if (isset($xml["POOL"]["#"]["QUESTION_MULTIPLECHOICE"])) {
         $mcquestions = $xml["POOL"]["#"]["QUESTION_MULTIPLECHOICE"];
@@ -193,12 +175,11 @@ function process_mc($xml, &$questions) {
 
         // put questiontext in question object
         if ($ishtml) {
-            $question->questiontext = html_entity_decode_php4(trim($thisquestion["#"]["BODY"][0]["#"]["TEXT"][0]["#"]));
+                $question->questiontext = html_entity_decode(trim($thisquestion["#"]["BODY"][0]["#"]["TEXT"][0]["#"]),ENT_QUOTES,'UTF-8');
         }
-        $question->questiontext = addslashes($question->questiontext);
 
         // put name of question in question object, careful of length
-        $question->name = substr($question->questiontext, 0, 254);
+            $question->name = shorten_text($question->questiontext, 254);
 
         $choices = $thisquestion["#"]["ANSWER"];
         for ($j = 0; $j < sizeof ($choices); $j++) {
@@ -206,9 +187,9 @@ function process_mc($xml, &$questions) {
             $choice = trim($choices[$j]["#"]["TEXT"][0]["#"]);
             // put this choice in the question object.
             if ($ishtml) {
-                $question->answer[$j] = html_entity_decode_php4($choice);
+                    $question->answer[$j] = html_entity_decode($choice,ENT_QUOTES,'UTF-8');
             }
-            $question->answer[$j] = addslashes($question->answer[$j]);
+                $question->answer[$j] = $question->answer[$j];
 
             $id = $choices[$j]["@"]["id"];
             $correct_answer_id = $thisquestion["#"]["GRADABLE"][0]["#"]["CORRECTANSWER"][0]["@"]["answer_id"];
@@ -216,25 +197,25 @@ function process_mc($xml, &$questions) {
             if (strcmp ($id, $correct_answer_id) == 0) {
                 $question->fraction[$j] = 1;
                 if ($ishtml) {
-                    $question->feedback[$j] = html_entity_decode_php4(trim(@$thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_CORRECT"][0]["#"]));
+                        $question->feedback[$j] = html_entity_decode(trim(@$thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_CORRECT"][0]["#"]),ENT_QUOTES,'UTF-8');
                 }
-                $question->feedback[$j] = addslashes($question->feedback[$j]);
+                    $question->feedback[$j] = $question->feedback[$j];
             } else {
                 $question->fraction[$j] = 0;
                 if ($ishtml) {
-                    $question->feedback[$j] = html_entity_decode_php4(trim(@$thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_INCORRECT"][0]["#"]));
+                        $question->feedback[$j] = html_entity_decode(trim(@$thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_INCORRECT"][0]["#"]),ENT_QUOTES,'UTF-8');
                 }
-                $question->feedback[$j] = addslashes($question->feedback[$j]);
+                    $question->feedback[$j] = $question->feedback[$j];
             }
         }
         $questions[] = $question;
     }
-}
+    }
 
-//----------------------------------------
-// Process Multiple Choice Questions With Multiple Answers
-//----------------------------------------
-function process_ma($xml, &$questions) {
+    //----------------------------------------
+    // Process Multiple Choice Questions With Multiple Answers
+    //----------------------------------------
+    function process_ma($xml, &$questions) {
 
     if (isset($xml["POOL"]["#"]["QUESTION_MULTIPLEANSWER"])) {
         $maquestions = $xml["POOL"]["#"]["QUESTION_MULTIPLEANSWER"];
@@ -248,7 +229,7 @@ function process_ma($xml, &$questions) {
         $question = $this->defaultquestion();
 
         $question->qtype = MULTICHOICE;
-        $question->defaultgrade = 1;
+            $question->defaultmark = 1;
         $question->single = 0; // More than one answers allowed
         $question->image = ""; // No images with this format
 
@@ -259,11 +240,10 @@ function process_ma($xml, &$questions) {
 
         // put questiontext in question object
         if ($ishtml) {
-            $question->questiontext = html_entity_decode_php4(trim($thisquestion["#"]["BODY"][0]["#"]["TEXT"][0]["#"]));
+                $question->questiontext = html_entity_decode(trim($thisquestion["#"]["BODY"][0]["#"]["TEXT"][0]["#"]),ENT_QUOTES,'UTF-8');
         }
-        $question->questiontext = addslashes($question->questiontext);
         // put name of question in question object
-        $question->name = substr($question->questiontext, 0, 254);
+            $question->name = shorten_text($question->questiontext, 254);
 
         $choices = $thisquestion["#"]["ANSWER"];
         $correctanswers = $thisquestion["#"]["GRADABLE"][0]["#"]["CORRECTANSWER"];
@@ -272,7 +252,7 @@ function process_ma($xml, &$questions) {
 
             $choice = trim($choices[$j]["#"]["TEXT"][0]["#"]);
             // put this choice in the question object.
-            $question->answer[$j] = addslashes($choice);
+                $question->answer[$j] = $choice;
 
             $correctanswercount = sizeof($correctanswers);
             $id = $choices[$j]["@"]["id"];
@@ -287,21 +267,21 @@ function process_ma($xml, &$questions) {
             }
             if ($iscorrect) { 
                 $question->fraction[$j] = floor(100000/$correctanswercount)/100000; // strange behavior if we have more than 5 decimal places
-                $question->feedback[$j] = addslashes(trim($thisquestion["#"]["GRADABLE"][$j]["#"]["FEEDBACK_WHEN_CORRECT"][0]["#"]));
+                    $question->feedback[$j] = trim($thisquestion["#"]["GRADABLE"][$j]["#"]["FEEDBACK_WHEN_CORRECT"][0]["#"]);
             } else {
                 $question->fraction[$j] = 0;
-                $question->feedback[$j] = addslashes(trim($thisquestion["#"]["GRADABLE"][$j]["#"]["FEEDBACK_WHEN_INCORRECT"][0]["#"]));
+                    $question->feedback[$j] = trim($thisquestion["#"]["GRADABLE"][$j]["#"]["FEEDBACK_WHEN_INCORRECT"][0]["#"]);
             }
         }
 
         $questions[] = $question;
     }
-}
+    }
 
-//----------------------------------------
-// Process Fill in the Blank Questions
-//----------------------------------------
-function process_fib($xml, &$questions) {
+    //----------------------------------------
+    // Process Fill in the Blank Questions
+    //----------------------------------------
+    function process_fib($xml, &$questions) {
 
     if (isset($xml["POOL"]["#"]["QUESTION_FILLINBLANK"])) {
         $fibquestions = $xml["POOL"]["#"]["QUESTION_FILLINBLANK"];
@@ -323,26 +303,25 @@ function process_fib($xml, &$questions) {
 
         // put questiontext in question object
         if ($ishtml) {
-            $question->questiontext = html_entity_decode_php4(trim($thisquestion["#"]["BODY"][0]["#"]["TEXT"][0]["#"]));
+                $question->questiontext = html_entity_decode(trim($thisquestion["#"]["BODY"][0]["#"]["TEXT"][0]["#"]),ENT_QUOTES,'UTF-8');
         }
-        $question->questiontext = addslashes($question->questiontext);
         // put name of question in question object
-        $question->name = substr($question->questiontext, 0, 254);
+            $question->name = shorten_text($question->questiontext, 254);
 
         $answer = trim($thisquestion["#"]["ANSWER"][0]["#"]["TEXT"][0]["#"]);
 
-        $question->answer[] = addslashes($answer);
+            $question->answer[] = $answer;
         $question->fraction[] = 1;
         $question->feedback = array();
 
         if (is_array( $thisquestion['#']['GRADABLE'][0]['#'] )) {
-            $question->feedback[0] = addslashes(trim($thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_CORRECT"][0]["#"]));
+                $question->feedback[0] = trim($thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_CORRECT"][0]["#"]);
         }
         else {
             $question->feedback[0] = '';
         }      
         if (is_array( $thisquestion["#"]["GRADABLE"][0]["#"] )) {
-            $question->feedback[1] = addslashes(trim($thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_INCORRECT"][0]["#"]));
+                $question->feedback[1] = trim($thisquestion["#"]["GRADABLE"][0]["#"]["FEEDBACK_WHEN_INCORRECT"][0]["#"]);
         }
         else {
             $question->feedback[1] = '';
@@ -350,12 +329,12 @@ function process_fib($xml, &$questions) {
          
         $questions[] = $question;
     }
-}
+    }
 
-//----------------------------------------
-// Process Matching Questions
-//----------------------------------------
-function process_matching($xml, &$questions) {
+    //----------------------------------------
+    // Process Matching Questions
+    //----------------------------------------
+    function process_matching($xml, &$questions) {
 
     if (isset($xml["POOL"]["#"]["QUESTION_MATCH"])) {
         $matchquestions = $xml["POOL"]["#"]["QUESTION_MATCH"];
@@ -377,11 +356,10 @@ function process_matching($xml, &$questions) {
 
         // put questiontext in question object
         if ($ishtml) {
-            $question->questiontext = html_entity_decode_php4(trim($thisquestion["#"]["BODY"][0]["#"]["TEXT"][0]["#"]));
+                $question->questiontext = html_entity_decode(trim($thisquestion["#"]["BODY"][0]["#"]["TEXT"][0]["#"]),ENT_QUOTES,'UTF-8');
         }
-        $question->questiontext = addslashes($question->questiontext);
         // put name of question in question object
-        $question->name = substr($question->questiontext, 0, 254);
+            $question->name = shorten_text($question->questiontext, 254);
 
         $choices = $thisquestion["#"]["CHOICE"];
         for ($j = 0; $j < sizeof ($choices); $j++) {
@@ -391,7 +369,7 @@ function process_matching($xml, &$questions) {
             $choice = $choices[$j]["#"]["TEXT"][0]["#"];
             $choice_id = $choices[$j]["@"]["id"];
           
-            $question->subanswers[] = addslashes(trim($choice));
+                $question->subanswers[] = trim($choice);
  
             $correctanswers = $thisquestion["#"]["GRADABLE"][0]["#"]["CORRECTANSWER"];
             for ($k = 0; $k < sizeof ($correctanswers); $k++) {
@@ -408,25 +386,17 @@ function process_matching($xml, &$questions) {
                         if (strcmp ($current_ans_id, $answer_id) == 0) {
 
                             $answer = $answer["#"]["TEXT"][0]["#"];
-                            $question->subquestions[] = addslashes(trim($answer));
+                                $question->subquestions[] = trim($answer);
                             break;
-
                         }
-
                     }
-
                     break;
-
                 }
-
             }
-           
         }
 
         $questions[] = $question;
           
     }
+    }
 }
-
-}
-?>
