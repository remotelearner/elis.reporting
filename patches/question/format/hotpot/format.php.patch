diff --git a/question/format/hotpot/format.php b/question/format/hotpot/format.php
index 33bdad3..e31ec98 100644
--- a/question/format/hotpot/format.php
+++ b/question/format/hotpot/format.php
@@ -81,12 +81,7 @@ class qformat_hotpot extends qformat_default {
         $questions = array();
         switch ($xml->quiztype) {
             case 'jcloze':
-                if (strpos($source, '<gap-fill><question-record>')) {
-                    $startwithgap = true;
-                } else {
-                    $startwithgap = false;
-                }
-                $this->process_jcloze($xml, $questions, $startwithgap);
+                $this->process_jcloze($xml, $questions);
                 break;
             case 'jcross':
                 $this->process_jcross($xml, $questions);
@@ -119,7 +114,7 @@ class qformat_hotpot extends qformat_default {
         }
     }
 
-    function process_jcloze(&$xml, &$questions, $startwithgap) {
+    function process_jcloze(&$xml, &$questions) {
         // define default grade (per cloze gap)
         $defaultgrade = 1;
         $gap_count = 0;
@@ -149,27 +144,10 @@ class qformat_hotpot extends qformat_default {
                 $question->usecase = 0; // Ignore case
                 $question->image = "";  // No images with this format
             }
-
             $question->qtype = MULTIANSWER;
-            $question->name = $this->hotpot_get_title($xml, $x);
-            $question->questiontext = '';
 
-            // add get dropdown list, if any
-            if (intval($xml->xml_value('hotpot-config-file,'.$xml->quiztype.',use-drop-down-list'))) {
-                $dropdownlist = $this->hotpot_jcloze_wordlist($xml);
-                $answertype = MULTICHOICE;
-            } else {
-                $dropdownlist = false;
-                $answertype = SHORTANSWER;
-
-                // add wordlist, if required (not required if we are using dropdowns)
-                if (intval($xml->xml_value('hotpot-config-file,'.$xml->quiztype.',include-word-list'))) {
-                    $question->questiontext .= '<p>'.implode(' ', $this->hotpot_jcloze_wordlist($xml)).'</p>';
-                }
-            }
-
-            // add reading, if any
-            $question->questiontext .= $this->hotpot_get_reading($xml);
+            $question->name = $this->hotpot_get_title($xml, $x);
+            $question->questiontext = $this->hotpot_get_reading($xml);
 
             // setup answer arrays
             if ($moodle_14) {
@@ -182,84 +160,38 @@ class qformat_hotpot extends qformat_default {
             }
 
             $q = 0;
-            $looping = true;
-            while ($looping) {
-                // get next bit of text
-                $questiontext = $xml->xml_value($tags, $exercise."[$q]");
-                $questiontext = $this->hotpot_prepare_str($questiontext);
-
-                // get next gap
-                $gap = '';
+            while ($text = $xml->xml_value($tags, $exercise."[$q]")) {
+                // add next bit of text
+                $question->questiontext .= $this->hotpot_prepare_str($text);
+
+                // check for a gap
                 $question_record = $exercise."['question-record'][$q]['#']";
                 if ($xml->xml_value($tags, $question_record)) {
 
                     // add gap
                     $gap_count ++;
                     $positionkey = $q+1;
-                    $gap = '{#'.$positionkey.'}';
+                    $question->questiontext .= '{#'.$positionkey.'}';
 
                     // initialize answer settings
                     if ($moodle_14) {
                         $question->answers[$q]->positionkey = $positionkey;
-                        $question->answers[$q]->answertype = $answertype;
+                        $question->answers[$q]->answertype = SHORTANSWER;
                         $question->answers[$q]->norm = $defaultgrade;
                         $question->answers[$q]->alternatives = array();
                     } else {
                         $wrapped = new stdClass();
-                        $wrapped->qtype = $answertype;
+                        $wrapped->qtype = SHORTANSWER;
                         $wrapped->usecase = 0;
                         $wrapped->defaultgrade = $defaultgrade;
                         $wrapped->questiontextformat = 0;
                         $wrapped->answer = array();
                         $wrapped->fraction = array();
                         $wrapped->feedback = array();
-                        // required for multichoice
-                        $wrapped->single = 1;
-                        $wrapped->answernumbering = 0;
-                        $wrapped->shuffleanswers = 0;
-                        $wrapped->correctfeedback = '';
-                        $wrapped->partiallycorrectfeedback = '';
-                        $wrapped->incorrectfeedback = '';
-                        // array of answers
                         $answers = array();
                     }
 
                     // add answers
-                    if ($dropdownlist) {
-
-                        $a = 0;
-                        $correcttext = '';
-                        $correctfeedback = '';
-                        while (($answer=$question_record."['answer'][$a]['#']") && $xml->xml_value($tags, $answer)) {
-                            if (intval($xml->xml_value($tags,  $answer."['correct'][0]['#']"))) {
-                                $correcttext = $this->hotpot_prepare_str($xml->xml_value($tags,  $answer."['text'][0]['#']"));
-                                $correctfeedback = $this->hotpot_prepare_str($xml->xml_value($tags,  $answer."['feedback'][0]['#']"));
-                                break;
-                            }
-                            $a++;
-                        }
-
-                        foreach ($dropdownlist as $a => $answer) {
-                            if ($answer==$correcttext) {
-                                $fraction = 1;
-                                $feedback = $correctfeedback;
-                            } else {
-                                $fraction = 0;
-                                $feedback = '';
-                            }
-                            if ($moodle_14) {
-                                $question->answers[$q]->alternatives[$a] = new stdClass();
-                                $question->answers[$q]->alternatives[$a]->answer = $answer;
-                                $question->answers[$q]->alternatives[$a]->fraction = $fraction;
-                                $question->answers[$q]->alternatives[$a]->feedback = $feedback;
-                            } else {
-                                $wrapped->answer[] = $answer;
-                                $wrapped->fraction[] = $fraction;
-                                $wrapped->feedback[] = $feedback;
-                                $answers[] = ($fraction==0 ? '' : '=').$answer.($feedback=='' ? '' : ('#'.$feedback));
-                            }
-                        }
-                    } else {
                         $a = 0;
                         while (($answer=$question_record."['answer'][$a]['#']") && $xml->xml_value($tags, $answer)) {
                             $text = $this->hotpot_prepare_str($xml->xml_value($tags,  $answer."['text'][0]['#']"));
@@ -283,29 +215,16 @@ class qformat_hotpot extends qformat_default {
                             }
                             $a++;
                         }
-                    }
-
                     // compile answers into question text, if necessary
                     if ($moodle_14) {
                         // do nothing
                     } else {
-                        $wrapped->questiontext = '{'.$defaultgrade.':'.$answertype.':'.implode('~', $answers).'}';
+                        $wrapped->questiontext = '{'.$defaultgrade.':SHORTANSWER:'.implode('~', $answers).'}';
                         $question->options->questions[] = $wrapped;
                     }
                 } // end if gap
-
-                if (strlen($questiontext) || strlen($gap)) {
-                    if ($startwithgap) {
-                        $question->questiontext .= $gap.$questiontext;
-                    } else {
-                        $question->questiontext .= $questiontext.$gap;
-                    }
-                } else {
-                    $looping = false;
-                }
-
                 $q++;
-            } // end while $looping
+            } // end while $text
 
             if ($q) {
                 // define total grade for this exercise
@@ -322,32 +241,6 @@ class qformat_hotpot extends qformat_default {
         } // end while $exercise
     }
 
-    function hotpot_jcloze_wordlist(&$xml) {
-        $wordlist = array();
-
-        $q = 0;
-        $tags = 'data,gap-fill,question-record';
-        while (($question="[$q]['#']") && $xml->xml_value($tags, $question)) {
-            $a = 0;
-            $aa = 0;
-            while (($answer=$question."['answer'][$a]['#']") && $xml->xml_value($tags, $answer)) {
-                $text = $xml->xml_value($tags,  $answer."['text'][0]['#']");
-                $correct = $xml->xml_value($tags, $answer."['correct'][0]['#']");
-                if (strlen($text) && intval($correct)) {
-                    $wordlist[] = $text;
-                    $aa++;
-                }
-                $a++;
-            }
-            $q++;
-        }
-
-        $wordlist = array_unique($wordlist);
-        sort($wordlist);
-
-        return $wordlist;
-    }
-
     function process_jcross(&$xml, &$questions) {
         // xml tags to the start of the crossword exercise clue items
         $tags = 'data,crossword,clues,item';
@@ -638,10 +531,10 @@ class qformat_hotpot extends qformat_default {
         $tags = 'data,reading';
         if ($xml->xml_value("$tags,include-reading")) {
             if ($title = $xml->xml_value("$tags,reading-title")) {
-                $str .= "<h3>$title</h3>";
+                $str .= "<H3>$title</H3>";
             }
             if ($text = $xml->xml_value("$tags,reading-text")) {
-                $str .= "<p>$text</p>";
+                $str .= "<P>$text</P>";
             }
         }
         return $this->hotpot_prepare_str($str);
