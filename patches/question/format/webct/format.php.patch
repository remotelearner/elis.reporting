diff --git a/question/format/webct/format.php b/question/format/webct/format.php
index 6557c96..db833a0 100644
--- a/question/format/webct/format.php
+++ b/question/format/webct/format.php
@@ -1,37 +1,36 @@
-<?php  // $Id$
-///////////////////////////////////////////////////////////////////////////
-//                                                                       //
-// WebCT FORMAT                                                          //
-//                                                                       //
-///////////////////////////////////////////////////////////////////////////
-//                                                                       //
-// NOTICE OF COPYRIGHT                                                   //
-//                                                                       //
-// Part of Moodle - Modular Object-Oriented Dynamic Learning Environment //
-//                  http://moodle.com                                    //
-//                                                                       //
-// Copyright (C) 2004 ASP Consulting   http://www.asp-consulting.net     //
-//                                                                       //
-// This program is free software; you can redistribute it and/or modify  //
-// it under the terms of the GNU General Public License as published by  //
-// the Free Software Foundation; either version 2 of the License, or     //
-// (at your option) any later version.                                   //
-//                                                                       //
-// This program is distributed in the hope that it will be useful,       //
-// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
-// GNU General Public License for more details:                          //
-//                                                                       //
-//          http://www.gnu.org/copyleft/gpl.html                         //
-//                                                                       //
-///////////////////////////////////////////////////////////////////////////
-
-// Based on format.php, included by ../../import.php
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
- * @package questionbank
- * @subpackage importexport
+ * Web CT question importer.
+ *
+ * @package    qformat
+ * @subpackage webct
+ * @copyright  2004 ASP Consulting http://www.asp-consulting.net
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Manipulate HTML editites in a string. Used by WebCT import.
+ * @param string $string
+ * @return string
+ */
 function unhtmlentities($string){
     $search = array ("'<script[?>]*?>.*?</script>'si",  // remove javascript
                  "'<[\/\!]*?[^<?>]*?>'si",  // remove HTML tags
@@ -62,29 +61,30 @@ function unhtmlentities($string){
     return preg_replace ($search, $replace, $string);
 }
 
-
-
+/**
+ * Helper function for WebCT import.
+ * @param unknown_type $formula
+ */
 function qformat_webct_convert_formula($formula) {
 
     // Remove empty space, as it would cause problems otherwise:
     $formula = str_replace(' ', '', $formula);
 
     // Remove paranthesis after e,E and *10**:
-    while (ereg('[0-9.](e|E|\\*10\\*\\*)\\([+-]?[0-9]+\\)', $formula, $regs)) {
+    while (preg_match('~[0-9.](e|E|\\*10\\*\\*)\\([+-]?[0-9]+\\)~', $formula, $regs)) {
         $formula = str_replace(
-                $regs[0], ereg_replace('[)(]', '', $regs[0]), $formula);
+                $regs[0], preg_replace('/[)(]/', '', $regs[0]), $formula);
     }
 
     // Replace *10** with e where possible
-    while (ereg(
-            '(^[+-]?|[^eE][+-]|[^0-9eE+-])[0-9.]+\\*10\\*\\*[+-]?[0-9]+([^0-9.eE]|$)',
+    while (preg_match('~(^[+-]?|[^eE][+-]|[^0-9eE+-])[0-9.]+\\*10\\*\\*[+-]?[0-9]+([^0-9.eE]|$)~',
             $formula, $regs)) {
         $formula = str_replace(
                 $regs[0], str_replace('*10**', 'e', $regs[0]), $formula);
     }
 
     // Replace other 10** with 1e where possible
-    while (ereg('(^|[^0-9.eE])10\\*\\*[+-]?[0-9]+([^0-9.eE]|$)', $formula, $regs)) {
+    while (preg_match('~(^|[^0-9.eE])10\\*\\*[+-]?[0-9]+([^0-9.eE]|$)~', $formula, $regs)) {
         $formula = str_replace(
                 $regs[0], str_replace('10**', '1e', $regs[0]), $formula);
     }
@@ -94,56 +94,56 @@ function qformat_webct_convert_formula($formula) {
     while (2 == count($splits = explode('**', $formula, 2))) {
 
         // Find $base
-        if (ereg('^(.*[^0-9.eE])?(([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][+-]?[0-9]+)?|\\{[^}]*\\})$',
+        if (preg_match('~^(.*[^0-9.eE])?(([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][+-]?[0-9]+)?|\\{[^}]*\\})$~',
                 $splits[0], $regs)) {
             // The simple cases
             $base = $regs[2];
             $splits[0] = $regs[1];
 
-        } else if (ereg('\\)$', $splits[0])) {
+        } else if (preg_match('~\\)$~', $splits[0])) {
             // Find the start of this parenthesis
             $deep = 1;
             for ($i = 1 ; $deep ; ++$i) {
-                if (!ereg('^(.*[^[:alnum:]_])?([[:alnum:]_]*([)(])([^)(]*[)(]){'.$i.'})$',
+                if (!preg_match('~^(.*[^[:alnum:]_])?([[:alnum:]_]*([)(])([^)(]*[)(]){'.$i.'})$~',
                         $splits[0], $regs)) {
-                    error("Parenthesis before ** is not properly started in $splits[0]**");
+                    print_error("parenthesisinproperstart", 'question', '', $splits[0]);
                 }
                 if ('(' == $regs[3]) {
                     --$deep;
                 } else if (')' == $regs[3]) {
                     ++$deep;
                 } else {
-                    error("Impossible character $regs[3] detected as parenthesis character");
+                    print_error('impossiblechar', 'question', '', $regs[3]);
                 }
             }
             $base = $regs[2];
             $splits[0] = $regs[1];
 
         } else {
-            error("Bad base before **: $splits[0]**");
+            print_error('badbase', 'question', '', $splits[0]);
         }
 
         // Find $exp (similar to above but a little easier)
-        if (ereg('^([+-]?(\\{[^}]\\}|([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][+-]?[0-9]+)?))(.*)',
+        if (preg_match('~^([+-]?(\\{[^}]\\}|([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][+-]?[0-9]+)?))(.*)~',
                 $splits[1], $regs)) {
             // The simple case
             $exp = $regs[1];
             $splits[1] = $regs[6];
 
-        } else if (ereg('^[+-]?[[:alnum:]_]*\\(', $splits[1])) {
+        } else if (preg_match('~^[+-]?[[:alnum:]_]*\\(~', $splits[1])) {
             // Find the end of the parenthesis
             $deep = 1;
             for ($i = 1 ; $deep ; ++$i) {
-                if (!ereg('^([+-]?[[:alnum:]_]*([)(][^)(]*){'.$i.'}([)(]))(.*)',
+                if (!preg_match('~^([+-]?[[:alnum:]_]*([)(][^)(]*){'.$i.'}([)(]))(.*)~',
                         $splits[1], $regs)) {
-                    error("Parenthesis after ** is not properly closed in **$splits[1]");
+                    print_error("parenthesisinproperclose", 'question', '', $splits[1]);
                 }
                 if (')' == $regs[3]) {
                     --$deep;
                 } else if ('(' == $regs[3]) {
                     ++$deep;
                 } else {
-                    error("Impossible character $regs[3] detected as parenthesis character");
+                    print_error("impossiblechar", 'question');
                 }
             }
             $exp = $regs[1];
@@ -159,6 +159,13 @@ function qformat_webct_convert_formula($formula) {
     return $formula;
 }
 
+
+/**
+ * Web CT question importer.
+ *
+ * @copyright  2004 ASP Consulting http://www.asp-consulting.net
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 class qformat_webct extends qformat_default {
 
     function provide_import() {
@@ -166,8 +173,6 @@ class qformat_webct extends qformat_default {
     }
 
     function readquestions ($lines) {
-        global $QTYPES ;
-        //  $qtypecalculated = new qformat_webct_modified_calculated_qtype();
         $webctnumberregex =
                 '[+-]?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)((e|E|\\*10\\*\\*)([+-]?[0-9]+|\\([+-]?[0-9]+\\)))?';
 
@@ -190,8 +195,8 @@ class qformat_webct extends qformat_default {
             // Processing multiples lines strings
 
             if (isset($questiontext) and is_string($questiontext)) {
-                if (ereg("^:",$line)) {
-                    $question->questiontext = addslashes(trim($questiontext));
+                if (preg_match("~^:~",$line)) {
+                    $question->questiontext = trim($questiontext);
                     unset($questiontext);
                 }
                  else {
@@ -201,8 +206,8 @@ class qformat_webct extends qformat_default {
             }
 
             if (isset($answertext) and is_string($answertext)) {
-                if (ereg("^:",$line)) {
-                    $answertext = addslashes(trim($answertext));
+                if (preg_match("~^:~",$line)) {
+                    $answertext = trim($answertext);
                     $question->answer[$currentchoice] = $answertext;
                     $question->subanswers[$currentchoice] = $answertext;
                     unset($answertext);
@@ -214,8 +219,8 @@ class qformat_webct extends qformat_default {
             }
 
             if (isset($responsetext) and is_string($responsetext)) {
-                if (ereg("^:",$line)) {
-                    $question->subquestions[$currentchoice] = addslashes(trim($responsetext));
+                if (preg_match("~^:~",$line)) {
+                    $question->subquestions[$currentchoice] = trim($responsetext);
                     unset($responsetext);
                 }
                  else {
@@ -225,8 +230,8 @@ class qformat_webct extends qformat_default {
             }
 
             if (isset($feedbacktext) and is_string($feedbacktext)) {
-                if (ereg("^:",$line)) {
-                   $question->feedback[$currentchoice] = addslashes(trim($feedbacktext));
+                if (preg_match("~^:~",$line)) {
+                   $question->feedback[$currentchoice] = trim($feedbacktext);
                     unset($feedbacktext);
                 }
                  else {
@@ -236,8 +241,8 @@ class qformat_webct extends qformat_default {
             }
 
             if (isset($generalfeedbacktext) and is_string($generalfeedbacktext)) {
-                if (ereg("^:",$line)) {
-                   $question->tempgeneralfeedback= addslashes(trim($generalfeedbacktext));
+                if (preg_match("~^:~",$line)) {
+                   $question->tempgeneralfeedback= trim($generalfeedbacktext);
                     unset($generalfeedbacktext);
                 }
                  else {
@@ -248,7 +253,7 @@ class qformat_webct extends qformat_default {
 
             $line = trim($line);
 
-            if (eregi("^:(TYPE|EOF):",$line)) {
+            if (preg_match("~^:(TYPE|EOF):~i",$line)) {
                 // New Question or End of File
                 if (isset($question)) {            // if previous question exists, complete, check and save it
 
@@ -258,10 +263,10 @@ class qformat_webct extends qformat_default {
                     }
                     if (strlen($question->name) > 255) {
                         $question->name = substr($question->name,0,250)."...";
-                        $warnings[] = get_string("questionnametoolong", "quiz", $nQuestionStartLine);
+                        $warnings[] = get_string("questionnametoolong", "qformat_webct", $nQuestionStartLine);
                     }
-                    if (!isset($question->defaultgrade)) {
-                        $question->defaultgrade = 1;
+                    if (!isset($question->defaultmark)) {
+                        $question->defaultmark = 1;
                     }
                     if (!isset($question->image)) {
                         $question->image = "";
@@ -270,11 +275,11 @@ class qformat_webct extends qformat_default {
                     // Perform sanity checks
                     $QuestionOK = TRUE;
                     if (strlen($question->questiontext) == 0) {
-                        $warnings[] = get_string("missingquestion", "quiz", $nQuestionStartLine);
+                        $warnings[] = get_string("missingquestion", "qformat_webct", $nQuestionStartLine);
                         $QuestionOK = FALSE;
                     }
                     if (sizeof($question->answer) < 1) {  // a question must have at least 1 answer
-                       $errors[] = get_string("missinganswer", "quiz", $nQuestionStartLine);
+                       $errors[] = get_string("missinganswer", "qformat_webct", $nQuestionStartLine);
                        $QuestionOK = FALSE;
                     }
                     else {
@@ -312,7 +317,7 @@ class qformat_webct extends qformat_default {
                             case SHORTANSWER:
                                 if ($maxfraction != 1) {
                                     $maxfraction = $maxfraction * 100;
-                                    $errors[] = "'$question->name': ".get_string("wronggrade", "quiz", $nLineCounter).' '.get_string("fractionsnomax", "quiz", $maxfraction);
+                                    $errors[] = "'$question->name': ".get_string("wronggrade", "qformat_webct", $nLineCounter).' '.get_string("fractionsnomax", "question", $maxfraction);
                                     $QuestionOK = FALSE;
                                 }
                                 break;
@@ -321,14 +326,14 @@ class qformat_webct extends qformat_default {
                                 if ($question->single) {
                                     if ($maxfraction != 1) {
                                         $maxfraction = $maxfraction * 100;
-                                        $errors[] = "'$question->name': ".get_string("wronggrade", "quiz", $nLineCounter).' '.get_string("fractionsnomax", "quiz", $maxfraction);
+                                        $errors[] = "'$question->name': ".get_string("wronggrade", "qformat_webct", $nLineCounter).' '.get_string("fractionsnomax", "question", $maxfraction);
                                         $QuestionOK = FALSE;
                                     }
                                 } else {
                                     $totalfraction = round($totalfraction,2);
                                     if ($totalfraction != 1) {                               
                                         $totalfraction = $totalfraction * 100;
-                                        $errors[] = "'$question->name': ".get_string("wronggrade", "quiz", $nLineCounter).' '.get_string("fractionsaddwrong", "quiz", $totalfraction);
+                                        $errors[] = "'$question->name': ".get_string("wronggrade", "qformat_webct", $nLineCounter).' '.get_string("fractionsaddwrong", "question", $totalfraction);
                                         $QuestionOK = FALSE;
                                     }
                                 }
@@ -336,7 +341,7 @@ class qformat_webct extends qformat_default {
 
                             case CALCULATED:
                                 foreach ($question->answers as $answer) {
-                                    if ($formulaerror =qtype_calculated_find_formula_errors($answer)) { //$QTYPES['calculated']->
+                                    if ($formulaerror = qtype_calculated_find_formula_errors($answer)) {
                                         $warnings[] = "'$question->name': ". $formulaerror;
                                         $QuestionOK = FALSE;
                                     }
@@ -382,7 +387,7 @@ class qformat_webct extends qformat_default {
 
             // Processing Question Header
 
-            if (eregi("^:TYPE:MC:1(.*)",$line,$webct_options)) {
+            if (preg_match("~^:TYPE:MC:1(.*)~i",$line,$webct_options)) {
                 // Multiple Choice Question with only one good answer
                 $question = $this->defaultquestion();
                 $question->feedback = array();
@@ -392,7 +397,7 @@ class qformat_webct extends qformat_default {
                 continue;
             }
 
-            if (eregi("^:TYPE:MC:N(.*)",$line,$webct_options)) {
+            if (preg_match("~^:TYPE:MC:N(.*)~i",$line,$webct_options)) {
                 // Multiple Choice Question with several good answers
                 $question = $this->defaultquestion();
                 $question->feedback = array();
@@ -402,7 +407,7 @@ class qformat_webct extends qformat_default {
                 continue;
             }
 
-            if (eregi("^:TYPE:S",$line)) {
+            if (preg_match("~^:TYPE:S~i",$line)) {
                 // Short Answer Question
                 $question = $this->defaultquestion();
                 $question->feedback = array();
@@ -412,12 +417,8 @@ class qformat_webct extends qformat_default {
                 continue;
             }
 
-            if (eregi("^:TYPE:C",$line)) {
+            if (preg_match("~^:TYPE:C~i",$line)) {
                 // Calculated Question
-           /*     $warnings[] = get_string("calculatedquestion", "quiz", $nLineCounter);
-                unset($question);
-                $ignore_rest_of_question = TRUE;         // Question Type not handled by Moodle
-             */
                 $question = $this->defaultquestion();
                 $question->qtype = CALCULATED;
                 $question->answers = array(); // No problem as they go as :FORMULA: from webct
@@ -434,7 +435,7 @@ class qformat_webct extends qformat_default {
                 continue;
             }
 
-            if (eregi("^:TYPE:M",$line)) {
+            if (preg_match("~^:TYPE:M~i",$line)) {
                 // Match Question
                 $question = $this->defaultquestion();
                 $question->qtype = MATCH;
@@ -443,17 +444,17 @@ class qformat_webct extends qformat_default {
                 continue;
             }
 
-            if (eregi("^:TYPE:P",$line)) {
+            if (preg_match("~^:TYPE:P~i",$line)) {
                 // Paragraph Question
-                $warnings[] = get_string("paragraphquestion", "quiz", $nLineCounter);
+                $warnings[] = get_string("paragraphquestion", "qformat_webct", $nLineCounter);
                 unset($question);
                 $ignore_rest_of_question = TRUE;         // Question Type not handled by Moodle
                 continue;
             }
 
-            if (eregi("^:TYPE:",$line)) {
+            if (preg_match("~^:TYPE:~i",$line)) {
                 // Unknow Question
-                $warnings[] = get_string("unknowntype", "quiz", $nLineCounter);
+                $warnings[] = get_string("unknowntype", "qformat_webct", $nLineCounter);
                 unset($question);
                 $ignore_rest_of_question = TRUE;         // Question Type not handled by Moodle
                 continue;
@@ -463,19 +464,19 @@ class qformat_webct extends qformat_default {
                 continue;
             }
 
-            if (eregi("^:TITLE:(.*)",$line,$webct_options)) {
+            if (preg_match("~^:TITLE:(.*)~i",$line,$webct_options)) {
                 $name = trim($webct_options[1]);
                 if (strlen($name) > 255) {
                     $name = substr($name,0,250)."...";
-                    $warnings[] = get_string("questionnametoolong", "quiz", $nLineCounter);
+                    $warnings[] = get_string("questionnametoolong", "qformat_webct", $nLineCounter);
                 }
-                $question->name = addslashes($name);
+                $question->name = $name;
                 continue;
             }
 
-            if (eregi("^:IMAGE:(.*)",$line,$webct_options)) {
+            if (preg_match("~^:IMAGE:(.*)~i",$line,$webct_options)) {
                 $filename = trim($webct_options[1]);
-                if (eregi("^http://",$filename)) {
+                if (preg_match("~^http://~i",$filename)) {
                     $question->image = $filename;
                 }
                 continue;
@@ -486,9 +487,9 @@ class qformat_webct extends qformat_default {
             if (!isset($question)) {
                 continue;
             } 
-            if (isset($question->qtype ) && CALCULATED == $question->qtype && ereg(
-                    "^:([[:lower:]].*|::.*)-(MIN|MAX|DEC|VAL([0-9]+))::?:?($webctnumberregex)", $line, $webct_options)) {
-                $datasetname = ereg_replace('^::', '', $webct_options[1]);
+            if (isset($question->qtype ) && CALCULATED == $question->qtype && preg_match(
+                    "~^:([[:lower:]].*|::.*)-(MIN|MAX|DEC|VAL([0-9]+))::?:?($webctnumberregex)~", $line, $webct_options)) {
+                $datasetname = preg_replace('/^::/', '', $webct_options[1]);
                 $datasetvalue = qformat_webct_convert_formula($webct_options[4]);
                 switch ($webct_options[2]) {
                     case 'MIN':
@@ -512,27 +513,27 @@ class qformat_webct extends qformat_default {
             }
 
 
-            $bIsHTMLText = eregi(":H$",$line);  // True if next lines are coded in HTML
-            if (eregi("^:QUESTION",$line)) {
+            $bIsHTMLText = preg_match("~:H$~i",$line);  // True if next lines are coded in HTML
+            if (preg_match("~^:QUESTION~i",$line)) {
                 $questiontext="";               // Start gathering next lines
                 continue;
             }
 
-            if (eregi("^:ANSWER([0-9]+):([^:]+):([0-9\.\-]+):(.*)",$line,$webct_options)) {      /// SHORTANSWER
+            if (preg_match("~^:ANSWER([0-9]+):([^:]+):([0-9\.\-]+):(.*)~i",$line,$webct_options)) {      /// SHORTANSWER
                 $currentchoice=$webct_options[1];
                 $answertext=$webct_options[2];            // Start gathering next lines
                 $question->fraction[$currentchoice]=($webct_options[3]/100);
                 continue;
             }
 
-            if (eregi("^:ANSWER([0-9]+):([0-9\.\-]+)",$line,$webct_options)) {
+            if (preg_match("~^:ANSWER([0-9]+):([0-9\.\-]+)~i",$line,$webct_options)) {
                 $answertext="";                 // Start gathering next lines
                 $currentchoice=$webct_options[1];
                 $question->fraction[$currentchoice]=($webct_options[2]/100);
                 continue;
             }
 
-            if (eregi('^:FORMULA:(.*)', $line, $webct_options)) {
+            if (preg_match('~^:FORMULA:(.*)~i', $line, $webct_options)) {
                 // Answer for a CALCULATED question
                 ++$currentchoice;
                 $question->answers[$currentchoice] =
@@ -545,7 +546,8 @@ class qformat_webct extends qformat_default {
                 $question->feedback[$currentchoice] = '';
                 $question->correctanswerlength[$currentchoice] = 4;
 
-                $datasetnames = $QTYPES[CALCULATED]->find_dataset_names($webct_options[1]);
+                $datasetnames = question_bank::get_qtype('calculated')->
+                        find_dataset_names($webct_options[1]);
                 foreach ($datasetnames as $datasetname) {
                     $question->dataset[$datasetname] = new stdClass();
                     $question->dataset[$datasetname]->datasetitem = array();
@@ -556,60 +558,60 @@ class qformat_webct extends qformat_default {
                 continue;
             }
 
-            if (eregi("^:L([0-9]+)",$line,$webct_options)) {
+            if (preg_match("~^:L([0-9]+)~i",$line,$webct_options)) {
                 $answertext="";                 // Start gathering next lines
                 $currentchoice=$webct_options[1];
                 $question->fraction[$currentchoice]=1; 
                 continue;
             }
 
-            if (eregi("^:R([0-9]+)",$line,$webct_options)) {
+            if (preg_match("~^:R([0-9]+)~i",$line,$webct_options)) {
                 $responsetext="";                // Start gathering next lines
                 $currentchoice=$webct_options[1];
                 continue;
             }
 
-            if (eregi("^:REASON([0-9]+):?",$line,$webct_options)) {
+            if (preg_match("~^:REASON([0-9]+):?~i",$line,$webct_options)) {
                 $feedbacktext="";               // Start gathering next lines
                 $currentchoice=$webct_options[1];
                 continue;
             }
-            if (eregi("^:FEEDBACK([0-9]+):?",$line,$webct_options)) {
+            if (preg_match("~^:FEEDBACK([0-9]+):?~i",$line,$webct_options)) {
                 $generalfeedbacktext="";               // Start gathering next lines
                 $currentchoice=$webct_options[1];
                 continue;
             }
-            if (eregi('^:FEEDBACK:(.*)',$line,$webct_options)) {
+            if (preg_match('~^:FEEDBACK:(.*)~i',$line,$webct_options)) {
                 $generalfeedbacktext="";               // Start gathering next lines
                 continue;
             }
-            if (eregi('^:LAYOUT:(.*)',$line,$webct_options)) {
+            if (preg_match('~^:LAYOUT:(.*)~i',$line,$webct_options)) {
             //    ignore  since layout in question_multichoice  is no more used in moodle       
             //    $webct_options[1] contains either vertical or horizontal ;
                 continue;
             }
 
-            if (isset($question->qtype ) && CALCULATED == $question->qtype && eregi('^:ANS-DEC:([1-9][0-9]*)', $line, $webct_options)) {
+            if (isset($question->qtype ) && CALCULATED == $question->qtype && preg_match('~^:ANS-DEC:([1-9][0-9]*)~i', $line, $webct_options)) {
                 // We can but hope that this always appear before the ANSTYPE property
                 $question->correctanswerlength[$currentchoice] = $webct_options[1];
                 continue;
             }
 
-            if (isset($question->qtype )&& CALCULATED == $question->qtype && eregi("^:TOL:($webctnumberregex)", $line, $webct_options)) {
+            if (isset($question->qtype )&& CALCULATED == $question->qtype && preg_match("~^:TOL:($webctnumberregex)~i", $line, $webct_options)) {
                 // We can but hope that this always appear before the TOL property
                 $question->tolerance[$currentchoice] =
                         qformat_webct_convert_formula($webct_options[1]);
                 continue;
             }
 
-            if (isset($question->qtype )&& CALCULATED == $question->qtype && eregi('^:TOLTYPE:percent', $line)) {
+            if (isset($question->qtype )&& CALCULATED == $question->qtype && preg_match('~^:TOLTYPE:percent~i', $line)) {
                 // Percentage case is handled as relative in Moodle:
                 $question->tolerance[$currentchoice]  /= 100;
                 $question->tolerancetype[$currentchoice] = 1; // Relative
                 continue;
             }
 
-            if (eregi('^:UNITS:(.+)', $line, $webct_options)
+            if (preg_match('~^:UNITS:(.+)~i', $line, $webct_options)
                     and $webctunits = trim($webct_options[1])) {
                 // This is a guess - I really do not know how different webct units are separated...
                 $webctunits = explode(':', $webctunits);
@@ -621,7 +623,7 @@ class qformat_webct extends qformat_default {
                 continue;
             }
 
-            if (!empty($question->units) && eregi('^:UNITREQ:(.*)', $line, $webct_options)
+            if (!empty($question->units) && preg_match('~^:UNITREQ:(.*)~i', $line, $webct_options)
                     && !$webct_options[1]) {
                 // There are units but units are not required so add the no unit alternative
                 // We can but hope that the UNITS property always appear before this property
@@ -631,24 +633,24 @@ class qformat_webct extends qformat_default {
                 continue;
             }
 
-            if (!empty($question->units) && eregi('^:UNITCASE:', $line)) {
+            if (!empty($question->units) && preg_match('~^:UNITCASE:~i', $line)) {
                 // This could be important but I was not able to figure out how
                 // it works so I ignore it for now
                 continue;
             }
 
-            if (isset($question->qtype )&& CALCULATED == $question->qtype && eregi('^:ANSTYPE:dec', $line)) {
+            if (isset($question->qtype )&& CALCULATED == $question->qtype && preg_match('~^:ANSTYPE:dec~i', $line)) {
                 $question->correctanswerformat[$currentchoice]='1';
                 continue;
             }
-            if (isset($question->qtype )&& CALCULATED == $question->qtype && eregi('^:ANSTYPE:sig', $line)) {
+            if (isset($question->qtype )&& CALCULATED == $question->qtype && preg_match('~^:ANSTYPE:sig~i', $line)) {
                 $question->correctanswerformat[$currentchoice]='2';
                 continue;
             }
         }
 
         if (sizeof($errors) > 0) {
-            echo "<p>".get_string("errorsdetected", "quiz", sizeof($errors))."</p><ul>";
+            echo "<p>".get_string("errorsdetected", "qformat_webct", sizeof($errors))."</p><ul>";
             foreach($errors as $error) {
                 echo "<li>$error</li>";
             }
@@ -657,7 +659,7 @@ class qformat_webct extends qformat_default {
         }
 
         if (sizeof($warnings) > 0) {
-            echo "<p>".get_string("warningsdetected", "quiz", sizeof($warnings))."</p><ul>";
+            echo "<p>".get_string("warningsdetected", "qformat_webct", sizeof($warnings))."</p><ul>";
             foreach($warnings as $warning) {
                 echo "<li>$warning</li>";
             }
