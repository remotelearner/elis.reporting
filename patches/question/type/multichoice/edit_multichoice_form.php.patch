diff --git a/question/type/multichoice/edit_multichoice_form.php b/question/type/multichoice/edit_multichoice_form.php
index 6820a7a..e94c202 100644
--- a/question/type/multichoice/edit_multichoice_form.php
+++ b/question/type/multichoice/edit_multichoice_form.php
@@ -1,87 +1,104 @@
-<?php  // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
- * Defines the editing form for the multichoice question type.
+ * Defines the editing form for the multiple choice question type.
  *
- * @copyright &copy; 2007 Jamie Pratt
- * @author Jamie Pratt me@jamiep.org
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package questionbank
- * @subpackage questiontypes
+ * @package    qtype
+ * @subpackage multichoice
+ * @copyright  2007 Jamie Pratt
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 
+
+defined('MOODLE_INTERNAL') || die();
+
+
 /**
- * multiple choice editing form definition.
+ * Multiple choice editing form definition.
+ *
+ * @copyright  2007 Jamie Pratt
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
-class question_edit_multichoice_form extends question_edit_form {
+class qtype_multichoice_edit_form extends question_edit_form {
     /**
      * Add question-type specific form fields.
      *
      * @param object $mform the form being built.
      */
-    function definition_inner(&$mform) {
-        global $QTYPES;
-
-        $menu = array(get_string('answersingleno', 'qtype_multichoice'), get_string('answersingleyes', 'qtype_multichoice'));
-        $mform->addElement('select', 'single', get_string('answerhowmany', 'qtype_multichoice'), $menu);
+    protected function definition_inner($mform) {
+        $menu = array(
+            get_string('answersingleno', 'qtype_multichoice'),
+            get_string('answersingleyes', 'qtype_multichoice'),
+        );
+        $mform->addElement('select', 'single',
+                get_string('answerhowmany', 'qtype_multichoice'), $menu);
         $mform->setDefault('single', 1);
 
-        $mform->addElement('advcheckbox', 'shuffleanswers', get_string('shuffleanswers', 'qtype_multichoice'), null, null, array(0,1));
-        $mform->setHelpButton('shuffleanswers', array('multichoiceshuffle', get_string('shuffleanswers','qtype_multichoice'), 'quiz'));
+        $mform->addElement('advcheckbox', 'shuffleanswers',
+                get_string('shuffleanswers', 'qtype_multichoice'), null, null, array(0, 1));
+        $mform->addHelpButton('shuffleanswers', 'shuffleanswers', 'qtype_multichoice');
         $mform->setDefault('shuffleanswers', 1);
 
-        $numberingoptions = $QTYPES[$this->qtype()]->get_numbering_styles();
-        $menu = array();
-        foreach ($numberingoptions as $numberingoption) {
-            $menu[$numberingoption] = get_string('answernumbering' . $numberingoption, 'qtype_multichoice');
-        }
-        $mform->addElement('select', 'answernumbering', get_string('answernumbering', 'qtype_multichoice'), $menu);
+        $mform->addElement('select', 'answernumbering',
+                get_string('answernumbering', 'qtype_multichoice'),
+                qtype_multichoice::get_numbering_styles());
         $mform->setDefault('answernumbering', 'abc');
 
-/*        $mform->addElement('static', 'answersinstruct', get_string('choices', 'qtype_multichoice'), get_string('fillouttwochoices', 'qtype_multichoice'));
-        $mform->closeHeaderBefore('answersinstruct');
-*/
-        $creategrades = get_grade_options();
         $this->add_per_answer_fields($mform, get_string('choiceno', 'qtype_multichoice', '{no}'),
-                $creategrades->gradeoptionsfull, max(5, QUESTION_NUMANS_START));
+                question_bank::fraction_options_full(), max(5, QUESTION_NUMANS_START));
 
-        $mform->addElement('header', 'overallfeedbackhdr', get_string('overallfeedback', 'qtype_multichoice'));
+        $this->add_combined_feedback_fields(true);
+        $mform->disabledIf('shownumcorrect', 'single', 'eq', 1);
 
-        foreach (array('correctfeedback', 'partiallycorrectfeedback', 'incorrectfeedback') as $feedbackname) {
-            $mform->addElement('htmleditor', $feedbackname, get_string($feedbackname, 'qtype_multichoice'),
-                                array('course' => $this->coursefilesid));
-            $mform->setType($feedbackname, PARAM_RAW);
+        $this->add_interactive_settings(true, true);
         }
 
+    protected function get_per_answer_fields($mform, $label, $gradeoptions,
+            &$repeatedoptions, &$answersoption) {
+        $repeated = array();
+        $repeated[] = $mform->createElement('header', 'answerhdr', $label);
+        $repeated[] = $mform->createElement('editor', 'answer',
+                get_string('answer', 'question'), array('rows' => 1), $this->editoroptions);
+        $repeated[] = $mform->createElement('select', 'fraction',
+                get_string('grade'), $gradeoptions);
+        $repeated[] = $mform->createElement('editor', 'feedback',
+                get_string('feedback', 'question'), array('rows' => 1), $this->editoroptions);
+        $repeatedoptions['answer']['type'] = PARAM_RAW;
+        $repeatedoptions['fraction']['default'] = 0;
+        $answersoption = 'answers';
+        return $repeated;
     }
 
-    function set_data($question) {
-        if (isset($question->options)){
-            $answers = $question->options->answers;
-            if (count($answers)) {
-                $key = 0;
-                foreach ($answers as $answer){
-                    $default_values['answer['.$key.']'] = $answer->answer;
-                    $default_values['fraction['.$key.']'] = $answer->fraction;
-                    $default_values['feedback['.$key.']'] = $answer->feedback;
-                    $key++;
-                }
-            }
-            $default_values['single'] =  $question->options->single;
-            $default_values['answernumbering'] =  $question->options->answernumbering;
-            $default_values['shuffleanswers'] =  $question->options->shuffleanswers;
-            $default_values['correctfeedback'] =  $question->options->correctfeedback;
-            $default_values['partiallycorrectfeedback'] =  $question->options->partiallycorrectfeedback;
-            $default_values['incorrectfeedback'] =  $question->options->incorrectfeedback;
-            $question = (object)((array)$question + $default_values);
-        }
-        parent::set_data($question);
+    protected function data_preprocessing($question) {
+        $question = parent::data_preprocessing($question);
+        $question = $this->data_preprocessing_answers($question, true);
+        $question = $this->data_preprocessing_combined_feedback($question, true);
+        $question = $this->data_preprocessing_hints($question, true, true);
+
+        if (!empty($question->options)) {
+            $question->single = $question->options->single;
+            $question->shuffleanswers = $question->options->shuffleanswers;
+            $question->answernumbering = $question->options->answernumbering;
     }
 
-    function qtype() {
-        return 'multichoice';
+        return $question;
     }
 
-    function validation($data, $files) {
+    public function validation($data, $files) {
         $errors = parent::validation($data, $files);
         $answers = $data['answer'];
         $answercount = 0;
@@ -89,14 +106,20 @@ class question_edit_multichoice_form extends question_edit_form {
         $totalfraction = 0;
         $maxfraction = -1;
 
-        foreach ($answers as $key => $answer){
+        foreach ($answers as $key => $answer) {
             //check no of choices
-            $trimmedanswer = trim($answer);
-            if (!empty($trimmedanswer)){
-                $answercount++;
+            $trimmedanswer = trim($answer['text']);
+            $fraction = (float) $data['fraction'][$key];
+            if (empty($trimmedanswer) && empty($fraction)) {
+                continue;
+            }
+            if (empty($trimmedanswer)) {
+                $errors['fraction['.$key.']'] = get_string('errgradesetanswerblank', 'qtype_multichoice');
             }
+
+            $answercount++;
+
             //check grades
-            if ($answer != '') {
                 if ($data['fraction'][$key] > 0) {
                     $totalfraction += $data['fraction'][$key];
                 }
@@ -104,12 +127,11 @@ class question_edit_multichoice_form extends question_edit_form {
                     $maxfraction = $data['fraction'][$key];
                 }
             }
-        }
 
-        if ($answercount==0){
+        if ($answercount == 0) {
             $errors['answer[0]'] = get_string('notenoughanswers', 'qtype_multichoice', 2);
             $errors['answer[1]'] = get_string('notenoughanswers', 'qtype_multichoice', 2);
-        } elseif ($answercount==1){
+        } else if ($answercount == 1) {
             $errors['answer[1]'] = get_string('notenoughanswers', 'qtype_multichoice', 2);
 
         }
@@ -117,17 +139,20 @@ class question_edit_multichoice_form extends question_edit_form {
         /// Perform sanity checks on fractional grades
         if ($data['single']) {
             if ($maxfraction != 1) {
-                $maxfraction = $maxfraction * 100;
-                $errors['fraction[0]'] = get_string('errfractionsnomax', 'qtype_multichoice', $maxfraction);
+                $errors['fraction[0]'] = get_string('errfractionsnomax', 'qtype_multichoice',
+                        $maxfraction * 100);
             }
         } else {
-            $totalfraction = round($totalfraction,2);
+            $totalfraction = round($totalfraction, 2);
             if ($totalfraction != 1) {
-                $totalfraction = $totalfraction * 100;
-                $errors['fraction[0]'] = get_string('errfractionsaddwrong', 'qtype_multichoice', $totalfraction);
+                $errors['fraction[0]'] = get_string('errfractionsaddwrong', 'qtype_multichoice',
+                        $totalfraction * 100);
             }
         }
         return $errors;
     }
+
+    public function qtype() {
+        return 'multichoice';
+    }
 }
-?>
\ No newline at end of file
