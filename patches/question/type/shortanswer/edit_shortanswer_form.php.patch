diff --git a/question/type/shortanswer/edit_shortanswer_form.php b/question/type/shortanswer/edit_shortanswer_form.php
index cede3cc..2c01634 100644
--- a/question/type/shortanswer/edit_shortanswer_form.php
+++ b/question/type/shortanswer/edit_shortanswer_form.php
@@ -1,79 +1,95 @@
-<?php  // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
  * Defines the editing form for the shortanswer question type.
  *
- * @copyright &copy; 2007 Jamie Pratt
- * @author Jamie Pratt me@jamiep.org
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package questionbank
- * @subpackage questiontypes
+ * @package    qtype
+ * @subpackage shortanswer
+ * @copyright  2007 Jamie Pratt
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 
+
+defined('MOODLE_INTERNAL') || die();
+
+
 /**
- * shortanswer editing form definition.
- */
-class question_edit_shortanswer_form extends question_edit_form {
-    /**
-     * Add question-type specific form fields.
+ * Short answer question editing form definition.
      *
-     * @param MoodleQuickForm $mform the form being built.
+ * @copyright  2007 Jamie Pratt
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
      */
-    function definition_inner(&$mform) {
-        $menu = array(get_string('caseno', 'quiz'), get_string('caseyes', 'quiz'));
-        $mform->addElement('select', 'usecase', get_string('casesensitive', 'quiz'), $menu);
+class qtype_shortanswer_edit_form extends question_edit_form {
+
+    protected function definition_inner($mform) {
+        $menu = array(
+            get_string('caseno', 'qtype_shortanswer'),
+            get_string('caseyes', 'qtype_shortanswer')
+        );
+        $mform->addElement('select', 'usecase',
+                get_string('casesensitive', 'qtype_shortanswer'), $menu);
 
-        $mform->addElement('static', 'answersinstruct', get_string('correctanswers', 'quiz'), get_string('filloutoneanswer', 'quiz'));
+        $mform->addElement('static', 'answersinstruct',
+                get_string('correctanswers', 'qtype_shortanswer'),
+                get_string('filloutoneanswer', 'qtype_shortanswer'));
         $mform->closeHeaderBefore('answersinstruct');
 
-        $creategrades = get_grade_options();
         $this->add_per_answer_fields($mform, get_string('answerno', 'qtype_shortanswer', '{no}'),
-                $creategrades->gradeoptions);
-    }
+                question_bank::fraction_options());
 
-    function set_data($question) {
-        if (isset($question->options)){
-            $answers = $question->options->answers;
-            if (count($answers)) {
-                $key = 0;
-                foreach ($answers as $answer){
-                    $default_values['answer['.$key.']'] = $answer->answer;
-                    $default_values['fraction['.$key.']'] = $answer->fraction;
-                    $default_values['feedback['.$key.']'] = $answer->feedback;
-                    $key++;
+        $this->add_interactive_settings();
                 }
+
+    protected function data_preprocessing($question) {
+        $question = parent::data_preprocessing($question);
+        $question = $this->data_preprocessing_answers($question);
+        $question = $this->data_preprocessing_hints($question);
+
+        return $question;
             }
-            $default_values['usecase'] =  $question->options->usecase;
-            $question = (object)((array)$question + $default_values);
-        }
-        parent::set_data($question);
-    }
-    function validation($data, $files) {
+
+    public function validation($data, $files) {
         $errors = parent::validation($data, $files);
         $answers = $data['answer'];
         $answercount = 0;
         $maxgrade = false;
         foreach ($answers as $key => $answer) {
             $trimmedanswer = trim($answer);
-            if ($trimmedanswer !== ''){
+            if ($trimmedanswer !== '') {
                 $answercount++;
                 if ($data['fraction'][$key] == 1) {
                     $maxgrade = true;
                 }
-            } else if ($data['fraction'][$key] != 0 || !html_is_blank($data['feedback'][$key])) {
+            } else if ($data['fraction'][$key] != 0 ||
+                    !html_is_blank($data['feedback'][$key]['text'])) {
                 $errors["answer[$key]"] = get_string('answermustbegiven', 'qtype_shortanswer');
                 $answercount++;
             }
         }
-        if ($answercount==0){
-            $errors['answer[0]'] = get_string('notenoughanswers', 'quiz', 1);
+        if ($answercount==0) {
+            $errors['answer[0]'] = get_string('notenoughanswers', 'qtype_shortanswer', 1);
         }
         if ($maxgrade == false) {
             $errors['fraction[0]'] = get_string('fractionsnomax', 'question');
         }
         return $errors;
     }
-    function qtype() {
+
+    public function qtype() {
         return 'shortanswer';
     }
 }
-?>
\ No newline at end of file
