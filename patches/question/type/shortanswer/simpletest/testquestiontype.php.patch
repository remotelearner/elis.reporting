diff --git a/question/type/shortanswer/simpletest/testquestiontype.php b/question/type/shortanswer/simpletest/testquestiontype.php
index ef6fa9a..711dc75 100644
--- a/question/type/shortanswer/simpletest/testquestiontype.php
+++ b/question/type/shortanswer/simpletest/testquestiontype.php
@@ -1,247 +1,86 @@
-<?php  // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
- * Unit tests for (some of) question/type/shortanswer/questiontype.php.
+ * Unit tests for the shortanswer question type class.
  *
- * @copyright &copy; 2007 The Open University
- * @author T.J.Hunt@open.ac.uk
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package question
+ * @package    qtype
+ * @subpackage shortanswer
+ * @copyright  2007 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 
-if (!defined('MOODLE_INTERNAL')) {
-    die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
-}
-
-require_once($CFG->dirroot . '/question/type/questiontype.php');
-
-class question_shortanswer_qtype_test extends UnitTestCase {
-    var $qtype;
-    
-    function setUp() {
-        $this->qtype = new question_shortanswer_qtype();
-    }
     
-    function tearDown() {
-        $this->qtype = null;   
-    }
+defined('MOODLE_INTERNAL') || die();
 
-    function test_name() {
-        $this->assertEqual($this->qtype->name(), 'shortanswer');
-    }
+require_once($CFG->dirroot . '/question/type/shortanswer/questiontype.php');
 
-    function test_compare_string_with_wildcard() {
-        // Test case sensitive literal matches.
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('Frog', 'Frog', false));
-        $this->assertFalse($this->qtype->compare_string_with_wildcard('Frog', 'frog', false));
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('   Frog   ', 'Frog', false));
-        $this->assertFalse($this->qtype->compare_string_with_wildcard('Frogs', 'Frog', false));
-
-        // Test case insensitive literal matches.
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('Frog', 'frog', true));
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('   FROG   ', 'Frog', true));
-        $this->assertFalse($this->qtype->compare_string_with_wildcard('Frogs', 'Frog', true));
-
-        // Test case sensitive wildcard matches.
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('Frog', 'F*og', false));
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('Fog', 'F*og', false));
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('   Fat dog   ', 'F*og', false));
-        $this->assertFalse($this->qtype->compare_string_with_wildcard('Frogs', 'F*og', false));
-        $this->assertFalse($this->qtype->compare_string_with_wildcard('Fg', 'F*og', false));
-        $this->assertFalse($this->qtype->compare_string_with_wildcard('frog', 'F*og', false));
-        $this->assertFalse($this->qtype->compare_string_with_wildcard('   fat dog   ', 'F*og', false));
-
-        // Test case insensitive wildcard matches.
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('Frog', 'F*og', true));
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('Fog', 'F*og', true));
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('   Fat dog   ', 'F*og', true));
-        $this->assertFalse($this->qtype->compare_string_with_wildcard('Frogs', 'F*og', true));
-        $this->assertFalse($this->qtype->compare_string_with_wildcard('Fg', 'F*og', true));
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('frog', 'F*og', true));
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('   fat dog   ', 'F*og', true));
-
-        // Test match using regexp special chars.
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('   *   ', '\*', false));
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('*', '\*', false));
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('Frog*toad', 'Frog\*toad', false));
-        $this->assertFalse($this->qtype->compare_string_with_wildcard('a', '[a-z]', false));
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('[a-z]', '[a-z]', false));
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('\{}/', '\{}/', true));
-
-        // See http://moodle.org/mod/forum/discuss.php?d=120557
-        $this->assertTrue($this->qtype->compare_string_with_wildcard('ITÁLIE', 'Itálie', true));
-    }
 
-    function test_check_response() {
-        $answer1 = new stdClass;
-        $answer1->id = 17;
-        $answer1->answer = "celine";
-        $answer1->fraction = 1;
-        $answer2 = new stdClass;
-        $answer2->id = 23;
-        $answer2->answer = "c*line";
-        $answer2->fraction = 0.8;
-        $answer3 = new stdClass;
-        $answer3->id = 23;
-        $answer3->answer = "*line";
-        $answer3->fraction = 0.7;
-        $answer4 = new stdClass;
-        $answer4->id = 29;
-        $answer4->answer = "12\*13";
-        $answer4->fraction = 0.5;
-
-        $question = new stdClass;
-        $question->options->answers = array(
-            17 => $answer1,
-            23 => $answer2,
-            29 => $answer3,
-            31 => $answer4
+/**
+ * Unit tests for the shortanswer question type class.
+ *
+ * @copyright  2007 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class qtype_shortanswer_test extends UnitTestCase {
+    public static $includecoverage = array(
+        'question/type/questiontypebase.php',
+        'question/type/shortanswer/questiontype.php',
         );
-        $question->options->usecase = true;
-
-        $state = new stdClass;
-
-        $state->responses = array('' => 'celine');
-        $this->assertEqual($this->qtype->check_response($question, $state), 17);
-
-        $state->responses = array('' => 'caline');
-        $this->assertEqual($this->qtype->check_response($question, $state), 23);
-
-        $state->responses = array('' => 'aline');
-        $this->assertEqual($this->qtype->check_response($question, $state), 29);
-
-        $state->responses = array('' => 'frog');
-        $this->assertFalse($this->qtype->check_response($question, $state));
-
-        $state->responses = array('' => '12*13');
-        $this->assertEqual($this->qtype->check_response($question, $state), 31);
-
-        $question->options->usecase = false;
-
-        $answer1->answer = "Fred's";
-        $question->options->answers[17] = $answer1;
-
-        $state->responses = array('' => 'frog');
-        $this->assertFalse($this->qtype->check_response($question, $state));
-
-        $state->responses = array('' => "fred\'s");
-        $this->assertEqual($this->qtype->check_response($question, $state), 17);
 
-        $state->responses = array('' => '12*13');
-        $this->assertEqual($this->qtype->check_response($question, $state), 31);
+    protected $qtype;
 
-        $state->responses = array('' => 'caLINe');
-        $this->assertEqual($this->qtype->check_response($question, $state), 23);
-
-        $state->responses = array('' => 'ALIne');
-        $this->assertEqual($this->qtype->check_response($question, $state), 29);
+    public function setUp() {
+        $this->qtype = new qtype_shortanswer();
     }
 
-    function test_compare_responses() {
-        $question = new stdClass;
-        $question->options->usecase = false;
-
-        $state = new stdClass;
-        $teststate = new stdClass;
-        $this->assertFalse($this->qtype->compare_responses($question, $state, $teststate));
-
-        $state->responses = array('' => '');
-        $this->assertFalse($this->qtype->compare_responses($question, $state, $teststate));
-
-        $state = new stdClass;
-        $teststate->responses = array('' => '');
-        $this->assertFalse($this->qtype->compare_responses($question, $state, $teststate));
-
-        $state->responses = array('' => '');
-        $this->assertTrue($this->qtype->compare_responses($question, $state, $teststate));
-
-        $state->responses = array('' => 'frog');
-        $teststate->responses = array('' => 'frog');
-        $this->assertTrue($this->qtype->compare_responses($question, $state, $teststate));
-
-        $state->responses = array('' => 'frog');
-        $teststate->responses = array('' => 'Frog');
-        $this->assertFalse($this->qtype->compare_responses($question, $state, $teststate));
-
-        $state->responses = array('' => "\'");
-        $teststate->responses = array('' => "\'");
-        $this->assertTrue($this->qtype->compare_responses($question, $state, $teststate));
-
-        $state->responses = array('' => 'frog*toad');
-        $teststate->responses = array('' => 'frog*TOAD');
-        $this->assertFalse($this->qtype->compare_responses($question, $state, $teststate));
-
-        $state->responses = array('' => 'frog*');
-        $teststate->responses = array('' => 'frogs');
-        $this->assertFalse($this->qtype->compare_responses($question, $state, $teststate));
-
-        $state->responses = array('' => 'frogs');
-        $teststate->responses = array('' => 'frog*');
-        $this->assertFalse($this->qtype->compare_responses($question, $state, $teststate));
-
-        $question->options->usecase = true;
-
-        $state->responses = array('' => '');
-        $teststate->responses = array('' => '');
-        $this->assertTrue($this->qtype->compare_responses($question, $state, $teststate));
-
-        $state->responses = array('' => 'frog');
-        $teststate->responses = array('' => 'frog');
-        $this->assertTrue($this->qtype->compare_responses($question, $state, $teststate));
+    public function tearDown() {
+        $this->qtype = null;
+    }
 
-        $state->responses = array('' => 'frog');
-        $teststate->responses = array('' => 'Frog');
-        $this->assertFalse($this->qtype->compare_responses($question, $state, $teststate));
+    protected function get_test_question_data() {
+        $q = new stdClass();
+        $q->id = 1;
+        $q->options->answers[1] = (object) array('answer' => 'frog', 'fraction' => 1);
+        $q->options->answers[2] = (object) array('answer' => '*', 'fraction' => 0.1);
 
-        $state->responses = array('' => "\'");
-        $teststate->responses = array('' => "\'");
-        $this->assertTrue($this->qtype->compare_responses($question, $state, $teststate));
+        return $q;
+    }
 
-        $state->responses = array('' => 'frog*toad');
-        $teststate->responses = array('' => 'frog*toad');
-        $this->assertTrue($this->qtype->compare_responses($question, $state, $teststate));
+    public function test_name() {
+        $this->assertEqual($this->qtype->name(), 'shortanswer');
+    }
 
-        $state->responses = array('' => 'frog*');
-        $teststate->responses = array('' => 'frogs');
-        $this->assertFalse($this->qtype->compare_responses($question, $state, $teststate));
+    public function test_can_analyse_responses() {
+        $this->assertTrue($this->qtype->can_analyse_responses());
+    }
 
-        $state->responses = array('' => 'frogs');
-        $teststate->responses = array('' => 'frog*');
-        $this->assertFalse($this->qtype->compare_responses($question, $state, $teststate));
+    public function test_get_random_guess_score() {
+        $q = $this->get_test_question_data();
+        $this->assertEqual(0.1, $this->qtype->get_random_guess_score($q));
     }
 
-    function test_get_correct_responses() {
-        $answer1 = new stdClass;
-        $answer1->id = 17;
-        $answer1->answer = "frog";
-        $answer1->fraction = 1;
-        $answer2 = new stdClass;
-        $answer2->id = 23;
-        $answer2->answer = "f*g";
-        $answer2->fraction = 1;
-        $answer3 = new stdClass;
-        $answer3->id = 29;
-        $answer3->answer = "12\*13";
-        $answer3->fraction = 1;
-        $answer4 = new stdClass;
-        $answer4->id = 31;
-        $answer4->answer = "*";
-        $answer4->fraction = 0;
-        $question = new stdClass;
-        $question->options->answers = array(
-            17 => $answer1,
-            23 => $answer2,
-            29 => $answer3,
-            31 => $answer4
-        );
-        $state = new stdClass;
-        $this->assertEqual($this->qtype->get_correct_responses($question, $state), array('' => 'frog'));
-        $question->options->answers[17]->fraction = 0;
-        $this->assertEqual($this->qtype->get_correct_responses($question, $state), array('' => 'f*g'));
-        $question->options->answers[23]->fraction = 0;
-        $this->assertEqual($this->qtype->get_correct_responses($question, $state), array('' => '12*13'));
-        $question->options->answers[29]->fraction = 0;
-        $this->assertNull($this->qtype->get_correct_responses($question, $state));
+    public function test_get_possible_responses() {
+        $q = $this->get_test_question_data();
+
+        $this->assertEqual(array(
+            $q->id => array(
+                1 => new question_possible_response('frog', 1),
+                2 => new question_possible_response('*', 0.1),
+                null => question_possible_response::no_response()),
+        ), $this->qtype->get_possible_responses($q));
     }
 }
-
-?>
