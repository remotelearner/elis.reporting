diff --git a/question/type/essay/questiontype.php b/question/type/essay/questiontype.php
index 2b2c091..0a392f2 100644
--- a/question/type/essay/questiontype.php
+++ b/question/type/essay/questiontype.php
@@ -1,174 +1,130 @@
-<?php  // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
-//////////////////
-///   ESSAY   ///
-/////////////////
-
-/// QUESTION TYPE CLASS //////////////////
 /**
- * @package questionbank
- * @subpackage questiontypes
+ * Question type class for the essay question type.
+ *
+ * @package    qtype
+ * @subpackage essay
+ * @copyright  2005 Mark Nielsen
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
-class question_essay_qtype extends default_questiontype {
-    var $usablebyrandom;
 
-    function question_essay_qtype() {
-        $this->usablebyrandom = get_config('qtype_random', 'selectmanual');
-    }
 
-    function name() {
-        return 'essay';
-    }
+defined('MOODLE_INTERNAL') || die();
+
 
-    function is_manual_graded() {
+/**
+ * The essay question type.
+ *
+ * @copyright  2005 Mark Nielsen
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class qtype_essay extends question_type {
+    public function is_manual_graded() {
         return true;
     }
 
-    function is_usable_by_random() {
-        return $this->usablebyrandom;
+    public function response_file_areas() {
+        return array('attachments', 'answer');
     }
 
-    function save_question_options($question) {
-        $result = true;
-        $update = true;
-        $answer = get_record("question_answers", "question", $question->id);
-        if (!$answer) {
-            $answer = new stdClass;
-            $answer->question = $question->id;
-            $update = false;
-        }
-        $answer->answer   = $question->feedback;
-        $answer->feedback = $question->feedback;
-        $answer->fraction = $question->fraction;
-        if ($update) {
-            if (!update_record("question_answers", $answer)) {
-                $result = new stdClass;
-                $result->error = "Could not update quiz answer!";
+    public function get_question_options($question) {
+        global $DB;
+        $question->options = $DB->get_record('qtype_essay_options',
+                array('questionid' => $question->id), '*', MUST_EXIST);
+        parent::get_question_options($question);
             }
-        } else {
-            if (!$answer->id = insert_record("question_answers", $answer)) {
-                $result = new stdClass;
-                $result->error = "Could not insert quiz answer!";
-            }
-        }
-        return $result;
-    }
-
-    function print_question_formulation_and_controls(&$question, &$state, $cmoptions, $options) {
-        global $CFG;
-        static $htmleditorused = false;
-
-        $answers       = &$question->options->answers;
-        $readonly      = empty($options->readonly) ? '' : 'disabled="disabled"';
-
-        // Only use the rich text editor for the first essay question on a page.
-        $usehtmleditor = can_use_html_editor() && !$htmleditorused;
-
-        $formatoptions          = new stdClass;
-        $formatoptions->noclean = true;
-        $formatoptions->para    = false;
-
-        $inputname = $question->name_prefix;
-        $stranswer = get_string("answer", "quiz").': ';
-
-        /// set question text and media
-        $questiontext = format_text($question->questiontext,
-                                   $question->questiontextformat,
-                                   $formatoptions, $cmoptions->course);
 
-        $image = get_question_image($question);
+    public function save_question_options($formdata) {
+        global $DB;
+        $context = $formdata->context;
 
-        // feedback handling
-        $feedback = '';
-        if ($options->feedback && !empty($answers)) {
-            foreach ($answers as $answer) {
-                $feedback = format_text($answer->feedback, '', $formatoptions, $cmoptions->course);
-            }
-        }
-
-        // get response value
-        if (isset($state->responses[''])) {
-            $value = stripslashes_safe($state->responses['']);
-        } else {
-            $value = "";
+        $options = $DB->get_record('qtype_essay_options', array('questionid' => $formdata->id));
+        if (!$options) {
+            $options = new stdClass();
+            $options->questionid = $formdata->id;
+            $options->id = $DB->insert_record('qtype_essay_options', $options);
         }
 
-        // answer
-        if (empty($options->readonly)) {
-            // the student needs to type in their answer so print out a text editor
-            $answer = print_textarea($usehtmleditor, 18, 80, 630, 400, $inputname, $value, $cmoptions->course, true);
-        } else {
-            // it is read only, so just format the students answer and output it
-            $safeformatoptions = new stdClass;
-            $safeformatoptions->para = false;
-            $answer = format_text($value, FORMAT_MOODLE,
-                                  $safeformatoptions, $cmoptions->course);
-            $answer = '<div class="answerreview">' . $answer . '</div>';
+        $options->responseformat = $formdata->responseformat;
+        $options->responsefieldlines = $formdata->responsefieldlines;
+        $options->attachments = $formdata->attachments;
+        $options->graderinfo = $this->import_or_save_files($formdata->graderinfo,
+                $context, 'qtype_essay', 'graderinfo', $formdata->id);
+        $options->graderinfoformat = $formdata->graderinfo['format'];
+        $DB->update_record('qtype_essay_options', $options);
         }
 
-        include("$CFG->dirroot/question/type/essay/display.html");
-
-        if ($usehtmleditor && empty($options->readonly)) {
-            use_html_editor($inputname);
-            $htmleditorused = true;
-        }
+    protected function initialise_question_instance(question_definition $question, $questiondata) {
+        parent::initialise_question_instance($question, $questiondata);
+        $question->responseformat = $questiondata->options->responseformat;
+        $question->responsefieldlines = $questiondata->options->responsefieldlines;
+        $question->attachments = $questiondata->options->attachments;
+        $question->graderinfo = $questiondata->options->graderinfo;
+        $question->graderinfoformat = $questiondata->options->graderinfoformat;
     }
 
-    function grade_responses(&$question, &$state, $cmoptions) {
-        // All grading takes place in Manual Grading
-
-        $state->responses[''] = clean_param($state->responses[''], PARAM_CLEAN);
-
-        $state->raw_grade = 0;
-        $state->penalty = 0;
-
-        return true;
-    }
-
-    function response_summary($question, $state, $length = 80) {
-        $responses = $this->get_actual_response($question, $state);
-        $response = reset($responses);
-        return shorten_text($response, $length);
+    /**
+     * @return array the different response formats that the question type supports.
+     * internal name => human-readable name.
+     */
+    public function response_formats() {
+        return array(
+            'editor' => get_string('formateditor', 'qtype_essay'),
+            'editorfilepicker' => get_string('formateditorfilepicker', 'qtype_essay'),
+            'plain' => get_string('formatplain', 'qtype_essay'),
+            'monospaced' => get_string('formatmonospaced', 'qtype_essay'),
+        );
     }
 
     /**
-     * Backup the extra information specific to an essay question - over and above
-     * what is in the mdl_question table.
-     *
-     * @param file $bf The backup file to write to.
-     * @param object $preferences the blackup options controlling this backup.
-     * @param $questionid the id of the question being backed up.
-     * @param $level indent level in the backup file - so it can be formatted nicely.
+     * @return array the choices that should be offered for the input box size.
      */
-    function backup($bf, $preferences, $questionid, $level = 6) {
-        return question_backup_answers($bf, $preferences, $questionid, $level);
+    public function response_sizes() {
+        $choices = array();
+        for ($lines = 5; $lines <= 40; $lines += 5) {
+            $choices[$lines] = get_string('nlines', 'qtype_essay', $lines);
+        }
+        return $choices;
     }
 
     /**
-     * Runs all the code required to set up and save an essay question for testing purposes.
-     * Alternate DB table prefix may be used to facilitate data deletion.
+     * @return array the choices that should be offered for the number of attachments.
      */
-    function generate_test($name, $courseid = null) {
-        list($form, $question) = parent::generate_test($name, $courseid);
-        $form->questiontext = "What is the purpose of life?";
-        $form->feedback = "feedback";
-        $form->generalfeedback = "General feedback";
-        $form->fraction = 0;
-        $form->penalty = 0;
-
-        if ($courseid) {
-            $course = get_record('course', 'id', $courseid);
+    public function attachment_options() {
+        return array(
+            0 => get_string('no'),
+            1 => '1',
+            2 => '2',
+            3 => '3',
+            -1 => get_string('unlimited'),
+        );
         }
 
-        return $this->save_question($question, $form, $course);
+    public function move_files($questionid, $oldcontextid, $newcontextid) {
+        parent::move_files($questionid, $oldcontextid, $newcontextid);
+        $fs = get_file_storage();
+        $fs->move_area_files_to_new_context($oldcontextid,
+                $newcontextid, 'qtype_essay', 'graderinfo', $questionid);
     }
 
-    // Restore method not needed.
+    protected function delete_files($questionid, $contextid) {
+        parent::delete_files($questionid, $contextid);
+        $fs = get_file_storage();
+        $fs->delete_area_files($contextid, 'qtype_essay', 'graderinfo', $questionid);
+    }
 }
-//// END OF CLASS ////
-
-//////////////////////////////////////////////////////////////////////////
-//// INITIATION - Without this line the question type is not in use... ///
-//////////////////////////////////////////////////////////////////////////
-question_register_questiontype(new question_essay_qtype());
-?>
