diff --git a/question/type/match/edit_match_form.php b/question/type/match/edit_match_form.php
index 132cd35..241c7ef 100644
--- a/question/type/match/edit_match_form.php
+++ b/question/type/match/edit_match_form.php
@@ -1,24 +1,48 @@
-<?php  // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
 /**
  * Defines the editing form for the match question type.
  *
- * @copyright &copy; 2007 Jamie Pratt
- * @author Jamie Pratt me@jamiep.org
- * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
- * @package questionbank
- * @subpackage questiontypes
+ * @package    qtype
+ * @subpackage match
+ * @copyright  2007 Jamie Pratt me@jamiep.org
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
 
+
+defined('MOODLE_INTERNAL') || die();
+
+
 /**
- * match editing form definition.
+ * Match question type editing form definition.
+ *
+ * @copyright  2007 Jamie Pratt me@jamiep.org
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
  */
-class question_edit_match_form extends question_edit_form {
+class qtype_match_edit_form extends question_edit_form {
 
-    function get_per_answer_fields(&$mform, $label, $gradeoptions, &$repeatedoptions, &$answersoption) {
+    protected function get_per_answer_fields($mform, $label, $gradeoptions,
+            &$repeatedoptions, &$answersoption) {
         $repeated = array();
-        $repeated[] =& $mform->createElement('header', 'answerhdr', $label);
-        $repeated[] =& $mform->createElement('textarea', 'subquestions', get_string('question', 'quiz'), array('cols'=>40, 'rows'=>3));
-        $repeated[] =& $mform->createElement('text', 'subanswers', get_string('answer', 'quiz'), array('size'=>50));
+        $repeated[] = $mform->createElement('header', 'answerhdr', $label);
+        $repeated[] = $mform->createElement('editor', 'subquestions',
+                get_string('question'), array('rows'=>3), $this->editoroptions);
+        $repeated[] = $mform->createElement('text', 'subanswers',
+                get_string('answer', 'question'), array('size'=>50));
         $repeatedoptions['subquestions']['type'] = PARAM_RAW;
         $repeatedoptions['subanswers']['type'] = PARAM_TEXT;
         $answersoption = 'subquestions';
@@ -30,70 +54,96 @@ class question_edit_match_form extends question_edit_form {
      *
      * @param object $mform the form being built.
      */
-    function definition_inner(&$mform) {
-        $mform->addElement('advcheckbox', 'shuffleanswers', get_string('shuffle', 'quiz'), null, null, array(0,1));
-        $mform->setHelpButton('shuffleanswers', array('matchshuffle', get_string('shuffle','quiz'), 'quiz'));
+    protected function definition_inner($mform) {
+        $mform->addElement('advcheckbox', 'shuffleanswers',
+                get_string('shuffle', 'qtype_match'), null, null, array(0, 1));
+        $mform->addHelpButton('shuffleanswers', 'shuffle', 'qtype_match');
         $mform->setDefault('shuffleanswers', 1);
 
-        $mform->addElement('static', 'answersinstruct', get_string('choices', 'quiz'), get_string('filloutthreeqsandtwoas', 'qtype_match'));
+        $mform->addElement('static', 'answersinstruct',
+                get_string('availablechoices', 'qtype_match'),
+                get_string('filloutthreeqsandtwoas', 'qtype_match'));
         $mform->closeHeaderBefore('answersinstruct');
 
-        $this->add_per_answer_fields($mform, get_string('questionno', 'quiz', '{no}'), 0);
+        $this->add_per_answer_fields($mform, get_string('questionno', 'question', '{no}'), 0);
+
+        $this->add_combined_feedback_fields(true);
+        $this->add_interactive_settings(true, true);
+    }
+
+    protected function data_preprocessing($question) {
+        $question = parent::data_preprocessing($question);
+        $question = $this->data_preprocessing_combined_feedback($question, true);
+        $question = $this->data_preprocessing_hints($question, true, true);
+
+        if (empty($question->options)) {
+            return $question;
     }
 
-    function set_data($question) {
-        if (isset($question->options)){
-            $subquestions = $question->options->subquestions;
-            if (count($subquestions)) {
+        $question->shuffleanswers = $question->options->shuffleanswers;
+
                 $key = 0;
-                foreach ($subquestions as $subquestion){
-                    $default_values['subanswers['.$key.']'] = $subquestion->answertext;
-                    $default_values['subquestions['.$key.']'] = $subquestion->questiontext;
+        foreach ($question->options->subquestions as $subquestion) {
+            $question->subanswers[$key] = $subquestion->answertext;
+
+            $draftid = file_get_submitted_draft_itemid('subquestions[' . $key . ']');
+            $question->subquestions[$key] = array();
+            $question->subquestions[$key]['text'] = file_prepare_draft_area(
+                $draftid,           // draftid
+                $this->context->id, // context
+                'qtype_match',      // component
+                'subquestion',      // filarea
+                !empty($subquestion->id) ? (int) $subquestion->id : null, // itemid
+                $this->fileoptions, // options
+                $subquestion->questiontext // text
+            );
+            $question->subquestions[$key]['format'] = $subquestion->questiontextformat;
+            $question->subquestions[$key]['itemid'] = $draftid;
                     $key++;
                 }
-            }
-            $default_values['shuffleanswers'] =  $question->options->shuffleanswers;
-            $question = (object)((array)$question + $default_values);
-        }
-        parent::set_data($question);
-    }
 
-    function qtype() {
-        return 'match';
+        return $question;
     }
 
-    function validation($data, $files) {
+    public function validation($data, $files) {
         $errors = parent::validation($data, $files);
         $answers = $data['subanswers'];
         $questions = $data['subquestions'];
         $questioncount = 0;
         $answercount = 0;
-        foreach ($questions as $key => $question){
-            $trimmedquestion = trim($question);
+        foreach ($questions as $key => $question) {
+            $trimmedquestion = trim($question['text']);
             $trimmedanswer = trim($answers[$key]);
-            if ($trimmedquestion != ''){
+            if ($trimmedquestion != '') {
                 $questioncount++;
             }
-            if ($trimmedanswer != '' || $trimmedquestion != ''){
+            if ($trimmedanswer != '' || $trimmedquestion != '') {
                 $answercount++;
             }
-            if ($trimmedquestion != '' && $trimmedanswer == ''){
-                $errors['subanswers['.$key.']'] = get_string('nomatchinganswerforq', 'qtype_match', $trimmedquestion);
+            if ($trimmedquestion != '' && $trimmedanswer == '') {
+                $errors['subanswers['.$key.']'] =
+                        get_string('nomatchinganswerforq', 'qtype_match', $trimmedquestion);
             }
         }
-        $numberqanda = new stdClass;
+        $numberqanda = new stdClass();
         $numberqanda->q = 2;
         $numberqanda->a = 3;
-        if ($questioncount < 1){
-            $errors['subquestions[0]'] = get_string('notenoughqsandas', 'qtype_match', $numberqanda);
+        if ($questioncount < 1) {
+            $errors['subquestions[0]'] =
+                    get_string('notenoughqsandas', 'qtype_match', $numberqanda);
         }
-        if ($questioncount < 2){
-            $errors['subquestions[1]'] = get_string('notenoughqsandas', 'qtype_match', $numberqanda);
+        if ($questioncount < 2) {
+            $errors['subquestions[1]'] =
+                    get_string('notenoughqsandas', 'qtype_match', $numberqanda);
         }
-        if ($answercount < 3){
-            $errors['subanswers[2]'] = get_string('notenoughqsandas', 'qtype_match', $numberqanda);
+        if ($answercount < 3) {
+            $errors['subanswers[2]'] =
+                    get_string('notenoughqsandas', 'qtype_match', $numberqanda);
         }
         return $errors;
     }
+
+    public function qtype() {
+        return 'match';
+    }
 }
-?>
\ No newline at end of file
