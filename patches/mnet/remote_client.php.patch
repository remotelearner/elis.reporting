diff --git a/mnet/remote_client.php b/mnet/remote_client.php
index 446bdfc..c3aa4e9 100644
--- a/mnet/remote_client.php
+++ b/mnet/remote_client.php
@@ -1,4 +1,4 @@
-<?php // $Id$
+<?php
 /**
  * An object to represent lots of information about an RPC-peer machine
  *
@@ -12,34 +12,54 @@ class mnet_remote_client extends mnet_peer {
 
     // If the remote client is trying to execute a method on an object instead
     // of just a function, we'll instantiate the proper class and store it in
-    // this 'object_to_call' property.
+    // this 'object_to_call' property, or 'static_location' if it wants to be called statically
     var $object_to_call         = false;
+    var $static_location        = false;
     var $request_was_encrypted  = false;
     var $request_was_signed     = false;
+    var $signatureok = false; // True if we have successfully verified that the request was signed by an established peer
+    var $pushkey = false; // True if we need to tell the remote peer about our current public key
+    var $useprivatekey = ''; // The private key we should use to sign pushkey response
 
     function was_encrypted() {
         $this->request_was_encrypted  = true;
     }
 
+    /* Record private key to use in pushkey response
+     * Called when we have decrypted a request using an old (but still acceptable) keypair
+     * @param $keyresource the private key we should use to sign the response.
+     */
+    function encrypted_to($keyresource) {
+        $this->useprivatekey = $keyresource;
+    }
+
+    function set_pushkey() {
+        $this->pushkey = true;
+    }
+
     function was_signed() {
         $this->request_was_signed  = true;
     }
 
+    function signature_verified() {
+        $this->signatureok = true;
+    }
+
     function object_to_call($object) {
         $this->object_to_call = $object;
     }
 
+    function static_location($location) {
+        $this->static_location = $location;
+    }
+
     function plaintext_is_ok() {
         global $CFG;
 
         $trusted_hosts = explode(',', get_config('mnet', 'mnet_trusted_hosts'));
 
         foreach($trusted_hosts as $host) {
-            list($network, $mask) = explode('/', $host.'/');
-            if (empty($network)) continue;
-            if (strlen($mask) == 0) $mask = 32;
-            
-            if (ip_in_range($_SERVER['REMOTE_ADDR'], $network, $mask)) {
+            if (address_in_subnet(getremoteaddr(), $host)) {
                 return true;
             }
         }
@@ -48,6 +68,7 @@ class mnet_remote_client extends mnet_peer {
     }
 
     function refresh_key() {
+        mnet_debug("remote client refreshing key");
         global $CFG;
         // set up an RPC request
         require_once $CFG->dirroot.'/mnet/xmlrpc/client.php';
@@ -57,6 +78,7 @@ class mnet_remote_client extends mnet_peer {
 
         // Do RPC call and store response
         if ($mnetrequest->send($this) === true) {
+            mnet_debug("refresh key request complete");
             // Ok - we actually don't care about the result
             $temp = new mnet_peer();
             $temp->set_id($this->id);
@@ -64,8 +86,6 @@ class mnet_remote_client extends mnet_peer {
                 $newkey = clean_param($temp->public_key, PARAM_PEM);
                 if(!empty($newkey)) {
                     $this->public_key = $newkey;
-                    $this->updateparams->public_key = $newkey;
-                    $this->commit();
                     return true;
                 }
             }
@@ -73,4 +93,3 @@ class mnet_remote_client extends mnet_peer {
         return false;
     }
 }
-?>
