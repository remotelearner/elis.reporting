diff --git a/group/autogroup_form.php b/group/autogroup_form.php
index a97a176..36433f0 100644
--- a/group/autogroup_form.php
+++ b/group/autogroup_form.php
@@ -1,6 +1,11 @@
-<?php // $Id$
+<?php
+
+if (!defined('MOODLE_INTERNAL')) {
+    die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
+}
 
 require_once($CFG->dirroot.'/lib/formslib.php');
+require_once($CFG->dirroot.'/cohort/lib.php');
 
 /// get url variables
 class autogroup_form extends moodleform {
@@ -16,10 +21,30 @@ class autogroup_form extends moodleform {
         $options = array(0=>get_string('all'));
         $options += $this->_customdata['roles'];
         $mform->addElement('select', 'roleid', get_string('selectfromrole', 'group'), $options);
-        if (!empty($COURSE->defaultrole) and array_key_exists($COURSE->defaultrole, $options)) {
-            $mform->setDefault('roleid', $COURSE->defaultrole);
-        } else if (!empty($CFG->defaultcourseroleid) and array_key_exists($CFG->defaultcourseroleid, $options)) {
-            $mform->setDefault('roleid', $CFG->defaultcourseroleid);
+
+        $student = get_archetype_roles('student');
+        $student = reset($student);
+
+        if ($student and array_key_exists($student->id, $options)) {
+            $mform->setDefault('roleid', $student->id);
+        }
+
+        $context = get_context_instance(CONTEXT_COURSE, $COURSE->id);
+        if (has_capability('moodle/cohort:view', $context)) {
+            $options = cohort_get_visible_list($COURSE);
+            if ($options) {
+                $options = array(0=>get_string('anycohort', 'cohort')) + $options;
+                $mform->addElement('select', 'cohortid', get_string('selectfromcohort', 'cohort'), $options);
+                $mform->setDefault('cohortid', '0');
+            } else {
+                $mform->addElement('hidden','cohortid');
+                $mform->setType('cohortid', PARAM_INT);
+                $mform->setConstant('cohortid', '0');
+            }
+        } else {
+            $mform->addElement('hidden','cohortid');
+            $mform->setType('cohortid', PARAM_INT);
+            $mform->setConstant('cohortid', '0');
         }
 
         $options = array('groups' => get_string('numgroups', 'group'),
@@ -45,8 +70,7 @@ class autogroup_form extends moodleform {
         $mform->setAdvanced('allocateby');
 
         $mform->addElement('text', 'namingscheme', get_string('namingscheme', 'group'));
-        $mform->setHelpButton('namingscheme', array(false, get_string('namingschemehelp', 'group'),
-                false, true, false, get_string('namingschemehelp', 'group')));
+        $mform->addHelpButton('namingscheme', 'namingscheme', 'group');
         $mform->addRule('namingscheme', get_string('required'), 'required', null, 'client');
         $mform->setType('namingscheme', PARAM_MULTILANG);
         // there must not be duplicate group names in course
@@ -56,7 +80,6 @@ class autogroup_form extends moodleform {
             $mform->setDefault('namingscheme', $template);
         }
 
-        if (!empty($CFG->enablegroupings)) {
             $options = array('0' => get_string('no'),
                              '-1'=> get_string('newgrouping', 'group'));
             if ($groupings = groups_get_all_groupings($COURSE->id)) {
@@ -72,7 +95,6 @@ class autogroup_form extends moodleform {
             $mform->addElement('text', 'groupingname', get_string('groupingname', 'group'), $options);
             $mform->setType('groupingname', PARAM_MULTILANG);
             $mform->disabledIf('groupingname', 'grouping', 'noteq', '-1');
-        }
 
         $mform->addElement('hidden','courseid');
         $mform->setType('courseid', PARAM_INT);
@@ -94,7 +116,7 @@ class autogroup_form extends moodleform {
         $errors = parent::validation($data, $files);
 
         if ($data['allocateby'] != 'no') {
-            if (!$users = groups_get_potential_members($data['courseid'], $data['roleid'])) {
+            if (!$users = groups_get_potential_members($data['courseid'], $data['roleid'], $data['cohortid'])) {
                 $errors['roleid'] = get_string('nousersinrole', 'group');
             }
 
@@ -109,14 +131,14 @@ class autogroup_form extends moodleform {
         }
 
         //try to detect group name duplicates
-        $name = groups_parse_name(stripslashes(trim($data['namingscheme'])), 0);
+        $name = groups_parse_name(trim($data['namingscheme']), 0);
         if (groups_get_group_by_name($COURSE->id, $name)) {
             $errors['namingscheme'] = get_string('groupnameexists', 'group', $name);
         }
 
         // check grouping name duplicates
         if ( isset($data['grouping']) && $data['grouping'] == '-1') {
-            $name = trim(stripslashes($data['groupingname']));
+            $name = trim($data['groupingname']);
             if (empty($name)) {
                 $errors['groupingname'] = get_string('required');
             } else if (groups_get_grouping_by_name($COURSE->id, $name)) {
@@ -125,14 +147,15 @@ class autogroup_form extends moodleform {
         }
 
        /// Check the naming scheme
+        if ($data['groupby'] == 'groups' and $data['number'] == 1) {
+            // we can use the name as is because there will be only one group max
+        } else {
         $matchcnt = preg_match_all('/[#@]{1,1}/', $data['namingscheme'], $matches);
-
         if ($matchcnt != 1) {
             $errors['namingscheme'] = get_string('badnamingscheme', 'group');
         }
+        }
 
         return $errors;
     }
 }
-
-?>
