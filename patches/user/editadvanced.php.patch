diff --git a/user/editadvanced.php b/user/editadvanced.php
index 74c1709..e376086 100644
--- a/user/editadvanced.php
+++ b/user/editadvanced.php
@@ -1,82 +1,144 @@
-<?php // $Id$
-
-    require_once('../config.php');
-    require_once($CFG->libdir.'/gdlib.php');
-    require_once($CFG->libdir.'/adminlib.php');
-    require_once($CFG->dirroot.'/user/editadvanced_form.php');
-    require_once($CFG->dirroot.'/user/editlib.php');
-    require_once($CFG->dirroot.'/user/profile/lib.php');
-
-    httpsrequired();
-
-    $id     = optional_param('id', $USER->id, PARAM_INT);    // user id; -1 if creating new user
-    $course = optional_param('course', SITEID, PARAM_INT);   // course id (defaults to Site)
-
-    if (!$course = get_record('course', 'id', $course)) {
-        error('Course ID was incorrect');
-    }
-    require_login($course->id);
-
-    if ($course->id == SITEID) {
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Allows you to edit a users profile
+ *
+ * @copyright 1999 Martin Dougiamas  http://dougiamas.com
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ * @package user
+ */
+
+require_once('../config.php');
+require_once($CFG->libdir.'/gdlib.php');
+require_once($CFG->libdir.'/adminlib.php');
+require_once($CFG->dirroot.'/user/editadvanced_form.php');
+require_once($CFG->dirroot.'/user/editlib.php');
+require_once($CFG->dirroot.'/user/profile/lib.php');
+
+//HTTPS is required in this page when $CFG->loginhttps enabled
+$PAGE->https_required();
+
+$id     = optional_param('id', $USER->id, PARAM_INT);    // user id; -1 if creating new user
+$course = optional_param('course', SITEID, PARAM_INT);   // course id (defaults to Site)
+
+$PAGE->set_url('/user/editadvanced.php', array('course'=>$course, 'id'=>$id));
+
+$course = $DB->get_record('course', array('id'=>$course), '*', MUST_EXIST);
+
+if (!empty($USER->newadminuser)) {
+    $PAGE->set_course($SITE);
+    $PAGE->set_pagelayout('maintenance');
+} else {
+    require_login($course);
+    $PAGE->set_pagelayout('admin');
+}
+
+if ($course->id == SITEID) {
         $coursecontext = get_context_instance(CONTEXT_SYSTEM);   // SYSTEM context
-    } else {
+} else {
         $coursecontext = get_context_instance(CONTEXT_COURSE, $course->id);   // Course context
-    }
-    $systemcontext = get_context_instance(CONTEXT_SYSTEM);
+}
+$systemcontext = get_context_instance(CONTEXT_SYSTEM);
 
-    if ($id == -1) {
+if ($id == -1) {
         // creating new user
-        require_capability('moodle/user:create', $systemcontext);
-        $user = new object();
+    $user = new stdClass();
         $user->id = -1;
         $user->auth = 'manual';
         $user->confirmed = 1;
         $user->deleted = 0;
-    } else {
+    require_capability('moodle/user:create', $systemcontext);
+    admin_externalpage_setup('addnewuser', '', array('id' => -1));
+} else {
         // editing existing user
         require_capability('moodle/user:update', $systemcontext);
-        if (!$user = get_record('user', 'id', $id)) {
-            error('User ID was incorrect');
+    $user = $DB->get_record('user', array('id'=>$id), '*', MUST_EXIST);
+    $PAGE->set_context(get_context_instance(CONTEXT_USER, $user->id));
+    if ($user->id == $USER->id) {
+        if ($course->id != SITEID && $node = $PAGE->navigation->find($course->id, navigation_node::TYPE_COURSE)) {
+            $node->make_active();
+            $PAGE->navbar->includesettingsbase = true;
         }
+    } else {
+        $PAGE->navigation->extend_for_user($user);
     }
+}
 
-    // remote users cannot be edited
-    if ($user->id != -1 and is_mnet_remote_user($user)) {
+// remote users cannot be edited
+if ($user->id != -1 and is_mnet_remote_user($user)) {
         redirect($CFG->wwwroot . "/user/view.php?id=$id&course={$course->id}");
-    }
+}
 
-    if ($user->id != $USER->id and is_primary_admin($user->id)) {  // Can't edit primary admin
-        print_error('adminprimarynoedit');
-    }
+if ($user->id != $USER->id and is_siteadmin($user) and !is_siteadmin($USER)) {  // Only admins may edit other admins
+    print_error('useradmineditadmin');
+}
 
-    if (isguestuser($user->id)) { // the real guest user can not be edited
+if (isguestuser($user->id)) { // the real guest user can not be edited
         print_error('guestnoeditprofileother');
-    }
+}
 
-    if ($user->deleted) {
-        print_header();
-        print_heading(get_string('userdeleted'));
-        print_footer($course);
+if ($user->deleted) {
+    echo $OUTPUT->header();
+    echo $OUTPUT->heading(get_string('userdeleted'));
+    echo $OUTPUT->footer();
         die;
-    }
+}
 
-    //load user preferences
-    useredit_load_preferences($user);
+//load user preferences
+useredit_load_preferences($user);
 
-    //Load custom profile fields data
-    profile_load_data($user);
+//Load custom profile fields data
+profile_load_data($user);
 
-    //user interests separated by commas
-    if (!empty($CFG->usetags)) {
+//User interests
+if (!empty($CFG->usetags)) {
         require_once($CFG->dirroot.'/tag/lib.php');
-        $user->interests = tag_get_tags_csv('user', $id, TAG_RETURN_TEXT); // formslib uses htmlentities itself
-    }
-
-    //create form
-    $userform = new user_editadvanced_form();
-    $userform->set_data($user);
-
-    if ($usernew = $userform->get_data()) {
+    $user->interests = tag_get_tags_array('user', $id);
+}
+
+if ($user->id !== -1) {
+    $usercontext = get_context_instance(CONTEXT_USER, $user->id);
+    $editoroptions = array(
+        'maxfiles'   => EDITOR_UNLIMITED_FILES,
+        'maxbytes'   => $CFG->maxbytes,
+        'trusttext'  => false,
+        'forcehttps' => false,
+        'context'    => $usercontext
+    );
+
+    $user = file_prepare_standard_editor($user, 'description', $editoroptions, $usercontext, 'user', 'profile', 0);
+} else {
+    $usercontext = null;
+    // This is a new user, we don't want to add files here
+    $editoroptions = array(
+        'maxfiles'=>0,
+        'maxbytes'=>0,
+        'trusttext'=>false,
+        'forcehttps'=>false,
+        'context' => $coursecontext
+    );
+}
+
+//create form
+$userform = new user_editadvanced_form(null, array('editoroptions'=>$editoroptions));
+$userform->set_data($user);
+
+if ($usernew = $userform->get_data()) {
         add_to_log($course->id, 'user', 'update', "view.php?id=$user->id&course=$course->id", '');
 
         if (empty($usernew->auth)) {
@@ -87,53 +149,53 @@
             $authplugin = get_auth_plugin($usernew->auth);
         }
 
-        $usernew->username     = trim($usernew->username);
         $usernew->timemodified = time();
 
         if ($usernew->id == -1) {
             //TODO check out if it makes sense to create account with this auth plugin and what to do with the password
             unset($usernew->id);
+        $usernew = file_postupdate_standard_editor($usernew, 'description', $editoroptions, null, 'user', 'profile', null);
             $usernew->mnethostid = $CFG->mnet_localhost_id; // always local user
             $usernew->confirmed  = 1;
+        $usernew->timecreated = time();
             $usernew->password = hash_internal_user_password($usernew->newpassword);
-            if (!$usernew->id = insert_record('user', $usernew)) {
-                error('Error creating user record');
-            }
+        $usernew->id = $DB->insert_record('user', $usernew);
             $usercreated = true;
+
         } else {
-            if (!update_record('user', $usernew)) {
-                error('Error updating user record');
-            }
+        $usernew = file_postupdate_standard_editor($usernew, 'description', $editoroptions, $usercontext, 'user', 'profile', 0);
+        $DB->update_record('user', $usernew);
             // pass a true $userold here
-            if (! $authplugin->user_update($user, $userform->get_data(false))) {
+        if (! $authplugin->user_update($user, $userform->get_data())) {
                 // auth update failed, rollback for moodle
-                update_record('user', addslashes_object($user));
-                error('Failed to update user data on external auth: '.$user->auth.
-                        '. See the server logs for more details.');
+            $DB->update_record('user', $user);
+            print_error('cannotupdateuseronexauth', '', '', $user->auth);
             }
 
             //set new password if specified
             if (!empty($usernew->newpassword)) {
                 if ($authplugin->can_change_password()) {
                     if (!$authplugin->user_update_password($usernew, $usernew->newpassword)){
-                        error('Failed to update password on external auth: ' . $usernew->auth .
-                                '. See the server logs for more details.');
+                    print_error('cannotupdatepasswordonextauth', '', '', $usernew->auth);
                     }
+                unset_user_preference('create_password', $usernew); // prevent cron from generating the password
                 }
             }
             $usercreated = false;
         }
 
+    $usercontext = get_context_instance(CONTEXT_USER, $usernew->id);
+
         //update preferences
         useredit_update_user_preference($usernew);
 
         // update tags
-        if (!empty($CFG->usetags)) {
+    if (!empty($CFG->usetags) and empty($USER->newadminuser)) {
             useredit_update_interests($usernew, $usernew->interests);
         }
 
         //update user picture
-        if (!empty($CFG->gdversion)) {
+    if (!empty($CFG->gdversion) and empty($USER->newadminuser)) {
             useredit_update_picture($usernew, $userform);
         }
 
@@ -147,7 +209,7 @@
         profile_save_data($usernew);
 
         // reload from db
-        $usernew = get_record('user', 'id', $usernew->id);
+    $usernew = $DB->get_record('user', array('id'=>$usernew->id));
 
         // trigger events
         if ($usercreated) {
@@ -161,6 +223,9 @@
             foreach ((array)$usernew as $variable => $value) {
                 $USER->$variable = $value;
             }
+        // preload custom fields
+        profile_load_custom_fields($USER);
+
             if (!empty($USER->newadminuser)) {
                 unset($USER->newadminuser);
                 // apply defaults again - some of them might depend on admin user info, backup, roles, etc.
@@ -171,59 +236,54 @@
                 redirect("$CFG->wwwroot/user/view.php?id=$USER->id&course=$course->id");
             }
         } else {
+        session_gc(); // remove stale sessions
             redirect("$CFG->wwwroot/$CFG->admin/user.php");
         }
         //never reached
-    }
+}
+
+// make sure we really are on the https page when https login required
+$PAGE->verify_https_required();
 
 
 /// Display page header
-    if ($user->id == -1 or ($user->id != $USER->id)) {
+if ($user->id == -1 or ($user->id != $USER->id)) {
         if ($user->id == -1) {
-            admin_externalpage_setup('addnewuser', '', array('id' => -1));
-            admin_externalpage_print_header();
+        echo $OUTPUT->header();
         } else {
-            admin_externalpage_setup('editusers', '', array('id' => $user->id, 'course' => SITEID), $CFG->wwwroot . '/user/editadvanced.php');
-            admin_externalpage_print_header();
+        $PAGE->set_heading($SITE->fullname);
+        echo $OUTPUT->header();
             $userfullname = fullname($user, true);
-            print_heading($userfullname);
+        echo $OUTPUT->heading($userfullname);
         }
-    } else if (!empty($USER->newadminuser)) {
+} else if (!empty($USER->newadminuser)) {
+    $strinstallation = get_string('installation', 'install');
         $strprimaryadminsetup = get_string('primaryadminsetup');
-        print_header($strprimaryadminsetup, $strprimaryadminsetup);
-        print_simple_box(get_string('configintroadmin', 'admin'), 'center', '50%');
+
+    $PAGE->navbar->add($strprimaryadminsetup);
+    $PAGE->set_title($strinstallation);
+    $PAGE->set_heading($strinstallation);
+    $PAGE->set_cacheable(false);
+
+    echo $OUTPUT->header();
+    echo $OUTPUT->box(get_string('configintroadmin', 'admin'), 'generalbox boxwidthnormal boxaligncenter');
         echo '<br />';
-    } else {
+} else {
         $streditmyprofile = get_string('editmyprofile');
         $strparticipants  = get_string('participants');
         $strnewuser       = get_string('newuser');
         $userfullname     = fullname($user, true);
 
-        $navlinks = array();
-        if (has_capability('moodle/course:viewparticipants', $coursecontext) || has_capability('moodle/site:viewparticipants', $systemcontext)) {
-            $navlinks[] = array('name' => $strparticipants, 'link' => "index.php?id=$course->id", 'type' => 'misc');
-        }
-        $navlinks[] = array('name' => $userfullname,
-                            'link' => "view.php?id=$user->id&amp;course=$course->id",
-                            'type' => 'misc');
-        $navlinks[] = array('name' => $streditmyprofile, 'link' => null, 'type' => 'misc');
-        $navigation = build_navigation($navlinks);
-        print_header("$course->shortname: $streditmyprofile", $course->fullname, $navigation, "");
-
-        /// Print tabs at the top
-        $showroles = 1;
-        $currenttab = 'editprofile';
-        require('tabs.php');
-    }
+    $PAGE->set_title("$course->shortname: $streditmyprofile");
+    $PAGE->set_heading($course->fullname);
+
+    echo $OUTPUT->header();
+    echo $OUTPUT->heading($userfullname);
+}
 
 /// Finally display THE form
-    $userform->display();
+$userform->display();
 
 /// and proper footer
-    if (!empty($USER->newadminuser)) {
-        print_footer('none');
-    } else {
-        print_footer($course);
-    }
+echo $OUTPUT->footer();
 
-?>
