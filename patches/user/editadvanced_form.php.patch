diff --git a/user/editadvanced_form.php b/user/editadvanced_form.php
index cd2be22..10f6b45 100644
--- a/user/editadvanced_form.php
+++ b/user/editadvanced_form.php
@@ -1,4 +1,8 @@
-<?php //$Id$
+<?php
+
+if (!defined('MOODLE_INTERNAL')) {
+    die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
+}
 
 require_once($CFG->dirroot.'/lib/formslib.php');
 
@@ -9,7 +13,13 @@ class user_editadvanced_form extends moodleform {
         global $USER, $CFG, $COURSE;
 
         $mform =& $this->_form;
-        $this->set_upload_manager(new upload_manager('imagefile', false, false, null, false, 0, true, true, false));
+
+        if (is_array($this->_customdata) && array_key_exists('editoroptions', $this->_customdata)) {
+            $editoroptions = $this->_customdata['editoroptions'];
+        } else {
+            $editoroptions = null;
+        }
+
         //Accessibility: "Required" is bad legend text.
         $strgeneral  = get_string('general');
         $strrequired = get_string('required');
@@ -27,26 +37,25 @@ class user_editadvanced_form extends moodleform {
         $mform->addRule('username', $strrequired, 'required', null, 'client');
         $mform->setType('username', PARAM_RAW);
 
-        $modules = get_list_of_plugins('auth');
+        $auths = get_plugin_list('auth');
         $auth_options = array();
-        foreach ($modules as $module) {
-            $auth_options[$module] = auth_get_plugin_title ($module);
+        foreach ($auths as $auth => $unused) {
+            $auth_options[$auth] = get_string('pluginname', "auth_{$auth}");
         }
         $mform->addElement('select', 'auth', get_string('chooseauthmethod','auth'), $auth_options);
-        $mform->setHelpButton('auth', array('authchange', get_string('chooseauthmethod','auth')));
-        $mform->setAdvanced('auth');
+        $mform->addHelpButton('auth', 'chooseauthmethod', 'auth');
 
         if (!empty($CFG->passwordpolicy)){
             $mform->addElement('static', 'passwordpolicyinfo', '', print_password_policy());
         }
         $mform->addElement('passwordunmask', 'newpassword', get_string('newpassword'), 'size="20"');
-        $mform->setHelpButton('newpassword',array('newpassword', get_string('leavetokeep')));
+        $mform->addHelpButton('newpassword', 'newpassword');
         $mform->setType('newpassword', PARAM_RAW);
 
         $mform->addElement('advcheckbox', 'preference_auth_forcepasswordchange', get_string('forcepasswordchange'));
-        $mform->setHelpButton('preference_auth_forcepasswordchange',array('forcepasswordchange', get_string('forcepasswordchange')));
+        $mform->addHelpButton('preference_auth_forcepasswordchange', 'forcepasswordchange');
         /// shared fields
-        useredit_shared_definition($mform);
+        useredit_shared_definition($mform, $editoroptions);
 
         /// Next the customisable profile fields
         profile_definition($mform);
@@ -55,11 +64,11 @@ class user_editadvanced_form extends moodleform {
     }
 
     function definition_after_data() {
-        global $USER, $CFG;
+        global $USER, $CFG, $DB, $OUTPUT;
 
         $mform =& $this->_form;
         if ($userid = $mform->getElementValue('id')) {
-            $user = get_record('user', 'id', $userid);
+            $user = $DB->get_record('user', array('id'=>$userid));
         } else {
             $user = false;
         }
@@ -67,15 +76,8 @@ class user_editadvanced_form extends moodleform {
         // if language does not exist, use site default lang
         if ($langsel = $mform->getElementValue('lang')) {
             $lang = reset($langsel);
-            // missing _utf8 in language, add it before further processing. MDL-11829 MDL-16845
-            if (strpos($lang, '_utf8') === false) {
-                $lang = $lang . '_utf8';
-                $lang_el =& $mform->getElement('lang');
-                $lang_el->setValue($lang);
-            }
             // check lang exists
-            if (!file_exists($CFG->dataroot.'/lang/'.$lang) and
-              !file_exists($CFG->dirroot .'/lang/'.$lang)) {
+            if (!get_string_manager()->translation_exists($lang, false)) {
                 $lang_el =& $mform->getElement('lang');
                 $lang_el->setValue($CFG->lang);
             }
@@ -90,11 +92,6 @@ class user_editadvanced_form extends moodleform {
         // admin must choose some password and supply correct email
         if (!empty($USER->newadminuser)) {
             $mform->addRule('newpassword', get_string('required'), 'required', null, 'client');
-
-            $email_el =& $mform->getElement('email');
-            if ($email_el->getValue() == 'root@localhost') {
-                $email_el->setValue('');
-            }
         }
 
         // require password for new users
@@ -103,10 +100,10 @@ class user_editadvanced_form extends moodleform {
         }
 
         // print picture
-        if (!empty($CFG->gdversion)) {
+        if (!empty($CFG->gdversion) and empty($USER->newadminuser)) {
             $image_el =& $mform->getElement('currentpicture');
             if ($user and $user->picture) {
-                $image_el->setValue(print_user_picture($user, SITEID, $user->picture, 64, true, false, '', true));
+                $image_el->setValue($OUTPUT->user_picture($user, array('courseid'=>SITEID)));
             } else {
                 $image_el->setValue(get_string('none'));
             }
@@ -117,12 +114,12 @@ class user_editadvanced_form extends moodleform {
     }
 
     function validation($usernew, $files) {
-        global $CFG;
+        global $CFG, $DB;
 
         $usernew = (object)$usernew;
         $usernew->username = trim($usernew->username);
 
-        $user = get_record('user', 'id', $usernew->id);
+        $user = $DB->get_record('user', array('id'=>$usernew->id));
         $err = array();
 
         if (!empty($usernew->newpassword)) {
@@ -135,28 +132,25 @@ class user_editadvanced_form extends moodleform {
         if (empty($usernew->username)) {
             //might be only whitespace
             $err['username'] = get_string('required');
-        } else if (!$user or $user->username !== stripslashes($usernew->username)) {
+        } else if (!$user or $user->username !== $usernew->username) {
             //check new username does not exist
-            if (record_exists('user', 'username', $usernew->username, 'mnethostid', $CFG->mnet_localhost_id)) {
+            if ($DB->record_exists('user', array('username'=>$usernew->username, 'mnethostid'=>$CFG->mnet_localhost_id))) {
                 $err['username'] = get_string('usernameexists');
             }
             //check allowed characters
             if ($usernew->username !== moodle_strtolower($usernew->username)) {
                 $err['username'] = get_string('usernamelowercase');
             } else {
-                if (empty($CFG->extendedusernamechars)) {
-                    $string = eregi_replace("[^(-\.[:alnum:])]", '', $usernew->username);
-                    if ($usernew->username !== $string) {
-                        $err['username'] = get_string('alphanumerical');
-                    }
+                if ($usernew->username !== clean_param($usernew->username, PARAM_USERNAME)) {
+                    $err['username'] = get_string('invalidusername');
                 }
             }
         }
 
-        if (!$user or $user->email !== stripslashes($usernew->email)) {
-            if (!validate_email(stripslashes($usernew->email))) {
+        if (!$user or $user->email !== $usernew->email) {
+            if (!validate_email($usernew->email)) {
                 $err['email'] = get_string('invalidemail');
-            } else if (record_exists('user', 'email', $usernew->email, 'mnethostid', $CFG->mnet_localhost_id)) {
+            } else if ($DB->record_exists('user', array('email'=>$usernew->email, 'mnethostid'=>$CFG->mnet_localhost_id))) {
                 $err['email'] = get_string('emailexists');
             }
         }
@@ -170,10 +164,6 @@ class user_editadvanced_form extends moodleform {
             return $err;
         }
     }
-
-    function get_um() {
-        return $this->_upload_manager;
-    }
 }
 
-?>
+
