diff --git a/enrol/paypal/ipn.php b/enrol/paypal/ipn.php
index 44a3cef..8c5f014 100644
--- a/enrol/paypal/ipn.php
+++ b/enrol/paypal/ipn.php
@@ -1,88 +1,114 @@
-<?php  // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
 /**
-* Listens for Instant Payment Notification from PayPal
-*
-* This script waits for Payment notification from PayPal,
-* then double checks that data by sending it back to PayPal.
-* If PayPal verifies this then it sets up the enrolment for that
-*
-* Set the $user->timeaccess course array
-*
-* @param    user  referenced object, must contain $user->id already set
-*/
+ * Listens for Instant Payment Notification from PayPal
+ *
+ * This script waits for Payment notification from PayPal,
+ * then double checks that data by sending it back to PayPal.
+ * If PayPal verifies this then it sets up the enrolment for that
+ * user.
+ *
+ * @package    enrol
+ * @subpackage paypal
+ * @copyright 2010 Eugene Venter
+ * @author     Eugene Venter - based on code by others
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+require("../../config.php");
+require_once("lib.php");
+require_once($CFG->libdir.'/eventslib.php');
+require_once($CFG->libdir.'/enrollib.php');
 
 
-    require("../../config.php");
-    require("enrol.php");
-
 /// Keep out casual intruders
-    if (empty($_POST) or !empty($_GET)) {
-        error("Sorry, you can not use the script that way.");
-    }
+if (empty($_POST) or !empty($_GET)) {
+    print_error("Sorry, you can not use the script that way.");
+}
 
 /// Read all the data from PayPal and get it ready for later;
 /// we expect only valid UTF-8 encoding, it is the responsibility
-/// of user to set it up properly in PayPal business acount,
+/// of user to set it up properly in PayPal business account,
 /// it is documented in docs wiki.
 
-    $req = 'cmd=_notify-validate';
+$req = 'cmd=_notify-validate';
 
-    $data = new object();
+$data = new stdClass();
 
-    foreach ($_POST as $key => $value) {
-        $value = stripslashes($value);
+foreach ($_POST as $key => $value) {
         $req .= "&$key=".urlencode($value);
         $data->$key = $value;
-    }
+}
 
-    $custom = explode('-', $data->custom);
-    $data->userid           = (int)$custom[0];
-    $data->courseid         = (int)$custom[1];
-    $data->payment_gross    = $data->mc_gross;
-    $data->payment_currency = $data->mc_currency;
-    $data->timeupdated      = time();
+$custom = explode('-', $data->custom);
+$data->userid           = (int)$custom[0];
+$data->courseid         = (int)$custom[1];
+$data->instanceid       = (int)$custom[2];
+$data->payment_gross    = $data->mc_gross;
+$data->payment_currency = $data->mc_currency;
+$data->timeupdated      = time();
 
 
 /// get the user and course records
 
-    if (! $user = get_record("user", "id", $data->userid) ) {
-        email_paypal_error_to_admin("Not a valid user id", $data);
+if (! $user = $DB->get_record("user", array("id"=>$data->userid))) {
+    message_paypal_error_to_admin("Not a valid user id", $data);
         die;
-    }
+}
 
-    if (! $course = get_record("course", "id", $data->courseid) ) {
-        email_paypal_error_to_admin("Not a valid course id", $data);
+if (! $course = $DB->get_record("course", array("id"=>$data->courseid))) {
+    message_paypal_error_to_admin("Not a valid course id", $data);
         die;
-    }
+}
 
-    if (! $context = get_context_instance(CONTEXT_COURSE, $course->id)) {
-        email_paypal_error_to_admin("Not a valid context id", $data);
+if (! $context = get_context_instance(CONTEXT_COURSE, $course->id)) {
+    message_paypal_error_to_admin("Not a valid context id", $data);
         die;
-    }
+}
 
-/// Open a connection back to PayPal to validate the data
+if (! $plugin_instance = $DB->get_record("enrol", array("id"=>$data->instanceid, "status"=>0))) {
+    message_paypal_error_to_admin("Not a valid instance id", $data);
+    die;
+}
 
-    $header = '';
-    $header .= "POST /cgi-bin/webscr HTTP/1.0\r\n";
-    $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
-    $header .= "Content-Length: " . strlen($req) . "\r\n\r\n";
-    $paypaladdr = empty($CFG->usepaypalsandbox) ? 'www.paypal.com' : 'www.sandbox.paypal.com';
-    $fp = fsockopen ($paypaladdr, 80, $errno, $errstr, 30);
+$plugin = enrol_get_plugin('paypal');
 
-    if (!$fp) {  /// Could not open a socket to PayPal - FAIL
+/// Open a connection back to PayPal to validate the data
+$header = '';
+$header .= "POST /cgi-bin/webscr HTTP/1.0\r\n";
+$header .= "Content-Type: application/x-www-form-urlencoded\r\n";
+$header .= "Content-Length: " . strlen($req) . "\r\n\r\n";
+$paypaladdr = empty($CFG->usepaypalsandbox) ? 'www.paypal.com' : 'www.sandbox.paypal.com';
+$fp = fsockopen ($paypaladdr, 80, $errno, $errstr, 30);
+
+if (!$fp) {  /// Could not open a socket to PayPal - FAIL
         echo "<p>Error: could not access paypal.com</p>";
-        email_paypal_error_to_admin("Could not access paypal.com to verify payment", $data);
+    message_paypal_error_to_admin("Could not access paypal.com to verify payment", $data);
         die;
-    }
+}
 
 /// Connection is OK, so now we post the data to validate it
 
-    fputs ($fp, $header.$req);
+fputs ($fp, $header.$req);
 
 /// Now read the response and check if everything is OK.
 
-    while (!feof($fp)) {
+while (!feof($fp)) {
         $result = fgets($fp, 1024);
         if (strcmp($result, "VERIFIED") == 0) {          // VALID PAYMENT!
 
@@ -93,15 +119,15 @@
             // and notify admin
 
             if ($data->payment_status != "Completed" and $data->payment_status != "Pending") {
-                role_unassign(0, $data->userid, 0, $context->id);
-                email_paypal_error_to_admin("Status not completed or pending. User unenrolled from course", $data);
+            $plugin->unenrol_user($plugin_instance, $data->userid);
+            message_paypal_error_to_admin("Status not completed or pending. User unenrolled from course", $data);
                 die;
             }
 
             // If currency is incorrectly set then someone maybe trying to cheat the system 
 
-            if ($data->mc_currency != $course->currency) {
-                email_paypal_error_to_admin("Currency does not match course settings, received: ".addslashes($data->mc_currency), $data);
+        if ($data->mc_currency != $plugin_instance->currency) {
+            message_paypal_error_to_admin("Currency does not match course settings, received: ".$data->mc_currency, $data);
                 die;
             }
 
@@ -109,8 +135,20 @@
             // Email user to let them know. Email admin.
 
             if ($data->payment_status == "Pending" and $data->pending_reason != "echeck") {
-                email_to_user($user, get_admin(), "Moodle: PayPal payment", "Your PayPal payment is pending.");
-                email_paypal_error_to_admin("Payment pending", $data);
+            $eventdata = new stdClass();
+            $eventdata->modulename        = 'moodle';
+            $eventdata->component         = 'enrol_paypal';
+            $eventdata->name              = 'paypal_enrolment';
+            $eventdata->userfrom          = get_admin();
+            $eventdata->userto            = $user;
+            $eventdata->subject           = "Moodle: PayPal payment";
+            $eventdata->fullmessage       = "Your PayPal payment is pending.";
+            $eventdata->fullmessageformat = FORMAT_PLAIN;
+            $eventdata->fullmessagehtml   = '';
+            $eventdata->smallmessage      = '';
+            message_send($eventdata);
+
+            message_paypal_error_to_admin("Payment pending", $data);
                 die;
             }
 
@@ -126,96 +164,147 @@
 
 
 
-            if ($existing = get_record("enrol_paypal", "txn_id", addslashes($data->txn_id))) {   // Make sure this transaction doesn't exist already
-                email_paypal_error_to_admin("Transaction $data->txn_id is being repeated!", $data);
+        if ($existing = $DB->get_record("enrol_paypal", array("txn_id"=>$data->txn_id))) {   // Make sure this transaction doesn't exist already
+            message_paypal_error_to_admin("Transaction $data->txn_id is being repeated!", $data);
                 die;
 
             }
 
-            if ($data->business != $CFG->enrol_paypalbusiness) {   // Check that the email is the one we want it to be
-                email_paypal_error_to_admin("Business email is $data->business (not $CFG->enrol_paypalbusiness)", $data);
+        if ($data->business != $plugin->get_config('paypalbusiness')) {   // Check that the email is the one we want it to be
+            message_paypal_error_to_admin("Business email is {$data->business} (not ".
+                    $plugin->get_config('paypalbusiness').")", $data);
                 die;
 
             }
 
-            if (!$user = get_record('user', 'id', $data->userid)) {   // Check that user exists
-                email_paypal_error_to_admin("User $data->userid doesn't exist", $data);
+        if (!$user = $DB->get_record('user', array('id'=>$data->userid))) {   // Check that user exists
+            message_paypal_error_to_admin("User $data->userid doesn't exist", $data);
                 die;
             }
 
-            if (!$course = get_record('course', 'id', $data->courseid)) { // Check that course exists
-                email_paypal_error_to_admin("Course $data->courseid doesn't exist", $data);;
+        if (!$course = $DB->get_record('course', array('id'=>$data->courseid))) { // Check that course exists
+            message_paypal_error_to_admin("Course $data->courseid doesn't exist", $data);;
                 die;
             }
 
+        $coursecontext = get_context_instance(CONTEXT_COURSE, $course->id);
+
             // Check that amount paid is the correct amount
-            if ( (float) $course->cost < 0 ) {
-                $cost = (float) $CFG->enrol_cost;
+        if ( (float) $plugin_instance->cost <= 0 ) {
+            $cost = (float) $plugin->get_config('cost');
             } else {
-                $cost = (float) $course->cost;
+            $cost = (float) $plugin_instance->cost;
             }
 
             if ($data->payment_gross < $cost) {
                 $cost = format_float($cost, 2);
-                email_paypal_error_to_admin("Amount paid is not enough ($data->payment_gross < $cost))", $data);
+            message_paypal_error_to_admin("Amount paid is not enough ($data->payment_gross < $cost))", $data);
                 die;
 
             }
 
             // ALL CLEAR !
 
-            if (!insert_record("enrol_paypal", addslashes_object($data))) {       // Insert a transaction record
-                email_paypal_error_to_admin("Error while trying to insert valid transaction", $data);
+        $DB->insert_record("enrol_paypal", $data);
+
+        if ($plugin_instance->enrolperiod) {
+            $timestart = time();
+            $timeend   = $timestart + $plugin_instance->enrolperiod;
+        } else {
+            $timestart = 0;
+            $timeend   = 0;
             }
 
-            if (!enrol_into_course($course, $user, 'paypal')) {
-                email_paypal_error_to_admin("Error while trying to enrol ".fullname($user)." in '$course->fullname'", $data);
-                die;
+        // Enrol user
+        $plugin->enrol_user($plugin_instance, $user->id, $plugin_instance->roleid, $timestart, $timeend);
+
+        // Pass $view=true to filter hidden caps if the user cannot see them
+        if ($users = get_users_by_capability($context, 'moodle/course:update', 'u.*', 'u.id ASC',
+                                             '', '', '', '', false, true)) {
+            $users = sort_by_roleassignment_authority($users, $context);
+            $teacher = array_shift($users);
             } else {
-                $teacher = get_teacher($course->id);
+            $teacher = false;
+        }
 
-                if (!empty($CFG->enrol_mailstudents)) {
-                    $a->coursename = $course->fullname;
+        $mailstudents = $plugin->get_config('mailstudents');
+        $mailteachers = $plugin->get_config('mailteachers');
+        $mailadmins   = $plugin->get_config('mailadmins');
+        $shortname = format_string($course->shortname, true, array('context' => $context));
+
+
+        if (!empty($mailstudents)) {
+            $a->coursename = format_string($course->fullname, true, array('context' => $coursecontext));
                     $a->profileurl = "$CFG->wwwroot/user/view.php?id=$user->id";
-                    email_to_user($user, $teacher, get_string("enrolmentnew", '', $course->shortname),
-                                  get_string('welcometocoursetext', '', $a));
+
+            $eventdata = new stdClass();
+            $eventdata->modulename        = 'moodle';
+            $eventdata->component         = 'enrol_paypal';
+            $eventdata->name              = 'paypal_enrolment';
+            $eventdata->userfrom          = $teacher;
+            $eventdata->userto            = $user;
+            $eventdata->subject           = get_string("enrolmentnew", '', $shortname);
+            $eventdata->fullmessage       = get_string('welcometocoursetext', '', $a);
+            $eventdata->fullmessageformat = FORMAT_PLAIN;
+            $eventdata->fullmessagehtml   = '';
+            $eventdata->smallmessage      = '';
+            message_send($eventdata);
+
                 }
 
-                if (!empty($CFG->enrol_mailteachers)) {
-                    $a->course = $course->fullname;
+        if (!empty($mailteachers)) {
+            $a->course = format_string($course->fullname, true, array('context' => $coursecontext));
                     $a->user = fullname($user);
-                    email_to_user($teacher, $user, get_string("enrolmentnew", '', $course->shortname),
-                                  get_string('enrolmentnewuser', '', $a));
+
+            $eventdata = new stdClass();
+            $eventdata->modulename        = 'moodle';
+            $eventdata->component         = 'enrol_paypal';
+            $eventdata->name              = 'paypal_enrolment';
+            $eventdata->userfrom          = $user;
+            $eventdata->userto            = $teacher;
+            $eventdata->subject           = get_string("enrolmentnew", '', $shortname);
+            $eventdata->fullmessage       = get_string('enrolmentnewuser', '', $a);
+            $eventdata->fullmessageformat = FORMAT_PLAIN;
+            $eventdata->fullmessagehtml   = '';
+            $eventdata->smallmessage      = '';
+            message_send($eventdata);
                 }
 
-                if (!empty($CFG->enrol_mailadmins)) {
-                    $a->course = $course->fullname;
+        if (!empty($mailadmins)) {
+            $a->course = format_string($course->fullname, true, array('context' => $coursecontext));
                     $a->user = fullname($user);
                     $admins = get_admins();
                     foreach ($admins as $admin) {
-                        email_to_user($admin, $user, get_string("enrolmentnew", '', $course->shortname),
-                                      get_string('enrolmentnewuser', '', $a));
-                    }
+                $eventdata = new stdClass();
+                $eventdata->modulename        = 'moodle';
+                $eventdata->component         = 'enrol_paypal';
+                $eventdata->name              = 'paypal_enrolment';
+                $eventdata->userfrom          = $user;
+                $eventdata->userto            = $admin;
+                $eventdata->subject           = get_string("enrolmentnew", '', $shortname);
+                $eventdata->fullmessage       = get_string('enrolmentnewuser', '', $a);
+                $eventdata->fullmessageformat = FORMAT_PLAIN;
+                $eventdata->fullmessagehtml   = '';
+                $eventdata->smallmessage      = '';
+                message_send($eventdata);
                 }
-
             }
 
-
         } else if (strcmp ($result, "INVALID") == 0) { // ERROR
-            insert_record("enrol_paypal", addslashes_object($data), false);
-            email_paypal_error_to_admin("Received an invalid payment notification!! (Fake payment?)", $data);
-        }
+        $DB->insert_record("enrol_paypal", $data, false);
+        message_paypal_error_to_admin("Received an invalid payment notification!! (Fake payment?)", $data);
     }
+}
 
-    fclose($fp);
-    exit;
-
+fclose($fp);
+exit;
 
 
-/// FUNCTIONS //////////////////////////////////////////////////////////////////
+//--- HELPER FUNCTIONS --------------------------------------------------------------------------------------
 
 
-function email_paypal_error_to_admin($subject, $data) {
+function message_paypal_error_to_admin($subject, $data) {
+    echo $subject;
     $admin = get_admin();
     $site = get_site();
 
@@ -225,8 +314,18 @@ function email_paypal_error_to_admin($subject, $data) {
         $message .= "$key => $value\n";
     }
 
-    email_to_user($admin, $admin, "PAYPAL ERROR: ".$subject, $message);
-
+    $eventdata = new stdClass();
+    $eventdata->modulename        = 'moodle';
+    $eventdata->component         = 'enrol_paypal';
+    $eventdata->name              = 'paypal_enrolment';
+    $eventdata->userfrom          = $admin;
+    $eventdata->userto            = $admin;
+    $eventdata->subject           = "PAYPAL ERROR: ".$subject;
+    $eventdata->fullmessage       = $message;
+    $eventdata->fullmessageformat = FORMAT_PLAIN;
+    $eventdata->fullmessagehtml   = '';
+    $eventdata->smallmessage      = '';
+    message_send($eventdata);
 }
 
-?>
+
