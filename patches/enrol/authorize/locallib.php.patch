diff --git a/enrol/authorize/locallib.php b/enrol/authorize/locallib.php
index 2fd7158..058b1b0 100644
--- a/enrol/authorize/locallib.php
+++ b/enrol/authorize/locallib.php
@@ -1,4 +1,30 @@
-<?php // $Id$
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Authorize enrolment plugin.
+ *
+ * This plugin allows you to set up paid courses, using authorize.net.
+ *
+ * @package    enrol
+ * @subpackage authorize
+ * @copyright  2010 Eugene Venter
+ * @author     Eugene Venter
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
 
 if (!defined('MOODLE_INTERNAL')) {
     die('Direct access to this script is forbidden.');
@@ -13,26 +39,52 @@ define('ORDER_VOID',    'void');
  * authorize_print_orders
  *
  */
-function authorize_print_orders($courseid, $userid)
-{
-    global $CFG, $USER, $SITE;
+function authorize_print_orders($courseid, $userid) {
+    global $course;
+    global $CFG, $USER, $SITE, $DB, $OUTPUT, $PAGE;
     global $strs, $authstrs;
+
+    $plugin = enrol_get_plugin('authorize');
+
     require_once($CFG->libdir.'/tablelib.php');
 
-    $perpage = 10;
-    $status = optional_param('status', AN_STATUS_NONE, PARAM_INT);
-    $searchtype = optional_param('searchtype', 'id', PARAM_ALPHA);
-    $idortransid = optional_param('idortransid', '0', PARAM_INT);
+    $perpage = optional_param('perpage', 10, PARAM_INT);
     $showonlymy = optional_param('showonlymy', 0, PARAM_BOOL);
+    $searchquery = optional_param('searchquery', '0', PARAM_INT);
+    $searchtype = optional_param('searchtype', 'orderid', PARAM_ALPHA);
+    $status = optional_param('status', AN_STATUS_NONE, PARAM_INT);
 
-    $canmanagepayments = has_capability('enrol/authorize:managepayments', get_context_instance(CONTEXT_COURSE, $courseid));
+    $coursecontext = get_context_instance(CONTEXT_COURSE, $courseid);
 
+    $searchmenu = array('orderid' => $authstrs->orderid, 'transid' => $authstrs->transid, 'cclastfour' => $authstrs->cclastfour);
+    $buttons = "<form method='post' action='index.php' autocomplete='off'><div>";
+    $buttons .= html_writer::select($searchmenu, 'searchtype', $searchtype, false);
+    $buttons .= "<input type='text' size='16' name='searchquery' value='' />";
+    $buttons .= "<input type='submit' value='$strs->search' />";
+    $buttons .= "</div></form>";
+
+    if (has_capability('enrol/authorize:uploadcsv', get_context_instance(CONTEXT_USER, $USER->id))) {
+        $buttons .= "<form method='get' action='uploadcsv.php'><div><input type='submit' value='".get_string('uploadcsv', 'enrol_authorize')."' /></div></form>";
+    }
+
+    $canmanagepayments = has_capability('enrol/authorize:managepayments', $coursecontext);
     if ($showonlymy || !$canmanagepayments) {
         $userid = $USER->id;
     }
 
-    $baseurl = $CFG->wwwroot."/enrol/authorize/index.php?user=$userid";
-    $statusmenu = array(AN_STATUS_NONE => $strs->all,
+    $baseurl = $CFG->wwwroot.'/enrol/authorize/index.php?user='.$userid;
+
+    $params = array('userid'=>$userid);
+    $sql = "SELECT c.id, c.fullname FROM {course} c JOIN {enrol_authorize} e ON c.id = e.courseid ";
+    $sql .= ($userid > 0) ? "WHERE (e.userid=:userid) " : '';
+    $sql .= "ORDER BY c.sortorder, c.fullname";
+    if (($popupcrs = $DB->get_records_sql_menu($sql, $params))) {
+        $popupcrs = array($SITE->id => $SITE->fullname) + $popupcrs;
+    }
+    $popupmenu = empty($popupcrs) ? '' : $OUTPUT->single_select(new moodle_url($baseurl.'&status='.$status), 'course', $popupcrs, $courseid, null, 'coursesmenu');
+    $popupmenu .= '<br />';
+    $statusmenu = array(
+        AN_STATUS_NONE => $strs->all,
                         AN_STATUS_AUTH | AN_STATUS_UNDERREVIEW | AN_STATUS_APPROVEDREVIEW => $authstrs->allpendingorders,
                         AN_STATUS_AUTH => $authstrs->authorizedpendingcapture,
                         AN_STATUS_AUTHCAPTURE => $authstrs->authcaptured,
@@ -45,46 +97,24 @@ function authorize_print_orders($courseid, $userid)
                         AN_STATUS_TEST => $authstrs->tested
     );
 
-    $sql = "SELECT c.id, c.fullname FROM {$CFG->prefix}course c INNER JOIN {$CFG->prefix}enrol_authorize e ON c.id = e.courseid ";
-    if ($userid > 0) {
-        $sql .= "WHERE (e.userid='$userid') ";
-    }
-    $sql .= "ORDER BY c.sortorder, c.fullname";
-    if (($popupcrs = get_records_sql_menu($sql))) {
-        $popupcrs = array($SITE->id => $SITE->fullname) + $popupcrs;
-        echo "<table border='0' width='100%' cellspacing='0' cellpadding='3' class='generaltable generalbox'>";
-        echo "<tr>";
-        echo "<td width='5%' valign='top'>$strs->status: </td><td width='10%'>";
-        popup_form($baseurl.'&amp;course='.$courseid.'&amp;status=',$statusmenu,'statusmenu',$status,'','','',false);
+    $popupmenu .= $OUTPUT->single_select(new moodle_url($baseurl.'&course='.$courseid), 'status', $statusmenu, $status, null, 'statusmenu');
         if ($canmanagepayments) {
-            echo "<br />\n";
-            print_checkbox('showonlymy', '1', $userid == $USER->id, get_string('mypaymentsonly', 'enrol_authorize'), '',
-            "var locationtogo = '{$CFG->wwwroot}/enrol/authorize/index.php?status=$status&amp;course=$courseid';
-                                  locationtogo += '&amp;user=' + (this.checked ? '$USER->id' : '0');
-                                  top.location.href=locationtogo;");
-        }
-        echo "</td>\n";
-        echo "<td width='5%' valign='top'>$strs->course: </td><td width='10%' valign='top'>";
-        popup_form($baseurl.'&amp;status='.$status.'&amp;course=',$popupcrs,'coursesmenu',$courseid,'','','',false);echo"</td>\n";
-        if (has_capability('enrol/authorize:uploadcsv', get_context_instance(CONTEXT_USER, $USER->id))) {
-            echo "<form method='get' action='uploadcsv.php'>";
-            echo "<td rowspan='2' align='right' valign='middle' width='50%'><div><input type='submit' value='".get_string('uploadcsv', 'enrol_authorize')."' /></div></td>";
-            echo "</form>";
+        $popupmenu .= '<br />';
+        $PAGE->requires->js('/enrol/authorize/authorize.js');
+        $aid = $OUTPUT->add_action_handler(new component_action('click', 'authorize_jump_to_mypayments', array('userid' => $USER->id, 'status' => $status)));
+        $popupmenu .= html_writer::checkbox('enrol_authorize', 1, $userid == $USER->id, get_string('mypaymentsonly', 'enrol_authorize'), array('id'=>$aid));
         }
-        else {
-            echo "<td rowspan=2 width='100%'>&nbsp;</td>";
-        }
-        echo "</tr>\n";
 
-        echo "<tr><td>$strs->search: </td>"; $searchmenu = array('id' => $authstrs->orderid, 'transid' => $authstrs->transid);
-        echo "<form method='POST' action='index.php' autocomplete='off'>";
-        echo "<td colspan='3'>"; choose_from_menu($searchmenu, 'searchtype', $searchtype, '');
-        echo " = <fieldset class=\"invisiblefieldset\"><input type='text' size='14' name='idortransid' value='' /> ";
-        echo "<input type='submit' value='$strs->search' /></fieldset></td>";
-        echo "</form>";
-        echo "</tr>";
-        echo "</table>";
+    if (SITEID != $courseid) {
+        $shortname = format_string($course->shortname, true, array('context' => $coursecontext));
+        $PAGE->navbar->add($shortname, new moodle_url('/course/view.php', array('id'=>$course->id)));
     }
+    $PAGE->navbar->add($authstrs->paymentmanagement, 'index.php');
+    $PAGE->set_title("$course->shortname: $authstrs->paymentmanagement");
+    $PAGE->set_heading($authstrs->paymentmanagement);
+    $PAGE->set_headingmenu($popupmenu);
+    $PAGE->set_button($buttons);
+    echo $OUTPUT->header();
 
     $table = new flexible_table('enrol-authorize');
     $table->set_attribute('width', '100%');
@@ -93,74 +123,100 @@ function authorize_print_orders($courseid, $userid)
     $table->set_attribute('id', 'orders');
     $table->set_attribute('class', 'generaltable generalbox');
 
-    $table->define_columns(array('id', 'timecreated', 'userid', 'status', ''));
-    $table->define_headers(array($authstrs->orderid, $strs->time, $authstrs->nameoncard, $strs->status, $strs->action));
-    $table->define_baseurl($baseurl."&amp;status=$status&amp;course=$courseid");
+    if ($perpage > 100) { $perpage = 100; }
+    $perpagemenus = array(5 => 5, 10 => 10, 20 => 20, 50 => 50, 100 => 100);
+    $perpagemenu = $OUTPUT->single_select(new moodle_url($baseurl.'&status='.$status.'&course='.$courseid), 'perpage', $perpagemenus, $perpage, array(''=>'choosedots'), 'perpagemenu');
+    $table->define_columns(array('id', 'userid', 'timecreated', 'status', 'action'));
+    $table->define_headers(array($authstrs->orderid, $authstrs->shopper, $strs->time, $strs->status, $perpagemenu));
+    $table->define_baseurl($baseurl."&amp;status=$status&amp;course=$courseid&amp;perpage=$perpage");
 
+    $table->no_sorting('action');
     $table->sortable(true, 'id', SORT_DESC);
     $table->pageable(true);
     $table->setup();
 
-    $select = "SELECT e.id, e.paymentmethod, e.transid, e.courseid, e.userid, e.status, e.ccname, e.timecreated, e.settletime ";
-    $from   = "FROM {$CFG->prefix}enrol_authorize e ";
+    $select = "SELECT e.id, e.paymentmethod, e.refundinfo, e.transid, e.courseid, e.userid, e.status, e.ccname, e.timecreated, e.settletime ";
+    $from   = "FROM {enrol_authorize} e ";
     $where  = "WHERE (1=1) ";
+    $params = array();
 
-    if ($status > AN_STATUS_NONE) {
-        switch ($status)
-        {
-            case AN_STATUS_AUTH | AN_STATUS_UNDERREVIEW | AN_STATUS_APPROVEDREVIEW:
-                $where .= 'AND (e.status IN('.AN_STATUS_AUTH.','.AN_STATUS_UNDERREVIEW.','.AN_STATUS_APPROVEDREVIEW.')) ';
-                break;
-
-            case AN_STATUS_CREDIT:
-                $from .= "INNER JOIN {$CFG->prefix}enrol_authorize_refunds r ON e.id = r.orderid ";
-                $where .= "AND (e.status = '" . AN_STATUS_AUTHCAPTURE . "') ";
+    if (!empty($searchquery)) {
+        switch($searchtype) {
+            case 'orderid':
+                $where = "WHERE (e.id = :searchquery) ";
+                $params['searchquery'] = $searchquery;
                 break;
 
-            case AN_STATUS_TEST:
-                $newordertime = time() - 120; // -2 minutes. Order may be still in process.
-                $where .= "AND (e.status = '" . AN_STATUS_NONE . "') AND (e.transid = '0') AND (e.timecreated < $newordertime) ";
+            case 'transid':
+                $where = "WHERE (e.transid = :searchquery) ";
+                $params['searchquery'] = $searchquery;
                 break;
 
-            default:
-                $where .= "AND (e.status = '$status') ";
+            case 'cclastfour':
+                $searchquery = sprintf("%04d", $searchquery);
+                $where = "WHERE (e.refundinfo = :searchquery) AND (e.paymentmethod=:method) ";
+                $params['searchquery'] = $searchquery;
+                $params['method'] = AN_METHOD_CC;
                 break;
         }
     }
     else {
-        if (empty($CFG->an_test)) {
-            $where .= "AND (e.status != '" . AN_STATUS_NONE . "') ";
-        }
+        switch ($status)
+        {
+            case AN_STATUS_NONE:
+                if (!$plugin->get_config('an_test')) {
+                    $where .= "AND (e.status != :status) ";
+                    $params['status'] = AN_STATUS_NONE;
     }
+                break;
 
-    if ($courseid != SITEID) {
-        $where .= "AND (e.courseid = '" . $courseid . "') ";
-    }
+            case AN_STATUS_TEST:
+                $newordertime = time() - 120; // -2 minutes. Order may be still in process.
+                $where .= "AND (e.status = :status) AND (e.transid = '0') AND (e.timecreated < :newordertime) ";
+                $params['status'] = AN_STATUS_NONE;
+                $params['newordertime'] = $newordertime;
+                break;
+
+            case AN_STATUS_AUTH | AN_STATUS_UNDERREVIEW | AN_STATUS_APPROVEDREVIEW:
+                $where .= 'AND (e.status IN(:status1,:status2,:status3)) ';
+                $params['status1'] = AN_STATUS_AUTH;
+                $params['status2'] = AN_STATUS_UNDERREVIEW;
+                $params['status3'] = AN_STATUS_APPROVEDREVIEW;
+                break;
+
+            case AN_STATUS_CREDIT:
+                $from .= "INNER JOIN {enrol_authorize_refunds} r ON e.id = r.orderid ";
+                $where .= "AND (e.status = :status) ";
+                $params['status'] = AN_STATUS_AUTHCAPTURE;
+                break;
 
-    if (!empty($idortransid)) {
-        // Ignore old where.
-        if ($searchtype == 'transid') {
-            $where = "WHERE (e.transid = $idortransid) ";
+            default:
+                $where .= "AND (e.status = :status) ";
+                $params['status'] = $status;
+                break;
         }
-        else {
-            $where = "WHERE (e.id = $idortransid) ";
+
+        if (SITEID != $courseid) {
+            $where .= "AND (e.courseid = :courseid) ";
+            $params['courseid'] = $courseid;
         }
     }
 
-    // This must be always last where!!!
+    // This must be always LAST where!!!
     if ($userid > 0) {
-        $where .= "AND (e.userid = '" . $userid . "') ";
+        $where .= "AND (e.userid = :userid) ";
+        $params['userid'] = $userid;
     }
 
     if (($sort = $table->get_sql_sort())) {
         $sort = ' ORDER BY ' . $sort;
     }
 
-    $totalcount = count_records_sql('SELECT COUNT(*) ' . $from . $where);
+    $totalcount = $DB->count_records_sql('SELECT COUNT(*) ' . $from . $where, $params);
     $table->initialbars($totalcount > $perpage);
     $table->pagesize($perpage, $totalcount);
 
-    if (($records = get_records_sql($select . $from . $where . $sort, $table->get_page_start(), $table->get_page_size()))) {
+    if (($records = $DB->get_records_sql($select . $from . $where . $sort, $params, $table->get_page_start(), $table->get_page_size()))) {
         foreach ($records as $record) {
             $actionstatus = authorize_get_status_action($record);
             $color = authorize_get_status_color($actionstatus->status);
@@ -170,15 +226,15 @@ function authorize_print_orders($courseid, $userid)
                 $actions .= $strs->none;
             }
             else {
-                foreach ($actionstatus->actions as $value) {
-                    $actions .= "&nbsp;&nbsp;<a href='index.php?$value=y&amp;sesskey=$USER->sesskey&amp;order=$record->id'>{$authstrs->$value}</a> ";
+                foreach ($actionstatus->actions as $val) {
+                    $actions .= authorize_print_action_button($record->id, $val);
                 }
             }
 
             $table->add_data(array(
                 "<a href='index.php?order=$record->id'>$record->id</a>",
-                userdate($record->timecreated),
                 $record->ccname,
+                userdate($record->timecreated),
                 "<font style='color:$color'>" . $authstrs->{$actionstatus->status} . "</font>",
                 $actions
             ));
@@ -186,332 +242,291 @@ function authorize_print_orders($courseid, $userid)
     }
 
     $table->print_html();
+    echo $OUTPUT->footer();
 }
 
 /**
- * authorize_print_order_details
+ * authorize_print_order
  *
- * @param int $orderno
+ * @param object $order
  */
-function authorize_print_order_details($orderno)
+function authorize_print_order($orderid)
 {
-    global $CFG, $USER;
+    global $CFG, $USER, $DB, $OUTPUT, $PAGE;
     global $strs, $authstrs;
 
-    $cmdcapture = optional_param(ORDER_CAPTURE, '', PARAM_ALPHA);
-    $cmddelete = optional_param(ORDER_DELETE, '', PARAM_ALPHA);
-    $cmdrefund = optional_param(ORDER_REFUND, '', PARAM_ALPHA);
-    $cmdvoid = optional_param(ORDER_VOID, '', PARAM_ALPHA);
+    $plugin = enrol_get_plugin('authorize');
+    $an_test = $plugin->get_config('an_test');
 
+    $do = optional_param('do', '', PARAM_ALPHA);
     $unenrol = optional_param('unenrol', 0, PARAM_BOOL);
     $confirm = optional_param('confirm', 0, PARAM_BOOL);
 
-    $table = new stdClass;
-    $table->width = '100%';
-    $table->size = array('30%', '70%');
-    $table->align = array('right', 'left');
+    if (!$order = $DB->get_record('enrol_authorize', array('id'=>$orderid))) {
+        print_error('orderidnotfound', '',
+                "$CFG->wwwroot/enrol/authorize/index.php", $orderid);
+    }
 
-    $order = get_record('enrol_authorize', 'id', $orderno);
-    if (!$order) {
-        notice("Order $orderno not found.", "index.php");
-        return;
+    if (!$course = $DB->get_record('course', array('id'=>$order->courseid))) {
+        print_error('invalidcourseid', '', "$CFG->wwwroot/enrol/authorize/index.php");
     }
 
-    $course = get_record('course', 'id', $order->courseid);
-    $coursecontext = get_context_instance(CONTEXT_COURSE, $course->id);
+    if (!$user = $DB->get_record('user', array('id'=>$order->userid))) {
+        print_error('nousers', '', "$CFG->wwwroot/enrol/authorize/index.php");
+    }
 
+    $coursecontext = get_context_instance(CONTEXT_COURSE, $course->id);
     if ($USER->id != $order->userid) { // Current user viewing someone else's order
         require_capability('enrol/authorize:managepayments', $coursecontext);
     }
 
-    echo "<form action=\"index.php\" method=\"post\">\n";
-    echo "<div>";
-    echo "<input type=\"hidden\" name=\"order\" value=\"$orderno\" />\n";
-    echo "<input type=\"hidden\" name=\"sesskey\" value=\"" . sesskey() . "\" />";
-
-    $settled = authorize_settled($order);
-    $status = authorize_get_status_action($order);
+    $settled = AuthorizeNet::settled($order);
+    $statusandactions = authorize_get_status_action($order);
+    $color = authorize_get_status_color($statusandactions->status);
 
-    $table->data[] = array("<b>$authstrs->paymentmethod:</b>",
-                          ($order->paymentmethod == AN_METHOD_CC ? $authstrs->methodcc : $authstrs->methodecheck));
-    $table->data[] = array("<b>$authstrs->orderid:</b>", $orderno);
-    $table->data[] = array("<b>$authstrs->transid:</b>", $order->transid);
-    $table->data[] = array("<b>$authstrs->amount:</b>", "$order->currency $order->amount");
-    if (empty($cmdcapture) and empty($cmdrefund) and empty($cmdvoid) and empty($cmddelete)) {
-        $color = authorize_get_status_color($status->status);
-        $table->data[] = array("<b>$strs->course:</b>", format_string($course->shortname));
-        $table->data[] = array("<b>$strs->status:</b>", "<font style='color:$color'>" . $authstrs->{$status->status} . "</font>");
-        if ($order->paymentmethod == AN_METHOD_CC) {
-            $table->data[] = array("<b>$authstrs->nameoncard:</b>", $order->ccname);
+    $buttons = '';
+    if (empty($do))
+    {
+        if (empty($statusandactions->actions)) {
+            if ((AN_METHOD_ECHECK == $order->paymentmethod) && has_capability('enrol/authorize:uploadcsv', get_context_instance(CONTEXT_USER, $USER->id))) {
+                $buttons .= "<form method='get' action='uploadcsv.php'><div><input type='submit' value='".get_string('uploadcsv', 'enrol_authorize')."' /></div></form>";
+            }
         }
         else {
-            $table->data[] = array("<b>$authstrs->echeckfirslasttname:</b>", $order->ccname);
+            foreach ($statusandactions->actions as $val) {
+                $buttons .= authorize_print_action_button($orderid, $val);
+            }
         }
-        $table->data[] = array("<b>$strs->time:</b>", userdate($order->timecreated));
-        $table->data[] = array("<b>$authstrs->settlementdate:</b>", $settled ?
-                               userdate($order->settletime) : $authstrs->notsettled);
     }
-    $table->data[] = array("&nbsp;", "<hr size='1' />\n");
 
-    if (!empty($cmdcapture) and confirm_sesskey()) { // CAPTURE
-        if (!in_array(ORDER_CAPTURE, $status->actions)) {
-            $a = new stdClass;
-            $a->action = $authstrs->capture;
-            print_error('youcantdo', 'enrol_authorize', '', $a);
+    if (SITEID != $course->id) {
+        $shortname = format_string($course->shortname, true, array('context' => $coursecontext));
+        $PAGE->navbar->add($shortname, new moodle_url('/course/view.php', array('id'=>$course->id)));
         }
+    $PAGE->navbar->add($authstrs->paymentmanagement, 'index.php?course='.$course->id);
+    $PAGE->navbar->add($authstrs->orderid . ': ' . $orderid, 'index.php');
+    $PAGE->set_course($course);
+    $PAGE->set_title("$course->shortname: $authstrs->paymentmanagement");
+    $PAGE->set_heading($authstrs->orderdetails);
+    $PAGE->set_cacheable(false);
+    $PAGE->set_button($buttons);
+    echo $OUTPUT->header();
 
-        if (empty($confirm)) {
-            $strcaptureyes = get_string('captureyes', 'enrol_authorize');
-            $table->data[] = array("<b>$strs->confirm:</b>",
-            "$strcaptureyes <br />
-            <input type='hidden' name='confirm' value='1' /><input type='submit' name='". ORDER_CAPTURE ."' value='$authstrs->capture' />
-            &nbsp;&nbsp;&nbsp;<a href='index.php?order=$orderno'>$strs->no</a>");
+    $table = new html_table();
+    $table->width = '100%';
+    $table->size = array('30%', '70%');
+    $table->align = array('right', 'left');
+
+    if (AN_METHOD_CC == $order->paymentmethod) {
+        $table->data[] = array("<b>$authstrs->paymentmethod:</b>", $authstrs->methodcc);
+        $table->data[] = array("<b>$authstrs->nameoncard:</b>", $order->ccname . ' (<b><a href="'.$CFG->wwwroot.'/user/view.php?id='.$user->id.'">'.fullname($user).'</a></b>)');
+        $table->data[] = array("<b>$authstrs->cclastfour:</b>", $order->refundinfo);
         }
         else {
+        $table->data[] = array("<b>$authstrs->paymentmethod:</b>", $authstrs->methodecheck);
+        $table->data[] = array("<b>$authstrs->echeckfirslasttname:</b>", $order->ccname . ' (<b><a href="'.$CFG->wwwroot.'/user/view.php?id='.$user->id.'">'.fullname($user).'</a></b>)');
+        $table->data[] = array("<b>$authstrs->isbusinesschecking:</b>", ($order->refundinfo == 1) ? $strs->yes : $strs->no);
+    }
+
+    $table->data[] = array("<b>$authstrs->amount:</b>", "$order->currency $order->amount");
+    $table->data[] = array("<b>$authstrs->transid:</b>", $order->transid);
+    $table->data[] = array("<b>$strs->time:</b>", userdate($order->timecreated));
+    $table->data[] = array("<b>$authstrs->settlementdate:</b>", $settled ? userdate($order->settletime) : $authstrs->notsettled);
+    $table->data[] = array("<b>$strs->status:</b>", "<b><font style='color:$color'>" . $authstrs->{$statusandactions->status} . "</font></b>");
+
+    if (ORDER_CAPTURE == $do && in_array(ORDER_CAPTURE, $statusandactions->actions)) {
+        if ($confirm && confirm_sesskey()) {
             $message = '';
             $extra = NULL;
-            if (AN_APPROVED != authorize_action($order, $message, $extra, AN_ACTION_PRIOR_AUTH_CAPTURE)) {
-                $table->data[] = array("<b><font color='red'>$strs->error:</font></b>", $message);
-            }
-            else {
-                if (empty($CFG->an_test)) {
-                    $user = get_record('user', 'id', $order->userid);
+            if (AN_APPROVED == AuthorizeNet::process($order, $message, $extra, AN_ACTION_PRIOR_AUTH_CAPTURE)) {
+                if (empty($an_test)) {
                     if (enrol_into_course($course, $user, 'authorize')) {
-                        if (!empty($CFG->enrol_mailstudents)) {
-                            send_welcome_messages($order->id);
+                        if ($plugin->get_config('enrol_mailstudents')) {
+                            send_welcome_messages($orderid);
                         }
-                        redirect("index.php?order=$orderno");
+                        redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid");
                     }
                     else {
-                        $table->data[] = array("<b><font color='red'>$strs->error:</font></b>",
-                        "Error while trying to enrol ".fullname($user)." in '" . format_string($course->shortname) . "'");
+                        $shortname = format_string($course->shortname, true, array('context' => $coursecontext));
+                        redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid", "Error while trying to enrol ".fullname($user)." in '" . $shortname . "'", 20);
                     }
                 }
                 else {
-                    $table->data[] = array(get_string('testmode', 'enrol_authorize'),
-                                           get_string('testwarning', 'enrol_authorize'));
+                    redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid", get_string('testwarning', 'enrol_authorize'), 10);
                 }
             }
+            else {
+                redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid", $message, 20);
         }
-        print_table($table);
     }
-    elseif (!empty($cmdrefund) and confirm_sesskey()) { // REFUND
-        if (!in_array(ORDER_REFUND, $status->actions)) {
-            $a = new stdClass;
-            $a->action = $authstrs->refund;
-            print_error('youcantdo', 'enrol_authorize', '', $a);
+        $table->data[] = array("<b>$strs->confirm:</b>", get_string('captureyes', 'enrol_authorize') . '<br />' .
+                               authorize_print_action_button($orderid, ORDER_CAPTURE, 0, true, false, $strs->no));
+        echo html_writer::table($table);
         }
-
+    elseif (ORDER_REFUND == $do && in_array(ORDER_REFUND, $statusandactions->actions)) {
         $refunded = 0.0;
-        $sql = "SELECT SUM(amount) AS refunded FROM {$CFG->prefix}enrol_authorize_refunds " .
-               "WHERE (orderid = '" . $orderno . "') AND (status = '" . AN_STATUS_CREDIT . "')";
+        $sql = "SELECT SUM(amount) AS refunded
+                  FROM {enrol_authorize_refunds}
+                 WHERE (orderid = ?)
+                   AND (status = ?)";
 
-        if (($refundval = get_field_sql($sql))) {
+        if (($refundval = $DB->get_field_sql($sql, array($orderid, AN_STATUS_CREDIT)))) {
             $refunded = floatval($refundval);
         }
         $upto = round($order->amount - $refunded, 2);
         if ($upto <= 0) {
-            error("Refunded to original amount.");
+            print_error('refoundtoorigi', '',
+                    "$CFG->wwwroot/enrol/authorize/index.php?order=$orderid", $order->amount);
         }
-        else {
-            $amount = round(optional_param('amount', $upto), 2);
-            if (($amount > $upto) or empty($confirm)) {
-                $a = new stdClass;
-                $a->upto = $upto;
-                $strcanbecredit = get_string('canbecredit', 'enrol_authorize', $a);
-                $strhowmuch = get_string('howmuch', 'enrol_authorize');
-                $cbunenrol = print_checkbox('unenrol', '1', !empty($unenrol), '', '', '', true);
-                $table->data[] = array("<b>$authstrs->unenrolstudent</b>", $cbunenrol);
-                $table->data[] = array("<b>$strhowmuch</b>",
-                    "<input type='hidden' name='confirm' value='1' />
-                     <input type='text' size='5' name='amount' value='$amount' />
-                     $strcanbecredit<br /><input type='submit' name='".ORDER_REFUND."' value='$authstrs->refund' />");
+        $amount = round(optional_param('amount', $upto, PARAM_RAW), 2);
+        if ($amount > $upto) {
+            print_error('refoundto', '',
+                    "$CFG->wwwroot/enrol/authorize/index.php?order=$orderid", $upto);
             }
-            else {
+        if ($confirm && confirm_sesskey()) {
                 $extra = new stdClass;
-                $extra->orderid = $orderno;
+            $extra->orderid = $orderid;
                 $extra->amount = $amount;
                 $message = '';
-                $success = authorize_action($order, $message, $extra, AN_ACTION_CREDIT);
+            $success = AuthorizeNet::process($order, $message, $extra, AN_ACTION_CREDIT);
                 if (AN_APPROVED == $success || AN_REVIEW == $success) {
-                    if (empty($CFG->an_test)) {
+                if (empty($an_test)) {
                         if (empty($extra->id)) {
-                            $table->data[] = array("<b><font color='red'>$strs->error:</font></b>", 'insert record error');
+                        redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid", "insert record error", 20);
                         }
                         else {
                             if (!empty($unenrol)) {
-                                role_unassign(0, $order->userid, 0, $coursecontext->id);
+                            $pinstance = $DB->get_record('enrol', array('id'=>$order->instanceid));
+                            $plugin->unenrol_user($pinstance, $order->userid);
+                            //role_unassign_all(array('userid'=>$order->userid, 'contextid'=>$coursecontext->id, 'component'=>'enrol_authorize'), true, true);
                             }
-                            redirect("index.php?order=$orderno");
+                        redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid");
                         }
                     }
                     else {
-                        $table->data[] = array(get_string('testmode', 'enrol_authorize'),
-                                               get_string('testwarning', 'enrol_authorize'));
+                    redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid", get_string('testwarning', 'enrol_authorize'), 10);
                     }
                 }
                 else {
-                    $table->data[] = array("<b><font color='red'>$strs->error:</font></b>", $message);
+                redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid", $message, 20);
                 }
             }
+        $a = new stdClass;
+        $a->upto = $upto;
+        $extrahtml = get_string('howmuch', 'enrol_authorize') .
+                     ' <input type="text" size="5" name="amount" value="'.$amount.'" /> ' .
+                     get_string('canbecredit', 'enrol_authorize', $a) . '<br />';
+        $table->data[] = array("<b>$strs->confirm:</b>",
+                               authorize_print_action_button($orderid, ORDER_REFUND, 0, true, $authstrs->unenrolstudent, $strs->no, $extrahtml));
+        echo html_writer::table($table);
         }
-        print_table($table);
+    elseif (ORDER_DELETE == $do && in_array(ORDER_DELETE, $statusandactions->actions)) {
+        if ($confirm && confirm_sesskey()) {
+            if (!empty($unenrol)) {
+                $pinstance = $DB->get_record('enrol', array('id'=>$order->instanceid));
+                $plugin->unenrol_user($pinstance, $order->userid);
+                //role_unassign_all(array('userid'=>$order->userid, 'contextid'=>$coursecontext->id, 'component'=>'enrol_authorize'), true, true);
     }
-    elseif (!empty($cmdvoid) and confirm_sesskey()) { // VOID
-        $suborderno = optional_param('suborder', 0, PARAM_INT);
-        if (empty($suborderno)) { // cancel original transaction.
-            if (!in_array(ORDER_VOID, $status->actions)) {
-                $a = new stdClass;
-                $a->action = $authstrs->void;
-                print_error('youcantdo', 'enrol_authorize', '', $a);
+            $DB->delete_records('enrol_authorize', array('id'=>$orderid));
+            redirect("$CFG->wwwroot/enrol/authorize/index.php");
             }
-            if (empty($confirm)) {
-                $strvoidyes = get_string('voidyes', 'enrol_authorize');
                 $table->data[] = array("<b>$strs->confirm:</b>",
-                    "$strvoidyes<br /><input type='hidden' name='".ORDER_VOID."' value='y' />
-                     <input type='hidden' name='confirm' value='1' />
-                     <input type='submit' value='$authstrs->void' />
-                     &nbsp;&nbsp;&nbsp;&nbsp;<a href='index.php?order=$orderno'>$strs->no</a>");
+                               authorize_print_action_button($orderid, ORDER_DELETE, 0, true, $authstrs->unenrolstudent,$strs->no));
+        echo html_writer::table($table);
             }
-            else {
+    elseif (ORDER_VOID == $do) { // special case: cancel original or refunded transaction?
+        $suborderid = optional_param('suborder', 0, PARAM_INT);
+        if (empty($suborderid) && in_array(ORDER_VOID, $statusandactions->actions)) { // cancel original
+            if ($confirm && confirm_sesskey()) {
                 $extra = NULL;
                 $message = '';
-                if (AN_APPROVED == authorize_action($order, $message, $extra, AN_ACTION_VOID)) {
-                    if (empty($CFG->an_test)) {
-                        redirect("index.php?order=$orderno");
+                if (AN_APPROVED == AuthorizeNet::process($order, $message, $extra, AN_ACTION_VOID)) {
+                    if (empty($an_test)) {
+                        redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid");
                     }
                     else {
-                       $table->data[] = array(get_string('testmode', 'enrol_authorize'),
-                                              get_string('testwarning', 'enrol_authorize'));
+                        redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid", get_string('testwarning', 'enrol_authorize'), 10);
                     }
                 }
                 else {
-                    $table->data[] = array("<b><font color='red'>$strs->error:</font></b>", $message);
+                    redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid", $message, 20);
                 }
             }
+            $table->data[] = array("<b>$strs->confirm:</b>", get_string('voidyes', 'enrol_authorize') . '<br />' .
+                                   authorize_print_action_button($orderid, ORDER_VOID, 0, true, false, $strs->no));
+            echo html_writer::table($table);
         }
-        else { // cancel refunded transaction
-            $sql = "SELECT r.*, e.courseid, e.paymentmethod FROM {$CFG->prefix}enrol_authorize_refunds r " .
-                   "INNER JOIN {$CFG->prefix}enrol_authorize e ON r.orderid = e.id " .
-                   "WHERE r.id = '$suborderno' AND r.orderid = '$orderno' AND r.status = '" .AN_STATUS_CREDIT. "'";
+        elseif (!empty($suborderid)) { // cancel refunded
+            $sql = "SELECT r.*, e.courseid, e.paymentmethod
+                      FROM {enrol_authorize_refunds} r
+                INNER JOIN {enrol_authorize} e
+                        ON r.orderid = e.id
+                     WHERE r.id = ?
+                       AND r.orderid = ?
+                       AND r.status = ?";
 
-            $suborder = get_record_sql($sql);
+            $suborder = $DB->get_record_sql($sql, array($suborderid, $orderid, AN_STATUS_CREDIT));
             if (!$suborder) { // not found
-                error("Transaction can not be voided because of already been voided.");
+                print_error('transactionvoid', '', "$CFG->wwwroot/enrol/authorize/index.php?order=$orderid");
             }
-            else {
                 $refundedstatus = authorize_get_status_action($suborder);
-                if (!in_array(ORDER_VOID, $refundedstatus->actions)) {
-                    $a = new stdClass;
-                    $a->action = $authstrs->void;
-                    print_error('youcantdo', 'enrol_authorize', '', $a);
-                }
                 unset($suborder->courseid);
-                if (empty($confirm)) {
-                    $a = new stdClass;
-                    $a->transid = $suborder->transid;
-                    $a->amount = $suborder->amount;
-                    $strsubvoidyes = get_string('subvoidyes', 'enrol_authorize', $a);
-                    $cbunenrol = print_checkbox('unenrol', '1', !empty($unenrol), '', '', '', true);
-                    $table->data[] = array("<b>$authstrs->unenrolstudent</b>", $cbunenrol);
-                    $table->data[] = array("<b>$strs->confirm:</b>",
-                        "$strsubvoidyes<br /><input type='hidden' name='".ORDER_VOID."' value='y' />
-                         <input type='hidden' name='confirm' value='1' />
-                         <input type='hidden' name='suborder' value='$suborderno' />
-                         <input type='submit' value='$authstrs->void' />
-                         &nbsp;&nbsp;&nbsp;&nbsp;<a href='index.php?order=$orderno'>$strs->no</a>");
-                }
-                else {
+            if (in_array(ORDER_VOID, $refundedstatus->actions)) {
+                if ($confirm && confirm_sesskey()) {
                     $message = '';
                     $extra = NULL;
-                    if (AN_APPROVED == authorize_action($suborder, $message, $extra, AN_ACTION_VOID)) {
-                        if (empty($CFG->an_test)) {
+                    if (AN_APPROVED == AuthorizeNet::process($suborder, $message, $extra, AN_ACTION_VOID)) {
+                        if (empty($an_test)) {
                             if (!empty($unenrol)) {
-                                role_unassign(0, $order->userid, 0, $coursecontext->id);
+                                $pinstance = $DB->get_record('enrol', array('id'=>$order->instanceid));
+                                $plugin->unenrol_user($pinstance, $order->userid);
+                                //role_unassign_all(array('userid'=>$order->userid, 'contextid'=>$coursecontext->id, 'component'=>'enrol_authorize'), true, true);
                             }
-                            redirect("index.php?order=$orderno");
+                            redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid");
                         }
                         else {
-                            $table->data[] = array(get_string('testmode', 'enrol_authorize'),
-                                                   get_string('testwarning', 'enrol_authorize'));
+                            redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid", get_string('testwarning', 'enrol_authorize'), 10);
                         }
                     }
                     else {
-                        $table->data[] = array("<b><font color='red'>$strs->error:</font></b>", $message);
-                    }
+                        redirect("$CFG->wwwroot/enrol/authorize/index.php?order=$orderid", $message, 20);
                 }
             }
-        }
-        print_table($table);
-    }
-    elseif (!empty($cmddelete) and confirm_sesskey()) { // DELETE
-        if (!in_array(ORDER_DELETE, $status->actions)) {
             $a = new stdClass;
-            $a->action = $authstrs->delete;
-            print_error('youcantdo', 'enrol_authorize', '', $a);
-        }
-        if (empty($confirm)) {
-            $cbunenrol = print_checkbox('unenrol', '1', !empty($unenrol), '', '', '', true);
-            $table->data[] = array("<b>$authstrs->unenrolstudent</b>", $cbunenrol);
-            $table->data[] = array("<b>$strs->confirm:</b>",
-                "<input type='hidden' name='".ORDER_DELETE."' value='y' />
-                 <input type='hidden' name='confirm' value='1' />
-                 <input type='submit' value='$authstrs->delete' />
-                 &nbsp;&nbsp;&nbsp;&nbsp;<a href='index.php?order=$orderno'>$strs->no</a>");
-        }
-        else {
-            if (!empty($unenrol)) {
-                role_unassign(0, $order->userid, 0, $coursecontext->id);
-            }
-            delete_records('enrol_authorize', 'id', $orderno);
-            redirect("index.php");
-        }
-        print_table($table);
-    }
-    else { // SHOW
-        $actions = '';
-        if (empty($status->actions)) {
-            if (($order->paymentmethod == AN_METHOD_ECHECK) && has_capability('enrol/authorize:uploadcsv', get_context_instance(CONTEXT_USER, $USER->id))) {
-                $actions .= '<a href="uploadcsv.php">'.get_string('uploadcsv', 'enrol_authorize').'</a>';
+                $a->transid = $suborder->transid;
+                $a->amount = $suborder->amount;
+                $table->data[] = array("<b>$strs->confirm:</b>", get_string('subvoidyes', 'enrol_authorize', $a) . '<br />' .
+                                       authorize_print_action_button($orderid, ORDER_VOID, $suborderid, true, $authstrs->unenrolstudent, $strs->no));
+                echo html_writer::table($table);
             }
-            else {
-                $actions .= $strs->none;
             }
         }
         else {
-            foreach ($status->actions as $value) {
-                $actions .= "<input type='submit' name='$value' value='{$authstrs->$value}' /> ";
-            }
-        }
-        $table->data[] = array("<b>$strs->action</b>", $actions);
-        print_table($table);
+        echo html_writer::table($table);
+
         if ($settled) { // show refunds.
-            $t2 = new stdClass;
+            $t2 = new html_table();
             $t2->size = array('45%', '15%', '20%', '10%', '10%');
             $t2->align = array('right', 'right', 'right', 'right', 'right');
-            $t2->head = array($authstrs->settlementdate,
-                              $authstrs->transid,
-                              $strs->status,
-                              $strs->action,
-                              $authstrs->amount);
-
-            $sql = "SELECT r.*, e.courseid, e.paymentmethod FROM {$CFG->prefix}enrol_authorize_refunds r " .
-                   "INNER JOIN {$CFG->prefix}enrol_authorize e ON r.orderid = e.id " .
-                   "WHERE r.orderid = '$orderno'";
-
-            $refunds = get_records_sql($sql);
-            if ($refunds) {
+            $t2->head = array($authstrs->settlementdate, $authstrs->transid, $strs->status, $strs->action, $authstrs->amount);
+
+            $sql = "SELECT r.*, e.courseid, e.paymentmethod
+                      FROM {enrol_authorize_refunds} r
+                INNER JOIN {enrol_authorize} e
+                        ON r.orderid = e.id
+                     WHERE r.orderid = ?";
+
+            if (($refunds = $DB->get_records_sql($sql, array($orderid)))) {
                 $sumrefund = floatval(0.0);
                 foreach ($refunds as $rf) {
+                    $subactions = '';
                     $substatus = authorize_get_status_action($rf);
-                    $subactions = '&nbsp;';
                     if (empty($substatus->actions)) {
                         $subactions .= $strs->none;
                     }
                     else {
                         foreach ($substatus->actions as $vl) {
-                            $subactions .=
-                            "<a href='index.php?$vl=y&amp;sesskey=$USER->sesskey&amp;order=$orderno&amp;suborder=$rf->id'>{$authstrs->$vl}</a> ";
+                            $subactions .= authorize_print_action_button($orderid, $vl, $rf->id);
                         }
                     }
                     $sign = '';
@@ -523,7 +538,7 @@ function authorize_print_order_details($orderno)
                     $t2->data[] = array(
                         userdate($rf->settletime),
                         $rf->transid,
-                        "<font style='color:$color'>" .$authstrs->{$substatus->status} . "</font>",
+                        "<b><font style='color:$color'>" .$authstrs->{$substatus->status} . "</font></b>",
                         $subactions,
                         format_float($sign . $rf->amount, 2)
                     );
@@ -534,11 +549,11 @@ function authorize_print_order_details($orderno)
                 $t2->data[] = array('','',get_string('noreturns', 'enrol_authorize'),'','');
             }
             echo "<h4>" . get_string('returns', 'enrol_authorize') . "</h4>\n";
-            print_table($t2);
+            echo html_writer::table($t2);
         }
     }
-    echo '</div>';
-    echo '</form>';
+
+    echo $OUTPUT->footer();
 }
 
 /**
@@ -550,9 +565,9 @@ function authorize_print_order_details($orderno)
 function authorize_get_status_action($order)
 {
     global $CFG;
-    static $newordertime;
+    static $newordertime = 0;
 
-    if (empty($newordertime)) {
+    if (0 == $newordertime) {
         $newordertime = time() - 120; // -2 minutes. Order may be still in process.
     }
 
@@ -576,7 +591,7 @@ function authorize_get_status_action($order)
 
     switch ($order->status) {
     case AN_STATUS_AUTH:
-        if (authorize_expired($order)) {
+            if (AuthorizeNet::expired($order)) {
             if ($canmanage) {
                 $ret->actions = array(ORDER_DELETE);
             }
@@ -591,7 +606,7 @@ function authorize_get_status_action($order)
         return $ret;
 
     case AN_STATUS_AUTHCAPTURE:
-        if (authorize_settled($order)) {
+            if (AuthorizeNet::settled($order)) {
             if ($canmanage) {
                 if (($order->paymentmethod == AN_METHOD_CC) || ($order->paymentmethod == AN_METHOD_ECHECK && !empty($order->refundinfo))) {
                     $ret->actions = array(ORDER_REFUND);
@@ -608,7 +623,7 @@ function authorize_get_status_action($order)
         return $ret;
 
     case AN_STATUS_CREDIT:
-        if (authorize_settled($order)) {
+            if (AuthorizeNet::settled($order)) {
             $ret->status = 'settled';
         }
         else {
@@ -657,18 +672,21 @@ function authorize_get_status_color($status)
     switch ($status)
     {
         case 'settled':
-        case 'approvedreview':
         case 'capturedpendingsettle':
             $color = '#339900'; // green
             break;
 
-        case 'new':
-        case 'tested':
         case 'underreview':
+        case 'approvedreview':
         case 'authorizedpendingcapture':
             $color = '#FF6600'; // orange
             break;
 
+        case 'new':
+        case 'tested':
+            $color = '#003366'; // blue
+            break;
+
         case 'expired':
         case 'cancelled':
         case 'refunded';
@@ -678,4 +696,31 @@ function authorize_get_status_color($status)
     }
     return $color;
 }
-?>
+
+function authorize_print_action_button($orderid, $do, $suborderid=0, $confirm=false, $unenrol=false, $nobutton=false, $extrahtml='')
+{
+    global $CFG, $OUTPUT;
+    global $authstrs;
+
+    $ret =  '<form action="'.$CFG->wwwroot.'/enrol/authorize/index.php'.'" method="post"><div>' .
+            '<input type="hidden" name="order" value="'.$orderid.'" />' .
+            '<input type="hidden" name="do" value="'.$do.'" />' .
+            '<input type="hidden" name="sesskey" value="'. sesskey() . '" />';
+    if (!empty($suborderid)) {
+        $ret .= '<input type="hidden" name="suborder" value="'.$suborderid.'" />';
+    }
+    if (!empty($confirm)) {
+        $ret .= '<input type="hidden" name="confirm" value="1" />';
+    }
+    if (!empty($unenrol)) {
+        $ret .= html_writer::checkbox('unenrol', 1, false, $unenrol) . '<br />';
+    }
+    $ret .= $extrahtml;
+    $ret .= '<input type="submit" value="'.$authstrs->$do.'" />' .
+            '</div></form>';
+    if (!empty($nobutton)) {
+        $ret .= '<form method="get" action="index.php"><div><input type="hidden" name="order" value="'.$orderid.'" /><input type="submit" value="'.$nobutton.'" /></div></form>';
+    }
+    return $ret;
+}
+
