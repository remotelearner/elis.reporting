diff --git a/blog/edit.php b/blog/edit.php
old mode 100755
new mode 100644
index 367a150..ba5bdfc
--- a/blog/edit.php
+++ b/blog/edit.php
@@ -1,254 +1,250 @@
-<?php //$Id$
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
-require_once('../config.php');
+
+/**
+ * Blog entry edit page
+ *
+ * @package    moodlecore
+ * @subpackage blog
+ * @copyright  2009 Nicolas Connault
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once(dirname(dirname(__FILE__)).'/config.php');
 include_once('lib.php');
-include_once($CFG->dirroot.'/tag/lib.php');
+include_once('locallib.php');
 
 $action   = required_param('action', PARAM_ALPHA);
-$id       = optional_param('id', 0, PARAM_INT);
+$id       = optional_param('entryid', 0, PARAM_INT);
 $confirm  = optional_param('confirm', 0, PARAM_BOOL);
-$courseid = optional_param('courseid', 0, PARAM_INT); // needed for user tab - does nothing here
+$modid    = optional_param('modid', 0, PARAM_INT); // To associate the entry with a module instance
+$courseid = optional_param('courseid', 0, PARAM_INT); // To associate the entry with a course
+
+$PAGE->set_url('/blog/edit.php', array('action' => $action, 'entryid' => $id, 'confirm' => $confirm, 'modid' => $modid, 'courseid' => $courseid));
+
+// If action is add, we ignore $id to avoid any further problems
+if (!empty($id) && $action == 'add') {
+    $id = null;
+}
+
+$returnurl = new moodle_url('/blog/index.php');
+
+if (!empty($courseid) && empty($modid)) {
+    $returnurl->param('courseid', $courseid);
+    $PAGE->set_context(get_context_instance(CONTEXT_COURSE, $courseid));
+}
+
+// If a modid is given, guess courseid
+if (!empty($modid)) {
+    $returnurl->param('modid', $modid);
+    $courseid = $DB->get_field('course_modules', 'course', array('id' => $modid));
+    $returnurl->param('courseid', $courseid);
+    $PAGE->set_context(get_context_instance(CONTEXT_MODULE, $modid));
+}
+
+// If courseid is empty use the system context
+if (empty($courseid)) {
+    $PAGE->set_context(get_context_instance(CONTEXT_SYSTEM));
+}
+
+$blogheaders = blog_get_headers();
 
 require_login($courseid);
 
+if ($action == 'edit') {
+    $id = required_param('entryid', PARAM_INT);
+}
+
 if (empty($CFG->bloglevel)) {
-    error('Blogging is disabled!');
+    print_error('blogdisable', 'blog');
 }
 
-if (isguest()) {
-    print_error('noguestpost', 'blog');
+if (isguestuser()) {
+    print_error('noguestentry', 'blog');
 }
 
 $sitecontext = get_context_instance(CONTEXT_SYSTEM);
-if (!has_capability('moodle/blog:create', $sitecontext) and !has_capability('moodle/blog:manageentries', $sitecontext)) {
-    error('You can not post or edit blogs.');
+if (!has_capability('moodle/blog:create', $sitecontext) && !has_capability('moodle/blog:manageentries', $sitecontext)) {
+    print_error('cannoteditentryorblog');
 }
 
-// Make sure that the person trying to edit have access right
+// Make sure that the person trying to edit has access right
 if ($id) {
-    if (!$existing = get_record('post', 'id', $id)) {
-        error('Wrong blog post id');
+    if (!$entry = new blog_entry($id)) {
+        print_error('wrongentryid', 'blog');
     }
 
-    if (!blog_user_can_edit_post($existing)) {
+    if (!blog_user_can_edit_entry($entry)) {
         print_error('notallowedtoedit', 'blog');
     }
-    $userid    = $existing->userid;
-    $returnurl = $CFG->wwwroot.'/blog/index.php?userid='.$existing->userid;
+    $userid = $entry->userid;
+    $entry->subject      = clean_text($entry->subject);
+    $entry->summary      = clean_text($entry->summary, $entry->format);
+
 } else {
     if (!has_capability('moodle/blog:create', $sitecontext)) {
-        print_error('nopost', 'blog'); // manageentries is not enough for adding
+        print_error('noentry', 'blog'); // manageentries is not enough for adding
     }
-    $existing  = false;
+    $entry  = new stdClass();
+    $entry->id = null;
     $userid    = $USER->id;
-    $returnurl = 'index.php?userid='.$USER->id;
-}
-if (!empty($courseid)) {
-    $returnurl .= '&amp;courseid='.$courseid;
 }
-
+$returnurl->param('userid', $userid);
 
 $strblogs = get_string('blogs','blog');
 
-if ($action=='delete'){
-    if (!$existing) {
-        error('Incorrect blog post id');
+if ($action === 'delete'){
+    if (empty($entry->id)) {
+        print_error('wrongentryid', 'blog');
     }
-    if (data_submitted() and $confirm and confirm_sesskey()) {
-        do_delete($existing);
-        redirect($returnurl);
+    if (data_submitted() && $confirm && confirm_sesskey()) {
+        // Make sure the current user is the author of the blog entry, or has some deleteanyentry capability
+        if (!blog_user_can_edit_entry($entry)) {
+            print_error('nopermissionstodeleteentry', 'blog');
     } else {
-        $optionsyes = array('id'=>$id, 'action'=>'delete', 'confirm'=>1, 'sesskey'=>sesskey(), 'courseid'=>$courseid);
-        $optionsno = array('userid'=>$existing->userid, 'courseid'=>$courseid);
-        print_header("$SITE->shortname: $strblogs", $SITE->fullname);
-        blog_print_entry($existing);
+            $entry->delete();
+            redirect($returnurl);
+        }
+    } else if (blog_user_can_edit_entry($entry)) {
+        $optionsyes = array('entryid'=>$id, 'action'=>'delete', 'confirm'=>1, 'sesskey'=>sesskey(), 'courseid'=>$courseid);
+        $optionsno = array('userid'=>$entry->userid, 'courseid'=>$courseid);
+        $PAGE->set_title("$SITE->shortname: $strblogs");
+        $PAGE->set_heading($SITE->fullname);
+        echo $OUTPUT->header();
+        $entry->print_html();
         echo '<br />';
-        notice_yesno(get_string('blogdeleteconfirm', 'blog'), 'edit.php', 'index.php', $optionsyes, $optionsno, 'post', 'get');
-        print_footer();
+        echo $OUTPUT->confirm(get_string('blogdeleteconfirm', 'blog'), new moodle_url('edit.php', $optionsyes),new moodle_url( 'index.php', $optionsno));
+        echo $OUTPUT->footer();
         die;
     }
+} else if ($action == 'add') {
+    $PAGE->set_title("$SITE->shortname: $strblogs: " . get_string('addnewentry', 'blog'));
+    $PAGE->set_heading($SITE->shortname);
+} else if ($action == 'edit') {
+    $PAGE->set_title("$SITE->shortname: $strblogs: " . get_string('editentry', 'blog'));
+    $PAGE->set_heading($SITE->shortname);
 }
 
-require_once('edit_form.php');
-$blogeditform = new blog_edit_form(null, compact('existing', 'sitecontext'));
+if (!empty($entry->id)) {
+    if ($CFG->useblogassociations && ($blogassociations = $DB->get_records('blog_association', array('blogid' => $entry->id)))) {
 
-if ($blogeditform->is_cancelled()){
-    redirect($returnurl);
-} else if ($fromform = $blogeditform->get_data()){
-    //save stuff in db
-    switch ($action) {
-        case 'add':
-            do_add($fromform, $blogeditform);
-        break;
+        foreach ($blogassociations as $assocrec) {
+            $contextrec = $DB->get_record('context', array('id' => $assocrec->contextid));
 
-        case 'edit':
-            if (!$existing) {
-                error('Incorrect blog post id');
-            }
-            do_edit($fromform, $blogeditform);
+            switch ($contextrec->contextlevel) {
+                case CONTEXT_COURSE:
+                    $entry->courseassoc = $assocrec->contextid;
         break;
-        default :
-            error('Unknown action!');
-    }
-    redirect($returnurl);
-}
-
-
-// gui setup
-switch ($action) {
-    case 'add':
-        // prepare new empty form
-        $post->publishstate = 'site';
-        $strformheading = get_string('addnewentry', 'blog');
-        $post->action       = $action;
+                case CONTEXT_MODULE:
+                    $entry->modassoc = $assocrec->contextid;
     break;
-
-    case 'edit':
-        if (!$existing) {
-            error('Incorrect blog post id');
         }
-        $post->id           = $existing->id;
-        $post->subject      = clean_text($existing->subject);
-        $post->summary      = clean_text($existing->summary, $existing->format);
-        $post->publishstate = $existing->publishstate;
-        $post->format       = $existing->format;
-        $post->action       = $action;
-        $strformheading = get_string('updateentrywithid', 'blog');
-
-        if ($itemptags = tag_get_tags_csv('post', $post->id, TAG_RETURN_TEXT, 'default')) {
-            $post->ptags = $itemptags;
         }
-        
-        if ($itemotags = tag_get_tags_array('post', $post->id, 'official')) {
-            $post->otags = array_keys($itemotags);
         }
-    break;
-    default :
-        error('Unknown action!');
 }
 
-// done here in order to allow deleting of posts with wrong user id above
-if (!$user = get_record('user', 'id', $userid)) {
-    error('Incorrect user id');
-}
-$navlinks = array();
-$navlinks[] = array('name' => fullname($user), 'link' => "$CFG->wwwroot/user/view.php?id=$userid", 'type' => 'misc');
-$navlinks[] = array('name' => $strblogs, 'link' => "$CFG->wwwroot/blog/index.php?userid=$userid", 'type' => 'misc');
-$navlinks[] = array('name' => $strformheading, 'link' => null, 'type' => 'misc');
-$navigation = build_navigation($navlinks);
-
-print_header("$SITE->shortname: $strblogs", $SITE->fullname, $navigation,'','',true);
-$blogeditform->set_data($post);
-$blogeditform->display();
-
-
-print_footer();
+require_once('edit_form.php');
+$summaryoptions = array('subdirs'=>false, 'maxfiles'=> 99, 'maxbytes'=>$CFG->maxbytes, 'trusttext'=>true, 'context'=>$sitecontext);
+$attachmentoptions = array('subdirs'=>false, 'maxfiles'=> 99, 'maxbytes'=>$CFG->maxbytes);
 
+$blogeditform = new blog_edit_form(null, compact('entry', 'summaryoptions', 'attachmentoptions', 'sitecontext', 'courseid', 'modid'));
 
-die;
+$entry = file_prepare_standard_editor($entry, 'summary', $summaryoptions, $sitecontext, 'blog', 'post', $entry->id);
+$entry = file_prepare_standard_filemanager($entry, 'attachment', $attachmentoptions, $sitecontext, 'blog', 'attachment', $entry->id);
 
-/*****************************   edit.php functions  ***************************/
+if (!empty($CFG->usetags) && !empty($entry->id)) {
+    include_once($CFG->dirroot.'/tag/lib.php');
+    $entry->tags = tag_get_tags_array('post', $entry->id);
+}
 
-/*
-* Delete blog post from database
-*/
-function do_delete($post) {
-    global $returnurl;
+$entry->action = $action;
+// set defaults
+$blogeditform->set_data($entry);
 
-    $status = delete_records('post', 'id', $post->id);
-    //$status = delete_records('blog_tag_instance', 'entryid', $post->id) and $status;
-    tag_set('post', $post->id, array());
+if ($blogeditform->is_cancelled()) {
+    redirect($returnurl);
     
-    blog_delete_old_attachments($post);
+} else if ($data = $blogeditform->get_data()){
 
-    add_to_log(SITEID, 'blog', 'delete', 'index.php?userid='. $post->userid, 'deleted blog entry with entry id# '. $post->id);
+    switch ($action) {
+        case 'add':
+            $blogentry = new blog_entry(null, $data, $blogeditform);
+            $blogentry->add();
+            $blogentry->edit($data, $blogeditform, $summaryoptions, $attachmentoptions);
+        break;
 
-    if (!$status) {
-        error('Error occured while deleting post', $returnurl);
+        case 'edit':
+            if (empty($entry->id)) {
+                print_error('wrongentryid', 'blog');
     }
-}
 
-/**
- * Write a new blog entry into database
- */
-function do_add($post, $blogeditform) {
-    global $CFG, $USER, $returnurl;
-
-    $post->module       = 'blog';
-    $post->userid       = $USER->id;
-    $post->lastmodified = time();
-    $post->created      = time();
-
-    // Insert the new blog entry.
-    if ($id = insert_record('post', $post)) {
-        $post->id = $id;
-        // add blog attachment
-        $dir = blog_file_area_name($post);
-        if ($blogeditform->save_files($dir) and $newfilename = $blogeditform->get_new_filename()) {
-            set_field("post", "attachment", $newfilename, "id", $post->id);
-        }
-        add_tags_info($post->id);
-        add_to_log(SITEID, 'blog', 'add', 'index.php?userid='.$post->userid.'&postid='.$post->id, $post->subject);
+            $entry->edit($data, $blogeditform, $summaryoptions, $attachmentoptions);
+        break;
 
-    } else {
-        error('There was an error adding this post in the database', $returnurl);
+        default :
+            print_error('invalidaction');
     }
 
+    redirect($returnurl);
 }
 
-/**
- * @param . $post argument is a reference to the post object which is used to store information for the form
- * @param . $bloginfo_arg argument is reference to a blogInfo object.
- * @todo complete documenting this function. enable trackback and pingback between entries on the same server
- */
-function do_edit($post, $blogeditform) {
-
-    global $CFG, $USER, $returnurl;
 
+// gui setup
+switch ($action) {
+    case 'add':
+        // prepare new empty form
+        $entry->publishstate = 'site';
+        $strformheading = get_string('addnewentry', 'blog');
+        $entry->action       = $action;
 
-    $post->lastmodified = time();
+        if ($CFG->useblogassociations) {
 
-    $dir = blog_file_area_name($post);
-    if ($blogeditform->save_files($dir) and $newfilename = $blogeditform->get_new_filename()) {
-        $post->attachment = $newfilename;
+            //pre-select the course for associations
+            if ($courseid) {
+                $context = get_context_instance(CONTEXT_COURSE, $courseid);
+                $entry->courseassoc = $context->id;
     }
 
-    // update record
-    if (update_record('post', $post)) {
-        // delete all tags associated with this entry
+            //pre-select the mod for associations
+            if ($modid) {
+                $context = get_context_instance(CONTEXT_MODULE, $modid);
+                $entry->modassoc = $context->id;
+            }
+        }
+        break;
         
-        //delete_records('blog_tag_instance', 'entryid', $post->id);
-        //delete_records('tag_instance', 'itemid', $post->id, 'itemtype', 'blog');
-        //untag_an_item('post', $post->id);
-        // add them back
-        add_tags_info($post->id);
+    case 'edit':
+        if (empty($entry->id)) {
+            print_error('wrongentryid', 'blog');
+        }
+        $entry->tags = tag_get_tags_array('post', $entry->id);
+        $strformheading = get_string('updateentrywithid', 'blog');
 
-        add_to_log(SITEID, 'blog', 'update', 'index.php?userid='.$USER->id.'&postid='.$post->id, $post->subject);
+        break;
 
-    } else {
-        error('There was an error updating this post in the database', $returnurl);
-    }
+    default :
+        print_error('unknowaction');
 }
 
-/**
- * function to attach tags into a post
- * @param int postid - id of the blog
- */
-function add_tags_info($postid) {
-    
-    $tags = array();
-    if ($otags = optional_param('otags', '', PARAM_INT)) {
-        foreach ($otags as $tagid) {
-            // TODO : make this use the tag name in the form
-            if ($tag = tag_get('id', $tagid)) {
-                $tags[] = $tag->name;
-            }
-        }
-    }
+$entry->modid = $modid;
+$entry->courseid = $courseid;
 
-    $manual_tags = optional_param('ptags', '', PARAM_NOTAGS);
-    $tags = array_merge($tags, explode(',', $manual_tags));
+echo $OUTPUT->header();
+$blogeditform->display();
+echo $OUTPUT->footer();
     
-    tag_set('post', $postid, $tags);
-}
-?>
+die;
