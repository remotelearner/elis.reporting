<?php

defined('PHPUNIT_SCRIPT') || define('PHPUNIT_SCRIPT', true);

require_once 'base32class.php';

/**
 * Test class for base32.
 * Generated by PHPUnit on 2010-12-20 at 16:29:36.
 * Modified by BJB
 */
class base32classTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var base32
     */
    protected $object;

    protected $backupGlobals = FALSE;  // Directs PHPUnit NOT to keep separate globals for each test case
                                       // maybe required since MOODLE has many globals to init in setUpBeforeClass();

    protected function onNotSuccessfulTest(Exception $e)
    {
        // called when test function fails, i.e. $this->assertTrue(FALSE);
        throw $e;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new base32class;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Generated from @assert ('0') == 'ga'.
     */
    public function testEncode()
    {
        $this->assertEquals(
          'ga',
          $this->object->encode('0')
        );
    }

    /**
     * Generated from @assert ('0000') == 'gaydama'.
     */
    public function testEncode2()
    {
        $this->assertEquals(
          'gaydama',
          $this->object->encode('0000')
        );
    }

    /**
     * Generated from @assert ('00000') == 'gaydambq'.
     */
    public function testEncode3()
    {
        $this->assertEquals(
          'gaydambq',
          $this->object->encode('00000')
        );
    }

    /**
     * Generated from @assert ('1') == 'ge'.
     */
    public function testEncode4()
    {
        $this->assertEquals(
          'ge',
          $this->object->encode('1')
        );
    }

    /**
     * Generated from @assert ('101') == 'geydc'.
     */
    public function testEncode5()
    {
        $this->assertEquals(
          'geydc',
          $this->object->encode('101')
        );
    }

    /**
     * Generated from @assert ('1111') == 'geytcmi'.
     */
    public function testEncode6()
    {
        $this->assertEquals(
          'geytcmi',
          $this->object->encode('1111')
        );
    }

    /**
     * Generated from @assert ('A') == 'ie'.
     */
    public function testEncode7()
    {
        $this->assertEquals(
          'ie',
          $this->object->encode('A')
        );
    }

    /**
     * Generated from @assert ('a') == 'me'.
     */
    public function testEncode8()
    {
        $this->assertEquals(
          'me',
          $this->object->encode('a')
        );
    }

    /**
     * Generated from @assert ('ABC') == 'ifbeg'.
     */
    public function testEncode9()
    {
        $this->assertEquals(
          'ifbeg',
          $this->object->encode('ABC')
        );
    }

    /**
     * Generated from @assert ('abc') == 'mfrgg'.
     */
    public function testEncode10()
    {
        $this->assertEquals(
          'mfrgg',
          $this->object->encode('abc')
        );
    }

    /**
     * Generated from @assert (' ') == 'ea'.
     */
    public function testEncode11()
    {
        $this->assertEquals(
          'ea',
          $this->object->encode(' ')
        );
    }

    /**
     * Generated from @assert ('-_=+~!@#$%^&*()') == 'fvpt2k36efacgjbflytcukbj'.
     */
    public function testEncode12()
    {
        $this->assertEquals(
          'fvpt2k36efacgjbflytcukbj',
          $this->object->encode('-_=+~!@#$%^&*()')
        );
    }

    /**
     * Generated from @assert ('0123456789') == 'gaytemzugu3doobz'.
     */
    public function testEncode13()
    {
        $this->assertEquals(
          'gaytemzugu3doobz',
          $this->object->encode('0123456789')
        );
    }

    public function testDecode()
    {
        $ret = $this->object->decode('o');
        $this->assertFalse($ret);
    }

    public function testDecode2()
    {
        $ret = $this->object->decode('ioi');
        $this->assertFalse($ret);
    }

    public function testDecode3()
    {
        $ret = $this->object->decode('ioioii');
        $this->assertFalse($ret);
    }

    public function testDecode4()
    {
        $ret = $this->object->decode('ioiioiioi');
        $this->assertFalse($ret);
    }

    public function testDecode5()
    {
        $ret = $this->object->decode('iiioiiioiiioiiioiii');
        $this->assertFalse($ret);
    }

    public function testDecode6()
    {
        $ret = $this->object->decode('oI');
        $this->assertFalse($ret);
    }

    public function testDecode7()
    {
        $ret = $this->object->decode('oL');
        $this->assertFalse($ret);
    }

    public function testDecode8()
    {
        $ret = $this->object->decode('oO');
        $this->assertFalse($ret);
    }

    public function testDecode9()
    {
        $ret = $this->object->decode('oU');
        $this->assertFalse($ret);
    }

    public function testDecode10()
    {
        $ret = $this->object->decode('o0');
        $this->assertFalse($ret);
    }

    public function testDecode11()
    {
        $ret = $this->object->decode('o1');
        $this->assertFalse($ret);
    }

    public function testDecode12()
    {
        $ret = $this->object->decode('o8');
        $this->assertFalse($ret);
    }

    public function testDecode13()
    {
        $ret = $this->object->decode('o9');
        $this->assertFalse($ret);
    }

    public function testDecode14()
    {
        $ret = $this->object->decode('o-');
        $this->assertFalse($ret);
    }

    public function testDecode15()
    {
        $ret = $this->object->decode('o_');
        $this->assertFalse($ret);
    }

    public function testDecode16()
    {
        $ret = $this->object->decode('o=');
        $this->assertFalse($ret);
    }

    public function testDecode17()
    {
        $ret = $this->object->decode('o+');
        $this->assertFalse($ret);
    }

    public function testDecode18()
    {
        $ret = $this->object->decode('o~');
        $this->assertFalse($ret);
    }

    public function testDecode19()
    {
        $ret = $this->object->decode('o!');
        $this->assertFalse($ret);
    }

    public function testDecode20()
    {
        $ret = $this->object->decode('o@');
        $this->assertFalse($ret);
    }

    public function testDecode21()
    {
        $ret = $this->object->decode('o#');
        $this->assertFalse($ret);
    }

    public function testDecode22()
    {
        $ret = $this->object->decode('o$');
        $this->assertFalse($ret);
    }

    public function testDecode23()
    {
        $ret = $this->object->decode('o%');
        $this->assertFalse($ret);
    }

    public function testDecode24()
    {
        $ret = $this->object->decode('o^');
        $this->assertFalse($ret);
    }

    public function testDecode25()
    {
        $ret = $this->object->decode('o&');
        $this->assertFalse($ret);
    }

    public function testDecode26()
    {
        $ret = $this->object->decode('o*');
        $this->assertFalse($ret);
    }

    public function testDecode27()
    {
        $ret = $this->object->decode('o(');
        $this->assertFalse($ret);
    }

    public function testDecode28()
    {
        $ret = $this->object->decode('o)');
        $this->assertFalse($ret);
    }

    public function testDecode29()
    {
        $ret = $this->object->decode('oA');
        $this->assertFalse($ret);
    }

    public function testDecode30()
    {
        $ret = $this->object->decode('oB');
        $this->assertFalse($ret);
    }

    public function testDecode31()
    {
        $ret = $this->object->decode('oC');
        $this->assertFalse($ret);
    }

    public function testDecode32()
    {
        $ret = $this->object->decode('oZ');
        $this->assertFalse($ret);
    }

    public function testDecode33()
    {
        $ret = $this->object->decode('o2');
        $this->assertFalse($ret);
    }

    public function testDecode34()
    {
        $ret = $this->object->decode('o3');
        $this->assertFalse($ret);
    }

    /**
     * Generated from @assert ('o4') == 'w'.
     */
    public function testDecode35()
    {
        $this->assertEquals(
          'w',
          $this->object->decode('o4')
        );
    }

    public function testDecode36()
    {
        $ret = $this->object->decode('o5');
        $this->assertFalse($ret);
    }

    public function testDecode37()
    {
        $ret = $this->object->decode('o6');
        $this->assertFalse($ret);
    }

    public function testDecode38()
    {
        $ret = $this->object->decode('o7');
        $this->assertFalse($ret);
    }

    /**
     * Generated from @assert ('oi') == 'r'.
     */
    public function testDecode39()
    {
        $this->assertEquals(
          'r',
          $this->object->decode('oi')
        );
    }

    /**
     * Generated from @assert ('ii') == 'B'.
     */
    public function testDecode40()
    {
        $this->assertEquals(
          'B',
          $this->object->decode('ii')
        );
    }

    /**
     * Generated from @assert ('ae') == "\x01".
     */
    public function testDecode41()
    {
        $this->assertEquals(
          "\x01",
          $this->object->decode('ae')
        );
    }

    /**
     * Generated from @assert ('ai') == "\x02".
     */
    public function testDecode42()
    {
        $this->assertEquals(
          "\x02",
          $this->object->decode('ai')
        );
    }

    /**
     * Generated from @assert ('ioiio') == "\x43\x90\x87".
     */
    public function testDecode43()
    {
        $this->assertEquals(
          "\x43\x90\x87",
          $this->object->decode('ioiio')
        );
    }

}

